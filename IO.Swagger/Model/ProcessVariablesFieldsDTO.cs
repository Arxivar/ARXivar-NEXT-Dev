/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProcessVariablesFieldsDTO
    /// </summary>
    [DataContract]
    public partial class ProcessVariablesFieldsDTO :  IEquatable<ProcessVariablesFieldsDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesFieldsDTO" /> class.
        /// </summary>
        /// <param name="BooleanVariables">BooleanVariables.</param>
        /// <param name="StringVariables">StringVariables.</param>
        /// <param name="ComboVariables">ComboVariables.</param>
        /// <param name="DateTimeVariables">DateTimeVariables.</param>
        /// <param name="DoubleVariables">DoubleVariables.</param>
        /// <param name="TableVariables">TableVariables.</param>
        public ProcessVariablesFieldsDTO(List<AdditionalFieldBooleanDTO> BooleanVariables = null, List<AdditionalFieldStringDTO> StringVariables = null, List<AdditionalFieldComboDTO> ComboVariables = null, List<AdditionalFieldDateTimeDTO> DateTimeVariables = null, List<AdditionalFieldDoubleDTO> DoubleVariables = null, List<AdditionalFieldTableDTO> TableVariables = null)
        {
            this.BooleanVariables = BooleanVariables;
            this.StringVariables = StringVariables;
            this.ComboVariables = ComboVariables;
            this.DateTimeVariables = DateTimeVariables;
            this.DoubleVariables = DoubleVariables;
            this.TableVariables = TableVariables;
        }
        
        /// <summary>
        /// Gets or Sets BooleanVariables
        /// </summary>
        [DataMember(Name="booleanVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldBooleanDTO> BooleanVariables { get; set; }
        /// <summary>
        /// Gets or Sets StringVariables
        /// </summary>
        [DataMember(Name="stringVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldStringDTO> StringVariables { get; set; }
        /// <summary>
        /// Gets or Sets ComboVariables
        /// </summary>
        [DataMember(Name="comboVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldComboDTO> ComboVariables { get; set; }
        /// <summary>
        /// Gets or Sets DateTimeVariables
        /// </summary>
        [DataMember(Name="dateTimeVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldDateTimeDTO> DateTimeVariables { get; set; }
        /// <summary>
        /// Gets or Sets DoubleVariables
        /// </summary>
        [DataMember(Name="doubleVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldDoubleDTO> DoubleVariables { get; set; }
        /// <summary>
        /// Gets or Sets TableVariables
        /// </summary>
        [DataMember(Name="tableVariables", EmitDefaultValue=false)]
        public List<AdditionalFieldTableDTO> TableVariables { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessVariablesFieldsDTO {\n");
            sb.Append("  BooleanVariables: ").Append(BooleanVariables).Append("\n");
            sb.Append("  StringVariables: ").Append(StringVariables).Append("\n");
            sb.Append("  ComboVariables: ").Append(ComboVariables).Append("\n");
            sb.Append("  DateTimeVariables: ").Append(DateTimeVariables).Append("\n");
            sb.Append("  DoubleVariables: ").Append(DoubleVariables).Append("\n");
            sb.Append("  TableVariables: ").Append(TableVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessVariablesFieldsDTO);
        }

        /// <summary>
        /// Returns true if ProcessVariablesFieldsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessVariablesFieldsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessVariablesFieldsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BooleanVariables == other.BooleanVariables ||
                    this.BooleanVariables != null &&
                    this.BooleanVariables.SequenceEqual(other.BooleanVariables)
                ) && 
                (
                    this.StringVariables == other.StringVariables ||
                    this.StringVariables != null &&
                    this.StringVariables.SequenceEqual(other.StringVariables)
                ) && 
                (
                    this.ComboVariables == other.ComboVariables ||
                    this.ComboVariables != null &&
                    this.ComboVariables.SequenceEqual(other.ComboVariables)
                ) && 
                (
                    this.DateTimeVariables == other.DateTimeVariables ||
                    this.DateTimeVariables != null &&
                    this.DateTimeVariables.SequenceEqual(other.DateTimeVariables)
                ) && 
                (
                    this.DoubleVariables == other.DoubleVariables ||
                    this.DoubleVariables != null &&
                    this.DoubleVariables.SequenceEqual(other.DoubleVariables)
                ) && 
                (
                    this.TableVariables == other.TableVariables ||
                    this.TableVariables != null &&
                    this.TableVariables.SequenceEqual(other.TableVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BooleanVariables != null)
                    hash = hash * 59 + this.BooleanVariables.GetHashCode();
                if (this.StringVariables != null)
                    hash = hash * 59 + this.StringVariables.GetHashCode();
                if (this.ComboVariables != null)
                    hash = hash * 59 + this.ComboVariables.GetHashCode();
                if (this.DateTimeVariables != null)
                    hash = hash * 59 + this.DateTimeVariables.GetHashCode();
                if (this.DoubleVariables != null)
                    hash = hash * 59 + this.DoubleVariables.GetHashCode();
                if (this.TableVariables != null)
                    hash = hash * 59 + this.TableVariables.GetHashCode();
                return hash;
            }
        }
    }

}
