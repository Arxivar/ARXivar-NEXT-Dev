/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StampsInstanceValueDTO
    /// </summary>
    [DataContract]
    public partial class StampsInstanceValueDTO :  IEquatable<StampsInstanceValueDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampsInstanceValueDTO" /> class.
        /// </summary>
        /// <param name="id">Id of the value..</param>
        /// <param name="idElement">Id for the element..</param>
        /// <param name="elementProperty">Property name..</param>
        /// <param name="value">Value..</param>
        public StampsInstanceValueDTO(string id = default(string), string idElement = default(string), string elementProperty = default(string), Object value = default(Object))
        {
            this.Id = id;
            this.IdElement = idElement;
            this.ElementProperty = elementProperty;
            this.Value = value;
        }
        
        /// <summary>
        /// Id of the value.
        /// </summary>
        /// <value>Id of the value.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Id for the element.
        /// </summary>
        /// <value>Id for the element.</value>
        [DataMember(Name="idElement", EmitDefaultValue=false)]
        public string IdElement { get; set; }

        /// <summary>
        /// Property name.
        /// </summary>
        /// <value>Property name.</value>
        [DataMember(Name="elementProperty", EmitDefaultValue=false)]
        public string ElementProperty { get; set; }

        /// <summary>
        /// Value.
        /// </summary>
        /// <value>Value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StampsInstanceValueDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdElement: ").Append(IdElement).Append("\n");
            sb.Append("  ElementProperty: ").Append(ElementProperty).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StampsInstanceValueDTO);
        }

        /// <summary>
        /// Returns true if StampsInstanceValueDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of StampsInstanceValueDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StampsInstanceValueDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdElement == input.IdElement ||
                    (this.IdElement != null &&
                    this.IdElement.Equals(input.IdElement))
                ) && 
                (
                    this.ElementProperty == input.ElementProperty ||
                    (this.ElementProperty != null &&
                    this.ElementProperty.Equals(input.ElementProperty))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdElement != null)
                    hashCode = hashCode * 59 + this.IdElement.GetHashCode();
                if (this.ElementProperty != null)
                    hashCode = hashCode * 59 + this.ElementProperty.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
