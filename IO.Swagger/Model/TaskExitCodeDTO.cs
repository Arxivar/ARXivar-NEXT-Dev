/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dto for task exit code definition
    /// </summary>
    [DataContract]
    public partial class TaskExitCodeDTO :  IEquatable<TaskExitCodeDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExitCodeDTO" /> class.
        /// </summary>
        /// <param name="Id">Id of the exit code.</param>
        /// <param name="Value">The value of the exit code.</param>
        /// <param name="Icon">Icon idex of the exit code.</param>
        /// <param name="TranslatedDescription">Translated description in the user language.</param>
        /// <param name="TaskIds">Ids of taskwork eligible for this exitcode.</param>
        /// <param name="IsDefault">Is default exit code.</param>
        public TaskExitCodeDTO(int? Id = null, string Value = null, int? Icon = null, string TranslatedDescription = null, List<int?> TaskIds = null, bool? IsDefault = null)
        {
            this.Id = Id;
            this.Value = Value;
            this.Icon = Icon;
            this.TranslatedDescription = TranslatedDescription;
            this.TaskIds = TaskIds;
            this.IsDefault = IsDefault;
        }
        
        /// <summary>
        /// Id of the exit code
        /// </summary>
        /// <value>Id of the exit code</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// The value of the exit code
        /// </summary>
        /// <value>The value of the exit code</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Icon idex of the exit code
        /// </summary>
        /// <value>Icon idex of the exit code</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public int? Icon { get; set; }
        /// <summary>
        /// Translated description in the user language
        /// </summary>
        /// <value>Translated description in the user language</value>
        [DataMember(Name="translatedDescription", EmitDefaultValue=false)]
        public string TranslatedDescription { get; set; }
        /// <summary>
        /// Ids of taskwork eligible for this exitcode
        /// </summary>
        /// <value>Ids of taskwork eligible for this exitcode</value>
        [DataMember(Name="taskIds", EmitDefaultValue=false)]
        public List<int?> TaskIds { get; set; }
        /// <summary>
        /// Is default exit code
        /// </summary>
        /// <value>Is default exit code</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskExitCodeDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  TranslatedDescription: ").Append(TranslatedDescription).Append("\n");
            sb.Append("  TaskIds: ").Append(TaskIds).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskExitCodeDTO);
        }

        /// <summary>
        /// Returns true if TaskExitCodeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskExitCodeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskExitCodeDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Icon == other.Icon ||
                    this.Icon != null &&
                    this.Icon.Equals(other.Icon)
                ) && 
                (
                    this.TranslatedDescription == other.TranslatedDescription ||
                    this.TranslatedDescription != null &&
                    this.TranslatedDescription.Equals(other.TranslatedDescription)
                ) && 
                (
                    this.TaskIds == other.TaskIds ||
                    this.TaskIds != null &&
                    this.TaskIds.SequenceEqual(other.TaskIds)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Icon != null)
                    hash = hash * 59 + this.Icon.GetHashCode();
                if (this.TranslatedDescription != null)
                    hash = hash * 59 + this.TranslatedDescription.GetHashCode();
                if (this.TaskIds != null)
                    hash = hash * 59 + this.TaskIds.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                return hash;
            }
        }
    }

}
