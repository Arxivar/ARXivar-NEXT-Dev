/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MailMassiveForProfileRequestDTO
    /// </summary>
    [DataContract]
    public partial class MailMassiveForProfileRequestDTO :  IEquatable<MailMassiveForProfileRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailMassiveForProfileRequestDTO" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="forView">forView.</param>
        /// <param name="createZip">createZip.</param>
        /// <param name="addAttachments">addAttachments.</param>
        public MailMassiveForProfileRequestDTO(List<int?> items = default(List<int?>), bool? forView = default(bool?), bool? createZip = default(bool?), bool? addAttachments = default(bool?))
        {
            this.Items = items;
            this.ForView = forView;
            this.CreateZip = createZip;
            this.AddAttachments = addAttachments;
        }
        
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<int?> Items { get; set; }

        /// <summary>
        /// Gets or Sets ForView
        /// </summary>
        [DataMember(Name="forView", EmitDefaultValue=false)]
        public bool? ForView { get; set; }

        /// <summary>
        /// Gets or Sets CreateZip
        /// </summary>
        [DataMember(Name="createZip", EmitDefaultValue=false)]
        public bool? CreateZip { get; set; }

        /// <summary>
        /// Gets or Sets AddAttachments
        /// </summary>
        [DataMember(Name="addAttachments", EmitDefaultValue=false)]
        public bool? AddAttachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailMassiveForProfileRequestDTO {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ForView: ").Append(ForView).Append("\n");
            sb.Append("  CreateZip: ").Append(CreateZip).Append("\n");
            sb.Append("  AddAttachments: ").Append(AddAttachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailMassiveForProfileRequestDTO);
        }

        /// <summary>
        /// Returns true if MailMassiveForProfileRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailMassiveForProfileRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailMassiveForProfileRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.ForView == input.ForView ||
                    (this.ForView != null &&
                    this.ForView.Equals(input.ForView))
                ) && 
                (
                    this.CreateZip == input.CreateZip ||
                    (this.CreateZip != null &&
                    this.CreateZip.Equals(input.CreateZip))
                ) && 
                (
                    this.AddAttachments == input.AddAttachments ||
                    (this.AddAttachments != null &&
                    this.AddAttachments.Equals(input.AddAttachments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.ForView != null)
                    hashCode = hashCode * 59 + this.ForView.GetHashCode();
                if (this.CreateZip != null)
                    hashCode = hashCode * 59 + this.CreateZip.GetHashCode();
                if (this.AddAttachments != null)
                    hashCode = hashCode * 59 + this.AddAttachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
