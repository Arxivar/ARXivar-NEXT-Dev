/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AddressBookSearchCriteriaDTO
    /// </summary>
    [DataContract]
    public partial class AddressBookSearchCriteriaDTO :  IEquatable<AddressBookSearchCriteriaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookSearchCriteriaDTO" /> class.
        /// </summary>
        /// <param name="AddressBookCategoryId">AddressBookCategoryId.</param>
        /// <param name="FilterFields">FilterFields.</param>
        /// <param name="SelectFields">SelectFields.</param>
        /// <param name="Filter">Filter.</param>
        public AddressBookSearchCriteriaDTO(int? AddressBookCategoryId = default(int?), List<RubricaFieldDTO> FilterFields = default(List<RubricaFieldDTO>), List<RubricaFieldDTO> SelectFields = default(List<RubricaFieldDTO>), string Filter = default(string))
        {
            this.AddressBookCategoryId = AddressBookCategoryId;
            this.FilterFields = FilterFields;
            this.SelectFields = SelectFields;
            this.Filter = Filter;
        }
        
        /// <summary>
        /// Gets or Sets AddressBookCategoryId
        /// </summary>
        [DataMember(Name="addressBookCategoryId", EmitDefaultValue=false)]
        public int? AddressBookCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets FilterFields
        /// </summary>
        [DataMember(Name="filterFields", EmitDefaultValue=false)]
        public List<RubricaFieldDTO> FilterFields { get; set; }

        /// <summary>
        /// Gets or Sets SelectFields
        /// </summary>
        [DataMember(Name="selectFields", EmitDefaultValue=false)]
        public List<RubricaFieldDTO> SelectFields { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public string Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressBookSearchCriteriaDTO {\n");
            sb.Append("  AddressBookCategoryId: ").Append(AddressBookCategoryId).Append("\n");
            sb.Append("  FilterFields: ").Append(FilterFields).Append("\n");
            sb.Append("  SelectFields: ").Append(SelectFields).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressBookSearchCriteriaDTO);
        }

        /// <summary>
        /// Returns true if AddressBookSearchCriteriaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressBookSearchCriteriaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressBookSearchCriteriaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressBookCategoryId == input.AddressBookCategoryId ||
                    (this.AddressBookCategoryId != null &&
                    this.AddressBookCategoryId.Equals(input.AddressBookCategoryId))
                ) && 
                (
                    this.FilterFields == input.FilterFields ||
                    this.FilterFields != null &&
                    this.FilterFields.SequenceEqual(input.FilterFields)
                ) && 
                (
                    this.SelectFields == input.SelectFields ||
                    this.SelectFields != null &&
                    this.SelectFields.SequenceEqual(input.SelectFields)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressBookCategoryId != null)
                    hashCode = hashCode * 59 + this.AddressBookCategoryId.GetHashCode();
                if (this.FilterFields != null)
                    hashCode = hashCode * 59 + this.FilterFields.GetHashCode();
                if (this.SelectFields != null)
                    hashCode = hashCode * 59 + this.SelectFields.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
