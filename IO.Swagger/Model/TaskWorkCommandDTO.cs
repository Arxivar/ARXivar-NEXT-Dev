/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Command operation for TaskWork
    /// </summary>
    [DataContract]
    public partial class TaskWorkCommandDTO :  IEquatable<TaskWorkCommandDTO>
    {
        /// <summary>
        /// Command modality for the execution.
        /// </summary>
        /// <value>Command modality for the execution.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            
            /// <summary>
            /// Enum Client for "Client"
            /// </summary>
            [EnumMember(Value = "Client")]
            Client,
            
            /// <summary>
            /// Enum Server for "Server"
            /// </summary>
            [EnumMember(Value = "Server")]
            Server,
            
            /// <summary>
            /// Enum OpenUrl for "OpenUrl"
            /// </summary>
            [EnumMember(Value = "OpenUrl")]
            OpenUrl
        }

        /// <summary>
        /// Command modality for the execution.
        /// </summary>
        /// <value>Command modality for the execution.</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public SideEnum? Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkCommandDTO" /> class.
        /// </summary>
        /// <param name="Id">Command Id..</param>
        /// <param name="ProcessId">Process Id..</param>
        /// <param name="TaskWorkId">TaskWork Id..</param>
        /// <param name="Command">Command to execute..</param>
        /// <param name="IsRequired">Required..</param>
        /// <param name="IsAsync">Asyncronous execution..</param>
        /// <param name="Description">Command description..</param>
        /// <param name="Side">Command modality for the execution..</param>
        public TaskWorkCommandDTO(int? Id = null, int? ProcessId = null, int? TaskWorkId = null, string Command = null, bool? IsRequired = null, bool? IsAsync = null, string Description = null, SideEnum? Side = null)
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.TaskWorkId = TaskWorkId;
            this.Command = Command;
            this.IsRequired = IsRequired;
            this.IsAsync = IsAsync;
            this.Description = Description;
            this.Side = Side;
        }
        
        /// <summary>
        /// Command Id.
        /// </summary>
        /// <value>Command Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Process Id.
        /// </summary>
        /// <value>Process Id.</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }
        /// <summary>
        /// TaskWork Id.
        /// </summary>
        /// <value>TaskWork Id.</value>
        [DataMember(Name="taskWorkId", EmitDefaultValue=false)]
        public int? TaskWorkId { get; set; }
        /// <summary>
        /// Command to execute.
        /// </summary>
        /// <value>Command to execute.</value>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public string Command { get; set; }
        /// <summary>
        /// Required.
        /// </summary>
        /// <value>Required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }
        /// <summary>
        /// Asyncronous execution.
        /// </summary>
        /// <value>Asyncronous execution.</value>
        [DataMember(Name="isAsync", EmitDefaultValue=false)]
        public bool? IsAsync { get; set; }
        /// <summary>
        /// Command description.
        /// </summary>
        /// <value>Command description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkCommandDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  TaskWorkId: ").Append(TaskWorkId).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsAsync: ").Append(IsAsync).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskWorkCommandDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkCommandDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskWorkCommandDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkCommandDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.TaskWorkId == other.TaskWorkId ||
                    this.TaskWorkId != null &&
                    this.TaskWorkId.Equals(other.TaskWorkId)
                ) && 
                (
                    this.Command == other.Command ||
                    this.Command != null &&
                    this.Command.Equals(other.Command)
                ) && 
                (
                    this.IsRequired == other.IsRequired ||
                    this.IsRequired != null &&
                    this.IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    this.IsAsync == other.IsAsync ||
                    this.IsAsync != null &&
                    this.IsAsync.Equals(other.IsAsync)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Side == other.Side ||
                    this.Side != null &&
                    this.Side.Equals(other.Side)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.TaskWorkId != null)
                    hash = hash * 59 + this.TaskWorkId.GetHashCode();
                if (this.Command != null)
                    hash = hash * 59 + this.Command.GetHashCode();
                if (this.IsRequired != null)
                    hash = hash * 59 + this.IsRequired.GetHashCode();
                if (this.IsAsync != null)
                    hash = hash * 59 + this.IsAsync.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Side != null)
                    hash = hash * 59 + this.Side.GetHashCode();
                return hash;
            }
        }
    }

}
