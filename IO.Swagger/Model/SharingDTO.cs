/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Object that define a sharing
    /// </summary>
    [DataContract]
    public partial class SharingDTO :  IEquatable<SharingDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDTO" /> class.
        /// </summary>
        /// <param name="sharingId">Sharing unique id.</param>
        /// <param name="userId">Owner user id.</param>
        /// <param name="creationDate">Date time of creation.</param>
        /// <param name="htmlForAccess">Html for the sharing page.</param>
        /// <param name="htmlForExpiration">Html for the expiration page.</param>
        /// <param name="urlForReceivers">Collection of URL for receivers.</param>
        /// <param name="sharingDefinitionId">Unique identifier for the configuration.</param>
        /// <param name="documentTypeId">System id for the documentType..</param>
        /// <param name="beginning">Days for the activation of the sharing..</param>
        /// <param name="expiration">Days for the expiration of the sharing..</param>
        /// <param name="afterSend">Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent .</param>
        /// <param name="repeatSendMail">Resend for the mail..</param>
        /// <param name="repeatSendMailTime">Resend mail Days..</param>
        /// <param name="repeatSendMailNumber">Max number of resend for mail..</param>
        /// <param name="workflowAfterRead">Workflow id for the read operation..</param>
        /// <param name="workflowAfterExpiration">Workflow id for the expiration of a read sharing.</param>
        /// <param name="workflowAfterExpirationNotRead">Workflow id for the expiration of a not read sharing.</param>
        /// <param name="alertForNoRead">Enable warning for no read sharing..</param>
        /// <param name="alertForNoReadTime">Warning message for no read sharing days..</param>
        /// <param name="disableAfterRead">Disable sharing after read..</param>
        /// <param name="deleteAfterExpiration">Delete after expiration..</param>
        /// <param name="immediatlySend">Immediatly send..</param>
        /// <param name="sendTime">Send datetime..</param>
        /// <param name="maxDownloadTime">Max number of download.</param>
        /// <param name="detailsAsZip">Archive the details in one zip.</param>
        /// <param name="defaultLanguage">Default language..</param>
        /// <param name="downloadDirectly">Donwload the documents directly from mail.</param>
        /// <param name="sharingMode">Possible values:  0: Link  1: Attachment  2: None .</param>
        /// <param name="mailDefinitions">List of mails to send..</param>
        /// <param name="shareName">Sharing name..</param>
        /// <param name="shareDescription">Sharing description..</param>
        /// <param name="isEnable">Is enable..</param>
        /// <param name="_virtual">Is virtual sharing..</param>
        /// <param name="sharingReceivers">Sharing receivers..</param>
        /// <param name="sharingDetails">Sharing details..</param>
        /// <param name="externalData">Sharing external data..</param>
        public SharingDTO(string sharingId = default(string), int? userId = default(int?), DateTime? creationDate = default(DateTime?), List<SharingHtmlDTO> htmlForAccess = default(List<SharingHtmlDTO>), List<SharingHtmlDTO> htmlForExpiration = default(List<SharingHtmlDTO>), List<SharingReceiverUriDTO> urlForReceivers = default(List<SharingReceiverUriDTO>), string sharingDefinitionId = default(string), int? documentTypeId = default(int?), int? beginning = default(int?), int? expiration = default(int?), int? afterSend = default(int?), bool? repeatSendMail = default(bool?), int? repeatSendMailTime = default(int?), int? repeatSendMailNumber = default(int?), int? workflowAfterRead = default(int?), int? workflowAfterExpiration = default(int?), int? workflowAfterExpirationNotRead = default(int?), bool? alertForNoRead = default(bool?), int? alertForNoReadTime = default(int?), bool? disableAfterRead = default(bool?), bool? deleteAfterExpiration = default(bool?), bool? immediatlySend = default(bool?), DateTime? sendTime = default(DateTime?), int? maxDownloadTime = default(int?), bool? detailsAsZip = default(bool?), string defaultLanguage = default(string), bool? downloadDirectly = default(bool?), int? sharingMode = default(int?), List<SharingMailDTO> mailDefinitions = default(List<SharingMailDTO>), string shareName = default(string), string shareDescription = default(string), bool? isEnable = default(bool?), bool? _virtual = default(bool?), List<SharingReceiverDTO> sharingReceivers = default(List<SharingReceiverDTO>), List<SharingDetailDTO> sharingDetails = default(List<SharingDetailDTO>), List<KeyValueDTO> externalData = default(List<KeyValueDTO>))
        {
            this.SharingId = sharingId;
            this.UserId = userId;
            this.CreationDate = creationDate;
            this.HtmlForAccess = htmlForAccess;
            this.HtmlForExpiration = htmlForExpiration;
            this.UrlForReceivers = urlForReceivers;
            this.SharingDefinitionId = sharingDefinitionId;
            this.DocumentTypeId = documentTypeId;
            this.Beginning = beginning;
            this.Expiration = expiration;
            this.AfterSend = afterSend;
            this.RepeatSendMail = repeatSendMail;
            this.RepeatSendMailTime = repeatSendMailTime;
            this.RepeatSendMailNumber = repeatSendMailNumber;
            this.WorkflowAfterRead = workflowAfterRead;
            this.WorkflowAfterExpiration = workflowAfterExpiration;
            this.WorkflowAfterExpirationNotRead = workflowAfterExpirationNotRead;
            this.AlertForNoRead = alertForNoRead;
            this.AlertForNoReadTime = alertForNoReadTime;
            this.DisableAfterRead = disableAfterRead;
            this.DeleteAfterExpiration = deleteAfterExpiration;
            this.ImmediatlySend = immediatlySend;
            this.SendTime = sendTime;
            this.MaxDownloadTime = maxDownloadTime;
            this.DetailsAsZip = detailsAsZip;
            this.DefaultLanguage = defaultLanguage;
            this.DownloadDirectly = downloadDirectly;
            this.SharingMode = sharingMode;
            this.MailDefinitions = mailDefinitions;
            this.ShareName = shareName;
            this.ShareDescription = shareDescription;
            this.IsEnable = isEnable;
            this.Virtual = _virtual;
            this.SharingReceivers = sharingReceivers;
            this.SharingDetails = sharingDetails;
            this.ExternalData = externalData;
        }
        
        /// <summary>
        /// Sharing unique id
        /// </summary>
        /// <value>Sharing unique id</value>
        [DataMember(Name="sharingId", EmitDefaultValue=false)]
        public string SharingId { get; set; }

        /// <summary>
        /// Owner user id
        /// </summary>
        /// <value>Owner user id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Date time of creation
        /// </summary>
        /// <value>Date time of creation</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Html for the sharing page
        /// </summary>
        /// <value>Html for the sharing page</value>
        [DataMember(Name="htmlForAccess", EmitDefaultValue=false)]
        public List<SharingHtmlDTO> HtmlForAccess { get; set; }

        /// <summary>
        /// Html for the expiration page
        /// </summary>
        /// <value>Html for the expiration page</value>
        [DataMember(Name="htmlForExpiration", EmitDefaultValue=false)]
        public List<SharingHtmlDTO> HtmlForExpiration { get; set; }

        /// <summary>
        /// Collection of URL for receivers
        /// </summary>
        /// <value>Collection of URL for receivers</value>
        [DataMember(Name="urlForReceivers", EmitDefaultValue=false)]
        public List<SharingReceiverUriDTO> UrlForReceivers { get; set; }

        /// <summary>
        /// Unique identifier for the configuration
        /// </summary>
        /// <value>Unique identifier for the configuration</value>
        [DataMember(Name="sharingDefinitionId", EmitDefaultValue=false)]
        public string SharingDefinitionId { get; set; }

        /// <summary>
        /// System id for the documentType.
        /// </summary>
        /// <value>System id for the documentType.</value>
        [DataMember(Name="documentTypeId", EmitDefaultValue=false)]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// Days for the activation of the sharing.
        /// </summary>
        /// <value>Days for the activation of the sharing.</value>
        [DataMember(Name="beginning", EmitDefaultValue=false)]
        public int? Beginning { get; set; }

        /// <summary>
        /// Days for the expiration of the sharing.
        /// </summary>
        /// <value>Days for the expiration of the sharing.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public int? Expiration { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent 
        /// </summary>
        /// <value>Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent </value>
        [DataMember(Name="afterSend", EmitDefaultValue=false)]
        public int? AfterSend { get; set; }

        /// <summary>
        /// Resend for the mail.
        /// </summary>
        /// <value>Resend for the mail.</value>
        [DataMember(Name="repeatSendMail", EmitDefaultValue=false)]
        public bool? RepeatSendMail { get; set; }

        /// <summary>
        /// Resend mail Days.
        /// </summary>
        /// <value>Resend mail Days.</value>
        [DataMember(Name="repeatSendMailTime", EmitDefaultValue=false)]
        public int? RepeatSendMailTime { get; set; }

        /// <summary>
        /// Max number of resend for mail.
        /// </summary>
        /// <value>Max number of resend for mail.</value>
        [DataMember(Name="repeatSendMailNumber", EmitDefaultValue=false)]
        public int? RepeatSendMailNumber { get; set; }

        /// <summary>
        /// Workflow id for the read operation.
        /// </summary>
        /// <value>Workflow id for the read operation.</value>
        [DataMember(Name="workflowAfterRead", EmitDefaultValue=false)]
        public int? WorkflowAfterRead { get; set; }

        /// <summary>
        /// Workflow id for the expiration of a read sharing
        /// </summary>
        /// <value>Workflow id for the expiration of a read sharing</value>
        [DataMember(Name="workflowAfterExpiration", EmitDefaultValue=false)]
        public int? WorkflowAfterExpiration { get; set; }

        /// <summary>
        /// Workflow id for the expiration of a not read sharing
        /// </summary>
        /// <value>Workflow id for the expiration of a not read sharing</value>
        [DataMember(Name="workflowAfterExpirationNotRead", EmitDefaultValue=false)]
        public int? WorkflowAfterExpirationNotRead { get; set; }

        /// <summary>
        /// Enable warning for no read sharing.
        /// </summary>
        /// <value>Enable warning for no read sharing.</value>
        [DataMember(Name="alertForNoRead", EmitDefaultValue=false)]
        public bool? AlertForNoRead { get; set; }

        /// <summary>
        /// Warning message for no read sharing days.
        /// </summary>
        /// <value>Warning message for no read sharing days.</value>
        [DataMember(Name="alertForNoReadTime", EmitDefaultValue=false)]
        public int? AlertForNoReadTime { get; set; }

        /// <summary>
        /// Disable sharing after read.
        /// </summary>
        /// <value>Disable sharing after read.</value>
        [DataMember(Name="disableAfterRead", EmitDefaultValue=false)]
        public bool? DisableAfterRead { get; set; }

        /// <summary>
        /// Delete after expiration.
        /// </summary>
        /// <value>Delete after expiration.</value>
        [DataMember(Name="deleteAfterExpiration", EmitDefaultValue=false)]
        public bool? DeleteAfterExpiration { get; set; }

        /// <summary>
        /// Immediatly send.
        /// </summary>
        /// <value>Immediatly send.</value>
        [DataMember(Name="immediatlySend", EmitDefaultValue=false)]
        public bool? ImmediatlySend { get; set; }

        /// <summary>
        /// Send datetime.
        /// </summary>
        /// <value>Send datetime.</value>
        [DataMember(Name="sendTime", EmitDefaultValue=false)]
        public DateTime? SendTime { get; set; }

        /// <summary>
        /// Max number of download
        /// </summary>
        /// <value>Max number of download</value>
        [DataMember(Name="maxDownloadTime", EmitDefaultValue=false)]
        public int? MaxDownloadTime { get; set; }

        /// <summary>
        /// Archive the details in one zip
        /// </summary>
        /// <value>Archive the details in one zip</value>
        [DataMember(Name="detailsAsZip", EmitDefaultValue=false)]
        public bool? DetailsAsZip { get; set; }

        /// <summary>
        /// Default language.
        /// </summary>
        /// <value>Default language.</value>
        [DataMember(Name="defaultLanguage", EmitDefaultValue=false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// Donwload the documents directly from mail
        /// </summary>
        /// <value>Donwload the documents directly from mail</value>
        [DataMember(Name="downloadDirectly", EmitDefaultValue=false)]
        public bool? DownloadDirectly { get; set; }

        /// <summary>
        /// Possible values:  0: Link  1: Attachment  2: None 
        /// </summary>
        /// <value>Possible values:  0: Link  1: Attachment  2: None </value>
        [DataMember(Name="sharingMode", EmitDefaultValue=false)]
        public int? SharingMode { get; set; }

        /// <summary>
        /// List of mails to send.
        /// </summary>
        /// <value>List of mails to send.</value>
        [DataMember(Name="mailDefinitions", EmitDefaultValue=false)]
        public List<SharingMailDTO> MailDefinitions { get; set; }

        /// <summary>
        /// Sharing name.
        /// </summary>
        /// <value>Sharing name.</value>
        [DataMember(Name="shareName", EmitDefaultValue=false)]
        public string ShareName { get; set; }

        /// <summary>
        /// Sharing description.
        /// </summary>
        /// <value>Sharing description.</value>
        [DataMember(Name="shareDescription", EmitDefaultValue=false)]
        public string ShareDescription { get; set; }

        /// <summary>
        /// Is enable.
        /// </summary>
        /// <value>Is enable.</value>
        [DataMember(Name="isEnable", EmitDefaultValue=false)]
        public bool? IsEnable { get; set; }

        /// <summary>
        /// Is virtual sharing.
        /// </summary>
        /// <value>Is virtual sharing.</value>
        [DataMember(Name="virtual", EmitDefaultValue=false)]
        public bool? Virtual { get; set; }

        /// <summary>
        /// Sharing receivers.
        /// </summary>
        /// <value>Sharing receivers.</value>
        [DataMember(Name="sharingReceivers", EmitDefaultValue=false)]
        public List<SharingReceiverDTO> SharingReceivers { get; set; }

        /// <summary>
        /// Sharing details.
        /// </summary>
        /// <value>Sharing details.</value>
        [DataMember(Name="sharingDetails", EmitDefaultValue=false)]
        public List<SharingDetailDTO> SharingDetails { get; set; }

        /// <summary>
        /// Sharing external data.
        /// </summary>
        /// <value>Sharing external data.</value>
        [DataMember(Name="externalData", EmitDefaultValue=false)]
        public List<KeyValueDTO> ExternalData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharingDTO {\n");
            sb.Append("  SharingId: ").Append(SharingId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  HtmlForAccess: ").Append(HtmlForAccess).Append("\n");
            sb.Append("  HtmlForExpiration: ").Append(HtmlForExpiration).Append("\n");
            sb.Append("  UrlForReceivers: ").Append(UrlForReceivers).Append("\n");
            sb.Append("  SharingDefinitionId: ").Append(SharingDefinitionId).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  Beginning: ").Append(Beginning).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  AfterSend: ").Append(AfterSend).Append("\n");
            sb.Append("  RepeatSendMail: ").Append(RepeatSendMail).Append("\n");
            sb.Append("  RepeatSendMailTime: ").Append(RepeatSendMailTime).Append("\n");
            sb.Append("  RepeatSendMailNumber: ").Append(RepeatSendMailNumber).Append("\n");
            sb.Append("  WorkflowAfterRead: ").Append(WorkflowAfterRead).Append("\n");
            sb.Append("  WorkflowAfterExpiration: ").Append(WorkflowAfterExpiration).Append("\n");
            sb.Append("  WorkflowAfterExpirationNotRead: ").Append(WorkflowAfterExpirationNotRead).Append("\n");
            sb.Append("  AlertForNoRead: ").Append(AlertForNoRead).Append("\n");
            sb.Append("  AlertForNoReadTime: ").Append(AlertForNoReadTime).Append("\n");
            sb.Append("  DisableAfterRead: ").Append(DisableAfterRead).Append("\n");
            sb.Append("  DeleteAfterExpiration: ").Append(DeleteAfterExpiration).Append("\n");
            sb.Append("  ImmediatlySend: ").Append(ImmediatlySend).Append("\n");
            sb.Append("  SendTime: ").Append(SendTime).Append("\n");
            sb.Append("  MaxDownloadTime: ").Append(MaxDownloadTime).Append("\n");
            sb.Append("  DetailsAsZip: ").Append(DetailsAsZip).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  DownloadDirectly: ").Append(DownloadDirectly).Append("\n");
            sb.Append("  SharingMode: ").Append(SharingMode).Append("\n");
            sb.Append("  MailDefinitions: ").Append(MailDefinitions).Append("\n");
            sb.Append("  ShareName: ").Append(ShareName).Append("\n");
            sb.Append("  ShareDescription: ").Append(ShareDescription).Append("\n");
            sb.Append("  IsEnable: ").Append(IsEnable).Append("\n");
            sb.Append("  Virtual: ").Append(Virtual).Append("\n");
            sb.Append("  SharingReceivers: ").Append(SharingReceivers).Append("\n");
            sb.Append("  SharingDetails: ").Append(SharingDetails).Append("\n");
            sb.Append("  ExternalData: ").Append(ExternalData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharingDTO);
        }

        /// <summary>
        /// Returns true if SharingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SharingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SharingId == input.SharingId ||
                    (this.SharingId != null &&
                    this.SharingId.Equals(input.SharingId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.HtmlForAccess == input.HtmlForAccess ||
                    this.HtmlForAccess != null &&
                    this.HtmlForAccess.SequenceEqual(input.HtmlForAccess)
                ) && 
                (
                    this.HtmlForExpiration == input.HtmlForExpiration ||
                    this.HtmlForExpiration != null &&
                    this.HtmlForExpiration.SequenceEqual(input.HtmlForExpiration)
                ) && 
                (
                    this.UrlForReceivers == input.UrlForReceivers ||
                    this.UrlForReceivers != null &&
                    this.UrlForReceivers.SequenceEqual(input.UrlForReceivers)
                ) && 
                (
                    this.SharingDefinitionId == input.SharingDefinitionId ||
                    (this.SharingDefinitionId != null &&
                    this.SharingDefinitionId.Equals(input.SharingDefinitionId))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.Beginning == input.Beginning ||
                    (this.Beginning != null &&
                    this.Beginning.Equals(input.Beginning))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.AfterSend == input.AfterSend ||
                    (this.AfterSend != null &&
                    this.AfterSend.Equals(input.AfterSend))
                ) && 
                (
                    this.RepeatSendMail == input.RepeatSendMail ||
                    (this.RepeatSendMail != null &&
                    this.RepeatSendMail.Equals(input.RepeatSendMail))
                ) && 
                (
                    this.RepeatSendMailTime == input.RepeatSendMailTime ||
                    (this.RepeatSendMailTime != null &&
                    this.RepeatSendMailTime.Equals(input.RepeatSendMailTime))
                ) && 
                (
                    this.RepeatSendMailNumber == input.RepeatSendMailNumber ||
                    (this.RepeatSendMailNumber != null &&
                    this.RepeatSendMailNumber.Equals(input.RepeatSendMailNumber))
                ) && 
                (
                    this.WorkflowAfterRead == input.WorkflowAfterRead ||
                    (this.WorkflowAfterRead != null &&
                    this.WorkflowAfterRead.Equals(input.WorkflowAfterRead))
                ) && 
                (
                    this.WorkflowAfterExpiration == input.WorkflowAfterExpiration ||
                    (this.WorkflowAfterExpiration != null &&
                    this.WorkflowAfterExpiration.Equals(input.WorkflowAfterExpiration))
                ) && 
                (
                    this.WorkflowAfterExpirationNotRead == input.WorkflowAfterExpirationNotRead ||
                    (this.WorkflowAfterExpirationNotRead != null &&
                    this.WorkflowAfterExpirationNotRead.Equals(input.WorkflowAfterExpirationNotRead))
                ) && 
                (
                    this.AlertForNoRead == input.AlertForNoRead ||
                    (this.AlertForNoRead != null &&
                    this.AlertForNoRead.Equals(input.AlertForNoRead))
                ) && 
                (
                    this.AlertForNoReadTime == input.AlertForNoReadTime ||
                    (this.AlertForNoReadTime != null &&
                    this.AlertForNoReadTime.Equals(input.AlertForNoReadTime))
                ) && 
                (
                    this.DisableAfterRead == input.DisableAfterRead ||
                    (this.DisableAfterRead != null &&
                    this.DisableAfterRead.Equals(input.DisableAfterRead))
                ) && 
                (
                    this.DeleteAfterExpiration == input.DeleteAfterExpiration ||
                    (this.DeleteAfterExpiration != null &&
                    this.DeleteAfterExpiration.Equals(input.DeleteAfterExpiration))
                ) && 
                (
                    this.ImmediatlySend == input.ImmediatlySend ||
                    (this.ImmediatlySend != null &&
                    this.ImmediatlySend.Equals(input.ImmediatlySend))
                ) && 
                (
                    this.SendTime == input.SendTime ||
                    (this.SendTime != null &&
                    this.SendTime.Equals(input.SendTime))
                ) && 
                (
                    this.MaxDownloadTime == input.MaxDownloadTime ||
                    (this.MaxDownloadTime != null &&
                    this.MaxDownloadTime.Equals(input.MaxDownloadTime))
                ) && 
                (
                    this.DetailsAsZip == input.DetailsAsZip ||
                    (this.DetailsAsZip != null &&
                    this.DetailsAsZip.Equals(input.DetailsAsZip))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.DownloadDirectly == input.DownloadDirectly ||
                    (this.DownloadDirectly != null &&
                    this.DownloadDirectly.Equals(input.DownloadDirectly))
                ) && 
                (
                    this.SharingMode == input.SharingMode ||
                    (this.SharingMode != null &&
                    this.SharingMode.Equals(input.SharingMode))
                ) && 
                (
                    this.MailDefinitions == input.MailDefinitions ||
                    this.MailDefinitions != null &&
                    this.MailDefinitions.SequenceEqual(input.MailDefinitions)
                ) && 
                (
                    this.ShareName == input.ShareName ||
                    (this.ShareName != null &&
                    this.ShareName.Equals(input.ShareName))
                ) && 
                (
                    this.ShareDescription == input.ShareDescription ||
                    (this.ShareDescription != null &&
                    this.ShareDescription.Equals(input.ShareDescription))
                ) && 
                (
                    this.IsEnable == input.IsEnable ||
                    (this.IsEnable != null &&
                    this.IsEnable.Equals(input.IsEnable))
                ) && 
                (
                    this.Virtual == input.Virtual ||
                    (this.Virtual != null &&
                    this.Virtual.Equals(input.Virtual))
                ) && 
                (
                    this.SharingReceivers == input.SharingReceivers ||
                    this.SharingReceivers != null &&
                    this.SharingReceivers.SequenceEqual(input.SharingReceivers)
                ) && 
                (
                    this.SharingDetails == input.SharingDetails ||
                    this.SharingDetails != null &&
                    this.SharingDetails.SequenceEqual(input.SharingDetails)
                ) && 
                (
                    this.ExternalData == input.ExternalData ||
                    this.ExternalData != null &&
                    this.ExternalData.SequenceEqual(input.ExternalData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SharingId != null)
                    hashCode = hashCode * 59 + this.SharingId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.HtmlForAccess != null)
                    hashCode = hashCode * 59 + this.HtmlForAccess.GetHashCode();
                if (this.HtmlForExpiration != null)
                    hashCode = hashCode * 59 + this.HtmlForExpiration.GetHashCode();
                if (this.UrlForReceivers != null)
                    hashCode = hashCode * 59 + this.UrlForReceivers.GetHashCode();
                if (this.SharingDefinitionId != null)
                    hashCode = hashCode * 59 + this.SharingDefinitionId.GetHashCode();
                if (this.DocumentTypeId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeId.GetHashCode();
                if (this.Beginning != null)
                    hashCode = hashCode * 59 + this.Beginning.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.AfterSend != null)
                    hashCode = hashCode * 59 + this.AfterSend.GetHashCode();
                if (this.RepeatSendMail != null)
                    hashCode = hashCode * 59 + this.RepeatSendMail.GetHashCode();
                if (this.RepeatSendMailTime != null)
                    hashCode = hashCode * 59 + this.RepeatSendMailTime.GetHashCode();
                if (this.RepeatSendMailNumber != null)
                    hashCode = hashCode * 59 + this.RepeatSendMailNumber.GetHashCode();
                if (this.WorkflowAfterRead != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterRead.GetHashCode();
                if (this.WorkflowAfterExpiration != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterExpiration.GetHashCode();
                if (this.WorkflowAfterExpirationNotRead != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterExpirationNotRead.GetHashCode();
                if (this.AlertForNoRead != null)
                    hashCode = hashCode * 59 + this.AlertForNoRead.GetHashCode();
                if (this.AlertForNoReadTime != null)
                    hashCode = hashCode * 59 + this.AlertForNoReadTime.GetHashCode();
                if (this.DisableAfterRead != null)
                    hashCode = hashCode * 59 + this.DisableAfterRead.GetHashCode();
                if (this.DeleteAfterExpiration != null)
                    hashCode = hashCode * 59 + this.DeleteAfterExpiration.GetHashCode();
                if (this.ImmediatlySend != null)
                    hashCode = hashCode * 59 + this.ImmediatlySend.GetHashCode();
                if (this.SendTime != null)
                    hashCode = hashCode * 59 + this.SendTime.GetHashCode();
                if (this.MaxDownloadTime != null)
                    hashCode = hashCode * 59 + this.MaxDownloadTime.GetHashCode();
                if (this.DetailsAsZip != null)
                    hashCode = hashCode * 59 + this.DetailsAsZip.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.DownloadDirectly != null)
                    hashCode = hashCode * 59 + this.DownloadDirectly.GetHashCode();
                if (this.SharingMode != null)
                    hashCode = hashCode * 59 + this.SharingMode.GetHashCode();
                if (this.MailDefinitions != null)
                    hashCode = hashCode * 59 + this.MailDefinitions.GetHashCode();
                if (this.ShareName != null)
                    hashCode = hashCode * 59 + this.ShareName.GetHashCode();
                if (this.ShareDescription != null)
                    hashCode = hashCode * 59 + this.ShareDescription.GetHashCode();
                if (this.IsEnable != null)
                    hashCode = hashCode * 59 + this.IsEnable.GetHashCode();
                if (this.Virtual != null)
                    hashCode = hashCode * 59 + this.Virtual.GetHashCode();
                if (this.SharingReceivers != null)
                    hashCode = hashCode * 59 + this.SharingReceivers.GetHashCode();
                if (this.SharingDetails != null)
                    hashCode = hashCode * 59 + this.SharingDetails.GetHashCode();
                if (this.ExternalData != null)
                    hashCode = hashCode * 59 + this.ExternalData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
