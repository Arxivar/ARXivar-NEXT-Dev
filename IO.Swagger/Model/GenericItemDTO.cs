/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GenericItemDTO
    /// </summary>
    [DataContract]
    public partial class GenericItemDTO :  IEquatable<GenericItemDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericItemDTO" /> class.
        /// </summary>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="ItemType">ItemType.</param>
        /// <param name="Description">Description.</param>
        /// <param name="AddtionalInfo">AddtionalInfo.</param>
        /// <param name="UserDescription">UserDescription.</param>
        public GenericItemDTO(string ItemId = null, int? ItemType = null, string Description = null, string AddtionalInfo = null, string UserDescription = null)
        {
            this.ItemId = ItemId;
            this.ItemType = ItemType;
            this.Description = Description;
            this.AddtionalInfo = AddtionalInfo;
            this.UserDescription = UserDescription;
        }
        
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }
        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType", EmitDefaultValue=false)]
        public int? ItemType { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets AddtionalInfo
        /// </summary>
        [DataMember(Name="addtionalInfo", EmitDefaultValue=false)]
        public string AddtionalInfo { get; set; }
        /// <summary>
        /// Gets or Sets UserDescription
        /// </summary>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenericItemDTO {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AddtionalInfo: ").Append(AddtionalInfo).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GenericItemDTO);
        }

        /// <summary>
        /// Returns true if GenericItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GenericItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenericItemDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ItemType == other.ItemType ||
                    this.ItemType != null &&
                    this.ItemType.Equals(other.ItemType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.AddtionalInfo == other.AddtionalInfo ||
                    this.AddtionalInfo != null &&
                    this.AddtionalInfo.Equals(other.AddtionalInfo)
                ) && 
                (
                    this.UserDescription == other.UserDescription ||
                    this.UserDescription != null &&
                    this.UserDescription.Equals(other.UserDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.ItemType != null)
                    hash = hash * 59 + this.ItemType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.AddtionalInfo != null)
                    hash = hash * 59 + this.AddtionalInfo.GetHashCode();
                if (this.UserDescription != null)
                    hash = hash * 59 + this.UserDescription.GetHashCode();
                return hash;
            }
        }
    }

}
