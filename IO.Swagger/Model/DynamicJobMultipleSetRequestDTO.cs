/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dynamic job operation multiple set request
    /// </summary>
    [DataContract]
    public partial class DynamicJobMultipleSetRequestDTO :  IEquatable<DynamicJobMultipleSetRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicJobMultipleSetRequestDTO" /> class.
        /// </summary>
        /// <param name="DynamicJobUserId">User id of dynamic job.</param>
        /// <param name="TaskWorkIds">TaskWork id to set.</param>
        /// <param name="Users">Values for dynamic job.</param>
        public DynamicJobMultipleSetRequestDTO(int? DynamicJobUserId = default(int?), List<int?> TaskWorkIds = default(List<int?>), List<UserCompleteDTO> Users = default(List<UserCompleteDTO>))
        {
            this.DynamicJobUserId = DynamicJobUserId;
            this.TaskWorkIds = TaskWorkIds;
            this.Users = Users;
        }
        
        /// <summary>
        /// User id of dynamic job
        /// </summary>
        /// <value>User id of dynamic job</value>
        [DataMember(Name="dynamicJobUserId", EmitDefaultValue=false)]
        public int? DynamicJobUserId { get; set; }

        /// <summary>
        /// TaskWork id to set
        /// </summary>
        /// <value>TaskWork id to set</value>
        [DataMember(Name="taskWorkIds", EmitDefaultValue=false)]
        public List<int?> TaskWorkIds { get; set; }

        /// <summary>
        /// Values for dynamic job
        /// </summary>
        /// <value>Values for dynamic job</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<UserCompleteDTO> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicJobMultipleSetRequestDTO {\n");
            sb.Append("  DynamicJobUserId: ").Append(DynamicJobUserId).Append("\n");
            sb.Append("  TaskWorkIds: ").Append(TaskWorkIds).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicJobMultipleSetRequestDTO);
        }

        /// <summary>
        /// Returns true if DynamicJobMultipleSetRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicJobMultipleSetRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicJobMultipleSetRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DynamicJobUserId == input.DynamicJobUserId ||
                    (this.DynamicJobUserId != null &&
                    this.DynamicJobUserId.Equals(input.DynamicJobUserId))
                ) && 
                (
                    this.TaskWorkIds == input.TaskWorkIds ||
                    this.TaskWorkIds != null &&
                    this.TaskWorkIds.SequenceEqual(input.TaskWorkIds)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DynamicJobUserId != null)
                    hashCode = hashCode * 59 + this.DynamicJobUserId.GetHashCode();
                if (this.TaskWorkIds != null)
                    hashCode = hashCode * 59 + this.TaskWorkIds.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
