/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SignatureAttributeDTO
    /// </summary>
    [DataContract]
    public partial class SignatureAttributeDTO :  IEquatable<SignatureAttributeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureAttributeDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="idDescription">idDescription.</param>
        /// <param name="valueDescription">valueDescription.</param>
        /// <param name="valueList">valueList.</param>
        public SignatureAttributeDTO(string id = default(string), string idDescription = default(string), string valueDescription = default(string), List<IdValuePairDTO> valueList = default(List<IdValuePairDTO>))
        {
            this.Id = id;
            this.IdDescription = idDescription;
            this.ValueDescription = valueDescription;
            this.ValueList = valueList;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdDescription
        /// </summary>
        [DataMember(Name="idDescription", EmitDefaultValue=false)]
        public string IdDescription { get; set; }

        /// <summary>
        /// Gets or Sets ValueDescription
        /// </summary>
        [DataMember(Name="valueDescription", EmitDefaultValue=false)]
        public string ValueDescription { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [DataMember(Name="valueList", EmitDefaultValue=false)]
        public List<IdValuePairDTO> ValueList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatureAttributeDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdDescription: ").Append(IdDescription).Append("\n");
            sb.Append("  ValueDescription: ").Append(ValueDescription).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureAttributeDTO);
        }

        /// <summary>
        /// Returns true if SignatureAttributeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureAttributeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureAttributeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdDescription == input.IdDescription ||
                    (this.IdDescription != null &&
                    this.IdDescription.Equals(input.IdDescription))
                ) && 
                (
                    this.ValueDescription == input.ValueDescription ||
                    (this.ValueDescription != null &&
                    this.ValueDescription.Equals(input.ValueDescription))
                ) && 
                (
                    this.ValueList == input.ValueList ||
                    this.ValueList != null &&
                    this.ValueList.SequenceEqual(input.ValueList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdDescription != null)
                    hashCode = hashCode * 59 + this.IdDescription.GetHashCode();
                if (this.ValueDescription != null)
                    hashCode = hashCode * 59 + this.ValueDescription.GetHashCode();
                if (this.ValueList != null)
                    hashCode = hashCode * 59 + this.ValueList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
