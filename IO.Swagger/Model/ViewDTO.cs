/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ViewDTO
    /// </summary>
    [DataContract]
    public partial class ViewDTO :  IEquatable<ViewDTO>
    {
        /// <summary>
        /// Modalità con la quale vengono accettati i filtri sulla vista
        /// </summary>
        /// <value>Modalità con la quale vengono accettati i filtri sulla vista</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowEmptyFilterModeEnum
        {
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum OnDemand for "OnDemand"
            /// </summary>
            [EnumMember(Value = "OnDemand")]
            OnDemand
        }

        /// <summary>
        /// Modalità con la quale si devono mostrare/non mostrare i gruppi di campi (aggiuntivi)
        /// </summary>
        /// <value>Modalità con la quale si devono mostrare/non mostrare i gruppi di campi (aggiuntivi)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShowGroupsModeEnum
        {
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes
        }

        /// <summary>
        /// Gets or Sets DaAAndOr
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DaAAndOrEnum
        {
            
            /// <summary>
            /// Enum And for "And"
            /// </summary>
            [EnumMember(Value = "And")]
            And,
            
            /// <summary>
            /// Enum Or for "Or"
            /// </summary>
            [EnumMember(Value = "Or")]
            Or
        }

        /// <summary>
        /// Modalità con la quale vengono accettati i filtri sulla vista
        /// </summary>
        /// <value>Modalità con la quale vengono accettati i filtri sulla vista</value>
        [DataMember(Name="allowEmptyFilterMode", EmitDefaultValue=false)]
        public AllowEmptyFilterModeEnum? AllowEmptyFilterMode { get; set; }
        /// <summary>
        /// Modalità con la quale si devono mostrare/non mostrare i gruppi di campi (aggiuntivi)
        /// </summary>
        /// <value>Modalità con la quale si devono mostrare/non mostrare i gruppi di campi (aggiuntivi)</value>
        [DataMember(Name="showGroupsMode", EmitDefaultValue=false)]
        public ShowGroupsModeEnum? ShowGroupsMode { get; set; }
        /// <summary>
        /// Gets or Sets DaAAndOr
        /// </summary>
        [DataMember(Name="daAAndOr", EmitDefaultValue=false)]
        public DaAAndOrEnum? DaAAndOr { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewDTO" /> class.
        /// </summary>
        /// <param name="DocumentTypeDescription">DocumentTypeDescription.</param>
        /// <param name="Id">Identificativo univoco della vista..</param>
        /// <param name="Description">Description.</param>
        /// <param name="User">Identificativo dell&#39;utente creatore della vista..</param>
        /// <param name="UserCompleteName">UserCompleteName.</param>
        /// <param name="DocumentType">Tipologia documentale di primo livello..</param>
        /// <param name="Type2">Tipologia documentale di secondo livello..</param>
        /// <param name="Type3">Tipologia documentale di terzo livello..</param>
        /// <param name="SelectFields">Lista dei campi da visualizzare nel risultato di ricerca..</param>
        /// <param name="EditFields">Lista dei campi editabili prima di eseguire la vista..</param>
        /// <param name="LockFields">Search dei campi non editabili della vista..</param>
        /// <param name="OrderFields">Lista dei campi di ordinamento separati dalla virgola..</param>
        /// <param name="ShowFields">Modalità di gestione del client di Arxivar..</param>
        /// <param name="FormOpen">Apertura della maschera di ricerca dopo l&#39;esecuzione della vista del client di Arxivar..</param>
        /// <param name="AllowEmptyFilterMode">Modalità con la quale vengono accettati i filtri sulla vista.</param>
        /// <param name="ShowGroupsMode">Modalità con la quale si devono mostrare/non mostrare i gruppi di campi (aggiuntivi).</param>
        /// <param name="CanExecute">Permesso dell&#39;utente di eseguire la vista.</param>
        /// <param name="CanUpdate">Permesso dell&#39;utente di aggiornare la vista.</param>
        /// <param name="CanDelete">Permesso dell&#39;utente di eliminare la vista.</param>
        /// <param name="MaxItems">MaxItems.</param>
        /// <param name="DaAAndOr">DaAAndOr.</param>
        /// <param name="SearchFilterDto">SearchFilterDto.</param>
        /// <param name="SelectFilterDto">SelectFilterDto.</param>
        public ViewDTO(string DocumentTypeDescription = null, string Id = null, string Description = null, int? User = null, string UserCompleteName = null, int? DocumentType = null, int? Type2 = null, int? Type3 = null, string SelectFields = null, string EditFields = null, SearchDTO LockFields = null, string OrderFields = null, bool? ShowFields = null, bool? FormOpen = null, AllowEmptyFilterModeEnum? AllowEmptyFilterMode = null, ShowGroupsModeEnum? ShowGroupsMode = null, bool? CanExecute = null, bool? CanUpdate = null, bool? CanDelete = null, int? MaxItems = null, DaAAndOrEnum? DaAAndOr = null, SearchDTO SearchFilterDto = null, SelectDTO SelectFilterDto = null)
        {
            this.DocumentTypeDescription = DocumentTypeDescription;
            this.Id = Id;
            this.Description = Description;
            this.User = User;
            this.UserCompleteName = UserCompleteName;
            this.DocumentType = DocumentType;
            this.Type2 = Type2;
            this.Type3 = Type3;
            this.SelectFields = SelectFields;
            this.EditFields = EditFields;
            this.LockFields = LockFields;
            this.OrderFields = OrderFields;
            this.ShowFields = ShowFields;
            this.FormOpen = FormOpen;
            this.AllowEmptyFilterMode = AllowEmptyFilterMode;
            this.ShowGroupsMode = ShowGroupsMode;
            this.CanExecute = CanExecute;
            this.CanUpdate = CanUpdate;
            this.CanDelete = CanDelete;
            this.MaxItems = MaxItems;
            this.DaAAndOr = DaAAndOr;
            this.SearchFilterDto = SearchFilterDto;
            this.SelectFilterDto = SelectFilterDto;
        }
        
        /// <summary>
        /// Gets or Sets DocumentTypeDescription
        /// </summary>
        [DataMember(Name="documentTypeDescription", EmitDefaultValue=false)]
        public string DocumentTypeDescription { get; set; }
        /// <summary>
        /// Identificativo univoco della vista.
        /// </summary>
        /// <value>Identificativo univoco della vista.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Identificativo dell&#39;utente creatore della vista.
        /// </summary>
        /// <value>Identificativo dell&#39;utente creatore della vista.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets UserCompleteName
        /// </summary>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }
        /// <summary>
        /// Tipologia documentale di primo livello.
        /// </summary>
        /// <value>Tipologia documentale di primo livello.</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public int? DocumentType { get; set; }
        /// <summary>
        /// Tipologia documentale di secondo livello.
        /// </summary>
        /// <value>Tipologia documentale di secondo livello.</value>
        [DataMember(Name="type2", EmitDefaultValue=false)]
        public int? Type2 { get; set; }
        /// <summary>
        /// Tipologia documentale di terzo livello.
        /// </summary>
        /// <value>Tipologia documentale di terzo livello.</value>
        [DataMember(Name="type3", EmitDefaultValue=false)]
        public int? Type3 { get; set; }
        /// <summary>
        /// Lista dei campi da visualizzare nel risultato di ricerca.
        /// </summary>
        /// <value>Lista dei campi da visualizzare nel risultato di ricerca.</value>
        [DataMember(Name="selectFields", EmitDefaultValue=false)]
        public string SelectFields { get; set; }
        /// <summary>
        /// Lista dei campi editabili prima di eseguire la vista.
        /// </summary>
        /// <value>Lista dei campi editabili prima di eseguire la vista.</value>
        [DataMember(Name="editFields", EmitDefaultValue=false)]
        public string EditFields { get; set; }
        /// <summary>
        /// Search dei campi non editabili della vista.
        /// </summary>
        /// <value>Search dei campi non editabili della vista.</value>
        [DataMember(Name="lockFields", EmitDefaultValue=false)]
        public SearchDTO LockFields { get; set; }
        /// <summary>
        /// Lista dei campi di ordinamento separati dalla virgola.
        /// </summary>
        /// <value>Lista dei campi di ordinamento separati dalla virgola.</value>
        [DataMember(Name="orderFields", EmitDefaultValue=false)]
        public string OrderFields { get; set; }
        /// <summary>
        /// Modalità di gestione del client di Arxivar.
        /// </summary>
        /// <value>Modalità di gestione del client di Arxivar.</value>
        [DataMember(Name="showFields", EmitDefaultValue=false)]
        public bool? ShowFields { get; set; }
        /// <summary>
        /// Apertura della maschera di ricerca dopo l&#39;esecuzione della vista del client di Arxivar.
        /// </summary>
        /// <value>Apertura della maschera di ricerca dopo l&#39;esecuzione della vista del client di Arxivar.</value>
        [DataMember(Name="formOpen", EmitDefaultValue=false)]
        public bool? FormOpen { get; set; }
        /// <summary>
        /// Permesso dell&#39;utente di eseguire la vista
        /// </summary>
        /// <value>Permesso dell&#39;utente di eseguire la vista</value>
        [DataMember(Name="canExecute", EmitDefaultValue=false)]
        public bool? CanExecute { get; set; }
        /// <summary>
        /// Permesso dell&#39;utente di aggiornare la vista
        /// </summary>
        /// <value>Permesso dell&#39;utente di aggiornare la vista</value>
        [DataMember(Name="canUpdate", EmitDefaultValue=false)]
        public bool? CanUpdate { get; set; }
        /// <summary>
        /// Permesso dell&#39;utente di eliminare la vista
        /// </summary>
        /// <value>Permesso dell&#39;utente di eliminare la vista</value>
        [DataMember(Name="canDelete", EmitDefaultValue=false)]
        public bool? CanDelete { get; set; }
        /// <summary>
        /// Gets or Sets MaxItems
        /// </summary>
        [DataMember(Name="maxItems", EmitDefaultValue=false)]
        public int? MaxItems { get; set; }
        /// <summary>
        /// Gets or Sets SearchFilterDto
        /// </summary>
        [DataMember(Name="searchFilterDto", EmitDefaultValue=false)]
        public SearchDTO SearchFilterDto { get; set; }
        /// <summary>
        /// Gets or Sets SelectFilterDto
        /// </summary>
        [DataMember(Name="selectFilterDto", EmitDefaultValue=false)]
        public SelectDTO SelectFilterDto { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ViewDTO {\n");
            sb.Append("  DocumentTypeDescription: ").Append(DocumentTypeDescription).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Type2: ").Append(Type2).Append("\n");
            sb.Append("  Type3: ").Append(Type3).Append("\n");
            sb.Append("  SelectFields: ").Append(SelectFields).Append("\n");
            sb.Append("  EditFields: ").Append(EditFields).Append("\n");
            sb.Append("  LockFields: ").Append(LockFields).Append("\n");
            sb.Append("  OrderFields: ").Append(OrderFields).Append("\n");
            sb.Append("  ShowFields: ").Append(ShowFields).Append("\n");
            sb.Append("  FormOpen: ").Append(FormOpen).Append("\n");
            sb.Append("  AllowEmptyFilterMode: ").Append(AllowEmptyFilterMode).Append("\n");
            sb.Append("  ShowGroupsMode: ").Append(ShowGroupsMode).Append("\n");
            sb.Append("  CanExecute: ").Append(CanExecute).Append("\n");
            sb.Append("  CanUpdate: ").Append(CanUpdate).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("  MaxItems: ").Append(MaxItems).Append("\n");
            sb.Append("  DaAAndOr: ").Append(DaAAndOr).Append("\n");
            sb.Append("  SearchFilterDto: ").Append(SearchFilterDto).Append("\n");
            sb.Append("  SelectFilterDto: ").Append(SelectFilterDto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ViewDTO);
        }

        /// <summary>
        /// Returns true if ViewDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ViewDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentTypeDescription == other.DocumentTypeDescription ||
                    this.DocumentTypeDescription != null &&
                    this.DocumentTypeDescription.Equals(other.DocumentTypeDescription)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.UserCompleteName == other.UserCompleteName ||
                    this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(other.UserCompleteName)
                ) && 
                (
                    this.DocumentType == other.DocumentType ||
                    this.DocumentType != null &&
                    this.DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    this.Type2 == other.Type2 ||
                    this.Type2 != null &&
                    this.Type2.Equals(other.Type2)
                ) && 
                (
                    this.Type3 == other.Type3 ||
                    this.Type3 != null &&
                    this.Type3.Equals(other.Type3)
                ) && 
                (
                    this.SelectFields == other.SelectFields ||
                    this.SelectFields != null &&
                    this.SelectFields.Equals(other.SelectFields)
                ) && 
                (
                    this.EditFields == other.EditFields ||
                    this.EditFields != null &&
                    this.EditFields.Equals(other.EditFields)
                ) && 
                (
                    this.LockFields == other.LockFields ||
                    this.LockFields != null &&
                    this.LockFields.Equals(other.LockFields)
                ) && 
                (
                    this.OrderFields == other.OrderFields ||
                    this.OrderFields != null &&
                    this.OrderFields.Equals(other.OrderFields)
                ) && 
                (
                    this.ShowFields == other.ShowFields ||
                    this.ShowFields != null &&
                    this.ShowFields.Equals(other.ShowFields)
                ) && 
                (
                    this.FormOpen == other.FormOpen ||
                    this.FormOpen != null &&
                    this.FormOpen.Equals(other.FormOpen)
                ) && 
                (
                    this.AllowEmptyFilterMode == other.AllowEmptyFilterMode ||
                    this.AllowEmptyFilterMode != null &&
                    this.AllowEmptyFilterMode.Equals(other.AllowEmptyFilterMode)
                ) && 
                (
                    this.ShowGroupsMode == other.ShowGroupsMode ||
                    this.ShowGroupsMode != null &&
                    this.ShowGroupsMode.Equals(other.ShowGroupsMode)
                ) && 
                (
                    this.CanExecute == other.CanExecute ||
                    this.CanExecute != null &&
                    this.CanExecute.Equals(other.CanExecute)
                ) && 
                (
                    this.CanUpdate == other.CanUpdate ||
                    this.CanUpdate != null &&
                    this.CanUpdate.Equals(other.CanUpdate)
                ) && 
                (
                    this.CanDelete == other.CanDelete ||
                    this.CanDelete != null &&
                    this.CanDelete.Equals(other.CanDelete)
                ) && 
                (
                    this.MaxItems == other.MaxItems ||
                    this.MaxItems != null &&
                    this.MaxItems.Equals(other.MaxItems)
                ) && 
                (
                    this.DaAAndOr == other.DaAAndOr ||
                    this.DaAAndOr != null &&
                    this.DaAAndOr.Equals(other.DaAAndOr)
                ) && 
                (
                    this.SearchFilterDto == other.SearchFilterDto ||
                    this.SearchFilterDto != null &&
                    this.SearchFilterDto.Equals(other.SearchFilterDto)
                ) && 
                (
                    this.SelectFilterDto == other.SelectFilterDto ||
                    this.SelectFilterDto != null &&
                    this.SelectFilterDto.Equals(other.SelectFilterDto)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentTypeDescription != null)
                    hash = hash * 59 + this.DocumentTypeDescription.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.UserCompleteName != null)
                    hash = hash * 59 + this.UserCompleteName.GetHashCode();
                if (this.DocumentType != null)
                    hash = hash * 59 + this.DocumentType.GetHashCode();
                if (this.Type2 != null)
                    hash = hash * 59 + this.Type2.GetHashCode();
                if (this.Type3 != null)
                    hash = hash * 59 + this.Type3.GetHashCode();
                if (this.SelectFields != null)
                    hash = hash * 59 + this.SelectFields.GetHashCode();
                if (this.EditFields != null)
                    hash = hash * 59 + this.EditFields.GetHashCode();
                if (this.LockFields != null)
                    hash = hash * 59 + this.LockFields.GetHashCode();
                if (this.OrderFields != null)
                    hash = hash * 59 + this.OrderFields.GetHashCode();
                if (this.ShowFields != null)
                    hash = hash * 59 + this.ShowFields.GetHashCode();
                if (this.FormOpen != null)
                    hash = hash * 59 + this.FormOpen.GetHashCode();
                if (this.AllowEmptyFilterMode != null)
                    hash = hash * 59 + this.AllowEmptyFilterMode.GetHashCode();
                if (this.ShowGroupsMode != null)
                    hash = hash * 59 + this.ShowGroupsMode.GetHashCode();
                if (this.CanExecute != null)
                    hash = hash * 59 + this.CanExecute.GetHashCode();
                if (this.CanUpdate != null)
                    hash = hash * 59 + this.CanUpdate.GetHashCode();
                if (this.CanDelete != null)
                    hash = hash * 59 + this.CanDelete.GetHashCode();
                if (this.MaxItems != null)
                    hash = hash * 59 + this.MaxItems.GetHashCode();
                if (this.DaAAndOr != null)
                    hash = hash * 59 + this.DaAAndOr.GetHashCode();
                if (this.SearchFilterDto != null)
                    hash = hash * 59 + this.SearchFilterDto.GetHashCode();
                if (this.SelectFilterDto != null)
                    hash = hash * 59 + this.SelectFilterDto.GetHashCode();
                return hash;
            }
        }
    }

}
