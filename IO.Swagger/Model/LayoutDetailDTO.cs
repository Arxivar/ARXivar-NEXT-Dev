/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LayoutDetailDTO
    /// </summary>
    [DataContract]
    public partial class LayoutDetailDTO :  IEquatable<LayoutDetailDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutDetailDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Label">Label.</param>
        /// <param name="ElementType">ElementType.</param>
        /// <param name="ElementId">ElementId.</param>
        /// <param name="ElementAction">ElementAction.</param>
        /// <param name="OrderIndex">OrderIndex.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="LayoutId">LayoutId.</param>
        /// <param name="Operation">Operation.</param>
        /// <param name="Favourite">Favourite.</param>
        /// <param name="Translations">Translations.</param>
        /// <param name="Childs">Childs.</param>
        public LayoutDetailDTO(int? Id = null, string Label = null, int? ElementType = null, string ElementId = null, int? ElementAction = null, int? OrderIndex = null, int? ParentId = null, int? LayoutId = null, int? Operation = null, bool? Favourite = null, List<LabelTranslationsDto> Translations = null, List<LayoutDetailDTO> Childs = null)
        {
            this.Id = Id;
            this.Label = Label;
            this.ElementType = ElementType;
            this.ElementId = ElementId;
            this.ElementAction = ElementAction;
            this.OrderIndex = OrderIndex;
            this.ParentId = ParentId;
            this.LayoutId = LayoutId;
            this.Operation = Operation;
            this.Favourite = Favourite;
            this.Translations = Translations;
            this.Childs = Childs;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name="elementType", EmitDefaultValue=false)]
        public int? ElementType { get; set; }
        /// <summary>
        /// Gets or Sets ElementId
        /// </summary>
        [DataMember(Name="elementId", EmitDefaultValue=false)]
        public string ElementId { get; set; }
        /// <summary>
        /// Gets or Sets ElementAction
        /// </summary>
        [DataMember(Name="elementAction", EmitDefaultValue=false)]
        public int? ElementAction { get; set; }
        /// <summary>
        /// Gets or Sets OrderIndex
        /// </summary>
        [DataMember(Name="orderIndex", EmitDefaultValue=false)]
        public int? OrderIndex { get; set; }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }
        /// <summary>
        /// Gets or Sets LayoutId
        /// </summary>
        [DataMember(Name="layoutId", EmitDefaultValue=false)]
        public int? LayoutId { get; set; }
        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public int? Operation { get; set; }
        /// <summary>
        /// Gets or Sets Favourite
        /// </summary>
        [DataMember(Name="favourite", EmitDefaultValue=false)]
        public bool? Favourite { get; set; }
        /// <summary>
        /// Gets or Sets Translations
        /// </summary>
        [DataMember(Name="translations", EmitDefaultValue=false)]
        public List<LabelTranslationsDto> Translations { get; set; }
        /// <summary>
        /// Gets or Sets Childs
        /// </summary>
        [DataMember(Name="childs", EmitDefaultValue=false)]
        public List<LayoutDetailDTO> Childs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutDetailDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  ElementId: ").Append(ElementId).Append("\n");
            sb.Append("  ElementAction: ").Append(ElementAction).Append("\n");
            sb.Append("  OrderIndex: ").Append(OrderIndex).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  LayoutId: ").Append(LayoutId).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  Childs: ").Append(Childs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LayoutDetailDTO);
        }

        /// <summary>
        /// Returns true if LayoutDetailDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LayoutDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutDetailDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.ElementType == other.ElementType ||
                    this.ElementType != null &&
                    this.ElementType.Equals(other.ElementType)
                ) && 
                (
                    this.ElementId == other.ElementId ||
                    this.ElementId != null &&
                    this.ElementId.Equals(other.ElementId)
                ) && 
                (
                    this.ElementAction == other.ElementAction ||
                    this.ElementAction != null &&
                    this.ElementAction.Equals(other.ElementAction)
                ) && 
                (
                    this.OrderIndex == other.OrderIndex ||
                    this.OrderIndex != null &&
                    this.OrderIndex.Equals(other.OrderIndex)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.LayoutId == other.LayoutId ||
                    this.LayoutId != null &&
                    this.LayoutId.Equals(other.LayoutId)
                ) && 
                (
                    this.Operation == other.Operation ||
                    this.Operation != null &&
                    this.Operation.Equals(other.Operation)
                ) && 
                (
                    this.Favourite == other.Favourite ||
                    this.Favourite != null &&
                    this.Favourite.Equals(other.Favourite)
                ) && 
                (
                    this.Translations == other.Translations ||
                    this.Translations != null &&
                    this.Translations.SequenceEqual(other.Translations)
                ) && 
                (
                    this.Childs == other.Childs ||
                    this.Childs != null &&
                    this.Childs.SequenceEqual(other.Childs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.ElementType != null)
                    hash = hash * 59 + this.ElementType.GetHashCode();
                if (this.ElementId != null)
                    hash = hash * 59 + this.ElementId.GetHashCode();
                if (this.ElementAction != null)
                    hash = hash * 59 + this.ElementAction.GetHashCode();
                if (this.OrderIndex != null)
                    hash = hash * 59 + this.OrderIndex.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.LayoutId != null)
                    hash = hash * 59 + this.LayoutId.GetHashCode();
                if (this.Operation != null)
                    hash = hash * 59 + this.Operation.GetHashCode();
                if (this.Favourite != null)
                    hash = hash * 59 + this.Favourite.GetHashCode();
                if (this.Translations != null)
                    hash = hash * 59 + this.Translations.GetHashCode();
                if (this.Childs != null)
                    hash = hash * 59 + this.Childs.GetHashCode();
                return hash;
            }
        }
    }

}
