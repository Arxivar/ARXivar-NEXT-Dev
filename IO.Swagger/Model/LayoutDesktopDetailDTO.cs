/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LayoutDesktopDetailDTO
    /// </summary>
    [DataContract]
    public partial class LayoutDesktopDetailDTO :  IEquatable<LayoutDesktopDetailDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutDesktopDetailDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ElementId">ElementId.</param>
        /// <param name="X">X.</param>
        /// <param name="Y">Y.</param>
        /// <param name="W">W.</param>
        /// <param name="H">H.</param>
        /// <param name="InstanceId">InstanceId.</param>
        /// <param name="LayoutId">LayoutId.</param>
        public LayoutDesktopDetailDTO(int? Id = null, string ElementId = null, int? X = null, int? Y = null, int? W = null, int? H = null, string InstanceId = null, int? LayoutId = null)
        {
            this.Id = Id;
            this.ElementId = ElementId;
            this.X = X;
            this.Y = Y;
            this.W = W;
            this.H = H;
            this.InstanceId = InstanceId;
            this.LayoutId = LayoutId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets ElementId
        /// </summary>
        [DataMember(Name="elementId", EmitDefaultValue=false)]
        public string ElementId { get; set; }
        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }
        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public int? Y { get; set; }
        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name="w", EmitDefaultValue=false)]
        public int? W { get; set; }
        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [DataMember(Name="h", EmitDefaultValue=false)]
        public int? H { get; set; }
        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }
        /// <summary>
        /// Gets or Sets LayoutId
        /// </summary>
        [DataMember(Name="layoutId", EmitDefaultValue=false)]
        public int? LayoutId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutDesktopDetailDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ElementId: ").Append(ElementId).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  LayoutId: ").Append(LayoutId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LayoutDesktopDetailDTO);
        }

        /// <summary>
        /// Returns true if LayoutDesktopDetailDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LayoutDesktopDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutDesktopDetailDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ElementId == other.ElementId ||
                    this.ElementId != null &&
                    this.ElementId.Equals(other.ElementId)
                ) && 
                (
                    this.X == other.X ||
                    this.X != null &&
                    this.X.Equals(other.X)
                ) && 
                (
                    this.Y == other.Y ||
                    this.Y != null &&
                    this.Y.Equals(other.Y)
                ) && 
                (
                    this.W == other.W ||
                    this.W != null &&
                    this.W.Equals(other.W)
                ) && 
                (
                    this.H == other.H ||
                    this.H != null &&
                    this.H.Equals(other.H)
                ) && 
                (
                    this.InstanceId == other.InstanceId ||
                    this.InstanceId != null &&
                    this.InstanceId.Equals(other.InstanceId)
                ) && 
                (
                    this.LayoutId == other.LayoutId ||
                    this.LayoutId != null &&
                    this.LayoutId.Equals(other.LayoutId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ElementId != null)
                    hash = hash * 59 + this.ElementId.GetHashCode();
                if (this.X != null)
                    hash = hash * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hash = hash * 59 + this.Y.GetHashCode();
                if (this.W != null)
                    hash = hash * 59 + this.W.GetHashCode();
                if (this.H != null)
                    hash = hash * 59 + this.H.GetHashCode();
                if (this.InstanceId != null)
                    hash = hash * 59 + this.InstanceId.GetHashCode();
                if (this.LayoutId != null)
                    hash = hash * 59 + this.LayoutId.GetHashCode();
                return hash;
            }
        }
    }

}
