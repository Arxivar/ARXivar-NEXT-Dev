/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldBaseForSelectDTO
    /// </summary>
    [DataContract]
    public partial class FieldBaseForSelectDTO :  IEquatable<FieldBaseForSelectDTO>
    {
        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Group for "Group"
            /// </summary>
            [EnumMember(Value = "Group")]
            Group,
            
            /// <summary>
            /// Enum Additional for "Additional"
            /// </summary>
            [EnumMember(Value = "Additional")]
            Additional
        }

        /// <summary>
        /// Gets or Sets UserSelectionGroup
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserSelectionGroupEnum
        {
            
            /// <summary>
            /// Enum Icon for "Icon"
            /// </summary>
            [EnumMember(Value = "Icon")]
            Icon,
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Additional for "Additional"
            /// </summary>
            [EnumMember(Value = "Additional")]
            Additional
        }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public FieldTypeEnum? FieldType { get; set; }
        /// <summary>
        /// Gets or Sets UserSelectionGroup
        /// </summary>
        [DataMember(Name="userSelectionGroup", EmitDefaultValue=false)]
        public UserSelectionGroupEnum? UserSelectionGroup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldBaseForSelectDTO" /> class.
        /// </summary>
        /// <param name="SqlSelectField">SqlSelectField.</param>
        /// <param name="ToCalculate">ToCalculate.</param>
        /// <param name="Index">Index.</param>
        /// <param name="Selected">Selected.</param>
        /// <param name="FieldType">FieldType.</param>
        /// <param name="OrderBy">OrderBy.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Name">Name.</param>
        /// <param name="UserSelectionEnabled">UserSelectionEnabled.</param>
        /// <param name="UserSelectionGroup">UserSelectionGroup.</param>
        public FieldBaseForSelectDTO(string SqlSelectField = null, bool? ToCalculate = null, int? Index = null, bool? Selected = null, FieldTypeEnum? FieldType = null, OrderBy OrderBy = null, string ExternalId = null, string Label = null, string Name = null, bool? UserSelectionEnabled = null, UserSelectionGroupEnum? UserSelectionGroup = null)
        {
            this.SqlSelectField = SqlSelectField;
            this.ToCalculate = ToCalculate;
            this.Index = Index;
            this.Selected = Selected;
            this.FieldType = FieldType;
            this.OrderBy = OrderBy;
            this.ExternalId = ExternalId;
            this.Label = Label;
            this.Name = Name;
            this.UserSelectionEnabled = UserSelectionEnabled;
            this.UserSelectionGroup = UserSelectionGroup;
        }
        
        /// <summary>
        /// Gets or Sets SqlSelectField
        /// </summary>
        [DataMember(Name="sqlSelectField", EmitDefaultValue=false)]
        public string SqlSelectField { get; set; }
        /// <summary>
        /// Gets or Sets ToCalculate
        /// </summary>
        [DataMember(Name="toCalculate", EmitDefaultValue=false)]
        public bool? ToCalculate { get; set; }
        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }
        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public bool? Selected { get; set; }
        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>
        [DataMember(Name="orderBy", EmitDefaultValue=false)]
        public OrderBy OrderBy { get; set; }
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets UserSelectionEnabled
        /// </summary>
        [DataMember(Name="userSelectionEnabled", EmitDefaultValue=false)]
        public bool? UserSelectionEnabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldBaseForSelectDTO {\n");
            sb.Append("  SqlSelectField: ").Append(SqlSelectField).Append("\n");
            sb.Append("  ToCalculate: ").Append(ToCalculate).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserSelectionEnabled: ").Append(UserSelectionEnabled).Append("\n");
            sb.Append("  UserSelectionGroup: ").Append(UserSelectionGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FieldBaseForSelectDTO);
        }

        /// <summary>
        /// Returns true if FieldBaseForSelectDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldBaseForSelectDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldBaseForSelectDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SqlSelectField == other.SqlSelectField ||
                    this.SqlSelectField != null &&
                    this.SqlSelectField.Equals(other.SqlSelectField)
                ) && 
                (
                    this.ToCalculate == other.ToCalculate ||
                    this.ToCalculate != null &&
                    this.ToCalculate.Equals(other.ToCalculate)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.Selected == other.Selected ||
                    this.Selected != null &&
                    this.Selected.Equals(other.Selected)
                ) && 
                (
                    this.FieldType == other.FieldType ||
                    this.FieldType != null &&
                    this.FieldType.Equals(other.FieldType)
                ) && 
                (
                    this.OrderBy == other.OrderBy ||
                    this.OrderBy != null &&
                    this.OrderBy.Equals(other.OrderBy)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.UserSelectionEnabled == other.UserSelectionEnabled ||
                    this.UserSelectionEnabled != null &&
                    this.UserSelectionEnabled.Equals(other.UserSelectionEnabled)
                ) && 
                (
                    this.UserSelectionGroup == other.UserSelectionGroup ||
                    this.UserSelectionGroup != null &&
                    this.UserSelectionGroup.Equals(other.UserSelectionGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SqlSelectField != null)
                    hash = hash * 59 + this.SqlSelectField.GetHashCode();
                if (this.ToCalculate != null)
                    hash = hash * 59 + this.ToCalculate.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.Selected != null)
                    hash = hash * 59 + this.Selected.GetHashCode();
                if (this.FieldType != null)
                    hash = hash * 59 + this.FieldType.GetHashCode();
                if (this.OrderBy != null)
                    hash = hash * 59 + this.OrderBy.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.UserSelectionEnabled != null)
                    hash = hash * 59 + this.UserSelectionEnabled.GetHashCode();
                if (this.UserSelectionGroup != null)
                    hash = hash * 59 + this.UserSelectionGroup.GetHashCode();
                return hash;
            }
        }
    }

}
