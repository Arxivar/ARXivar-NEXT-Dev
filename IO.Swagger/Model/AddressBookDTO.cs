/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of the adress book item
    /// </summary>
    [DataContract]
    public partial class AddressBookDTO :  IEquatable<AddressBookDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookDTO" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier of the address book.</param>
        /// <param name="BusinessName">Business name.</param>
        /// <param name="Fax">Fax number.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Location">Location.</param>
        /// <param name="PostalCode">Postal code.</param>
        /// <param name="Province">Province.</param>
        /// <param name="Country">Country.</param>
        /// <param name="Email">Enail address.</param>
        /// <param name="PhoneNumber">Phone number.</param>
        /// <param name="CellPhone">Call phone number.</param>
        /// <param name="State">Possible values:  0: Active  1: NotActive .</param>
        /// <param name="Type">Possible values:  0: User  1: Group  2: Business .</param>
        /// <param name="AddressBookCategoryId">Unique identifier of the category.</param>
        /// <param name="BusinessUnit">BusinessUnit code.</param>
        /// <param name="_Class">Class.</param>
        /// <param name="FiscalCode">Fiscal Code.</param>
        /// <param name="VatNumber">Partita Iva.</param>
        /// <param name="Priority">Possible values:  0: NoSend  1: Fax  2: Email  3: Fax_Email  4: Email_Fax  5: Fax_Plus_Mail  6: Print .</param>
        /// <param name="AddressBookBusinessUnitCode">Business Unit code for not internal user.</param>
        /// <param name="AddressBookNote">Note.</param>
        /// <param name="ExternalCode">External Code.</param>
        /// <param name="AdditionalFields">Additional fields.</param>
        /// <param name="Contacts">Contacts.</param>
        public AddressBookDTO(int? Id = default(int?), string BusinessName = default(string), string Fax = default(string), string Address = default(string), string Location = default(string), string PostalCode = default(string), string Province = default(string), string Country = default(string), string Email = default(string), string PhoneNumber = default(string), string CellPhone = default(string), int? State = default(int?), int? Type = default(int?), int? AddressBookCategoryId = default(int?), string BusinessUnit = default(string), string _Class = default(string), string FiscalCode = default(string), string VatNumber = default(string), int? Priority = default(int?), string AddressBookBusinessUnitCode = default(string), string AddressBookNote = default(string), string ExternalCode = default(string), AdditionalConcreteFields AdditionalFields = default(AdditionalConcreteFields), List<ContactDTO> Contacts = default(List<ContactDTO>))
        {
            this.Id = Id;
            this.BusinessName = BusinessName;
            this.Fax = Fax;
            this.Address = Address;
            this.Location = Location;
            this.PostalCode = PostalCode;
            this.Province = Province;
            this.Country = Country;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
            this.CellPhone = CellPhone;
            this.State = State;
            this.Type = Type;
            this.AddressBookCategoryId = AddressBookCategoryId;
            this.BusinessUnit = BusinessUnit;
            this._Class = _Class;
            this.FiscalCode = FiscalCode;
            this.VatNumber = VatNumber;
            this.Priority = Priority;
            this.AddressBookBusinessUnitCode = AddressBookBusinessUnitCode;
            this.AddressBookNote = AddressBookNote;
            this.ExternalCode = ExternalCode;
            this.AdditionalFields = AdditionalFields;
            this.Contacts = Contacts;
        }
        
        /// <summary>
        /// Unique identifier of the address book
        /// </summary>
        /// <value>Unique identifier of the address book</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Business name
        /// </summary>
        /// <value>Business name</value>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Fax number
        /// </summary>
        /// <value>Fax number</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Address
        /// </summary>
        /// <value>Address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Location
        /// </summary>
        /// <value>Location</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Province
        /// </summary>
        /// <value>Province</value>
        [DataMember(Name="province", EmitDefaultValue=false)]
        public string Province { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Enail address
        /// </summary>
        /// <value>Enail address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Call phone number
        /// </summary>
        /// <value>Call phone number</value>
        [DataMember(Name="cellPhone", EmitDefaultValue=false)]
        public string CellPhone { get; set; }

        /// <summary>
        /// Possible values:  0: Active  1: NotActive 
        /// </summary>
        /// <value>Possible values:  0: Active  1: NotActive </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Possible values:  0: User  1: Group  2: Business 
        /// </summary>
        /// <value>Possible values:  0: User  1: Group  2: Business </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Unique identifier of the category
        /// </summary>
        /// <value>Unique identifier of the category</value>
        [DataMember(Name="addressBookCategoryId", EmitDefaultValue=false)]
        public int? AddressBookCategoryId { get; set; }

        /// <summary>
        /// BusinessUnit code
        /// </summary>
        /// <value>BusinessUnit code</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Class
        /// </summary>
        /// <value>Class</value>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// Fiscal Code
        /// </summary>
        /// <value>Fiscal Code</value>
        [DataMember(Name="fiscalCode", EmitDefaultValue=false)]
        public string FiscalCode { get; set; }

        /// <summary>
        /// Partita Iva
        /// </summary>
        /// <value>Partita Iva</value>
        [DataMember(Name="vatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Possible values:  0: NoSend  1: Fax  2: Email  3: Fax_Email  4: Email_Fax  5: Fax_Plus_Mail  6: Print 
        /// </summary>
        /// <value>Possible values:  0: NoSend  1: Fax  2: Email  3: Fax_Email  4: Email_Fax  5: Fax_Plus_Mail  6: Print </value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Business Unit code for not internal user
        /// </summary>
        /// <value>Business Unit code for not internal user</value>
        [DataMember(Name="addressBookBusinessUnitCode", EmitDefaultValue=false)]
        public string AddressBookBusinessUnitCode { get; set; }

        /// <summary>
        /// Note
        /// </summary>
        /// <value>Note</value>
        [DataMember(Name="addressBookNote", EmitDefaultValue=false)]
        public string AddressBookNote { get; set; }

        /// <summary>
        /// External Code
        /// </summary>
        /// <value>External Code</value>
        [DataMember(Name="externalCode", EmitDefaultValue=false)]
        public string ExternalCode { get; set; }

        /// <summary>
        /// Additional fields
        /// </summary>
        /// <value>Additional fields</value>
        [DataMember(Name="additionalFields", EmitDefaultValue=false)]
        public AdditionalConcreteFields AdditionalFields { get; set; }

        /// <summary>
        /// Contacts
        /// </summary>
        /// <value>Contacts</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ContactDTO> Contacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressBookDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  CellPhone: ").Append(CellPhone).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AddressBookCategoryId: ").Append(AddressBookCategoryId).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  FiscalCode: ").Append(FiscalCode).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  AddressBookBusinessUnitCode: ").Append(AddressBookBusinessUnitCode).Append("\n");
            sb.Append("  AddressBookNote: ").Append(AddressBookNote).Append("\n");
            sb.Append("  ExternalCode: ").Append(ExternalCode).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressBookDTO);
        }

        /// <summary>
        /// Returns true if AddressBookDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressBookDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressBookDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.CellPhone == input.CellPhone ||
                    (this.CellPhone != null &&
                    this.CellPhone.Equals(input.CellPhone))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AddressBookCategoryId == input.AddressBookCategoryId ||
                    (this.AddressBookCategoryId != null &&
                    this.AddressBookCategoryId.Equals(input.AddressBookCategoryId))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this._Class == input._Class ||
                    (this._Class != null &&
                    this._Class.Equals(input._Class))
                ) && 
                (
                    this.FiscalCode == input.FiscalCode ||
                    (this.FiscalCode != null &&
                    this.FiscalCode.Equals(input.FiscalCode))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.AddressBookBusinessUnitCode == input.AddressBookBusinessUnitCode ||
                    (this.AddressBookBusinessUnitCode != null &&
                    this.AddressBookBusinessUnitCode.Equals(input.AddressBookBusinessUnitCode))
                ) && 
                (
                    this.AddressBookNote == input.AddressBookNote ||
                    (this.AddressBookNote != null &&
                    this.AddressBookNote.Equals(input.AddressBookNote))
                ) && 
                (
                    this.ExternalCode == input.ExternalCode ||
                    (this.ExternalCode != null &&
                    this.ExternalCode.Equals(input.ExternalCode))
                ) && 
                (
                    this.AdditionalFields == input.AdditionalFields ||
                    (this.AdditionalFields != null &&
                    this.AdditionalFields.Equals(input.AdditionalFields))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.CellPhone != null)
                    hashCode = hashCode * 59 + this.CellPhone.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AddressBookCategoryId != null)
                    hashCode = hashCode * 59 + this.AddressBookCategoryId.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this._Class != null)
                    hashCode = hashCode * 59 + this._Class.GetHashCode();
                if (this.FiscalCode != null)
                    hashCode = hashCode * 59 + this.FiscalCode.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.AddressBookBusinessUnitCode != null)
                    hashCode = hashCode * 59 + this.AddressBookBusinessUnitCode.GetHashCode();
                if (this.AddressBookNote != null)
                    hashCode = hashCode * 59 + this.AddressBookNote.GetHashCode();
                if (this.ExternalCode != null)
                    hashCode = hashCode * 59 + this.ExternalCode.GetHashCode();
                if (this.AdditionalFields != null)
                    hashCode = hashCode * 59 + this.AdditionalFields.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
