/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of search
    /// </summary>
    [DataContract]
    public partial class SearchConcreteDTO :  IEquatable<SearchConcreteDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConcreteDTO" /> class.
        /// </summary>
        /// <param name="DaAAndOr">Possible values:  0: And  1: Or .</param>
        /// <param name="ContactFields">Contact Fields.</param>
        /// <param name="AooField">Business Unit.</param>
        /// <param name="DocumentTypeField">Document Type.</param>
        /// <param name="ProtocolField">Protocol.</param>
        /// <param name="ConservationField">Conservation.</param>
        /// <param name="StampField">Stamp.</param>
        /// <param name="DateTimeFields">List of fields of type &#39;Datetime&#39;.</param>
        /// <param name="StringFields">List of fields of type &#39;String&#39;.</param>
        /// <param name="IntFields">List of fields of type &#39;Integer&#39;.</param>
        /// <param name="BoolFields">List of fields of type &#39;Boolean&#39;.</param>
        /// <param name="DoubleFields">List of fields of type &#39;Decimal&#39;.</param>
        /// <param name="StringListFields">List of fields of type &#39;List&#39;.</param>
        /// <param name="GroupFields">List of fields of type &#39;Group&#39;.</param>
        public SearchConcreteDTO(int? DaAAndOr = default(int?), List<FieldBaseForSearchContactDto> ContactFields = default(List<FieldBaseForSearchContactDto>), FieldBaseForSearchAooDto AooField = default(FieldBaseForSearchAooDto), FieldBaseForSearchDocumentTypeDto DocumentTypeField = default(FieldBaseForSearchDocumentTypeDto), FieldBaseForSearchProtocolloDto ProtocolField = default(FieldBaseForSearchProtocolloDto), FieldBaseForSearchConservazioneDto ConservationField = default(FieldBaseForSearchConservazioneDto), FieldBaseForSearchStampDto StampField = default(FieldBaseForSearchStampDto), List<FieldBaseForSearchDateTimeDto> DateTimeFields = default(List<FieldBaseForSearchDateTimeDto>), List<FieldBaseForSearchStringDto> StringFields = default(List<FieldBaseForSearchStringDto>), List<FieldBaseForSearchIntDto> IntFields = default(List<FieldBaseForSearchIntDto>), List<FieldBaseForSearchBoolDto> BoolFields = default(List<FieldBaseForSearchBoolDto>), List<FieldBaseForSearchDoubleDto> DoubleFields = default(List<FieldBaseForSearchDoubleDto>), List<FieldBaseForSearchListDto> StringListFields = default(List<FieldBaseForSearchListDto>), List<FieldBaseForSearchDTO> GroupFields = default(List<FieldBaseForSearchDTO>))
        {
            this.DaAAndOr = DaAAndOr;
            this.ContactFields = ContactFields;
            this.AooField = AooField;
            this.DocumentTypeField = DocumentTypeField;
            this.ProtocolField = ProtocolField;
            this.ConservationField = ConservationField;
            this.StampField = StampField;
            this.DateTimeFields = DateTimeFields;
            this.StringFields = StringFields;
            this.IntFields = IntFields;
            this.BoolFields = BoolFields;
            this.DoubleFields = DoubleFields;
            this.StringListFields = StringListFields;
            this.GroupFields = GroupFields;
        }
        
        /// <summary>
        /// Possible values:  0: And  1: Or 
        /// </summary>
        /// <value>Possible values:  0: And  1: Or </value>
        [DataMember(Name="daAAndOr", EmitDefaultValue=false)]
        public int? DaAAndOr { get; set; }

        /// <summary>
        /// Contact Fields
        /// </summary>
        /// <value>Contact Fields</value>
        [DataMember(Name="contactFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchContactDto> ContactFields { get; set; }

        /// <summary>
        /// Business Unit
        /// </summary>
        /// <value>Business Unit</value>
        [DataMember(Name="aooField", EmitDefaultValue=false)]
        public FieldBaseForSearchAooDto AooField { get; set; }

        /// <summary>
        /// Document Type
        /// </summary>
        /// <value>Document Type</value>
        [DataMember(Name="documentTypeField", EmitDefaultValue=false)]
        public FieldBaseForSearchDocumentTypeDto DocumentTypeField { get; set; }

        /// <summary>
        /// Protocol
        /// </summary>
        /// <value>Protocol</value>
        [DataMember(Name="protocolField", EmitDefaultValue=false)]
        public FieldBaseForSearchProtocolloDto ProtocolField { get; set; }

        /// <summary>
        /// Conservation
        /// </summary>
        /// <value>Conservation</value>
        [DataMember(Name="conservationField", EmitDefaultValue=false)]
        public FieldBaseForSearchConservazioneDto ConservationField { get; set; }

        /// <summary>
        /// Stamp
        /// </summary>
        /// <value>Stamp</value>
        [DataMember(Name="stampField", EmitDefaultValue=false)]
        public FieldBaseForSearchStampDto StampField { get; set; }

        /// <summary>
        /// List of fields of type &#39;Datetime&#39;
        /// </summary>
        /// <value>List of fields of type &#39;Datetime&#39;</value>
        [DataMember(Name="dateTimeFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchDateTimeDto> DateTimeFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;String&#39;
        /// </summary>
        /// <value>List of fields of type &#39;String&#39;</value>
        [DataMember(Name="stringFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchStringDto> StringFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;Integer&#39;
        /// </summary>
        /// <value>List of fields of type &#39;Integer&#39;</value>
        [DataMember(Name="intFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchIntDto> IntFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;Boolean&#39;
        /// </summary>
        /// <value>List of fields of type &#39;Boolean&#39;</value>
        [DataMember(Name="boolFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchBoolDto> BoolFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;Decimal&#39;
        /// </summary>
        /// <value>List of fields of type &#39;Decimal&#39;</value>
        [DataMember(Name="doubleFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchDoubleDto> DoubleFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;List&#39;
        /// </summary>
        /// <value>List of fields of type &#39;List&#39;</value>
        [DataMember(Name="stringListFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchListDto> StringListFields { get; set; }

        /// <summary>
        /// List of fields of type &#39;Group&#39;
        /// </summary>
        /// <value>List of fields of type &#39;Group&#39;</value>
        [DataMember(Name="groupFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchDTO> GroupFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchConcreteDTO {\n");
            sb.Append("  DaAAndOr: ").Append(DaAAndOr).Append("\n");
            sb.Append("  ContactFields: ").Append(ContactFields).Append("\n");
            sb.Append("  AooField: ").Append(AooField).Append("\n");
            sb.Append("  DocumentTypeField: ").Append(DocumentTypeField).Append("\n");
            sb.Append("  ProtocolField: ").Append(ProtocolField).Append("\n");
            sb.Append("  ConservationField: ").Append(ConservationField).Append("\n");
            sb.Append("  StampField: ").Append(StampField).Append("\n");
            sb.Append("  DateTimeFields: ").Append(DateTimeFields).Append("\n");
            sb.Append("  StringFields: ").Append(StringFields).Append("\n");
            sb.Append("  IntFields: ").Append(IntFields).Append("\n");
            sb.Append("  BoolFields: ").Append(BoolFields).Append("\n");
            sb.Append("  DoubleFields: ").Append(DoubleFields).Append("\n");
            sb.Append("  StringListFields: ").Append(StringListFields).Append("\n");
            sb.Append("  GroupFields: ").Append(GroupFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchConcreteDTO);
        }

        /// <summary>
        /// Returns true if SearchConcreteDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchConcreteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchConcreteDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DaAAndOr == input.DaAAndOr ||
                    (this.DaAAndOr != null &&
                    this.DaAAndOr.Equals(input.DaAAndOr))
                ) && 
                (
                    this.ContactFields == input.ContactFields ||
                    this.ContactFields != null &&
                    this.ContactFields.SequenceEqual(input.ContactFields)
                ) && 
                (
                    this.AooField == input.AooField ||
                    (this.AooField != null &&
                    this.AooField.Equals(input.AooField))
                ) && 
                (
                    this.DocumentTypeField == input.DocumentTypeField ||
                    (this.DocumentTypeField != null &&
                    this.DocumentTypeField.Equals(input.DocumentTypeField))
                ) && 
                (
                    this.ProtocolField == input.ProtocolField ||
                    (this.ProtocolField != null &&
                    this.ProtocolField.Equals(input.ProtocolField))
                ) && 
                (
                    this.ConservationField == input.ConservationField ||
                    (this.ConservationField != null &&
                    this.ConservationField.Equals(input.ConservationField))
                ) && 
                (
                    this.StampField == input.StampField ||
                    (this.StampField != null &&
                    this.StampField.Equals(input.StampField))
                ) && 
                (
                    this.DateTimeFields == input.DateTimeFields ||
                    this.DateTimeFields != null &&
                    this.DateTimeFields.SequenceEqual(input.DateTimeFields)
                ) && 
                (
                    this.StringFields == input.StringFields ||
                    this.StringFields != null &&
                    this.StringFields.SequenceEqual(input.StringFields)
                ) && 
                (
                    this.IntFields == input.IntFields ||
                    this.IntFields != null &&
                    this.IntFields.SequenceEqual(input.IntFields)
                ) && 
                (
                    this.BoolFields == input.BoolFields ||
                    this.BoolFields != null &&
                    this.BoolFields.SequenceEqual(input.BoolFields)
                ) && 
                (
                    this.DoubleFields == input.DoubleFields ||
                    this.DoubleFields != null &&
                    this.DoubleFields.SequenceEqual(input.DoubleFields)
                ) && 
                (
                    this.StringListFields == input.StringListFields ||
                    this.StringListFields != null &&
                    this.StringListFields.SequenceEqual(input.StringListFields)
                ) && 
                (
                    this.GroupFields == input.GroupFields ||
                    this.GroupFields != null &&
                    this.GroupFields.SequenceEqual(input.GroupFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DaAAndOr != null)
                    hashCode = hashCode * 59 + this.DaAAndOr.GetHashCode();
                if (this.ContactFields != null)
                    hashCode = hashCode * 59 + this.ContactFields.GetHashCode();
                if (this.AooField != null)
                    hashCode = hashCode * 59 + this.AooField.GetHashCode();
                if (this.DocumentTypeField != null)
                    hashCode = hashCode * 59 + this.DocumentTypeField.GetHashCode();
                if (this.ProtocolField != null)
                    hashCode = hashCode * 59 + this.ProtocolField.GetHashCode();
                if (this.ConservationField != null)
                    hashCode = hashCode * 59 + this.ConservationField.GetHashCode();
                if (this.StampField != null)
                    hashCode = hashCode * 59 + this.StampField.GetHashCode();
                if (this.DateTimeFields != null)
                    hashCode = hashCode * 59 + this.DateTimeFields.GetHashCode();
                if (this.StringFields != null)
                    hashCode = hashCode * 59 + this.StringFields.GetHashCode();
                if (this.IntFields != null)
                    hashCode = hashCode * 59 + this.IntFields.GetHashCode();
                if (this.BoolFields != null)
                    hashCode = hashCode * 59 + this.BoolFields.GetHashCode();
                if (this.DoubleFields != null)
                    hashCode = hashCode * 59 + this.DoubleFields.GetHashCode();
                if (this.StringListFields != null)
                    hashCode = hashCode * 59 + this.StringListFields.GetHashCode();
                if (this.GroupFields != null)
                    hashCode = hashCode * 59 + this.GroupFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
