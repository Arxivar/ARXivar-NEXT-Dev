/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dto for possible conclusion of a taskwork
    /// </summary>
    [DataContract]
    public partial class CloseEligibleResult :  IEquatable<CloseEligibleResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseEligibleResult" /> class.
        /// </summary>
        /// <param name="TaskWorkId">TaskWork id.</param>
        /// <param name="EligibleToClose">TaskWork can closed.</param>
        /// <param name="ErrorMEssage">Optional message if tarsWork is not concludible.</param>
        public CloseEligibleResult(int? TaskWorkId = null, bool? EligibleToClose = null, string ErrorMEssage = null)
        {
            this.TaskWorkId = TaskWorkId;
            this.EligibleToClose = EligibleToClose;
            this.ErrorMEssage = ErrorMEssage;
        }
        
        /// <summary>
        /// TaskWork id
        /// </summary>
        /// <value>TaskWork id</value>
        [DataMember(Name="taskWorkId", EmitDefaultValue=false)]
        public int? TaskWorkId { get; set; }
        /// <summary>
        /// TaskWork can closed
        /// </summary>
        /// <value>TaskWork can closed</value>
        [DataMember(Name="eligibleToClose", EmitDefaultValue=false)]
        public bool? EligibleToClose { get; set; }
        /// <summary>
        /// Optional message if tarsWork is not concludible
        /// </summary>
        /// <value>Optional message if tarsWork is not concludible</value>
        [DataMember(Name="errorMEssage", EmitDefaultValue=false)]
        public string ErrorMEssage { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloseEligibleResult {\n");
            sb.Append("  TaskWorkId: ").Append(TaskWorkId).Append("\n");
            sb.Append("  EligibleToClose: ").Append(EligibleToClose).Append("\n");
            sb.Append("  ErrorMEssage: ").Append(ErrorMEssage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CloseEligibleResult);
        }

        /// <summary>
        /// Returns true if CloseEligibleResult instances are equal
        /// </summary>
        /// <param name="other">Instance of CloseEligibleResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloseEligibleResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaskWorkId == other.TaskWorkId ||
                    this.TaskWorkId != null &&
                    this.TaskWorkId.Equals(other.TaskWorkId)
                ) && 
                (
                    this.EligibleToClose == other.EligibleToClose ||
                    this.EligibleToClose != null &&
                    this.EligibleToClose.Equals(other.EligibleToClose)
                ) && 
                (
                    this.ErrorMEssage == other.ErrorMEssage ||
                    this.ErrorMEssage != null &&
                    this.ErrorMEssage.Equals(other.ErrorMEssage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaskWorkId != null)
                    hash = hash * 59 + this.TaskWorkId.GetHashCode();
                if (this.EligibleToClose != null)
                    hash = hash * 59 + this.EligibleToClose.GetHashCode();
                if (this.ErrorMEssage != null)
                    hash = hash * 59 + this.ErrorMEssage.GetHashCode();
                return hash;
            }
        }
    }

}
