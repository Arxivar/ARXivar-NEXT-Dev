/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of devise
    /// </summary>
    [DataContract]
    public partial class DeviceDTO :  IEquatable<DeviceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDTO" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Date">Date.</param>
        /// <param name="UserId">User Identifier.</param>
        /// <param name="Capacity">Capacity.</param>
        /// <param name="QtyFile">Files Quantity.</param>
        /// <param name="CpaFile">CPA file.</param>
        /// <param name="Type">Possible values:  0: Conservazione  1: Outsourcing  2: ExternalEngine .</param>
        /// <param name="Unit">Unit.</param>
        /// <param name="Description">Description.</param>
        /// <param name="_Operator">Operator.</param>
        /// <param name="CodFisOp">Fiscal Code Operator.</param>
        /// <param name="RespAos">Person in charge about Aos.</param>
        /// <param name="PubBuff">PubBuff.</param>
        /// <param name="CodFisPu">Fiscal Code Public.</param>
        /// <param name="Comment">Comment of volume.</param>
        /// <param name="Label">Label.</param>
        /// <param name="ExpDateMt">Expiry Time Stamp.</param>
        /// <param name="IsLul">Single Book Class of Job.</param>
        /// <param name="LinkedVol">Last volume for the single book class document.</param>
        /// <param name="Aoo">Business Unit.</param>
        /// <param name="ScheduledVolumId">Last Scheduled Volume.</param>
        public DeviceDTO(string Name = default(string), DateTime? Date = default(DateTime?), int? UserId = default(int?), int? Capacity = default(int?), int? QtyFile = default(int?), int? CpaFile = default(int?), int? Type = default(int?), string Unit = default(string), string Description = default(string), string _Operator = default(string), string CodFisOp = default(string), string RespAos = default(string), string PubBuff = default(string), string CodFisPu = default(string), string Comment = default(string), string Label = default(string), DateTime? ExpDateMt = default(DateTime?), bool? IsLul = default(bool?), string LinkedVol = default(string), string Aoo = default(string), string ScheduledVolumId = default(string))
        {
            this.Name = Name;
            this.Date = Date;
            this.UserId = UserId;
            this.Capacity = Capacity;
            this.QtyFile = QtyFile;
            this.CpaFile = CpaFile;
            this.Type = Type;
            this.Unit = Unit;
            this.Description = Description;
            this._Operator = _Operator;
            this.CodFisOp = CodFisOp;
            this.RespAos = RespAos;
            this.PubBuff = PubBuff;
            this.CodFisPu = CodFisPu;
            this.Comment = Comment;
            this.Label = Label;
            this.ExpDateMt = ExpDateMt;
            this.IsLul = IsLul;
            this.LinkedVol = LinkedVol;
            this.Aoo = Aoo;
            this.ScheduledVolumId = ScheduledVolumId;
        }
        
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Date
        /// </summary>
        /// <value>Date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// User Identifier
        /// </summary>
        /// <value>User Identifier</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Capacity
        /// </summary>
        /// <value>Capacity</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Files Quantity
        /// </summary>
        /// <value>Files Quantity</value>
        [DataMember(Name="qtyFile", EmitDefaultValue=false)]
        public int? QtyFile { get; set; }

        /// <summary>
        /// CPA file
        /// </summary>
        /// <value>CPA file</value>
        [DataMember(Name="cpaFile", EmitDefaultValue=false)]
        public int? CpaFile { get; set; }

        /// <summary>
        /// Possible values:  0: Conservazione  1: Outsourcing  2: ExternalEngine 
        /// </summary>
        /// <value>Possible values:  0: Conservazione  1: Outsourcing  2: ExternalEngine </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Unit
        /// </summary>
        /// <value>Unit</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Operator
        /// </summary>
        /// <value>Operator</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string _Operator { get; set; }

        /// <summary>
        /// Fiscal Code Operator
        /// </summary>
        /// <value>Fiscal Code Operator</value>
        [DataMember(Name="codFisOp", EmitDefaultValue=false)]
        public string CodFisOp { get; set; }

        /// <summary>
        /// Person in charge about Aos
        /// </summary>
        /// <value>Person in charge about Aos</value>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public string RespAos { get; set; }

        /// <summary>
        /// PubBuff
        /// </summary>
        /// <value>PubBuff</value>
        [DataMember(Name="pubBuff", EmitDefaultValue=false)]
        public string PubBuff { get; set; }

        /// <summary>
        /// Fiscal Code Public
        /// </summary>
        /// <value>Fiscal Code Public</value>
        [DataMember(Name="codFisPu", EmitDefaultValue=false)]
        public string CodFisPu { get; set; }

        /// <summary>
        /// Comment of volume
        /// </summary>
        /// <value>Comment of volume</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Expiry Time Stamp
        /// </summary>
        /// <value>Expiry Time Stamp</value>
        [DataMember(Name="expDateMt", EmitDefaultValue=false)]
        public DateTime? ExpDateMt { get; set; }

        /// <summary>
        /// Single Book Class of Job
        /// </summary>
        /// <value>Single Book Class of Job</value>
        [DataMember(Name="isLul", EmitDefaultValue=false)]
        public bool? IsLul { get; set; }

        /// <summary>
        /// Last volume for the single book class document
        /// </summary>
        /// <value>Last volume for the single book class document</value>
        [DataMember(Name="linkedVol", EmitDefaultValue=false)]
        public string LinkedVol { get; set; }

        /// <summary>
        /// Business Unit
        /// </summary>
        /// <value>Business Unit</value>
        [DataMember(Name="aoo", EmitDefaultValue=false)]
        public string Aoo { get; set; }

        /// <summary>
        /// Last Scheduled Volume
        /// </summary>
        /// <value>Last Scheduled Volume</value>
        [DataMember(Name="scheduledVolumId", EmitDefaultValue=false)]
        public string ScheduledVolumId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  QtyFile: ").Append(QtyFile).Append("\n");
            sb.Append("  CpaFile: ").Append(CpaFile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  CodFisOp: ").Append(CodFisOp).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  PubBuff: ").Append(PubBuff).Append("\n");
            sb.Append("  CodFisPu: ").Append(CodFisPu).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ExpDateMt: ").Append(ExpDateMt).Append("\n");
            sb.Append("  IsLul: ").Append(IsLul).Append("\n");
            sb.Append("  LinkedVol: ").Append(LinkedVol).Append("\n");
            sb.Append("  Aoo: ").Append(Aoo).Append("\n");
            sb.Append("  ScheduledVolumId: ").Append(ScheduledVolumId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceDTO);
        }

        /// <summary>
        /// Returns true if DeviceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.QtyFile == input.QtyFile ||
                    (this.QtyFile != null &&
                    this.QtyFile.Equals(input.QtyFile))
                ) && 
                (
                    this.CpaFile == input.CpaFile ||
                    (this.CpaFile != null &&
                    this.CpaFile.Equals(input.CpaFile))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) && 
                (
                    this.CodFisOp == input.CodFisOp ||
                    (this.CodFisOp != null &&
                    this.CodFisOp.Equals(input.CodFisOp))
                ) && 
                (
                    this.RespAos == input.RespAos ||
                    (this.RespAos != null &&
                    this.RespAos.Equals(input.RespAos))
                ) && 
                (
                    this.PubBuff == input.PubBuff ||
                    (this.PubBuff != null &&
                    this.PubBuff.Equals(input.PubBuff))
                ) && 
                (
                    this.CodFisPu == input.CodFisPu ||
                    (this.CodFisPu != null &&
                    this.CodFisPu.Equals(input.CodFisPu))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.ExpDateMt == input.ExpDateMt ||
                    (this.ExpDateMt != null &&
                    this.ExpDateMt.Equals(input.ExpDateMt))
                ) && 
                (
                    this.IsLul == input.IsLul ||
                    (this.IsLul != null &&
                    this.IsLul.Equals(input.IsLul))
                ) && 
                (
                    this.LinkedVol == input.LinkedVol ||
                    (this.LinkedVol != null &&
                    this.LinkedVol.Equals(input.LinkedVol))
                ) && 
                (
                    this.Aoo == input.Aoo ||
                    (this.Aoo != null &&
                    this.Aoo.Equals(input.Aoo))
                ) && 
                (
                    this.ScheduledVolumId == input.ScheduledVolumId ||
                    (this.ScheduledVolumId != null &&
                    this.ScheduledVolumId.Equals(input.ScheduledVolumId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                if (this.QtyFile != null)
                    hashCode = hashCode * 59 + this.QtyFile.GetHashCode();
                if (this.CpaFile != null)
                    hashCode = hashCode * 59 + this.CpaFile.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.CodFisOp != null)
                    hashCode = hashCode * 59 + this.CodFisOp.GetHashCode();
                if (this.RespAos != null)
                    hashCode = hashCode * 59 + this.RespAos.GetHashCode();
                if (this.PubBuff != null)
                    hashCode = hashCode * 59 + this.PubBuff.GetHashCode();
                if (this.CodFisPu != null)
                    hashCode = hashCode * 59 + this.CodFisPu.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.ExpDateMt != null)
                    hashCode = hashCode * 59 + this.ExpDateMt.GetHashCode();
                if (this.IsLul != null)
                    hashCode = hashCode * 59 + this.IsLul.GetHashCode();
                if (this.LinkedVol != null)
                    hashCode = hashCode * 59 + this.LinkedVol.GetHashCode();
                if (this.Aoo != null)
                    hashCode = hashCode * 59 + this.Aoo.GetHashCode();
                if (this.ScheduledVolumId != null)
                    hashCode = hashCode * 59 + this.ScheduledVolumId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
