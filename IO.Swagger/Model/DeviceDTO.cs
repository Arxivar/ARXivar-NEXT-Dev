/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DeviceDTO
    /// </summary>
    [DataContract]
    public partial class DeviceDTO :  IEquatable<DeviceDTO>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Conservazione for "Conservazione"
            /// </summary>
            [EnumMember(Value = "Conservazione")]
            Conservazione,
            
            /// <summary>
            /// Enum Outsourcing for "Outsourcing"
            /// </summary>
            [EnumMember(Value = "Outsourcing")]
            Outsourcing,
            
            /// <summary>
            /// Enum ExternalEngine for "ExternalEngine"
            /// </summary>
            [EnumMember(Value = "ExternalEngine")]
            ExternalEngine
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDTO" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Date">Date.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="Capacity">Capacity.</param>
        /// <param name="QtyFile">QtyFile.</param>
        /// <param name="CpaFile">CpaFile.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Unit">Unit.</param>
        /// <param name="Description">Description.</param>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="CodFisOp">CodFisOp.</param>
        /// <param name="RespAos">RespAos.</param>
        /// <param name="PubBuff">PubBuff.</param>
        /// <param name="CodFisPu">CodFisPu.</param>
        /// <param name="Comment">Comment.</param>
        /// <param name="Label">Label.</param>
        /// <param name="ExpDateMt">ExpDateMt.</param>
        /// <param name="IsLul">IsLul.</param>
        /// <param name="LinkedVol">LinkedVol.</param>
        /// <param name="Aoo">Aoo.</param>
        /// <param name="ScheduledVolumId">ScheduledVolumId.</param>
        public DeviceDTO(string Name = null, DateTime? Date = null, int? UserId = null, int? Capacity = null, int? QtyFile = null, int? CpaFile = null, TypeEnum? Type = null, string Unit = null, string Description = null, string _Operator = null, string CodFisOp = null, string RespAos = null, string PubBuff = null, string CodFisPu = null, string Comment = null, string Label = null, DateTime? ExpDateMt = null, bool? IsLul = null, string LinkedVol = null, string Aoo = null, string ScheduledVolumId = null)
        {
            this.Name = Name;
            this.Date = Date;
            this.UserId = UserId;
            this.Capacity = Capacity;
            this.QtyFile = QtyFile;
            this.CpaFile = CpaFile;
            this.Type = Type;
            this.Unit = Unit;
            this.Description = Description;
            this._Operator = _Operator;
            this.CodFisOp = CodFisOp;
            this.RespAos = RespAos;
            this.PubBuff = PubBuff;
            this.CodFisPu = CodFisPu;
            this.Comment = Comment;
            this.Label = Label;
            this.ExpDateMt = ExpDateMt;
            this.IsLul = IsLul;
            this.LinkedVol = LinkedVol;
            this.Aoo = Aoo;
            this.ScheduledVolumId = ScheduledVolumId;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public int? Capacity { get; set; }
        /// <summary>
        /// Gets or Sets QtyFile
        /// </summary>
        [DataMember(Name="qtyFile", EmitDefaultValue=false)]
        public int? QtyFile { get; set; }
        /// <summary>
        /// Gets or Sets CpaFile
        /// </summary>
        [DataMember(Name="cpaFile", EmitDefaultValue=false)]
        public int? CpaFile { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string _Operator { get; set; }
        /// <summary>
        /// Gets or Sets CodFisOp
        /// </summary>
        [DataMember(Name="codFisOp", EmitDefaultValue=false)]
        public string CodFisOp { get; set; }
        /// <summary>
        /// Gets or Sets RespAos
        /// </summary>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public string RespAos { get; set; }
        /// <summary>
        /// Gets or Sets PubBuff
        /// </summary>
        [DataMember(Name="pubBuff", EmitDefaultValue=false)]
        public string PubBuff { get; set; }
        /// <summary>
        /// Gets or Sets CodFisPu
        /// </summary>
        [DataMember(Name="codFisPu", EmitDefaultValue=false)]
        public string CodFisPu { get; set; }
        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets ExpDateMt
        /// </summary>
        [DataMember(Name="expDateMt", EmitDefaultValue=false)]
        public DateTime? ExpDateMt { get; set; }
        /// <summary>
        /// Gets or Sets IsLul
        /// </summary>
        [DataMember(Name="isLul", EmitDefaultValue=false)]
        public bool? IsLul { get; set; }
        /// <summary>
        /// Gets or Sets LinkedVol
        /// </summary>
        [DataMember(Name="linkedVol", EmitDefaultValue=false)]
        public string LinkedVol { get; set; }
        /// <summary>
        /// Gets or Sets Aoo
        /// </summary>
        [DataMember(Name="aoo", EmitDefaultValue=false)]
        public string Aoo { get; set; }
        /// <summary>
        /// Gets or Sets ScheduledVolumId
        /// </summary>
        [DataMember(Name="scheduledVolumId", EmitDefaultValue=false)]
        public string ScheduledVolumId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  QtyFile: ").Append(QtyFile).Append("\n");
            sb.Append("  CpaFile: ").Append(CpaFile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  CodFisOp: ").Append(CodFisOp).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  PubBuff: ").Append(PubBuff).Append("\n");
            sb.Append("  CodFisPu: ").Append(CodFisPu).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ExpDateMt: ").Append(ExpDateMt).Append("\n");
            sb.Append("  IsLul: ").Append(IsLul).Append("\n");
            sb.Append("  LinkedVol: ").Append(LinkedVol).Append("\n");
            sb.Append("  Aoo: ").Append(Aoo).Append("\n");
            sb.Append("  ScheduledVolumId: ").Append(ScheduledVolumId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceDTO);
        }

        /// <summary>
        /// Returns true if DeviceDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Capacity == other.Capacity ||
                    this.Capacity != null &&
                    this.Capacity.Equals(other.Capacity)
                ) && 
                (
                    this.QtyFile == other.QtyFile ||
                    this.QtyFile != null &&
                    this.QtyFile.Equals(other.QtyFile)
                ) && 
                (
                    this.CpaFile == other.CpaFile ||
                    this.CpaFile != null &&
                    this.CpaFile.Equals(other.CpaFile)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this._Operator == other._Operator ||
                    this._Operator != null &&
                    this._Operator.Equals(other._Operator)
                ) && 
                (
                    this.CodFisOp == other.CodFisOp ||
                    this.CodFisOp != null &&
                    this.CodFisOp.Equals(other.CodFisOp)
                ) && 
                (
                    this.RespAos == other.RespAos ||
                    this.RespAos != null &&
                    this.RespAos.Equals(other.RespAos)
                ) && 
                (
                    this.PubBuff == other.PubBuff ||
                    this.PubBuff != null &&
                    this.PubBuff.Equals(other.PubBuff)
                ) && 
                (
                    this.CodFisPu == other.CodFisPu ||
                    this.CodFisPu != null &&
                    this.CodFisPu.Equals(other.CodFisPu)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.ExpDateMt == other.ExpDateMt ||
                    this.ExpDateMt != null &&
                    this.ExpDateMt.Equals(other.ExpDateMt)
                ) && 
                (
                    this.IsLul == other.IsLul ||
                    this.IsLul != null &&
                    this.IsLul.Equals(other.IsLul)
                ) && 
                (
                    this.LinkedVol == other.LinkedVol ||
                    this.LinkedVol != null &&
                    this.LinkedVol.Equals(other.LinkedVol)
                ) && 
                (
                    this.Aoo == other.Aoo ||
                    this.Aoo != null &&
                    this.Aoo.Equals(other.Aoo)
                ) && 
                (
                    this.ScheduledVolumId == other.ScheduledVolumId ||
                    this.ScheduledVolumId != null &&
                    this.ScheduledVolumId.Equals(other.ScheduledVolumId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Capacity != null)
                    hash = hash * 59 + this.Capacity.GetHashCode();
                if (this.QtyFile != null)
                    hash = hash * 59 + this.QtyFile.GetHashCode();
                if (this.CpaFile != null)
                    hash = hash * 59 + this.CpaFile.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this._Operator != null)
                    hash = hash * 59 + this._Operator.GetHashCode();
                if (this.CodFisOp != null)
                    hash = hash * 59 + this.CodFisOp.GetHashCode();
                if (this.RespAos != null)
                    hash = hash * 59 + this.RespAos.GetHashCode();
                if (this.PubBuff != null)
                    hash = hash * 59 + this.PubBuff.GetHashCode();
                if (this.CodFisPu != null)
                    hash = hash * 59 + this.CodFisPu.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.ExpDateMt != null)
                    hash = hash * 59 + this.ExpDateMt.GetHashCode();
                if (this.IsLul != null)
                    hash = hash * 59 + this.IsLul.GetHashCode();
                if (this.LinkedVol != null)
                    hash = hash * 59 + this.LinkedVol.GetHashCode();
                if (this.Aoo != null)
                    hash = hash * 59 + this.Aoo.GetHashCode();
                if (this.ScheduledVolumId != null)
                    hash = hash * 59 + this.ScheduledVolumId.GetHashCode();
                return hash;
            }
        }
    }

}
