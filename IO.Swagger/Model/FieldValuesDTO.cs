/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldValuesDTO
    /// </summary>
    [DataContract]
    public partial class FieldValuesDTO :  IEquatable<FieldValuesDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValuesDTO" /> class.
        /// </summary>
        /// <param name="KeyField">KeyField.</param>
        /// <param name="SelectField">SelectField.</param>
        /// <param name="Associations">Associations.</param>
        /// <param name="FieldName">FieldName.</param>
        /// <param name="DataSource">DataSource.</param>
        public FieldValuesDTO(string KeyField = null, string SelectField = null, Dictionary<string, string> Associations = null, string FieldName = null, List<RowSearchResult> DataSource = null)
        {
            this.KeyField = KeyField;
            this.SelectField = SelectField;
            this.Associations = Associations;
            this.FieldName = FieldName;
            this.DataSource = DataSource;
        }
        
        /// <summary>
        /// Gets or Sets KeyField
        /// </summary>
        [DataMember(Name="keyField", EmitDefaultValue=false)]
        public string KeyField { get; set; }
        /// <summary>
        /// Gets or Sets SelectField
        /// </summary>
        [DataMember(Name="selectField", EmitDefaultValue=false)]
        public string SelectField { get; set; }
        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public Dictionary<string, string> Associations { get; set; }
        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }
        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name="dataSource", EmitDefaultValue=false)]
        public List<RowSearchResult> DataSource { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldValuesDTO {\n");
            sb.Append("  KeyField: ").Append(KeyField).Append("\n");
            sb.Append("  SelectField: ").Append(SelectField).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FieldValuesDTO);
        }

        /// <summary>
        /// Returns true if FieldValuesDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldValuesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValuesDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.KeyField == other.KeyField ||
                    this.KeyField != null &&
                    this.KeyField.Equals(other.KeyField)
                ) && 
                (
                    this.SelectField == other.SelectField ||
                    this.SelectField != null &&
                    this.SelectField.Equals(other.SelectField)
                ) && 
                (
                    this.Associations == other.Associations ||
                    this.Associations != null &&
                    this.Associations.SequenceEqual(other.Associations)
                ) && 
                (
                    this.FieldName == other.FieldName ||
                    this.FieldName != null &&
                    this.FieldName.Equals(other.FieldName)
                ) && 
                (
                    this.DataSource == other.DataSource ||
                    this.DataSource != null &&
                    this.DataSource.SequenceEqual(other.DataSource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.KeyField != null)
                    hash = hash * 59 + this.KeyField.GetHashCode();
                if (this.SelectField != null)
                    hash = hash * 59 + this.SelectField.GetHashCode();
                if (this.Associations != null)
                    hash = hash * 59 + this.Associations.GetHashCode();
                if (this.FieldName != null)
                    hash = hash * 59 + this.FieldName.GetHashCode();
                if (this.DataSource != null)
                    hash = hash * 59 + this.DataSource.GetHashCode();
                return hash;
            }
        }
    }

}
