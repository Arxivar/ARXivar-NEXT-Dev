/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelConfigurationDTO
    /// </summary>
    [DataContract]
    public partial class ModelConfigurationDTO :  IEquatable<ModelConfigurationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelConfigurationDTO" /> class.
        /// </summary>
        /// <param name="PredefinedProfile">Predefined profile for model.</param>
        /// <param name="Mask">Predefined Profile.</param>
        /// <param name="ShowOption">Possible values:  0: EmptyProfile  1: PredefinedProfile  2: Mask .</param>
        /// <param name="DocumentCacheId">File forTtemplate.</param>
        /// <param name="PreviewDocumentCacheId">File for preview template.</param>
        /// <param name="FieldsModule">Fields.</param>
        /// <param name="Id">Identifier.</param>
        /// <param name="Description">Description.</param>
        /// <param name="User">Author.</param>
        /// <param name="UserDescription">Author&#39;s model name.</param>
        /// <param name="Type">Possible values:  1: Public  2: Private .</param>
        /// <param name="FileName">Original File Name.</param>
        /// <param name="LockModality">Possible values:  0: Unblocked  1: Blocked .</param>
        /// <param name="PredefinedProfileId">Predefined Profile Identifier.</param>
        /// <param name="GroupId">Group Identifier.</param>
        /// <param name="GroupName">Model&#39;s group name.</param>
        /// <param name="Extension">Extensione File.</param>
        /// <param name="OpenAfterProfilation">Open File After to Profiliing.</param>
        /// <param name="MaskId">Mask Identifier.</param>
        /// <param name="PreviewFileName">File Name of the original preview file.</param>
        public ModelConfigurationDTO(PredefinedProfileDTO PredefinedProfile = default(PredefinedProfileDTO), MaskDTO Mask = default(MaskDTO), int? ShowOption = default(int?), string DocumentCacheId = default(string), string PreviewDocumentCacheId = default(string), List<FieldsModuleDTO> FieldsModule = default(List<FieldsModuleDTO>), int? Id = default(int?), string Description = default(string), int? User = default(int?), string UserDescription = default(string), int? Type = default(int?), string FileName = default(string), int? LockModality = default(int?), int? PredefinedProfileId = default(int?), int? GroupId = default(int?), string GroupName = default(string), string Extension = default(string), bool? OpenAfterProfilation = default(bool?), string MaskId = default(string), string PreviewFileName = default(string))
        {
            this.PredefinedProfile = PredefinedProfile;
            this.Mask = Mask;
            this.ShowOption = ShowOption;
            this.DocumentCacheId = DocumentCacheId;
            this.PreviewDocumentCacheId = PreviewDocumentCacheId;
            this.FieldsModule = FieldsModule;
            this.Id = Id;
            this.Description = Description;
            this.User = User;
            this.UserDescription = UserDescription;
            this.Type = Type;
            this.FileName = FileName;
            this.LockModality = LockModality;
            this.PredefinedProfileId = PredefinedProfileId;
            this.GroupId = GroupId;
            this.GroupName = GroupName;
            this.Extension = Extension;
            this.OpenAfterProfilation = OpenAfterProfilation;
            this.MaskId = MaskId;
            this.PreviewFileName = PreviewFileName;
        }
        
        /// <summary>
        /// Predefined profile for model
        /// </summary>
        /// <value>Predefined profile for model</value>
        [DataMember(Name="predefinedProfile", EmitDefaultValue=false)]
        public PredefinedProfileDTO PredefinedProfile { get; set; }

        /// <summary>
        /// Predefined Profile
        /// </summary>
        /// <value>Predefined Profile</value>
        [DataMember(Name="mask", EmitDefaultValue=false)]
        public MaskDTO Mask { get; set; }

        /// <summary>
        /// Possible values:  0: EmptyProfile  1: PredefinedProfile  2: Mask 
        /// </summary>
        /// <value>Possible values:  0: EmptyProfile  1: PredefinedProfile  2: Mask </value>
        [DataMember(Name="showOption", EmitDefaultValue=false)]
        public int? ShowOption { get; set; }

        /// <summary>
        /// File forTtemplate
        /// </summary>
        /// <value>File forTtemplate</value>
        [DataMember(Name="documentCacheId", EmitDefaultValue=false)]
        public string DocumentCacheId { get; set; }

        /// <summary>
        /// File for preview template
        /// </summary>
        /// <value>File for preview template</value>
        [DataMember(Name="previewDocumentCacheId", EmitDefaultValue=false)]
        public string PreviewDocumentCacheId { get; set; }

        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>
        [DataMember(Name="fieldsModule", EmitDefaultValue=false)]
        public List<FieldsModuleDTO> FieldsModule { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Author
        /// </summary>
        /// <value>Author</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Author&#39;s model name
        /// </summary>
        /// <value>Author&#39;s model name</value>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }

        /// <summary>
        /// Possible values:  1: Public  2: Private 
        /// </summary>
        /// <value>Possible values:  1: Public  2: Private </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Original File Name
        /// </summary>
        /// <value>Original File Name</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Possible values:  0: Unblocked  1: Blocked 
        /// </summary>
        /// <value>Possible values:  0: Unblocked  1: Blocked </value>
        [DataMember(Name="lockModality", EmitDefaultValue=false)]
        public int? LockModality { get; set; }

        /// <summary>
        /// Predefined Profile Identifier
        /// </summary>
        /// <value>Predefined Profile Identifier</value>
        [DataMember(Name="predefinedProfileId", EmitDefaultValue=false)]
        public int? PredefinedProfileId { get; set; }

        /// <summary>
        /// Group Identifier
        /// </summary>
        /// <value>Group Identifier</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// Model&#39;s group name
        /// </summary>
        /// <value>Model&#39;s group name</value>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Extensione File
        /// </summary>
        /// <value>Extensione File</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// Open File After to Profiliing
        /// </summary>
        /// <value>Open File After to Profiliing</value>
        [DataMember(Name="openAfterProfilation", EmitDefaultValue=false)]
        public bool? OpenAfterProfilation { get; set; }

        /// <summary>
        /// Mask Identifier
        /// </summary>
        /// <value>Mask Identifier</value>
        [DataMember(Name="maskId", EmitDefaultValue=false)]
        public string MaskId { get; set; }

        /// <summary>
        /// File Name of the original preview file
        /// </summary>
        /// <value>File Name of the original preview file</value>
        [DataMember(Name="previewFileName", EmitDefaultValue=false)]
        public string PreviewFileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelConfigurationDTO {\n");
            sb.Append("  PredefinedProfile: ").Append(PredefinedProfile).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  ShowOption: ").Append(ShowOption).Append("\n");
            sb.Append("  DocumentCacheId: ").Append(DocumentCacheId).Append("\n");
            sb.Append("  PreviewDocumentCacheId: ").Append(PreviewDocumentCacheId).Append("\n");
            sb.Append("  FieldsModule: ").Append(FieldsModule).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LockModality: ").Append(LockModality).Append("\n");
            sb.Append("  PredefinedProfileId: ").Append(PredefinedProfileId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  OpenAfterProfilation: ").Append(OpenAfterProfilation).Append("\n");
            sb.Append("  MaskId: ").Append(MaskId).Append("\n");
            sb.Append("  PreviewFileName: ").Append(PreviewFileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelConfigurationDTO);
        }

        /// <summary>
        /// Returns true if ModelConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelConfigurationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PredefinedProfile == input.PredefinedProfile ||
                    (this.PredefinedProfile != null &&
                    this.PredefinedProfile.Equals(input.PredefinedProfile))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.ShowOption == input.ShowOption ||
                    (this.ShowOption != null &&
                    this.ShowOption.Equals(input.ShowOption))
                ) && 
                (
                    this.DocumentCacheId == input.DocumentCacheId ||
                    (this.DocumentCacheId != null &&
                    this.DocumentCacheId.Equals(input.DocumentCacheId))
                ) && 
                (
                    this.PreviewDocumentCacheId == input.PreviewDocumentCacheId ||
                    (this.PreviewDocumentCacheId != null &&
                    this.PreviewDocumentCacheId.Equals(input.PreviewDocumentCacheId))
                ) && 
                (
                    this.FieldsModule == input.FieldsModule ||
                    this.FieldsModule != null &&
                    this.FieldsModule.SequenceEqual(input.FieldsModule)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserDescription == input.UserDescription ||
                    (this.UserDescription != null &&
                    this.UserDescription.Equals(input.UserDescription))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.LockModality == input.LockModality ||
                    (this.LockModality != null &&
                    this.LockModality.Equals(input.LockModality))
                ) && 
                (
                    this.PredefinedProfileId == input.PredefinedProfileId ||
                    (this.PredefinedProfileId != null &&
                    this.PredefinedProfileId.Equals(input.PredefinedProfileId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.OpenAfterProfilation == input.OpenAfterProfilation ||
                    (this.OpenAfterProfilation != null &&
                    this.OpenAfterProfilation.Equals(input.OpenAfterProfilation))
                ) && 
                (
                    this.MaskId == input.MaskId ||
                    (this.MaskId != null &&
                    this.MaskId.Equals(input.MaskId))
                ) && 
                (
                    this.PreviewFileName == input.PreviewFileName ||
                    (this.PreviewFileName != null &&
                    this.PreviewFileName.Equals(input.PreviewFileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PredefinedProfile != null)
                    hashCode = hashCode * 59 + this.PredefinedProfile.GetHashCode();
                if (this.Mask != null)
                    hashCode = hashCode * 59 + this.Mask.GetHashCode();
                if (this.ShowOption != null)
                    hashCode = hashCode * 59 + this.ShowOption.GetHashCode();
                if (this.DocumentCacheId != null)
                    hashCode = hashCode * 59 + this.DocumentCacheId.GetHashCode();
                if (this.PreviewDocumentCacheId != null)
                    hashCode = hashCode * 59 + this.PreviewDocumentCacheId.GetHashCode();
                if (this.FieldsModule != null)
                    hashCode = hashCode * 59 + this.FieldsModule.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserDescription != null)
                    hashCode = hashCode * 59 + this.UserDescription.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.LockModality != null)
                    hashCode = hashCode * 59 + this.LockModality.GetHashCode();
                if (this.PredefinedProfileId != null)
                    hashCode = hashCode * 59 + this.PredefinedProfileId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.OpenAfterProfilation != null)
                    hashCode = hashCode * 59 + this.OpenAfterProfilation.GetHashCode();
                if (this.MaskId != null)
                    hashCode = hashCode * 59 + this.MaskId.GetHashCode();
                if (this.PreviewFileName != null)
                    hashCode = hashCode * 59 + this.PreviewFileName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
