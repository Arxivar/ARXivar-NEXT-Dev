/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of status for queue aggregation
    /// </summary>
    [DataContract]
    public partial class QueueStateAggregationInfoDto :  IEquatable<QueueStateAggregationInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueStateAggregationInfoDto" /> class.
        /// </summary>
        /// <param name="Awaiting">Wainting.</param>
        /// <param name="Enqueued">Enqueued.</param>
        /// <param name="Processing">Processing.</param>
        /// <param name="Scheduled">Scheduled.</param>
        /// <param name="Failed">Failed.</param>
        /// <param name="SuccededOk">Successful.</param>
        /// <param name="SuccededKo">Unsuccessful.</param>
        /// <param name="Deleted">Deleted.</param>
        public QueueStateAggregationInfoDto(int? Awaiting = default(int?), int? Enqueued = default(int?), int? Processing = default(int?), int? Scheduled = default(int?), int? Failed = default(int?), int? SuccededOk = default(int?), int? SuccededKo = default(int?), int? Deleted = default(int?))
        {
            this.Awaiting = Awaiting;
            this.Enqueued = Enqueued;
            this.Processing = Processing;
            this.Scheduled = Scheduled;
            this.Failed = Failed;
            this.SuccededOk = SuccededOk;
            this.SuccededKo = SuccededKo;
            this.Deleted = Deleted;
        }
        
        /// <summary>
        /// Wainting
        /// </summary>
        /// <value>Wainting</value>
        [DataMember(Name="awaiting", EmitDefaultValue=false)]
        public int? Awaiting { get; set; }

        /// <summary>
        /// Enqueued
        /// </summary>
        /// <value>Enqueued</value>
        [DataMember(Name="enqueued", EmitDefaultValue=false)]
        public int? Enqueued { get; set; }

        /// <summary>
        /// Processing
        /// </summary>
        /// <value>Processing</value>
        [DataMember(Name="processing", EmitDefaultValue=false)]
        public int? Processing { get; set; }

        /// <summary>
        /// Scheduled
        /// </summary>
        /// <value>Scheduled</value>
        [DataMember(Name="scheduled", EmitDefaultValue=false)]
        public int? Scheduled { get; set; }

        /// <summary>
        /// Failed
        /// </summary>
        /// <value>Failed</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public int? Failed { get; set; }

        /// <summary>
        /// Successful
        /// </summary>
        /// <value>Successful</value>
        [DataMember(Name="succededOk", EmitDefaultValue=false)]
        public int? SuccededOk { get; set; }

        /// <summary>
        /// Unsuccessful
        /// </summary>
        /// <value>Unsuccessful</value>
        [DataMember(Name="succededKo", EmitDefaultValue=false)]
        public int? SuccededKo { get; set; }

        /// <summary>
        /// Deleted
        /// </summary>
        /// <value>Deleted</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public int? Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueStateAggregationInfoDto {\n");
            sb.Append("  Awaiting: ").Append(Awaiting).Append("\n");
            sb.Append("  Enqueued: ").Append(Enqueued).Append("\n");
            sb.Append("  Processing: ").Append(Processing).Append("\n");
            sb.Append("  Scheduled: ").Append(Scheduled).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  SuccededOk: ").Append(SuccededOk).Append("\n");
            sb.Append("  SuccededKo: ").Append(SuccededKo).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueStateAggregationInfoDto);
        }

        /// <summary>
        /// Returns true if QueueStateAggregationInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueStateAggregationInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueStateAggregationInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Awaiting == input.Awaiting ||
                    (this.Awaiting != null &&
                    this.Awaiting.Equals(input.Awaiting))
                ) && 
                (
                    this.Enqueued == input.Enqueued ||
                    (this.Enqueued != null &&
                    this.Enqueued.Equals(input.Enqueued))
                ) && 
                (
                    this.Processing == input.Processing ||
                    (this.Processing != null &&
                    this.Processing.Equals(input.Processing))
                ) && 
                (
                    this.Scheduled == input.Scheduled ||
                    (this.Scheduled != null &&
                    this.Scheduled.Equals(input.Scheduled))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.SuccededOk == input.SuccededOk ||
                    (this.SuccededOk != null &&
                    this.SuccededOk.Equals(input.SuccededOk))
                ) && 
                (
                    this.SuccededKo == input.SuccededKo ||
                    (this.SuccededKo != null &&
                    this.SuccededKo.Equals(input.SuccededKo))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Awaiting != null)
                    hashCode = hashCode * 59 + this.Awaiting.GetHashCode();
                if (this.Enqueued != null)
                    hashCode = hashCode * 59 + this.Enqueued.GetHashCode();
                if (this.Processing != null)
                    hashCode = hashCode * 59 + this.Processing.GetHashCode();
                if (this.Scheduled != null)
                    hashCode = hashCode * 59 + this.Scheduled.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.SuccededOk != null)
                    hashCode = hashCode * 59 + this.SuccededOk.GetHashCode();
                if (this.SuccededKo != null)
                    hashCode = hashCode * 59 + this.SuccededKo.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
