/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of information for profiling in folder
    /// </summary>
    [DataContract]
    public partial class FolderArchiveModeInfo :  IEquatable<FolderArchiveModeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderArchiveModeInfo" /> class.
        /// </summary>
        /// <param name="FolderId">Folder Identifier.</param>
        /// <param name="FolderName">Folder Name.</param>
        /// <param name="Rules">Rules.</param>
        /// <param name="ArchiveMode">Possible values:  0: None  1: AutoWithDefaultProfile  2: ManualWithMask .</param>
        public FolderArchiveModeInfo(int? FolderId = default(int?), string FolderName = default(string), List<FolderArchiveModeRule> Rules = default(List<FolderArchiveModeRule>), int? ArchiveMode = default(int?))
        {
            this.FolderId = FolderId;
            this.FolderName = FolderName;
            this.Rules = Rules;
            this.ArchiveMode = ArchiveMode;
        }
        
        /// <summary>
        /// Folder Identifier
        /// </summary>
        /// <value>Folder Identifier</value>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }

        /// <summary>
        /// Folder Name
        /// </summary>
        /// <value>Folder Name</value>
        [DataMember(Name="folderName", EmitDefaultValue=false)]
        public string FolderName { get; set; }

        /// <summary>
        /// Rules
        /// </summary>
        /// <value>Rules</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<FolderArchiveModeRule> Rules { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: AutoWithDefaultProfile  2: ManualWithMask 
        /// </summary>
        /// <value>Possible values:  0: None  1: AutoWithDefaultProfile  2: ManualWithMask </value>
        [DataMember(Name="archiveMode", EmitDefaultValue=false)]
        public int? ArchiveMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderArchiveModeInfo {\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  ArchiveMode: ").Append(ArchiveMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderArchiveModeInfo);
        }

        /// <summary>
        /// Returns true if FolderArchiveModeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderArchiveModeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderArchiveModeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.ArchiveMode == input.ArchiveMode ||
                    (this.ArchiveMode != null &&
                    this.ArchiveMode.Equals(input.ArchiveMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.FolderName != null)
                    hashCode = hashCode * 59 + this.FolderName.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.ArchiveMode != null)
                    hashCode = hashCode * 59 + this.ArchiveMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
