/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of sign information
    /// </summary>
    [DataContract]
    public partial class SignInfoDTO :  IEquatable<SignInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignInfoDTO" /> class.
        /// </summary>
        /// <param name="IsVerified">Signature is Verified.</param>
        /// <param name="Serial">Serial Number.</param>
        /// <param name="NotAfter">Validity Date From.</param>
        /// <param name="NotBefore">Validity Date To.</param>
        /// <param name="Version">Version.</param>
        /// <param name="SubjectPublicKeyInfo">Public Key Subject.</param>
        /// <param name="HashAlgorithm">algorithm of Hash.</param>
        /// <param name="SignatureAlgorithm">Algorithm of Signature.</param>
        /// <param name="Issuer">Issuer Information.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="OtherData">OtherData.</param>
        /// <param name="Extensions">Extensions.</param>
        /// <param name="SignDateTime">SignDateTime.</param>
        /// <param name="WarningMessage">WarningMessage.</param>
        /// <param name="SignDepth">SignDepth.</param>
        /// <param name="IsCounterSign">IsCounterSign.</param>
        /// <param name="TimestampInfo">TimestampInfo.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ParentId">ParentId.</param>
        public SignInfoDTO(bool? IsVerified = default(bool?), string Serial = default(string), DateTime? NotAfter = default(DateTime?), DateTime? NotBefore = default(DateTime?), string Version = default(string), string SubjectPublicKeyInfo = default(string), string HashAlgorithm = default(string), string SignatureAlgorithm = default(string), CertifiedIdentityDTO Issuer = default(CertifiedIdentityDTO), CertifiedIdentityDTO Subject = default(CertifiedIdentityDTO), List<KeyValueElementDto> OtherData = default(List<KeyValueElementDto>), List<KeyValueElementDto> Extensions = default(List<KeyValueElementDto>), DateTime? SignDateTime = default(DateTime?), string WarningMessage = default(string), int? SignDepth = default(int?), bool? IsCounterSign = default(bool?), ArxTimeStampInfo TimestampInfo = default(ArxTimeStampInfo), int? Id = default(int?), int? ParentId = default(int?))
        {
            this.IsVerified = IsVerified;
            this.Serial = Serial;
            this.NotAfter = NotAfter;
            this.NotBefore = NotBefore;
            this.Version = Version;
            this.SubjectPublicKeyInfo = SubjectPublicKeyInfo;
            this.HashAlgorithm = HashAlgorithm;
            this.SignatureAlgorithm = SignatureAlgorithm;
            this.Issuer = Issuer;
            this.Subject = Subject;
            this.OtherData = OtherData;
            this.Extensions = Extensions;
            this.SignDateTime = SignDateTime;
            this.WarningMessage = WarningMessage;
            this.SignDepth = SignDepth;
            this.IsCounterSign = IsCounterSign;
            this.TimestampInfo = TimestampInfo;
            this.Id = Id;
            this.ParentId = ParentId;
        }
        
        /// <summary>
        /// Signature is Verified
        /// </summary>
        /// <value>Signature is Verified</value>
        [DataMember(Name="isVerified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Serial Number
        /// </summary>
        /// <value>Serial Number</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// Validity Date From
        /// </summary>
        /// <value>Validity Date From</value>
        [DataMember(Name="notAfter", EmitDefaultValue=false)]
        public DateTime? NotAfter { get; set; }

        /// <summary>
        /// Validity Date To
        /// </summary>
        /// <value>Validity Date To</value>
        [DataMember(Name="notBefore", EmitDefaultValue=false)]
        public DateTime? NotBefore { get; set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Public Key Subject
        /// </summary>
        /// <value>Public Key Subject</value>
        [DataMember(Name="subjectPublicKeyInfo", EmitDefaultValue=false)]
        public string SubjectPublicKeyInfo { get; set; }

        /// <summary>
        /// algorithm of Hash
        /// </summary>
        /// <value>algorithm of Hash</value>
        [DataMember(Name="hashAlgorithm", EmitDefaultValue=false)]
        public string HashAlgorithm { get; set; }

        /// <summary>
        /// Algorithm of Signature
        /// </summary>
        /// <value>Algorithm of Signature</value>
        [DataMember(Name="signatureAlgorithm", EmitDefaultValue=false)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Issuer Information
        /// </summary>
        /// <value>Issuer Information</value>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public CertifiedIdentityDTO Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public CertifiedIdentityDTO Subject { get; set; }

        /// <summary>
        /// Gets or Sets OtherData
        /// </summary>
        [DataMember(Name="otherData", EmitDefaultValue=false)]
        public List<KeyValueElementDto> OtherData { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public List<KeyValueElementDto> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets SignDateTime
        /// </summary>
        [DataMember(Name="signDateTime", EmitDefaultValue=false)]
        public DateTime? SignDateTime { get; set; }

        /// <summary>
        /// Gets or Sets WarningMessage
        /// </summary>
        [DataMember(Name="warningMessage", EmitDefaultValue=false)]
        public string WarningMessage { get; set; }

        /// <summary>
        /// Gets or Sets SignDepth
        /// </summary>
        [DataMember(Name="signDepth", EmitDefaultValue=false)]
        public int? SignDepth { get; set; }

        /// <summary>
        /// Gets or Sets IsCounterSign
        /// </summary>
        [DataMember(Name="isCounterSign", EmitDefaultValue=false)]
        public bool? IsCounterSign { get; set; }

        /// <summary>
        /// Gets or Sets TimestampInfo
        /// </summary>
        [DataMember(Name="timestampInfo", EmitDefaultValue=false)]
        public ArxTimeStampInfo TimestampInfo { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignInfoDTO {\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SubjectPublicKeyInfo: ").Append(SubjectPublicKeyInfo).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  OtherData: ").Append(OtherData).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  SignDateTime: ").Append(SignDateTime).Append("\n");
            sb.Append("  WarningMessage: ").Append(WarningMessage).Append("\n");
            sb.Append("  SignDepth: ").Append(SignDepth).Append("\n");
            sb.Append("  IsCounterSign: ").Append(IsCounterSign).Append("\n");
            sb.Append("  TimestampInfo: ").Append(TimestampInfo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignInfoDTO);
        }

        /// <summary>
        /// Returns true if SignInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.NotAfter == input.NotAfter ||
                    (this.NotAfter != null &&
                    this.NotAfter.Equals(input.NotAfter))
                ) && 
                (
                    this.NotBefore == input.NotBefore ||
                    (this.NotBefore != null &&
                    this.NotBefore.Equals(input.NotBefore))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.SubjectPublicKeyInfo == input.SubjectPublicKeyInfo ||
                    (this.SubjectPublicKeyInfo != null &&
                    this.SubjectPublicKeyInfo.Equals(input.SubjectPublicKeyInfo))
                ) && 
                (
                    this.HashAlgorithm == input.HashAlgorithm ||
                    (this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(input.HashAlgorithm))
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.OtherData == input.OtherData ||
                    this.OtherData != null &&
                    this.OtherData.SequenceEqual(input.OtherData)
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.SignDateTime == input.SignDateTime ||
                    (this.SignDateTime != null &&
                    this.SignDateTime.Equals(input.SignDateTime))
                ) && 
                (
                    this.WarningMessage == input.WarningMessage ||
                    (this.WarningMessage != null &&
                    this.WarningMessage.Equals(input.WarningMessage))
                ) && 
                (
                    this.SignDepth == input.SignDepth ||
                    (this.SignDepth != null &&
                    this.SignDepth.Equals(input.SignDepth))
                ) && 
                (
                    this.IsCounterSign == input.IsCounterSign ||
                    (this.IsCounterSign != null &&
                    this.IsCounterSign.Equals(input.IsCounterSign))
                ) && 
                (
                    this.TimestampInfo == input.TimestampInfo ||
                    (this.TimestampInfo != null &&
                    this.TimestampInfo.Equals(input.TimestampInfo))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.NotAfter != null)
                    hashCode = hashCode * 59 + this.NotAfter.GetHashCode();
                if (this.NotBefore != null)
                    hashCode = hashCode * 59 + this.NotBefore.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.SubjectPublicKeyInfo != null)
                    hashCode = hashCode * 59 + this.SubjectPublicKeyInfo.GetHashCode();
                if (this.HashAlgorithm != null)
                    hashCode = hashCode * 59 + this.HashAlgorithm.GetHashCode();
                if (this.SignatureAlgorithm != null)
                    hashCode = hashCode * 59 + this.SignatureAlgorithm.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.OtherData != null)
                    hashCode = hashCode * 59 + this.OtherData.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.SignDateTime != null)
                    hashCode = hashCode * 59 + this.SignDateTime.GetHashCode();
                if (this.WarningMessage != null)
                    hashCode = hashCode * 59 + this.WarningMessage.GetHashCode();
                if (this.SignDepth != null)
                    hashCode = hashCode * 59 + this.SignDepth.GetHashCode();
                if (this.IsCounterSign != null)
                    hashCode = hashCode * 59 + this.IsCounterSign.GetHashCode();
                if (this.TimestampInfo != null)
                    hashCode = hashCode * 59 + this.TimestampInfo.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
