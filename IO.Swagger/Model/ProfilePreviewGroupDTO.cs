/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProfilePreviewGroupDTO
    /// </summary>
    [DataContract]
    public partial class ProfilePreviewGroupDTO :  IEquatable<ProfilePreviewGroupDTO>
    {
        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GroupTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum From for "From"
            /// </summary>
            [EnumMember(Value = "From")]
            From,
            
            /// <summary>
            /// Enum To for "To"
            /// </summary>
            [EnumMember(Value = "To")]
            To,
            
            /// <summary>
            /// Enum CC for "CC"
            /// </summary>
            [EnumMember(Value = "CC")]
            CC,
            
            /// <summary>
            /// Enum Senders for "Senders"
            /// </summary>
            [EnumMember(Value = "Senders")]
            Senders,
            
            /// <summary>
            /// Enum Additionals for "Additionals"
            /// </summary>
            [EnumMember(Value = "Additionals")]
            Additionals,
            
            /// <summary>
            /// Enum Notes for "Notes"
            /// </summary>
            [EnumMember(Value = "Notes")]
            Notes,
            
            /// <summary>
            /// Enum InternalAttachments for "InternalAttachments"
            /// </summary>
            [EnumMember(Value = "InternalAttachments")]
            InternalAttachments,
            
            /// <summary>
            /// Enum ExternalAttachments for "ExternalAttachments"
            /// </summary>
            [EnumMember(Value = "ExternalAttachments")]
            ExternalAttachments,
            
            /// <summary>
            /// Enum Folders for "Folders"
            /// </summary>
            [EnumMember(Value = "Folders")]
            Folders,
            
            /// <summary>
            /// Enum Binders for "Binders"
            /// </summary>
            [EnumMember(Value = "Binders")]
            Binders,
            
            /// <summary>
            /// Enum Associations for "Associations"
            /// </summary>
            [EnumMember(Value = "Associations")]
            Associations
        }

        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name="groupType", EmitDefaultValue=false)]
        public GroupTypeEnum? GroupType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePreviewGroupDTO" /> class.
        /// </summary>
        /// <param name="LabelGroup">LabelGroup.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Fields">Fields.</param>
        /// <param name="GroupType">GroupType.</param>
        public ProfilePreviewGroupDTO(string LabelGroup = null, string Label = null, int? Order = null, List<FieldBaseDTO> Fields = null, GroupTypeEnum? GroupType = null)
        {
            this.LabelGroup = LabelGroup;
            this.Label = Label;
            this.Order = Order;
            this.Fields = Fields;
            this.GroupType = GroupType;
        }
        
        /// <summary>
        /// Gets or Sets LabelGroup
        /// </summary>
        [DataMember(Name="labelGroup", EmitDefaultValue=false)]
        public string LabelGroup { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FieldBaseDTO> Fields { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfilePreviewGroupDTO {\n");
            sb.Append("  LabelGroup: ").Append(LabelGroup).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProfilePreviewGroupDTO);
        }

        /// <summary>
        /// Returns true if ProfilePreviewGroupDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ProfilePreviewGroupDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfilePreviewGroupDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LabelGroup == other.LabelGroup ||
                    this.LabelGroup != null &&
                    this.LabelGroup.Equals(other.LabelGroup)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Fields == other.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    this.GroupType == other.GroupType ||
                    this.GroupType != null &&
                    this.GroupType.Equals(other.GroupType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LabelGroup != null)
                    hash = hash * 59 + this.LabelGroup.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Fields != null)
                    hash = hash * 59 + this.Fields.GetHashCode();
                if (this.GroupType != null)
                    hash = hash * 59 + this.GroupType.GetHashCode();
                return hash;
            }
        }
    }

}
