/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AttachmentRevisionDTO
    /// </summary>
    [DataContract]
    public partial class AttachmentRevisionDTO :  IEquatable<AttachmentRevisionDTO>
    {
        /// <summary>
        /// Gets or Sets CompressionMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompressionModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum CompressChilkat91 for "CompressChilkat91"
            /// </summary>
            [EnumMember(Value = "CompressChilkat91")]
            CompressChilkat91,
            
            /// <summary>
            /// Enum CompressChilkat95 for "CompressChilkat95"
            /// </summary>
            [EnumMember(Value = "CompressChilkat95")]
            CompressChilkat95,
            
            /// <summary>
            /// Enum CompressChilkat95AndCryptoAes256 for "CompressChilkat95AndCryptoAes256"
            /// </summary>
            [EnumMember(Value = "CompressChilkat95AndCryptoAes256")]
            CompressChilkat95AndCryptoAes256
        }

        /// <summary>
        /// Gets or Sets SaveType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SaveTypeEnum
        {
            
            /// <summary>
            /// Enum FileSystem for "File_System"
            /// </summary>
            [EnumMember(Value = "File_System")]
            FileSystem,
            
            /// <summary>
            /// Enum Database for "Database"
            /// </summary>
            [EnumMember(Value = "Database")]
            Database
        }

        /// <summary>
        /// Gets or Sets CompressionMode
        /// </summary>
        [DataMember(Name="compressionMode", EmitDefaultValue=false)]
        public CompressionModeEnum? CompressionMode { get; set; }
        /// <summary>
        /// Gets or Sets SaveType
        /// </summary>
        [DataMember(Name="saveType", EmitDefaultValue=false)]
        public SaveTypeEnum? SaveType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentRevisionDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="AttachmentId">AttachmentId.</param>
        /// <param name="Revision">Revision.</param>
        /// <param name="User">User.</param>
        /// <param name="UserDescription">UserDescription.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Path">Path.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="OriginalFileName">OriginalFileName.</param>
        /// <param name="Hash">Hash.</param>
        /// <param name="ZipPassword">ZipPassword.</param>
        /// <param name="Cstring">Cstring.</param>
        /// <param name="Compressed">Compressed.</param>
        /// <param name="FileSize">FileSize.</param>
        /// <param name="CompressionMode">CompressionMode.</param>
        /// <param name="SaveType">SaveType.</param>
        public AttachmentRevisionDTO(int? Id = null, int? AttachmentId = null, int? Revision = null, int? User = null, string UserDescription = null, DateTime? CreationDate = null, string Path = null, string FileName = null, string OriginalFileName = null, string Hash = null, string ZipPassword = null, string Cstring = null, bool? Compressed = null, long? FileSize = null, CompressionModeEnum? CompressionMode = null, SaveTypeEnum? SaveType = null)
        {
            this.Id = Id;
            this.AttachmentId = AttachmentId;
            this.Revision = Revision;
            this.User = User;
            this.UserDescription = UserDescription;
            this.CreationDate = CreationDate;
            this.Path = Path;
            this.FileName = FileName;
            this.OriginalFileName = OriginalFileName;
            this.Hash = Hash;
            this.ZipPassword = ZipPassword;
            this.Cstring = Cstring;
            this.Compressed = Compressed;
            this.FileSize = FileSize;
            this.CompressionMode = CompressionMode;
            this.SaveType = SaveType;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets AttachmentId
        /// </summary>
        [DataMember(Name="attachmentId", EmitDefaultValue=false)]
        public int? AttachmentId { get; set; }
        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets UserDescription
        /// </summary>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }
        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }
        /// <summary>
        /// Gets or Sets OriginalFileName
        /// </summary>
        [DataMember(Name="originalFileName", EmitDefaultValue=false)]
        public string OriginalFileName { get; set; }
        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }
        /// <summary>
        /// Gets or Sets ZipPassword
        /// </summary>
        [DataMember(Name="zipPassword", EmitDefaultValue=false)]
        public string ZipPassword { get; set; }
        /// <summary>
        /// Gets or Sets Cstring
        /// </summary>
        [DataMember(Name="cstring", EmitDefaultValue=false)]
        public string Cstring { get; set; }
        /// <summary>
        /// Gets or Sets Compressed
        /// </summary>
        [DataMember(Name="compressed", EmitDefaultValue=false)]
        public bool? Compressed { get; set; }
        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="fileSize", EmitDefaultValue=false)]
        public long? FileSize { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentRevisionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  ZipPassword: ").Append(ZipPassword).Append("\n");
            sb.Append("  Cstring: ").Append(Cstring).Append("\n");
            sb.Append("  Compressed: ").Append(Compressed).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  CompressionMode: ").Append(CompressionMode).Append("\n");
            sb.Append("  SaveType: ").Append(SaveType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AttachmentRevisionDTO);
        }

        /// <summary>
        /// Returns true if AttachmentRevisionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AttachmentRevisionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentRevisionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AttachmentId == other.AttachmentId ||
                    this.AttachmentId != null &&
                    this.AttachmentId.Equals(other.AttachmentId)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.UserDescription == other.UserDescription ||
                    this.UserDescription != null &&
                    this.UserDescription.Equals(other.UserDescription)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.OriginalFileName == other.OriginalFileName ||
                    this.OriginalFileName != null &&
                    this.OriginalFileName.Equals(other.OriginalFileName)
                ) && 
                (
                    this.Hash == other.Hash ||
                    this.Hash != null &&
                    this.Hash.Equals(other.Hash)
                ) && 
                (
                    this.ZipPassword == other.ZipPassword ||
                    this.ZipPassword != null &&
                    this.ZipPassword.Equals(other.ZipPassword)
                ) && 
                (
                    this.Cstring == other.Cstring ||
                    this.Cstring != null &&
                    this.Cstring.Equals(other.Cstring)
                ) && 
                (
                    this.Compressed == other.Compressed ||
                    this.Compressed != null &&
                    this.Compressed.Equals(other.Compressed)
                ) && 
                (
                    this.FileSize == other.FileSize ||
                    this.FileSize != null &&
                    this.FileSize.Equals(other.FileSize)
                ) && 
                (
                    this.CompressionMode == other.CompressionMode ||
                    this.CompressionMode != null &&
                    this.CompressionMode.Equals(other.CompressionMode)
                ) && 
                (
                    this.SaveType == other.SaveType ||
                    this.SaveType != null &&
                    this.SaveType.Equals(other.SaveType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AttachmentId != null)
                    hash = hash * 59 + this.AttachmentId.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.UserDescription != null)
                    hash = hash * 59 + this.UserDescription.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.OriginalFileName != null)
                    hash = hash * 59 + this.OriginalFileName.GetHashCode();
                if (this.Hash != null)
                    hash = hash * 59 + this.Hash.GetHashCode();
                if (this.ZipPassword != null)
                    hash = hash * 59 + this.ZipPassword.GetHashCode();
                if (this.Cstring != null)
                    hash = hash * 59 + this.Cstring.GetHashCode();
                if (this.Compressed != null)
                    hash = hash * 59 + this.Compressed.GetHashCode();
                if (this.FileSize != null)
                    hash = hash * 59 + this.FileSize.GetHashCode();
                if (this.CompressionMode != null)
                    hash = hash * 59 + this.CompressionMode.GetHashCode();
                if (this.SaveType != null)
                    hash = hash * 59 + this.SaveType.GetHashCode();
                return hash;
            }
        }
    }

}
