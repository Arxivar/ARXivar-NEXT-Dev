/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AttachmentRevisionDTO
    /// </summary>
    [DataContract]
    public partial class AttachmentRevisionDTO :  IEquatable<AttachmentRevisionDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentRevisionDTO" /> class.
        /// </summary>
        /// <param name="Id">Id of the revision.</param>
        /// <param name="AttachmentId">Id of the attachment.</param>
        /// <param name="Revision">Revision number.</param>
        /// <param name="User">Id of the author.</param>
        /// <param name="UserDescription">Description of the author.</param>
        /// <param name="CreationDate">DateTime of this revision.</param>
        /// <param name="Path">Path to store the revision file.</param>
        /// <param name="FileName">File name of the compressed revision file.</param>
        /// <param name="OriginalFileName">File name for the revision file.</param>
        /// <param name="Hash">Hash of the document.</param>
        public AttachmentRevisionDTO(int? Id = null, int? AttachmentId = null, int? Revision = null, int? User = null, string UserDescription = null, DateTime? CreationDate = null, string Path = null, string FileName = null, string OriginalFileName = null, string Hash = null)
        {
            this.Id = Id;
            this.AttachmentId = AttachmentId;
            this.Revision = Revision;
            this.User = User;
            this.UserDescription = UserDescription;
            this.CreationDate = CreationDate;
            this.Path = Path;
            this.FileName = FileName;
            this.OriginalFileName = OriginalFileName;
            this.Hash = Hash;
        }
        
        /// <summary>
        /// Id of the revision
        /// </summary>
        /// <value>Id of the revision</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Id of the attachment
        /// </summary>
        /// <value>Id of the attachment</value>
        [DataMember(Name="attachmentId", EmitDefaultValue=false)]
        public int? AttachmentId { get; set; }
        /// <summary>
        /// Revision number
        /// </summary>
        /// <value>Revision number</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Id of the author
        /// </summary>
        /// <value>Id of the author</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Description of the author
        /// </summary>
        /// <value>Description of the author</value>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }
        /// <summary>
        /// DateTime of this revision
        /// </summary>
        /// <value>DateTime of this revision</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Path to store the revision file
        /// </summary>
        /// <value>Path to store the revision file</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }
        /// <summary>
        /// File name of the compressed revision file
        /// </summary>
        /// <value>File name of the compressed revision file</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }
        /// <summary>
        /// File name for the revision file
        /// </summary>
        /// <value>File name for the revision file</value>
        [DataMember(Name="originalFileName", EmitDefaultValue=false)]
        public string OriginalFileName { get; set; }
        /// <summary>
        /// Hash of the document
        /// </summary>
        /// <value>Hash of the document</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentRevisionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AttachmentRevisionDTO);
        }

        /// <summary>
        /// Returns true if AttachmentRevisionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AttachmentRevisionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentRevisionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AttachmentId == other.AttachmentId ||
                    this.AttachmentId != null &&
                    this.AttachmentId.Equals(other.AttachmentId)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.UserDescription == other.UserDescription ||
                    this.UserDescription != null &&
                    this.UserDescription.Equals(other.UserDescription)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.OriginalFileName == other.OriginalFileName ||
                    this.OriginalFileName != null &&
                    this.OriginalFileName.Equals(other.OriginalFileName)
                ) && 
                (
                    this.Hash == other.Hash ||
                    this.Hash != null &&
                    this.Hash.Equals(other.Hash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AttachmentId != null)
                    hash = hash * 59 + this.AttachmentId.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.UserDescription != null)
                    hash = hash * 59 + this.UserDescription.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.OriginalFileName != null)
                    hash = hash * 59 + this.OriginalFileName.GetHashCode();
                if (this.Hash != null)
                    hash = hash * 59 + this.Hash.GetHashCode();
                return hash;
            }
        }
    }

}
