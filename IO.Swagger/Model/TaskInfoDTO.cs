/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of task information
    /// </summary>
    [DataContract]
    public partial class TaskInfoDTO :  IEquatable<TaskInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskInfoDTO" /> class.
        /// </summary>
        /// <param name="StartDate">Start Date.</param>
        /// <param name="EndDate">End Date.</param>
        /// <param name="ExpireDate">Expiry Date.</param>
        /// <param name="TakeChargeDate">Take Charge Date.</param>
        /// <param name="SystemId">Document Identifier.</param>
        /// <param name="Revision">Document Revision Number.</param>
        /// <param name="TaskId">Task Identifier.</param>
        /// <param name="TaskName">Task Name.</param>
        /// <param name="TaskDescription">Task Description.</param>
        /// <param name="UserCompleteName">User Description.</param>
        /// <param name="Outcome">Task Outcome.</param>
        /// <param name="Kind">Possible values:  0: Normale  1: Connessione  2: Processo  3: Pause  5: Task5  6: Documentazione  7: Chrono .</param>
        /// <param name="State">Possible values:  0: Concluso  1: Task_Attivo  2: Non_svolto .</param>
        public TaskInfoDTO(DateTime? StartDate = default(DateTime?), DateTime? EndDate = default(DateTime?), DateTime? ExpireDate = default(DateTime?), DateTime? TakeChargeDate = default(DateTime?), int? SystemId = default(int?), int? Revision = default(int?), int? TaskId = default(int?), string TaskName = default(string), string TaskDescription = default(string), string UserCompleteName = default(string), string Outcome = default(string), int? Kind = default(int?), int? State = default(int?))
        {
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.ExpireDate = ExpireDate;
            this.TakeChargeDate = TakeChargeDate;
            this.SystemId = SystemId;
            this.Revision = Revision;
            this.TaskId = TaskId;
            this.TaskName = TaskName;
            this.TaskDescription = TaskDescription;
            this.UserCompleteName = UserCompleteName;
            this.Outcome = Outcome;
            this.Kind = Kind;
            this.State = State;
        }
        
        /// <summary>
        /// Start Date
        /// </summary>
        /// <value>Start Date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End Date
        /// </summary>
        /// <value>End Date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Expiry Date
        /// </summary>
        /// <value>Expiry Date</value>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// Take Charge Date
        /// </summary>
        /// <value>Take Charge Date</value>
        [DataMember(Name="takeChargeDate", EmitDefaultValue=false)]
        public DateTime? TakeChargeDate { get; set; }

        /// <summary>
        /// Document Identifier
        /// </summary>
        /// <value>Document Identifier</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// Document Revision Number
        /// </summary>
        /// <value>Document Revision Number</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }

        /// <summary>
        /// Task Identifier
        /// </summary>
        /// <value>Task Identifier</value>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public int? TaskId { get; set; }

        /// <summary>
        /// Task Name
        /// </summary>
        /// <value>Task Name</value>
        [DataMember(Name="taskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Task Description
        /// </summary>
        /// <value>Task Description</value>
        [DataMember(Name="taskDescription", EmitDefaultValue=false)]
        public string TaskDescription { get; set; }

        /// <summary>
        /// User Description
        /// </summary>
        /// <value>User Description</value>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }

        /// <summary>
        /// Task Outcome
        /// </summary>
        /// <value>Task Outcome</value>
        [DataMember(Name="outcome", EmitDefaultValue=false)]
        public string Outcome { get; set; }

        /// <summary>
        /// Possible values:  0: Normale  1: Connessione  2: Processo  3: Pause  5: Task5  6: Documentazione  7: Chrono 
        /// </summary>
        /// <value>Possible values:  0: Normale  1: Connessione  2: Processo  3: Pause  5: Task5  6: Documentazione  7: Chrono </value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public int? Kind { get; set; }

        /// <summary>
        /// Possible values:  0: Concluso  1: Task_Attivo  2: Non_svolto 
        /// </summary>
        /// <value>Possible values:  0: Concluso  1: Task_Attivo  2: Non_svolto </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskInfoDTO {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  TakeChargeDate: ").Append(TakeChargeDate).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskInfoDTO);
        }

        /// <summary>
        /// Returns true if TaskInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.TakeChargeDate == input.TakeChargeDate ||
                    (this.TakeChargeDate != null &&
                    this.TakeChargeDate.Equals(input.TakeChargeDate))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TaskDescription == input.TaskDescription ||
                    (this.TaskDescription != null &&
                    this.TaskDescription.Equals(input.TaskDescription))
                ) && 
                (
                    this.UserCompleteName == input.UserCompleteName ||
                    (this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(input.UserCompleteName))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.TakeChargeDate != null)
                    hashCode = hashCode * 59 + this.TakeChargeDate.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.TaskDescription != null)
                    hashCode = hashCode * 59 + this.TaskDescription.GetHashCode();
                if (this.UserCompleteName != null)
                    hashCode = hashCode * 59 + this.UserCompleteName.GetHashCode();
                if (this.Outcome != null)
                    hashCode = hashCode * 59 + this.Outcome.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
