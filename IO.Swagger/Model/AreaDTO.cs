/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AreaDTO
    /// </summary>
    [DataContract]
    public partial class AreaDTO :  IEquatable<AreaDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AreaDTO" /> class.
        /// </summary>
        /// <param name="X1">X1.</param>
        /// <param name="Y1">Y1.</param>
        /// <param name="W">W.</param>
        /// <param name="H">H.</param>
        /// <param name="Value">Value.</param>
        public AreaDTO(double? X1 = null, double? Y1 = null, double? W = null, double? H = null, string Value = null)
        {
            this.X1 = X1;
            this.Y1 = Y1;
            this.W = W;
            this.H = H;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets X1
        /// </summary>
        [DataMember(Name="x1", EmitDefaultValue=false)]
        public double? X1 { get; set; }
        /// <summary>
        /// Gets or Sets Y1
        /// </summary>
        [DataMember(Name="y1", EmitDefaultValue=false)]
        public double? Y1 { get; set; }
        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name="w", EmitDefaultValue=false)]
        public double? W { get; set; }
        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [DataMember(Name="h", EmitDefaultValue=false)]
        public double? H { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AreaDTO {\n");
            sb.Append("  X1: ").Append(X1).Append("\n");
            sb.Append("  Y1: ").Append(Y1).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AreaDTO);
        }

        /// <summary>
        /// Returns true if AreaDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AreaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AreaDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.X1 == other.X1 ||
                    this.X1 != null &&
                    this.X1.Equals(other.X1)
                ) && 
                (
                    this.Y1 == other.Y1 ||
                    this.Y1 != null &&
                    this.Y1.Equals(other.Y1)
                ) && 
                (
                    this.W == other.W ||
                    this.W != null &&
                    this.W.Equals(other.W)
                ) && 
                (
                    this.H == other.H ||
                    this.H != null &&
                    this.H.Equals(other.H)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.X1 != null)
                    hash = hash * 59 + this.X1.GetHashCode();
                if (this.Y1 != null)
                    hash = hash * 59 + this.Y1.GetHashCode();
                if (this.W != null)
                    hash = hash * 59 + this.W.GetHashCode();
                if (this.H != null)
                    hash = hash * 59 + this.H.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }
    }

}
