/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class that represents a new mail insert request
    /// </summary>
    [DataContract]
    public partial class MailOutInsertRequestDTO :  IEquatable<MailOutInsertRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailOutInsertRequestDTO" /> class.
        /// </summary>
        /// <param name="recipientAlias">Alias for Recipient.</param>
        /// <param name="recipientMail">Mail of Recipient.</param>
        /// <param name="subject">Mail subject.</param>
        /// <param name="body">Mail Body.</param>
        /// <param name="isHtmlMail">Is mail Html.</param>
        /// <param name="attachmentsCahceIds">Attachments cache ids (refer to cache insert for save).</param>
        public MailOutInsertRequestDTO(string recipientAlias = default(string), string recipientMail = default(string), string subject = default(string), string body = default(string), bool? isHtmlMail = default(bool?), List<string> attachmentsCahceIds = default(List<string>))
        {
            this.RecipientAlias = recipientAlias;
            this.RecipientMail = recipientMail;
            this.Subject = subject;
            this.Body = body;
            this.IsHtmlMail = isHtmlMail;
            this.AttachmentsCahceIds = attachmentsCahceIds;
        }
        
        /// <summary>
        /// Alias for Recipient
        /// </summary>
        /// <value>Alias for Recipient</value>
        [DataMember(Name="recipientAlias", EmitDefaultValue=false)]
        public string RecipientAlias { get; set; }

        /// <summary>
        /// Mail of Recipient
        /// </summary>
        /// <value>Mail of Recipient</value>
        [DataMember(Name="recipientMail", EmitDefaultValue=false)]
        public string RecipientMail { get; set; }

        /// <summary>
        /// Mail subject
        /// </summary>
        /// <value>Mail subject</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Mail Body
        /// </summary>
        /// <value>Mail Body</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Is mail Html
        /// </summary>
        /// <value>Is mail Html</value>
        [DataMember(Name="isHtmlMail", EmitDefaultValue=false)]
        public bool? IsHtmlMail { get; set; }

        /// <summary>
        /// Attachments cache ids (refer to cache insert for save)
        /// </summary>
        /// <value>Attachments cache ids (refer to cache insert for save)</value>
        [DataMember(Name="attachmentsCahceIds", EmitDefaultValue=false)]
        public List<string> AttachmentsCahceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailOutInsertRequestDTO {\n");
            sb.Append("  RecipientAlias: ").Append(RecipientAlias).Append("\n");
            sb.Append("  RecipientMail: ").Append(RecipientMail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  IsHtmlMail: ").Append(IsHtmlMail).Append("\n");
            sb.Append("  AttachmentsCahceIds: ").Append(AttachmentsCahceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailOutInsertRequestDTO);
        }

        /// <summary>
        /// Returns true if MailOutInsertRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailOutInsertRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailOutInsertRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecipientAlias == input.RecipientAlias ||
                    (this.RecipientAlias != null &&
                    this.RecipientAlias.Equals(input.RecipientAlias))
                ) && 
                (
                    this.RecipientMail == input.RecipientMail ||
                    (this.RecipientMail != null &&
                    this.RecipientMail.Equals(input.RecipientMail))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.IsHtmlMail == input.IsHtmlMail ||
                    (this.IsHtmlMail != null &&
                    this.IsHtmlMail.Equals(input.IsHtmlMail))
                ) && 
                (
                    this.AttachmentsCahceIds == input.AttachmentsCahceIds ||
                    this.AttachmentsCahceIds != null &&
                    this.AttachmentsCahceIds.SequenceEqual(input.AttachmentsCahceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecipientAlias != null)
                    hashCode = hashCode * 59 + this.RecipientAlias.GetHashCode();
                if (this.RecipientMail != null)
                    hashCode = hashCode * 59 + this.RecipientMail.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.IsHtmlMail != null)
                    hashCode = hashCode * 59 + this.IsHtmlMail.GetHashCode();
                if (this.AttachmentsCahceIds != null)
                    hashCode = hashCode * 59 + this.AttachmentsCahceIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
