/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of default barcode
    /// </summary>
    [DataContract]
    public partial class DefaultBarcodeTemplateDto :  IEquatable<DefaultBarcodeTemplateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultBarcodeTemplateDto" /> class.
        /// </summary>
        /// <param name="BarcodeTemplate">Template Name.</param>
        /// <param name="PrinterFamily">Possible values:  0: ZEBRA_EPL2  1: ZEBRA_ZPL2  2: TOSHIBA_BSV4  3: EPSON_ESC_POS  4: GRAPHIC .</param>
        public DefaultBarcodeTemplateDto(string BarcodeTemplate = default(string), int? PrinterFamily = default(int?))
        {
            this.BarcodeTemplate = BarcodeTemplate;
            this.PrinterFamily = PrinterFamily;
        }
        
        /// <summary>
        /// Template Name
        /// </summary>
        /// <value>Template Name</value>
        [DataMember(Name="barcodeTemplate", EmitDefaultValue=false)]
        public string BarcodeTemplate { get; set; }

        /// <summary>
        /// Possible values:  0: ZEBRA_EPL2  1: ZEBRA_ZPL2  2: TOSHIBA_BSV4  3: EPSON_ESC_POS  4: GRAPHIC 
        /// </summary>
        /// <value>Possible values:  0: ZEBRA_EPL2  1: ZEBRA_ZPL2  2: TOSHIBA_BSV4  3: EPSON_ESC_POS  4: GRAPHIC </value>
        [DataMember(Name="printerFamily", EmitDefaultValue=false)]
        public int? PrinterFamily { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultBarcodeTemplateDto {\n");
            sb.Append("  BarcodeTemplate: ").Append(BarcodeTemplate).Append("\n");
            sb.Append("  PrinterFamily: ").Append(PrinterFamily).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultBarcodeTemplateDto);
        }

        /// <summary>
        /// Returns true if DefaultBarcodeTemplateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultBarcodeTemplateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultBarcodeTemplateDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BarcodeTemplate == input.BarcodeTemplate ||
                    (this.BarcodeTemplate != null &&
                    this.BarcodeTemplate.Equals(input.BarcodeTemplate))
                ) && 
                (
                    this.PrinterFamily == input.PrinterFamily ||
                    (this.PrinterFamily != null &&
                    this.PrinterFamily.Equals(input.PrinterFamily))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BarcodeTemplate != null)
                    hashCode = hashCode * 59 + this.BarcodeTemplate.GetHashCode();
                if (this.PrinterFamily != null)
                    hashCode = hashCode * 59 + this.PrinterFamily.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
