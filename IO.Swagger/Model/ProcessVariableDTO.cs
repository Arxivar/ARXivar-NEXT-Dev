/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Process Variable information DTO
    /// </summary>
    [DataContract]
    public partial class ProcessVariableDTO :  IEquatable<ProcessVariableDTO>
    {
        /// <summary>
        /// Type of the variable
        /// </summary>
        /// <value>Type of the variable</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessVariableFormatEnum
        {
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text,
            
            /// <summary>
            /// Enum Number for "Number"
            /// </summary>
            [EnumMember(Value = "Number")]
            Number,
            
            /// <summary>
            /// Enum DateTime for "DateTime"
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime,
            
            /// <summary>
            /// Enum Boolean for "Boolean"
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean,
            
            /// <summary>
            /// Enum Combo for "Combo"
            /// </summary>
            [EnumMember(Value = "Combo")]
            Combo,
            
            /// <summary>
            /// Enum Matrix for "Matrix"
            /// </summary>
            [EnumMember(Value = "Matrix")]
            Matrix,
            
            /// <summary>
            /// Enum TextArea for "TextArea"
            /// </summary>
            [EnumMember(Value = "TextArea")]
            TextArea,
            
            /// <summary>
            /// Enum TableBox for "TableBox"
            /// </summary>
            [EnumMember(Value = "TableBox")]
            TableBox
        }

        /// <summary>
        /// Type of the variable
        /// </summary>
        /// <value>Type of the variable</value>
        [DataMember(Name="processVariableFormat", EmitDefaultValue=false)]
        public ProcessVariableFormatEnum? ProcessVariableFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariableDTO" /> class.
        /// </summary>
        /// <param name="Id">Variable Id..</param>
        /// <param name="Name">Variable Name..</param>
        /// <param name="Description">Variable Description..</param>
        /// <param name="ProcessId">Process Id..</param>
        /// <param name="Label">Variable Label..</param>
        /// <param name="Value">Vaiable Value.</param>
        /// <param name="ParentId">Parent Matrix Variable Id.</param>
        /// <param name="LabelTranslatedId">Translated Label Id ..</param>
        /// <param name="DescriptionTranslatedId">Trasnlated description Id.</param>
        /// <param name="TextFormat">Format for visualization.</param>
        /// <param name="MaxRowNumber">Maximun number of row of text.</param>
        /// <param name="IsLimitToList">Is limit to list.</param>
        /// <param name="ProcessVariableFormat">Type of the variable.</param>
        public ProcessVariableDTO(int? Id = null, string Name = null, string Description = null, int? ProcessId = null, string Label = null, string Value = null, int? ParentId = null, int? LabelTranslatedId = null, int? DescriptionTranslatedId = null, int? TextFormat = null, int? MaxRowNumber = null, bool? IsLimitToList = null, ProcessVariableFormatEnum? ProcessVariableFormat = null)
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.ProcessId = ProcessId;
            this.Label = Label;
            this.Value = Value;
            this.ParentId = ParentId;
            this.LabelTranslatedId = LabelTranslatedId;
            this.DescriptionTranslatedId = DescriptionTranslatedId;
            this.TextFormat = TextFormat;
            this.MaxRowNumber = MaxRowNumber;
            this.IsLimitToList = IsLimitToList;
            this.ProcessVariableFormat = ProcessVariableFormat;
        }
        
        /// <summary>
        /// Variable Id.
        /// </summary>
        /// <value>Variable Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Variable Name.
        /// </summary>
        /// <value>Variable Name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Variable Description.
        /// </summary>
        /// <value>Variable Description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Process Id.
        /// </summary>
        /// <value>Process Id.</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }
        /// <summary>
        /// Variable Label.
        /// </summary>
        /// <value>Variable Label.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Vaiable Value
        /// </summary>
        /// <value>Vaiable Value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Parent Matrix Variable Id
        /// </summary>
        /// <value>Parent Matrix Variable Id</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }
        /// <summary>
        /// Translated Label Id .
        /// </summary>
        /// <value>Translated Label Id .</value>
        [DataMember(Name="labelTranslatedId", EmitDefaultValue=false)]
        public int? LabelTranslatedId { get; set; }
        /// <summary>
        /// Trasnlated description Id
        /// </summary>
        /// <value>Trasnlated description Id</value>
        [DataMember(Name="descriptionTranslatedId", EmitDefaultValue=false)]
        public int? DescriptionTranslatedId { get; set; }
        /// <summary>
        /// Format for visualization
        /// </summary>
        /// <value>Format for visualization</value>
        [DataMember(Name="textFormat", EmitDefaultValue=false)]
        public int? TextFormat { get; set; }
        /// <summary>
        /// Maximun number of row of text
        /// </summary>
        /// <value>Maximun number of row of text</value>
        [DataMember(Name="maxRowNumber", EmitDefaultValue=false)]
        public int? MaxRowNumber { get; set; }
        /// <summary>
        /// Is limit to list
        /// </summary>
        /// <value>Is limit to list</value>
        [DataMember(Name="isLimitToList", EmitDefaultValue=false)]
        public bool? IsLimitToList { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessVariableDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  LabelTranslatedId: ").Append(LabelTranslatedId).Append("\n");
            sb.Append("  DescriptionTranslatedId: ").Append(DescriptionTranslatedId).Append("\n");
            sb.Append("  TextFormat: ").Append(TextFormat).Append("\n");
            sb.Append("  MaxRowNumber: ").Append(MaxRowNumber).Append("\n");
            sb.Append("  IsLimitToList: ").Append(IsLimitToList).Append("\n");
            sb.Append("  ProcessVariableFormat: ").Append(ProcessVariableFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessVariableDTO);
        }

        /// <summary>
        /// Returns true if ProcessVariableDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessVariableDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessVariableDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.LabelTranslatedId == other.LabelTranslatedId ||
                    this.LabelTranslatedId != null &&
                    this.LabelTranslatedId.Equals(other.LabelTranslatedId)
                ) && 
                (
                    this.DescriptionTranslatedId == other.DescriptionTranslatedId ||
                    this.DescriptionTranslatedId != null &&
                    this.DescriptionTranslatedId.Equals(other.DescriptionTranslatedId)
                ) && 
                (
                    this.TextFormat == other.TextFormat ||
                    this.TextFormat != null &&
                    this.TextFormat.Equals(other.TextFormat)
                ) && 
                (
                    this.MaxRowNumber == other.MaxRowNumber ||
                    this.MaxRowNumber != null &&
                    this.MaxRowNumber.Equals(other.MaxRowNumber)
                ) && 
                (
                    this.IsLimitToList == other.IsLimitToList ||
                    this.IsLimitToList != null &&
                    this.IsLimitToList.Equals(other.IsLimitToList)
                ) && 
                (
                    this.ProcessVariableFormat == other.ProcessVariableFormat ||
                    this.ProcessVariableFormat != null &&
                    this.ProcessVariableFormat.Equals(other.ProcessVariableFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.LabelTranslatedId != null)
                    hash = hash * 59 + this.LabelTranslatedId.GetHashCode();
                if (this.DescriptionTranslatedId != null)
                    hash = hash * 59 + this.DescriptionTranslatedId.GetHashCode();
                if (this.TextFormat != null)
                    hash = hash * 59 + this.TextFormat.GetHashCode();
                if (this.MaxRowNumber != null)
                    hash = hash * 59 + this.MaxRowNumber.GetHashCode();
                if (this.IsLimitToList != null)
                    hash = hash * 59 + this.IsLimitToList.GetHashCode();
                if (this.ProcessVariableFormat != null)
                    hash = hash * 59 + this.ProcessVariableFormat.GetHashCode();
                return hash;
            }
        }
    }

}
