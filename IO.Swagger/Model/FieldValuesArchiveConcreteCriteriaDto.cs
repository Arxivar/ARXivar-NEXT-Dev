/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldValuesArchiveConcreteCriteriaDto
    /// </summary>
    [DataContract]
    public partial class FieldValuesArchiveConcreteCriteriaDto :  IEquatable<FieldValuesArchiveConcreteCriteriaDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValuesArchiveConcreteCriteriaDto" /> class.
        /// </summary>
        /// <param name="SearchFilterDto">SearchFilterDto.</param>
        /// <param name="FieldName">FieldName.</param>
        /// <param name="FilterValue">FilterValue.</param>
        /// <param name="FilterId">FilterId.</param>
        /// <param name="DoubleFilterFields">DoubleFilterFields.</param>
        /// <param name="StringListFilterFields">StringListFilterFields.</param>
        /// <param name="DateTimeFilterFields">DateTimeFilterFields.</param>
        /// <param name="StringFilterFields">StringFilterFields.</param>
        /// <param name="IntFilterFields">IntFilterFields.</param>
        /// <param name="BoolFilterFields">BoolFilterFields.</param>
        public FieldValuesArchiveConcreteCriteriaDto(ProfileConcreteDTO SearchFilterDto = null, string FieldName = null, string FilterValue = null, string FilterId = null, List<FieldBaseForSearchDoubleDto> DoubleFilterFields = null, List<FieldBaseForSearchListDto> StringListFilterFields = null, List<FieldBaseForSearchDateTimeDto> DateTimeFilterFields = null, List<FieldBaseForSearchStringDto> StringFilterFields = null, List<FieldBaseForSearchIntDto> IntFilterFields = null, List<FieldBaseForSearchBoolDto> BoolFilterFields = null)
        {
            this.SearchFilterDto = SearchFilterDto;
            this.FieldName = FieldName;
            this.FilterValue = FilterValue;
            this.FilterId = FilterId;
            this.DoubleFilterFields = DoubleFilterFields;
            this.StringListFilterFields = StringListFilterFields;
            this.DateTimeFilterFields = DateTimeFilterFields;
            this.StringFilterFields = StringFilterFields;
            this.IntFilterFields = IntFilterFields;
            this.BoolFilterFields = BoolFilterFields;
        }
        
        /// <summary>
        /// Gets or Sets SearchFilterDto
        /// </summary>
        [DataMember(Name="searchFilterDto", EmitDefaultValue=false)]
        public ProfileConcreteDTO SearchFilterDto { get; set; }
        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }
        /// <summary>
        /// Gets or Sets FilterValue
        /// </summary>
        [DataMember(Name="filterValue", EmitDefaultValue=false)]
        public string FilterValue { get; set; }
        /// <summary>
        /// Gets or Sets FilterId
        /// </summary>
        [DataMember(Name="filterId", EmitDefaultValue=false)]
        public string FilterId { get; set; }
        /// <summary>
        /// Gets or Sets DoubleFilterFields
        /// </summary>
        [DataMember(Name="doubleFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchDoubleDto> DoubleFilterFields { get; set; }
        /// <summary>
        /// Gets or Sets StringListFilterFields
        /// </summary>
        [DataMember(Name="stringListFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchListDto> StringListFilterFields { get; set; }
        /// <summary>
        /// Gets or Sets DateTimeFilterFields
        /// </summary>
        [DataMember(Name="dateTimeFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchDateTimeDto> DateTimeFilterFields { get; set; }
        /// <summary>
        /// Gets or Sets StringFilterFields
        /// </summary>
        [DataMember(Name="stringFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchStringDto> StringFilterFields { get; set; }
        /// <summary>
        /// Gets or Sets IntFilterFields
        /// </summary>
        [DataMember(Name="intFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchIntDto> IntFilterFields { get; set; }
        /// <summary>
        /// Gets or Sets BoolFilterFields
        /// </summary>
        [DataMember(Name="boolFilterFields", EmitDefaultValue=false)]
        public List<FieldBaseForSearchBoolDto> BoolFilterFields { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldValuesArchiveConcreteCriteriaDto {\n");
            sb.Append("  SearchFilterDto: ").Append(SearchFilterDto).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FilterValue: ").Append(FilterValue).Append("\n");
            sb.Append("  FilterId: ").Append(FilterId).Append("\n");
            sb.Append("  DoubleFilterFields: ").Append(DoubleFilterFields).Append("\n");
            sb.Append("  StringListFilterFields: ").Append(StringListFilterFields).Append("\n");
            sb.Append("  DateTimeFilterFields: ").Append(DateTimeFilterFields).Append("\n");
            sb.Append("  StringFilterFields: ").Append(StringFilterFields).Append("\n");
            sb.Append("  IntFilterFields: ").Append(IntFilterFields).Append("\n");
            sb.Append("  BoolFilterFields: ").Append(BoolFilterFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FieldValuesArchiveConcreteCriteriaDto);
        }

        /// <summary>
        /// Returns true if FieldValuesArchiveConcreteCriteriaDto instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldValuesArchiveConcreteCriteriaDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValuesArchiveConcreteCriteriaDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SearchFilterDto == other.SearchFilterDto ||
                    this.SearchFilterDto != null &&
                    this.SearchFilterDto.Equals(other.SearchFilterDto)
                ) && 
                (
                    this.FieldName == other.FieldName ||
                    this.FieldName != null &&
                    this.FieldName.Equals(other.FieldName)
                ) && 
                (
                    this.FilterValue == other.FilterValue ||
                    this.FilterValue != null &&
                    this.FilterValue.Equals(other.FilterValue)
                ) && 
                (
                    this.FilterId == other.FilterId ||
                    this.FilterId != null &&
                    this.FilterId.Equals(other.FilterId)
                ) && 
                (
                    this.DoubleFilterFields == other.DoubleFilterFields ||
                    this.DoubleFilterFields != null &&
                    this.DoubleFilterFields.SequenceEqual(other.DoubleFilterFields)
                ) && 
                (
                    this.StringListFilterFields == other.StringListFilterFields ||
                    this.StringListFilterFields != null &&
                    this.StringListFilterFields.SequenceEqual(other.StringListFilterFields)
                ) && 
                (
                    this.DateTimeFilterFields == other.DateTimeFilterFields ||
                    this.DateTimeFilterFields != null &&
                    this.DateTimeFilterFields.SequenceEqual(other.DateTimeFilterFields)
                ) && 
                (
                    this.StringFilterFields == other.StringFilterFields ||
                    this.StringFilterFields != null &&
                    this.StringFilterFields.SequenceEqual(other.StringFilterFields)
                ) && 
                (
                    this.IntFilterFields == other.IntFilterFields ||
                    this.IntFilterFields != null &&
                    this.IntFilterFields.SequenceEqual(other.IntFilterFields)
                ) && 
                (
                    this.BoolFilterFields == other.BoolFilterFields ||
                    this.BoolFilterFields != null &&
                    this.BoolFilterFields.SequenceEqual(other.BoolFilterFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SearchFilterDto != null)
                    hash = hash * 59 + this.SearchFilterDto.GetHashCode();
                if (this.FieldName != null)
                    hash = hash * 59 + this.FieldName.GetHashCode();
                if (this.FilterValue != null)
                    hash = hash * 59 + this.FilterValue.GetHashCode();
                if (this.FilterId != null)
                    hash = hash * 59 + this.FilterId.GetHashCode();
                if (this.DoubleFilterFields != null)
                    hash = hash * 59 + this.DoubleFilterFields.GetHashCode();
                if (this.StringListFilterFields != null)
                    hash = hash * 59 + this.StringListFilterFields.GetHashCode();
                if (this.DateTimeFilterFields != null)
                    hash = hash * 59 + this.DateTimeFilterFields.GetHashCode();
                if (this.StringFilterFields != null)
                    hash = hash * 59 + this.StringFilterFields.GetHashCode();
                if (this.IntFilterFields != null)
                    hash = hash * 59 + this.IntFilterFields.GetHashCode();
                if (this.BoolFilterFields != null)
                    hash = hash * 59 + this.BoolFilterFields.GetHashCode();
                return hash;
            }
        }
    }

}
