/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of single permission associated with a profile
    /// </summary>
    [DataContract]
    public partial class SingleProfilePermissionsDTO :  IEquatable<SingleProfilePermissionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleProfilePermissionsDTO" /> class.
        /// </summary>
        /// <param name="_ReadOnly">Read Only.</param>
        /// <param name="PermissionModality">Possible values:  0: Additional  1: Exclusive .</param>
        /// <param name="CanManagePermissions">Permissions item.</param>
        /// <param name="UsersPermissions">List of user permissions.</param>
        /// <param name="PermissionsProperties">Permission Properties.</param>
        public SingleProfilePermissionsDTO(bool? _ReadOnly = default(bool?), int? PermissionModality = default(int?), List<PermissionItemDTO> CanManagePermissions = default(List<PermissionItemDTO>), List<UserPermissionDTO> UsersPermissions = default(List<UserPermissionDTO>), List<PermissionPropertiesDTO> PermissionsProperties = default(List<PermissionPropertiesDTO>))
        {
            this._ReadOnly = _ReadOnly;
            this.PermissionModality = PermissionModality;
            this.CanManagePermissions = CanManagePermissions;
            this.UsersPermissions = UsersPermissions;
            this.PermissionsProperties = PermissionsProperties;
        }
        
        /// <summary>
        /// Read Only
        /// </summary>
        /// <value>Read Only</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// Possible values:  0: Additional  1: Exclusive 
        /// </summary>
        /// <value>Possible values:  0: Additional  1: Exclusive </value>
        [DataMember(Name="permissionModality", EmitDefaultValue=false)]
        public int? PermissionModality { get; set; }

        /// <summary>
        /// Permissions item
        /// </summary>
        /// <value>Permissions item</value>
        [DataMember(Name="canManagePermissions", EmitDefaultValue=false)]
        public List<PermissionItemDTO> CanManagePermissions { get; set; }

        /// <summary>
        /// List of user permissions
        /// </summary>
        /// <value>List of user permissions</value>
        [DataMember(Name="usersPermissions", EmitDefaultValue=false)]
        public List<UserPermissionDTO> UsersPermissions { get; set; }

        /// <summary>
        /// Permission Properties
        /// </summary>
        /// <value>Permission Properties</value>
        [DataMember(Name="permissionsProperties", EmitDefaultValue=false)]
        public List<PermissionPropertiesDTO> PermissionsProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleProfilePermissionsDTO {\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  PermissionModality: ").Append(PermissionModality).Append("\n");
            sb.Append("  CanManagePermissions: ").Append(CanManagePermissions).Append("\n");
            sb.Append("  UsersPermissions: ").Append(UsersPermissions).Append("\n");
            sb.Append("  PermissionsProperties: ").Append(PermissionsProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleProfilePermissionsDTO);
        }

        /// <summary>
        /// Returns true if SingleProfilePermissionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleProfilePermissionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleProfilePermissionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._ReadOnly == input._ReadOnly ||
                    (this._ReadOnly != null &&
                    this._ReadOnly.Equals(input._ReadOnly))
                ) && 
                (
                    this.PermissionModality == input.PermissionModality ||
                    (this.PermissionModality != null &&
                    this.PermissionModality.Equals(input.PermissionModality))
                ) && 
                (
                    this.CanManagePermissions == input.CanManagePermissions ||
                    this.CanManagePermissions != null &&
                    this.CanManagePermissions.SequenceEqual(input.CanManagePermissions)
                ) && 
                (
                    this.UsersPermissions == input.UsersPermissions ||
                    this.UsersPermissions != null &&
                    this.UsersPermissions.SequenceEqual(input.UsersPermissions)
                ) && 
                (
                    this.PermissionsProperties == input.PermissionsProperties ||
                    this.PermissionsProperties != null &&
                    this.PermissionsProperties.SequenceEqual(input.PermissionsProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._ReadOnly != null)
                    hashCode = hashCode * 59 + this._ReadOnly.GetHashCode();
                if (this.PermissionModality != null)
                    hashCode = hashCode * 59 + this.PermissionModality.GetHashCode();
                if (this.CanManagePermissions != null)
                    hashCode = hashCode * 59 + this.CanManagePermissions.GetHashCode();
                if (this.UsersPermissions != null)
                    hashCode = hashCode * 59 + this.UsersPermissions.GetHashCode();
                if (this.PermissionsProperties != null)
                    hashCode = hashCode * 59 + this.PermissionsProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
