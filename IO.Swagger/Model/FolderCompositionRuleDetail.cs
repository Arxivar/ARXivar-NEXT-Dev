/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FolderCompositionRuleDetail
    /// </summary>
    [DataContract]
    public partial class FolderCompositionRuleDetail :  IEquatable<FolderCompositionRuleDetail>
    {
        /// <summary>
        /// Gets or Sets FieldKind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldKindEnum
        {
            
            /// <summary>
            /// Enum NonImpostato for "NonImpostato"
            /// </summary>
            [EnumMember(Value = "NonImpostato")]
            NonImpostato,
            
            /// <summary>
            /// Enum From for "From"
            /// </summary>
            [EnumMember(Value = "From")]
            From,
            
            /// <summary>
            /// Enum To for "To"
            /// </summary>
            [EnumMember(Value = "To")]
            To,
            
            /// <summary>
            /// Enum Cc for "Cc"
            /// </summary>
            [EnumMember(Value = "Cc")]
            Cc,
            
            /// <summary>
            /// Enum Aoo for "Aoo"
            /// </summary>
            [EnumMember(Value = "Aoo")]
            Aoo,
            
            /// <summary>
            /// Enum DocumentType for "DocumentType"
            /// </summary>
            [EnumMember(Value = "DocumentType")]
            DocumentType,
            
            /// <summary>
            /// Enum DataDoc for "DataDoc"
            /// </summary>
            [EnumMember(Value = "DataDoc")]
            DataDoc,
            
            /// <summary>
            /// Enum Numero for "Numero"
            /// </summary>
            [EnumMember(Value = "Numero")]
            Numero,
            
            /// <summary>
            /// Enum Oggetto for "Oggetto"
            /// </summary>
            [EnumMember(Value = "Oggetto")]
            Oggetto,
            
            /// <summary>
            /// Enum Origine for "Origine"
            /// </summary>
            [EnumMember(Value = "Origine")]
            Origine,
            
            /// <summary>
            /// Enum Stato for "Stato"
            /// </summary>
            [EnumMember(Value = "Stato")]
            Stato,
            
            /// <summary>
            /// Enum Pratiche for "Pratiche"
            /// </summary>
            [EnumMember(Value = "Pratiche")]
            Pratiche,
            
            /// <summary>
            /// Enum Scadenza for "Scadenza"
            /// </summary>
            [EnumMember(Value = "Scadenza")]
            Scadenza,
            
            /// <summary>
            /// Enum Importante for "Importante"
            /// </summary>
            [EnumMember(Value = "Importante")]
            Importante,
            
            /// <summary>
            /// Enum AbilitaWeb for "AbilitaWeb"
            /// </summary>
            [EnumMember(Value = "AbilitaWeb")]
            AbilitaWeb,
            
            /// <summary>
            /// Enum AvviaWorkFlow for "AvviaWorkFlow"
            /// </summary>
            [EnumMember(Value = "AvviaWorkFlow")]
            AvviaWorkFlow,
            
            /// <summary>
            /// Enum InviaPerFax for "InviaPerFax"
            /// </summary>
            [EnumMember(Value = "InviaPerFax")]
            InviaPerFax,
            
            /// <summary>
            /// Enum InviaPerMail for "InviaPerMail"
            /// </summary>
            [EnumMember(Value = "InviaPerMail")]
            InviaPerMail,
            
            /// <summary>
            /// Enum AllegaATaskAttivo for "AllegaATaskAttivo"
            /// </summary>
            [EnumMember(Value = "AllegaATaskAttivo")]
            AllegaATaskAttivo,
            
            /// <summary>
            /// Enum InserisciInAssociazione for "InserisciInAssociazione"
            /// </summary>
            [EnumMember(Value = "InserisciInAssociazione")]
            InserisciInAssociazione,
            
            /// <summary>
            /// Enum InserisciInFascicolo for "InserisciInFascicolo"
            /// </summary>
            [EnumMember(Value = "InserisciInFascicolo")]
            InserisciInFascicolo,
            
            /// <summary>
            /// Enum InserisciInRelazioneManuale for "InserisciInRelazioneManuale"
            /// </summary>
            [EnumMember(Value = "InserisciInRelazioneManuale")]
            InserisciInRelazioneManuale,
            
            /// <summary>
            /// Enum GestisciRevisioni for "GestisciRevisioni"
            /// </summary>
            [EnumMember(Value = "GestisciRevisioni")]
            GestisciRevisioni,
            
            /// <summary>
            /// Enum Note for "Note"
            /// </summary>
            [EnumMember(Value = "Note")]
            Note,
            
            /// <summary>
            /// Enum Allegati for "Allegati"
            /// </summary>
            [EnumMember(Value = "Allegati")]
            Allegati,
            
            /// <summary>
            /// Enum Aggiuntivo for "Aggiuntivo"
            /// </summary>
            [EnumMember(Value = "Aggiuntivo")]
            Aggiuntivo,
            
            /// <summary>
            /// Enum File for "File"
            /// </summary>
            [EnumMember(Value = "File")]
            File,
            
            /// <summary>
            /// Enum Scanner for "Scanner"
            /// </summary>
            [EnumMember(Value = "Scanner")]
            Scanner,
            
            /// <summary>
            /// Enum Barcode for "Barcode"
            /// </summary>
            [EnumMember(Value = "Barcode")]
            Barcode,
            
            /// <summary>
            /// Enum SicurezzaSingoloDocumento for "SicurezzaSingoloDocumento"
            /// </summary>
            [EnumMember(Value = "SicurezzaSingoloDocumento")]
            SicurezzaSingoloDocumento,
            
            /// <summary>
            /// Enum ExternalId for "ExternalId"
            /// </summary>
            [EnumMember(Value = "ExternalId")]
            ExternalId,
            
            /// <summary>
            /// Enum AllegaMemo for "AllegaMemo"
            /// </summary>
            [EnumMember(Value = "AllegaMemo")]
            AllegaMemo,
            
            /// <summary>
            /// Enum Senders for "Senders"
            /// </summary>
            [EnumMember(Value = "Senders")]
            Senders,
            
            /// <summary>
            /// Enum AvviaCollaboration for "AvviaCollaboration"
            /// </summary>
            [EnumMember(Value = "AvviaCollaboration")]
            AvviaCollaboration,
            
            /// <summary>
            /// Enum ScansioneImmediata for "ScansioneImmediata"
            /// </summary>
            [EnumMember(Value = "ScansioneImmediata")]
            ScansioneImmediata,
            
            /// <summary>
            /// Enum NegaCommuta for "NegaCommuta"
            /// </summary>
            [EnumMember(Value = "NegaCommuta")]
            NegaCommuta,
            
            /// <summary>
            /// Enum FromCap for "From_Cap"
            /// </summary>
            [EnumMember(Value = "From_Cap")]
            FromCap,
            
            /// <summary>
            /// Enum FromCell for "From_Cell"
            /// </summary>
            [EnumMember(Value = "From_Cell")]
            FromCell,
            
            /// <summary>
            /// Enum FromCodfis for "From_Codfis"
            /// </summary>
            [EnumMember(Value = "From_Codfis")]
            FromCodfis,
            
            /// <summary>
            /// Enum FromCodice for "From_Codice"
            /// </summary>
            [EnumMember(Value = "From_Codice")]
            FromCodice,
            
            /// <summary>
            /// Enum FromContatti for "From_Contatti"
            /// </summary>
            [EnumMember(Value = "From_Contatti")]
            FromContatti,
            
            /// <summary>
            /// Enum FromEmail for "From_Email"
            /// </summary>
            [EnumMember(Value = "From_Email")]
            FromEmail,
            
            /// <summary>
            /// Enum FromFax for "From_Fax"
            /// </summary>
            [EnumMember(Value = "From_Fax")]
            FromFax,
            
            /// <summary>
            /// Enum FromFaxnome for "From_Faxnome"
            /// </summary>
            [EnumMember(Value = "From_Faxnome")]
            FromFaxnome,
            
            /// <summary>
            /// Enum FromIndirizzo for "From_Indirizzo"
            /// </summary>
            [EnumMember(Value = "From_Indirizzo")]
            FromIndirizzo,
            
            /// <summary>
            /// Enum FromLocalita for "From_Localita"
            /// </summary>
            [EnumMember(Value = "From_Localita")]
            FromLocalita,
            
            /// <summary>
            /// Enum FromMail for "From_Mail"
            /// </summary>
            [EnumMember(Value = "From_Mail")]
            FromMail,
            
            /// <summary>
            /// Enum FromMansione for "From_Mansione"
            /// </summary>
            [EnumMember(Value = "From_Mansione")]
            FromMansione,
            
            /// <summary>
            /// Enum FromNazione for "From_Nazione"
            /// </summary>
            [EnumMember(Value = "From_Nazione")]
            FromNazione,
            
            /// <summary>
            /// Enum FromPartiva for "From_Partiva"
            /// </summary>
            [EnumMember(Value = "From_Partiva")]
            FromPartiva,
            
            /// <summary>
            /// Enum FromProvincia for "From_Provincia"
            /// </summary>
            [EnumMember(Value = "From_Provincia")]
            FromProvincia,
            
            /// <summary>
            /// Enum FromReparto for "From_Reparto"
            /// </summary>
            [EnumMember(Value = "From_Reparto")]
            FromReparto,
            
            /// <summary>
            /// Enum FromRiferimento for "From_Riferimento"
            /// </summary>
            [EnumMember(Value = "From_Riferimento")]
            FromRiferimento,
            
            /// <summary>
            /// Enum FromTel for "From_Tel"
            /// </summary>
            [EnumMember(Value = "From_Tel")]
            FromTel,
            
            /// <summary>
            /// Enum FromTelnome for "From_Telnome"
            /// </summary>
            [EnumMember(Value = "From_Telnome")]
            FromTelnome,
            
            /// <summary>
            /// Enum FromUfficio for "From_Ufficio"
            /// </summary>
            [EnumMember(Value = "From_Ufficio")]
            FromUfficio,
            
            /// <summary>
            /// Enum FromValore for "From_Valore"
            /// </summary>
            [EnumMember(Value = "From_Valore")]
            FromValore,
            
            /// <summary>
            /// Enum FromAbitazione for "From_Abitazione"
            /// </summary>
            [EnumMember(Value = "From_Abitazione")]
            FromAbitazione,
            
            /// <summary>
            /// Enum ToCap for "To_Cap"
            /// </summary>
            [EnumMember(Value = "To_Cap")]
            ToCap,
            
            /// <summary>
            /// Enum ToCell for "To_Cell"
            /// </summary>
            [EnumMember(Value = "To_Cell")]
            ToCell,
            
            /// <summary>
            /// Enum ToCodfis for "To_Codfis"
            /// </summary>
            [EnumMember(Value = "To_Codfis")]
            ToCodfis,
            
            /// <summary>
            /// Enum ToCodice for "To_Codice"
            /// </summary>
            [EnumMember(Value = "To_Codice")]
            ToCodice,
            
            /// <summary>
            /// Enum ToContatti for "To_Contatti"
            /// </summary>
            [EnumMember(Value = "To_Contatti")]
            ToContatti,
            
            /// <summary>
            /// Enum ToEmail for "To_Email"
            /// </summary>
            [EnumMember(Value = "To_Email")]
            ToEmail,
            
            /// <summary>
            /// Enum ToFax for "To_Fax"
            /// </summary>
            [EnumMember(Value = "To_Fax")]
            ToFax,
            
            /// <summary>
            /// Enum ToFaxnome for "To_Faxnome"
            /// </summary>
            [EnumMember(Value = "To_Faxnome")]
            ToFaxnome,
            
            /// <summary>
            /// Enum ToIndirizzo for "To_Indirizzo"
            /// </summary>
            [EnumMember(Value = "To_Indirizzo")]
            ToIndirizzo,
            
            /// <summary>
            /// Enum ToLocalita for "To_Localita"
            /// </summary>
            [EnumMember(Value = "To_Localita")]
            ToLocalita,
            
            /// <summary>
            /// Enum ToMail for "To_Mail"
            /// </summary>
            [EnumMember(Value = "To_Mail")]
            ToMail,
            
            /// <summary>
            /// Enum ToMansione for "To_Mansione"
            /// </summary>
            [EnumMember(Value = "To_Mansione")]
            ToMansione,
            
            /// <summary>
            /// Enum ToNazione for "To_Nazione"
            /// </summary>
            [EnumMember(Value = "To_Nazione")]
            ToNazione,
            
            /// <summary>
            /// Enum ToPartiva for "To_Partiva"
            /// </summary>
            [EnumMember(Value = "To_Partiva")]
            ToPartiva,
            
            /// <summary>
            /// Enum ToProvincia for "To_Provincia"
            /// </summary>
            [EnumMember(Value = "To_Provincia")]
            ToProvincia,
            
            /// <summary>
            /// Enum ToReparto for "To_Reparto"
            /// </summary>
            [EnumMember(Value = "To_Reparto")]
            ToReparto,
            
            /// <summary>
            /// Enum ToRiferimento for "To_Riferimento"
            /// </summary>
            [EnumMember(Value = "To_Riferimento")]
            ToRiferimento,
            
            /// <summary>
            /// Enum ToTel for "To_Tel"
            /// </summary>
            [EnumMember(Value = "To_Tel")]
            ToTel,
            
            /// <summary>
            /// Enum ToTelnome for "To_Telnome"
            /// </summary>
            [EnumMember(Value = "To_Telnome")]
            ToTelnome,
            
            /// <summary>
            /// Enum ToUfficio for "To_Ufficio"
            /// </summary>
            [EnumMember(Value = "To_Ufficio")]
            ToUfficio,
            
            /// <summary>
            /// Enum ToValore for "To_Valore"
            /// </summary>
            [EnumMember(Value = "To_Valore")]
            ToValore,
            
            /// <summary>
            /// Enum ToAbitazione for "To_Abitazione"
            /// </summary>
            [EnumMember(Value = "To_Abitazione")]
            ToAbitazione,
            
            /// <summary>
            /// Enum CcCap for "Cc_Cap"
            /// </summary>
            [EnumMember(Value = "Cc_Cap")]
            CcCap,
            
            /// <summary>
            /// Enum CcCell for "Cc_Cell"
            /// </summary>
            [EnumMember(Value = "Cc_Cell")]
            CcCell,
            
            /// <summary>
            /// Enum CcCodfis for "Cc_Codfis"
            /// </summary>
            [EnumMember(Value = "Cc_Codfis")]
            CcCodfis,
            
            /// <summary>
            /// Enum CcCodice for "Cc_Codice"
            /// </summary>
            [EnumMember(Value = "Cc_Codice")]
            CcCodice,
            
            /// <summary>
            /// Enum CcContatti for "Cc_Contatti"
            /// </summary>
            [EnumMember(Value = "Cc_Contatti")]
            CcContatti,
            
            /// <summary>
            /// Enum CcEmail for "Cc_Email"
            /// </summary>
            [EnumMember(Value = "Cc_Email")]
            CcEmail,
            
            /// <summary>
            /// Enum CcFax for "Cc_Fax"
            /// </summary>
            [EnumMember(Value = "Cc_Fax")]
            CcFax,
            
            /// <summary>
            /// Enum CcFaxnome for "Cc_Faxnome"
            /// </summary>
            [EnumMember(Value = "Cc_Faxnome")]
            CcFaxnome,
            
            /// <summary>
            /// Enum CcIndirizzo for "Cc_Indirizzo"
            /// </summary>
            [EnumMember(Value = "Cc_Indirizzo")]
            CcIndirizzo,
            
            /// <summary>
            /// Enum CcLocalita for "Cc_Localita"
            /// </summary>
            [EnumMember(Value = "Cc_Localita")]
            CcLocalita,
            
            /// <summary>
            /// Enum CcMail for "Cc_Mail"
            /// </summary>
            [EnumMember(Value = "Cc_Mail")]
            CcMail,
            
            /// <summary>
            /// Enum CcMansione for "Cc_Mansione"
            /// </summary>
            [EnumMember(Value = "Cc_Mansione")]
            CcMansione,
            
            /// <summary>
            /// Enum CcNazione for "Cc_Nazione"
            /// </summary>
            [EnumMember(Value = "Cc_Nazione")]
            CcNazione,
            
            /// <summary>
            /// Enum CcPartiva for "Cc_Partiva"
            /// </summary>
            [EnumMember(Value = "Cc_Partiva")]
            CcPartiva,
            
            /// <summary>
            /// Enum CcProvincia for "Cc_Provincia"
            /// </summary>
            [EnumMember(Value = "Cc_Provincia")]
            CcProvincia,
            
            /// <summary>
            /// Enum CcReparto for "Cc_Reparto"
            /// </summary>
            [EnumMember(Value = "Cc_Reparto")]
            CcReparto,
            
            /// <summary>
            /// Enum CcRiferimento for "Cc_Riferimento"
            /// </summary>
            [EnumMember(Value = "Cc_Riferimento")]
            CcRiferimento,
            
            /// <summary>
            /// Enum CcTel for "Cc_Tel"
            /// </summary>
            [EnumMember(Value = "Cc_Tel")]
            CcTel,
            
            /// <summary>
            /// Enum CcTelnome for "Cc_Telnome"
            /// </summary>
            [EnumMember(Value = "Cc_Telnome")]
            CcTelnome,
            
            /// <summary>
            /// Enum CcUfficio for "Cc_Ufficio"
            /// </summary>
            [EnumMember(Value = "Cc_Ufficio")]
            CcUfficio,
            
            /// <summary>
            /// Enum CcValore for "Cc_Valore"
            /// </summary>
            [EnumMember(Value = "Cc_Valore")]
            CcValore,
            
            /// <summary>
            /// Enum CcAbitazione for "Cc_Abitazione"
            /// </summary>
            [EnumMember(Value = "Cc_Abitazione")]
            CcAbitazione,
            
            /// <summary>
            /// Enum SendersCap for "Senders_Cap"
            /// </summary>
            [EnumMember(Value = "Senders_Cap")]
            SendersCap,
            
            /// <summary>
            /// Enum SendersCell for "Senders_Cell"
            /// </summary>
            [EnumMember(Value = "Senders_Cell")]
            SendersCell,
            
            /// <summary>
            /// Enum SendersCodfis for "Senders_Codfis"
            /// </summary>
            [EnumMember(Value = "Senders_Codfis")]
            SendersCodfis,
            
            /// <summary>
            /// Enum SendersCodice for "Senders_Codice"
            /// </summary>
            [EnumMember(Value = "Senders_Codice")]
            SendersCodice,
            
            /// <summary>
            /// Enum SendersContatti for "Senders_Contatti"
            /// </summary>
            [EnumMember(Value = "Senders_Contatti")]
            SendersContatti,
            
            /// <summary>
            /// Enum SendersEmail for "Senders_Email"
            /// </summary>
            [EnumMember(Value = "Senders_Email")]
            SendersEmail,
            
            /// <summary>
            /// Enum SendersFax for "Senders_Fax"
            /// </summary>
            [EnumMember(Value = "Senders_Fax")]
            SendersFax,
            
            /// <summary>
            /// Enum SendersFaxnome for "Senders_Faxnome"
            /// </summary>
            [EnumMember(Value = "Senders_Faxnome")]
            SendersFaxnome,
            
            /// <summary>
            /// Enum SendersIndirizzo for "Senders_Indirizzo"
            /// </summary>
            [EnumMember(Value = "Senders_Indirizzo")]
            SendersIndirizzo,
            
            /// <summary>
            /// Enum SendersLocalita for "Senders_Localita"
            /// </summary>
            [EnumMember(Value = "Senders_Localita")]
            SendersLocalita,
            
            /// <summary>
            /// Enum SendersMail for "Senders_Mail"
            /// </summary>
            [EnumMember(Value = "Senders_Mail")]
            SendersMail,
            
            /// <summary>
            /// Enum SendersMansione for "Senders_Mansione"
            /// </summary>
            [EnumMember(Value = "Senders_Mansione")]
            SendersMansione,
            
            /// <summary>
            /// Enum SendersNazione for "Senders_Nazione"
            /// </summary>
            [EnumMember(Value = "Senders_Nazione")]
            SendersNazione,
            
            /// <summary>
            /// Enum SendersPartiva for "Senders_Partiva"
            /// </summary>
            [EnumMember(Value = "Senders_Partiva")]
            SendersPartiva,
            
            /// <summary>
            /// Enum SendersProvincia for "Senders_Provincia"
            /// </summary>
            [EnumMember(Value = "Senders_Provincia")]
            SendersProvincia,
            
            /// <summary>
            /// Enum SendersReparto for "Senders_Reparto"
            /// </summary>
            [EnumMember(Value = "Senders_Reparto")]
            SendersReparto,
            
            /// <summary>
            /// Enum SendersRiferimento for "Senders_Riferimento"
            /// </summary>
            [EnumMember(Value = "Senders_Riferimento")]
            SendersRiferimento,
            
            /// <summary>
            /// Enum SendersTel for "Senders_Tel"
            /// </summary>
            [EnumMember(Value = "Senders_Tel")]
            SendersTel,
            
            /// <summary>
            /// Enum SendersTelnome for "Senders_Telnome"
            /// </summary>
            [EnumMember(Value = "Senders_Telnome")]
            SendersTelnome,
            
            /// <summary>
            /// Enum SendersUfficio for "Senders_Ufficio"
            /// </summary>
            [EnumMember(Value = "Senders_Ufficio")]
            SendersUfficio,
            
            /// <summary>
            /// Enum SendersValore for "Senders_Valore"
            /// </summary>
            [EnumMember(Value = "Senders_Valore")]
            SendersValore,
            
            /// <summary>
            /// Enum SendersAbitazione for "Senders_Abitazione"
            /// </summary>
            [EnumMember(Value = "Senders_Abitazione")]
            SendersAbitazione,
            
            /// <summary>
            /// Enum FromPriorita for "From_Priorita"
            /// </summary>
            [EnumMember(Value = "From_Priorita")]
            FromPriorita,
            
            /// <summary>
            /// Enum ToPriorita for "To_Priorita"
            /// </summary>
            [EnumMember(Value = "To_Priorita")]
            ToPriorita,
            
            /// <summary>
            /// Enum CcPriorita for "Cc_Priorita"
            /// </summary>
            [EnumMember(Value = "Cc_Priorita")]
            CcPriorita,
            
            /// <summary>
            /// Enum SendersPriorita for "Senders_Priorita"
            /// </summary>
            [EnumMember(Value = "Senders_Priorita")]
            SendersPriorita
        }

        /// <summary>
        /// Gets or Sets FieldKind
        /// </summary>
        [DataMember(Name="fieldKind", EmitDefaultValue=false)]
        public FieldKindEnum? FieldKind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderCompositionRuleDetail" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="FolderRuleId">FolderRuleId.</param>
        /// <param name="FieldId">FieldId.</param>
        /// <param name="FieldKind">FieldKind.</param>
        /// <param name="Position">Position.</param>
        /// <param name="From">From.</param>
        /// <param name="To">To.</param>
        public FolderCompositionRuleDetail(int? Id = null, int? FolderRuleId = null, string FieldId = null, FieldKindEnum? FieldKind = null, int? Position = null, int? From = null, int? To = null)
        {
            this.Id = Id;
            this.FolderRuleId = FolderRuleId;
            this.FieldId = FieldId;
            this.FieldKind = FieldKind;
            this.Position = Position;
            this.From = From;
            this.To = To;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets FolderRuleId
        /// </summary>
        [DataMember(Name="folderRuleId", EmitDefaultValue=false)]
        public int? FolderRuleId { get; set; }
        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }
        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public int? From { get; set; }
        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public int? To { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderCompositionRuleDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FolderRuleId: ").Append(FolderRuleId).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldKind: ").Append(FieldKind).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderCompositionRuleDetail);
        }

        /// <summary>
        /// Returns true if FolderCompositionRuleDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderCompositionRuleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderCompositionRuleDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.FolderRuleId == other.FolderRuleId ||
                    this.FolderRuleId != null &&
                    this.FolderRuleId.Equals(other.FolderRuleId)
                ) && 
                (
                    this.FieldId == other.FieldId ||
                    this.FieldId != null &&
                    this.FieldId.Equals(other.FieldId)
                ) && 
                (
                    this.FieldKind == other.FieldKind ||
                    this.FieldKind != null &&
                    this.FieldKind.Equals(other.FieldKind)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.FolderRuleId != null)
                    hash = hash * 59 + this.FolderRuleId.GetHashCode();
                if (this.FieldId != null)
                    hash = hash * 59 + this.FieldId.GetHashCode();
                if (this.FieldKind != null)
                    hash = hash * 59 + this.FieldKind.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                return hash;
            }
        }
    }

}
