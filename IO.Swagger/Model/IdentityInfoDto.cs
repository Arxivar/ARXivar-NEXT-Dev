/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Authenticated user info
    /// </summary>
    [DataContract]
    public partial class IdentityInfoDto :  IEquatable<IdentityInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityInfoDto" /> class.
        /// </summary>
        /// <param name="authenticationType">Authentication type (i.e. ApplicationCookie, Bearer).</param>
        /// <param name="clientId">Client id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="userName">User name.</param>
        /// <param name="userType">User type.</param>
        /// <param name="userAoo">User aoo.</param>
        /// <param name="userRole">User role.</param>
        /// <param name="lang">User language.</param>
        /// <param name="grantorUserId">Grantor user id.</param>
        /// <param name="grantorUserName">Grantor user name.</param>
        /// <param name="grantorUserAoo">Grantor user aoo.</param>
        /// <param name="grantorUserRole">Grantor user role.</param>
        /// <param name="expiresUtc">Expiration time.</param>
        /// <param name="issuedUtc">Issued time.</param>
        /// <param name="version">ARXivar version.</param>
        /// <param name="claimInfoList">Claims info.</param>
        public IdentityInfoDto(string authenticationType = default(string), string clientId = default(string), string userId = default(string), string userName = default(string), string userType = default(string), string userAoo = default(string), string userRole = default(string), string lang = default(string), string grantorUserId = default(string), string grantorUserName = default(string), string grantorUserAoo = default(string), string grantorUserRole = default(string), DateTime? expiresUtc = default(DateTime?), DateTime? issuedUtc = default(DateTime?), string version = default(string), List<ClaimInfo> claimInfoList = default(List<ClaimInfo>))
        {
            this.AuthenticationType = authenticationType;
            this.ClientId = clientId;
            this.UserId = userId;
            this.UserName = userName;
            this.UserType = userType;
            this.UserAoo = userAoo;
            this.UserRole = userRole;
            this.Lang = lang;
            this.GrantorUserId = grantorUserId;
            this.GrantorUserName = grantorUserName;
            this.GrantorUserAoo = grantorUserAoo;
            this.GrantorUserRole = grantorUserRole;
            this.ExpiresUtc = expiresUtc;
            this.IssuedUtc = issuedUtc;
            this.Version = version;
            this.ClaimInfoList = claimInfoList;
        }
        
        /// <summary>
        /// Authentication type (i.e. ApplicationCookie, Bearer)
        /// </summary>
        /// <value>Authentication type (i.e. ApplicationCookie, Bearer)</value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// User id
        /// </summary>
        /// <value>User id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        /// <value>User name</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// User type
        /// </summary>
        /// <value>User type</value>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public string UserType { get; set; }

        /// <summary>
        /// User aoo
        /// </summary>
        /// <value>User aoo</value>
        [DataMember(Name="userAoo", EmitDefaultValue=false)]
        public string UserAoo { get; set; }

        /// <summary>
        /// User role
        /// </summary>
        /// <value>User role</value>
        [DataMember(Name="userRole", EmitDefaultValue=false)]
        public string UserRole { get; set; }

        /// <summary>
        /// User language
        /// </summary>
        /// <value>User language</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Grantor user id
        /// </summary>
        /// <value>Grantor user id</value>
        [DataMember(Name="grantorUserId", EmitDefaultValue=false)]
        public string GrantorUserId { get; set; }

        /// <summary>
        /// Grantor user name
        /// </summary>
        /// <value>Grantor user name</value>
        [DataMember(Name="grantorUserName", EmitDefaultValue=false)]
        public string GrantorUserName { get; set; }

        /// <summary>
        /// Grantor user aoo
        /// </summary>
        /// <value>Grantor user aoo</value>
        [DataMember(Name="grantorUserAoo", EmitDefaultValue=false)]
        public string GrantorUserAoo { get; set; }

        /// <summary>
        /// Grantor user role
        /// </summary>
        /// <value>Grantor user role</value>
        [DataMember(Name="grantorUserRole", EmitDefaultValue=false)]
        public string GrantorUserRole { get; set; }

        /// <summary>
        /// Expiration time
        /// </summary>
        /// <value>Expiration time</value>
        [DataMember(Name="expiresUtc", EmitDefaultValue=false)]
        public DateTime? ExpiresUtc { get; set; }

        /// <summary>
        /// Issued time
        /// </summary>
        /// <value>Issued time</value>
        [DataMember(Name="issuedUtc", EmitDefaultValue=false)]
        public DateTime? IssuedUtc { get; set; }

        /// <summary>
        /// ARXivar version
        /// </summary>
        /// <value>ARXivar version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Claims info
        /// </summary>
        /// <value>Claims info</value>
        [DataMember(Name="claimInfoList", EmitDefaultValue=false)]
        public List<ClaimInfo> ClaimInfoList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityInfoDto {\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  UserAoo: ").Append(UserAoo).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  GrantorUserId: ").Append(GrantorUserId).Append("\n");
            sb.Append("  GrantorUserName: ").Append(GrantorUserName).Append("\n");
            sb.Append("  GrantorUserAoo: ").Append(GrantorUserAoo).Append("\n");
            sb.Append("  GrantorUserRole: ").Append(GrantorUserRole).Append("\n");
            sb.Append("  ExpiresUtc: ").Append(ExpiresUtc).Append("\n");
            sb.Append("  IssuedUtc: ").Append(IssuedUtc).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ClaimInfoList: ").Append(ClaimInfoList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityInfoDto);
        }

        /// <summary>
        /// Returns true if IdentityInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.UserAoo == input.UserAoo ||
                    (this.UserAoo != null &&
                    this.UserAoo.Equals(input.UserAoo))
                ) && 
                (
                    this.UserRole == input.UserRole ||
                    (this.UserRole != null &&
                    this.UserRole.Equals(input.UserRole))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.GrantorUserId == input.GrantorUserId ||
                    (this.GrantorUserId != null &&
                    this.GrantorUserId.Equals(input.GrantorUserId))
                ) && 
                (
                    this.GrantorUserName == input.GrantorUserName ||
                    (this.GrantorUserName != null &&
                    this.GrantorUserName.Equals(input.GrantorUserName))
                ) && 
                (
                    this.GrantorUserAoo == input.GrantorUserAoo ||
                    (this.GrantorUserAoo != null &&
                    this.GrantorUserAoo.Equals(input.GrantorUserAoo))
                ) && 
                (
                    this.GrantorUserRole == input.GrantorUserRole ||
                    (this.GrantorUserRole != null &&
                    this.GrantorUserRole.Equals(input.GrantorUserRole))
                ) && 
                (
                    this.ExpiresUtc == input.ExpiresUtc ||
                    (this.ExpiresUtc != null &&
                    this.ExpiresUtc.Equals(input.ExpiresUtc))
                ) && 
                (
                    this.IssuedUtc == input.IssuedUtc ||
                    (this.IssuedUtc != null &&
                    this.IssuedUtc.Equals(input.IssuedUtc))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ClaimInfoList == input.ClaimInfoList ||
                    this.ClaimInfoList != null &&
                    this.ClaimInfoList.SequenceEqual(input.ClaimInfoList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.UserAoo != null)
                    hashCode = hashCode * 59 + this.UserAoo.GetHashCode();
                if (this.UserRole != null)
                    hashCode = hashCode * 59 + this.UserRole.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.GrantorUserId != null)
                    hashCode = hashCode * 59 + this.GrantorUserId.GetHashCode();
                if (this.GrantorUserName != null)
                    hashCode = hashCode * 59 + this.GrantorUserName.GetHashCode();
                if (this.GrantorUserAoo != null)
                    hashCode = hashCode * 59 + this.GrantorUserAoo.GetHashCode();
                if (this.GrantorUserRole != null)
                    hashCode = hashCode * 59 + this.GrantorUserRole.GetHashCode();
                if (this.ExpiresUtc != null)
                    hashCode = hashCode * 59 + this.ExpiresUtc.GetHashCode();
                if (this.IssuedUtc != null)
                    hashCode = hashCode * 59 + this.IssuedUtc.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ClaimInfoList != null)
                    hashCode = hashCode * 59 + this.ClaimInfoList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
