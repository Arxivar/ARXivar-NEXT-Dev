/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NoteDTO
    /// </summary>
    [DataContract]
    public partial class NoteDTO :  IEquatable<NoteDTO>
    {
        /// <summary>
        /// Identificativo di riferimento del mondo a cui appartiene la nota (default 14 dm_profile)
        /// </summary>
        /// <value>Identificativo di riferimento del mondo a cui appartiene la nota (default 14 dm_profile)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountersTableEnum
        {
            
            /// <summary>
            /// Enum DMALLEGATIDOC for "DM_ALLEGATIDOC"
            /// </summary>
            [EnumMember(Value = "DM_ALLEGATIDOC")]
            DMALLEGATIDOC,
            
            /// <summary>
            /// Enum DMALLEGATIFAX for "DM_ALLEGATIFAX"
            /// </summary>
            [EnumMember(Value = "DM_ALLEGATIFAX")]
            DMALLEGATIFAX,
            
            /// <summary>
            /// Enum DMALLEGATIWORK for "DM_ALLEGATIWORK"
            /// </summary>
            [EnumMember(Value = "DM_ALLEGATIWORK")]
            DMALLEGATIWORK,
            
            /// <summary>
            /// Enum DMASSOCIAZIONI for "DM_ASSOCIAZIONI"
            /// </summary>
            [EnumMember(Value = "DM_ASSOCIAZIONI")]
            DMASSOCIAZIONI,
            
            /// <summary>
            /// Enum DMCAMPIPRATICA for "DM_CAMPIPRATICA"
            /// </summary>
            [EnumMember(Value = "DM_CAMPIPRATICA")]
            DMCAMPIPRATICA,
            
            /// <summary>
            /// Enum DMCAMPIPRATICHECBO for "DM_CAMPIPRATICHECBO"
            /// </summary>
            [EnumMember(Value = "DM_CAMPIPRATICHECBO")]
            DMCAMPIPRATICHECBO,
            
            /// <summary>
            /// Enum DMCAMPISPECGRP for "DM_CAMPISPECGRP"
            /// </summary>
            [EnumMember(Value = "DM_CAMPISPECGRP")]
            DMCAMPISPECGRP,
            
            /// <summary>
            /// Enum DMCONTATTI for "DM_CONTATTI"
            /// </summary>
            [EnumMember(Value = "DM_CONTATTI")]
            DMCONTATTI,
            
            /// <summary>
            /// Enum DMFASCICOLI for "DM_FASCICOLI"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLI")]
            DMFASCICOLI,
            
            /// <summary>
            /// Enum DMFAXOUT for "DM_FAXOUT"
            /// </summary>
            [EnumMember(Value = "DM_FAXOUT")]
            DMFAXOUT,
            
            /// <summary>
            /// Enum DMNOTE for "DM_NOTE"
            /// </summary>
            [EnumMember(Value = "DM_NOTE")]
            DMNOTE,
            
            /// <summary>
            /// Enum DMOPZIONI for "DM_OPZIONI"
            /// </summary>
            [EnumMember(Value = "DM_OPZIONI")]
            DMOPZIONI,
            
            /// <summary>
            /// Enum DMPERMESSIFOLDER for "DM_PERMESSI_FOLDER"
            /// </summary>
            [EnumMember(Value = "DM_PERMESSI_FOLDER")]
            DMPERMESSIFOLDER,
            
            /// <summary>
            /// Enum DMPERMESSIRUBRICA for "DM_PERMESSI_RUBRICA"
            /// </summary>
            [EnumMember(Value = "DM_PERMESSI_RUBRICA")]
            DMPERMESSIRUBRICA,
            
            /// <summary>
            /// Enum DMPROFILE for "DM_PROFILE"
            /// </summary>
            [EnumMember(Value = "DM_PROFILE")]
            DMPROFILE,
            
            /// <summary>
            /// Enum DMGRUPPI for "DM_GRUPPI"
            /// </summary>
            [EnumMember(Value = "DM_GRUPPI")]
            DMGRUPPI,
            
            /// <summary>
            /// Enum DMRUBRICA for "DM_RUBRICA"
            /// </summary>
            [EnumMember(Value = "DM_RUBRICA")]
            DMRUBRICA,
            
            /// <summary>
            /// Enum DMUTENTI for "DM_UTENTI"
            /// </summary>
            [EnumMember(Value = "DM_UTENTI")]
            DMUTENTI,
            
            /// <summary>
            /// Enum DMREVISIONI for "DM_REVISIONI"
            /// </summary>
            [EnumMember(Value = "DM_REVISIONI")]
            DMREVISIONI,
            
            /// <summary>
            /// Enum DMSECURITY for "DM_SECURITY"
            /// </summary>
            [EnumMember(Value = "DM_SECURITY")]
            DMSECURITY,
            
            /// <summary>
            /// Enum DMSTATOSECURITY for "DM_STATOSECURITY"
            /// </summary>
            [EnumMember(Value = "DM_STATOSECURITY")]
            DMSTATOSECURITY,
            
            /// <summary>
            /// Enum DMTIPIPRATICHE for "DM_TIPIPRATICHE"
            /// </summary>
            [EnumMember(Value = "DM_TIPIPRATICHE")]
            DMTIPIPRATICHE,
            
            /// <summary>
            /// Enum DMTABELLE for "DM_TABELLE"
            /// </summary>
            [EnumMember(Value = "DM_TABELLE")]
            DMTABELLE,
            
            /// <summary>
            /// Enum DMTIPIUTENTI for "DM_TIPI_UTENTI"
            /// </summary>
            [EnumMember(Value = "DM_TIPI_UTENTI")]
            DMTIPIUTENTI,
            
            /// <summary>
            /// Enum DMELENCOORG for "DM_ELENCO_ORG"
            /// </summary>
            [EnumMember(Value = "DM_ELENCO_ORG")]
            DMELENCOORG,
            
            /// <summary>
            /// Enum DMORGANIGRAMMA for "DM_ORGANIGRAMMA"
            /// </summary>
            [EnumMember(Value = "DM_ORGANIGRAMMA")]
            DMORGANIGRAMMA,
            
            /// <summary>
            /// Enum DMORGDESIGN for "DM_ORGDESIGN"
            /// </summary>
            [EnumMember(Value = "DM_ORGDESIGN")]
            DMORGDESIGN,
            
            /// <summary>
            /// Enum DMCATRUBRICHE for "DM_CATRUBRICHE"
            /// </summary>
            [EnumMember(Value = "DM_CATRUBRICHE")]
            DMCATRUBRICHE,
            
            /// <summary>
            /// Enum DMCAMPI for "DM_CAMPI"
            /// </summary>
            [EnumMember(Value = "DM_CAMPI")]
            DMCAMPI,
            
            /// <summary>
            /// Enum DMCAMPIVALORI for "DM_CAMPI_VALORI"
            /// </summary>
            [EnumMember(Value = "DM_CAMPI_VALORI")]
            DMCAMPIVALORI,
            
            /// <summary>
            /// Enum DMRUBRICAOPZIONALI for "DM_RUBRICA_OPZIONALI"
            /// </summary>
            [EnumMember(Value = "DM_RUBRICA_OPZIONALI")]
            DMRUBRICAOPZIONALI,
            
            /// <summary>
            /// Enum DMNOTECONTATTI for "DM_NOTECONTATTI"
            /// </summary>
            [EnumMember(Value = "DM_NOTECONTATTI")]
            DMNOTECONTATTI,
            
            /// <summary>
            /// Enum DMSECURITYDOC for "DM_SECURITY_DOC"
            /// </summary>
            [EnumMember(Value = "DM_SECURITY_DOC")]
            DMSECURITYDOC,
            
            /// <summary>
            /// Enum DMNPCEOUT for "DM_NPCE_OUT"
            /// </summary>
            [EnumMember(Value = "DM_NPCE_OUT")]
            DMNPCEOUT,
            
            /// <summary>
            /// Enum DMLOG for "DM_LOG"
            /// </summary>
            [EnumMember(Value = "DM_LOG")]
            DMLOG,
            
            /// <summary>
            /// Enum DMNPCELOG for "DM_NPCE_LOG"
            /// </summary>
            [EnumMember(Value = "DM_NPCE_LOG")]
            DMNPCELOG,
            
            /// <summary>
            /// Enum DMDESKTOP for "DM_DESKTOP"
            /// </summary>
            [EnumMember(Value = "DM_DESKTOP")]
            DMDESKTOP,
            
            /// <summary>
            /// Enum DMVARIABILIPROCESSO for "DM_VARIABILIPROCESSO"
            /// </summary>
            [EnumMember(Value = "DM_VARIABILIPROCESSO")]
            DMVARIABILIPROCESSO,
            
            /// <summary>
            /// Enum DMDATIPROFILO for "DM_DATIPROFILO"
            /// </summary>
            [EnumMember(Value = "DM_DATIPROFILO")]
            DMDATIPROFILO,
            
            /// <summary>
            /// Enum DMAUTOPROFILO for "DM_AUTOPROFILO"
            /// </summary>
            [EnumMember(Value = "DM_AUTOPROFILO")]
            DMAUTOPROFILO,
            
            /// <summary>
            /// Enum DMPROTOCOLLI for "DM_PROTOCOLLI"
            /// </summary>
            [EnumMember(Value = "DM_PROTOCOLLI")]
            DMPROTOCOLLI,
            
            /// <summary>
            /// Enum DMDATIENTE for "DM_DATI_ENTE"
            /// </summary>
            [EnumMember(Value = "DM_DATI_ENTE")]
            DMDATIENTE,
            
            /// <summary>
            /// Enum DMNUMERAZIONE for "DM_NUMERAZIONE"
            /// </summary>
            [EnumMember(Value = "DM_NUMERAZIONE")]
            DMNUMERAZIONE,
            
            /// <summary>
            /// Enum DMFILEINFOLDER for "DM_FILEINFOLDER"
            /// </summary>
            [EnumMember(Value = "DM_FILEINFOLDER")]
            DMFILEINFOLDER,
            
            /// <summary>
            /// Enum DMINOLTRO for "DM_INOLTRO"
            /// </summary>
            [EnumMember(Value = "DM_INOLTRO")]
            DMINOLTRO,
            
            /// <summary>
            /// Enum DMDOCMOV for "DM_DOCMOV"
            /// </summary>
            [EnumMember(Value = "DM_DOCMOV")]
            DMDOCMOV,
            
            /// <summary>
            /// Enum DMCAMPIMESSAGGIO for "DM_CAMPIMESSAGGIO"
            /// </summary>
            [EnumMember(Value = "DM_CAMPIMESSAGGIO")]
            DMCAMPIMESSAGGIO,
            
            /// <summary>
            /// Enum DMDETTAGLIMAIL for "DM_DETTAGLIMAIL"
            /// </summary>
            [EnumMember(Value = "DM_DETTAGLIMAIL")]
            DMDETTAGLIMAIL,
            
            /// <summary>
            /// Enum DMMAILOUT for "DM_MAILOUT"
            /// </summary>
            [EnumMember(Value = "DM_MAILOUT")]
            DMMAILOUT,
            
            /// <summary>
            /// Enum DMDELEGATI for "DM_DELEGATI"
            /// </summary>
            [EnumMember(Value = "DM_DELEGATI")]
            DMDELEGATI,
            
            /// <summary>
            /// Enum DMMSG for "DM_MSG"
            /// </summary>
            [EnumMember(Value = "DM_MSG")]
            DMMSG,
            
            /// <summary>
            /// Enum DMACCOUNT for "DM_ACCOUNT"
            /// </summary>
            [EnumMember(Value = "DM_ACCOUNT")]
            DMACCOUNT,
            
            /// <summary>
            /// Enum DMFOLDERTYPE for "DM_FOLDERTYPE"
            /// </summary>
            [EnumMember(Value = "DM_FOLDERTYPE")]
            DMFOLDERTYPE,
            
            /// <summary>
            /// Enum SDASSOCDOC for "SD_ASSOCDOC"
            /// </summary>
            [EnumMember(Value = "SD_ASSOCDOC")]
            SDASSOCDOC,
            
            /// <summary>
            /// Enum DMCOMBO for "DM_COMBO"
            /// </summary>
            [EnumMember(Value = "DM_COMBO")]
            DMCOMBO,
            
            /// <summary>
            /// Enum DMREGOLEUNIVOCITA for "DM_REGOLEUNIVOCITA"
            /// </summary>
            [EnumMember(Value = "DM_REGOLEUNIVOCITA")]
            DMREGOLEUNIVOCITA,
            
            /// <summary>
            /// Enum DMBARCODE for "DM_BARCODE"
            /// </summary>
            [EnumMember(Value = "DM_BARCODE")]
            DMBARCODE,
            
            /// <summary>
            /// Enum DMDOCALLEGATI for "DM_DOCALLEGATI"
            /// </summary>
            [EnumMember(Value = "DM_DOCALLEGATI")]
            DMDOCALLEGATI,
            
            /// <summary>
            /// Enum DMSTARTWORKFLOW for "DM_STARTWORKFLOW"
            /// </summary>
            [EnumMember(Value = "DM_STARTWORKFLOW")]
            DMSTARTWORKFLOW,
            
            /// <summary>
            /// Enum DMFILTRO for "DM_FILTRO"
            /// </summary>
            [EnumMember(Value = "DM_FILTRO")]
            DMFILTRO,
            
            /// <summary>
            /// Enum DMELENCOPRATICHE for "DM_ELENCOPRATICHE"
            /// </summary>
            [EnumMember(Value = "DM_ELENCOPRATICHE")]
            DMELENCOPRATICHE,
            
            /// <summary>
            /// Enum DMTESTO for "DM_TESTO"
            /// </summary>
            [EnumMember(Value = "DM_TESTO")]
            DMTESTO,
            
            /// <summary>
            /// Enum DMPROCBATCH for "DM_PROCBATCH"
            /// </summary>
            [EnumMember(Value = "DM_PROCBATCH")]
            DMPROCBATCH,
            
            /// <summary>
            /// Enum DMEVENTIFLOW for "DM_EVENTIFLOW"
            /// </summary>
            [EnumMember(Value = "DM_EVENTIFLOW")]
            DMEVENTIFLOW,
            
            /// <summary>
            /// Enum DMTRADUZIONI for "DM_TRADUZIONI"
            /// </summary>
            [EnumMember(Value = "DM_TRADUZIONI")]
            DMTRADUZIONI,
            
            /// <summary>
            /// Enum DMTIPIDOCUMENTO for "DM_TIPIDOCUMENTO"
            /// </summary>
            [EnumMember(Value = "DM_TIPIDOCUMENTO")]
            DMTIPIDOCUMENTO,
            
            /// <summary>
            /// Enum DMGRUPPIMODELLI for "DM_GRUPPIMODELLI"
            /// </summary>
            [EnumMember(Value = "DM_GRUPPIMODELLI")]
            DMGRUPPIMODELLI,
            
            /// <summary>
            /// Enum DMASSOCIAFOLDERDATIPROFILO for "DM_ASSOCIAFOLDER_DATIPROFILO"
            /// </summary>
            [EnumMember(Value = "DM_ASSOCIAFOLDER_DATIPROFILO")]
            DMASSOCIAFOLDERDATIPROFILO,
            
            /// <summary>
            /// Enum DMASSOCIAFOLDER for "DM_ASSOCIAFOLDER"
            /// </summary>
            [EnumMember(Value = "DM_ASSOCIAFOLDER")]
            DMASSOCIAFOLDER,
            
            /// <summary>
            /// Enum DMMODULIOFFICE for "DM_MODULIOFFICE"
            /// </summary>
            [EnumMember(Value = "DM_MODULIOFFICE")]
            DMMODULIOFFICE,
            
            /// <summary>
            /// Enum DMEMERGENZA for "DM_EMERGENZA"
            /// </summary>
            [EnumMember(Value = "DM_EMERGENZA")]
            DMEMERGENZA,
            
            /// <summary>
            /// Enum DMTASKEXECUTE for "DM_TASKEXECUTE"
            /// </summary>
            [EnumMember(Value = "DM_TASKEXECUTE")]
            DMTASKEXECUTE,
            
            /// <summary>
            /// Enum DMNOTEWORK for "DM_NOTEWORK"
            /// </summary>
            [EnumMember(Value = "DM_NOTEWORK")]
            DMNOTEWORK,
            
            /// <summary>
            /// Enum DMPERMESSIALLEGATI for "DM_PERMESSIALLEGATI"
            /// </summary>
            [EnumMember(Value = "DM_PERMESSIALLEGATI")]
            DMPERMESSIALLEGATI,
            
            /// <summary>
            /// Enum DMPROCESSDOC for "DM_PROCESSDOC"
            /// </summary>
            [EnumMember(Value = "DM_PROCESSDOC")]
            DMPROCESSDOC,
            
            /// <summary>
            /// Enum DMMASSIVEUPDATES for "DM_MASSIVEUPDATES"
            /// </summary>
            [EnumMember(Value = "DM_MASSIVEUPDATES")]
            DMMASSIVEUPDATES,
            
            /// <summary>
            /// Enum DMMASSIVEUPDATESDATIPROFILO for "DM_MASSIVEUPDATES_DATIPROFILO"
            /// </summary>
            [EnumMember(Value = "DM_MASSIVEUPDATES_DATIPROFILO")]
            DMMASSIVEUPDATESDATIPROFILO,
            
            /// <summary>
            /// Enum DMMASSIVEUPDATESDATA for "DM_MASSIVEUPDATES_DATA"
            /// </summary>
            [EnumMember(Value = "DM_MASSIVEUPDATES_DATA")]
            DMMASSIVEUPDATESDATA,
            
            /// <summary>
            /// Enum DMCOMANDITASK for "DM_COMANDITASK"
            /// </summary>
            [EnumMember(Value = "DM_COMANDITASK")]
            DMCOMANDITASK,
            
            /// <summary>
            /// Enum DMTRADUZIONIPKG for "DM_TRADUZIONI_PKG"
            /// </summary>
            [EnumMember(Value = "DM_TRADUZIONI_PKG")]
            DMTRADUZIONIPKG,
            
            /// <summary>
            /// Enum DMFIGUREPROCESSO for "DM_FIGUREPROCESSO"
            /// </summary>
            [EnumMember(Value = "DM_FIGUREPROCESSO")]
            DMFIGUREPROCESSO,
            
            /// <summary>
            /// Enum DMPROMEMORIA for "DM_PROMEMORIA"
            /// </summary>
            [EnumMember(Value = "DM_PROMEMORIA")]
            DMPROMEMORIA,
            
            /// <summary>
            /// Enum DMALLEGATIPROMO for "DM_ALLEGATIPROMO"
            /// </summary>
            [EnumMember(Value = "DM_ALLEGATIPROMO")]
            DMALLEGATIPROMO,
            
            /// <summary>
            /// Enum DMSIGNDELEGATE for "DM_SIGNDELEGATE"
            /// </summary>
            [EnumMember(Value = "DM_SIGNDELEGATE")]
            DMSIGNDELEGATE,
            
            /// <summary>
            /// Enum DMSIGNCERT for "DM_SIGNCERT"
            /// </summary>
            [EnumMember(Value = "DM_SIGNCERT")]
            DMSIGNCERT,
            
            /// <summary>
            /// Enum DMSIGNCERTLOCATION for "DM_SIGNCERTLOCATION"
            /// </summary>
            [EnumMember(Value = "DM_SIGNCERTLOCATION")]
            DMSIGNCERTLOCATION,
            
            /// <summary>
            /// Enum DMVARIABILIQUERY for "DM_VARIABILIQUERY"
            /// </summary>
            [EnumMember(Value = "DM_VARIABILIQUERY")]
            DMVARIABILIQUERY,
            
            /// <summary>
            /// Enum DMASSOCIAFOLDERMAPPING for "DM_ASSOCIAFOLDER_MAPPING"
            /// </summary>
            [EnumMember(Value = "DM_ASSOCIAFOLDER_MAPPING")]
            DMASSOCIAFOLDERMAPPING,
            
            /// <summary>
            /// Enum DMPERMESSINOTE for "DM_PERMESSINOTE"
            /// </summary>
            [EnumMember(Value = "DM_PERMESSINOTE")]
            DMPERMESSINOTE,
            
            /// <summary>
            /// Enum DMWORKFLOWEXTRAGRANT for "DM_WORKFLOW_EXTRAGRANT"
            /// </summary>
            [EnumMember(Value = "DM_WORKFLOW_EXTRAGRANT")]
            DMWORKFLOWEXTRAGRANT,
            
            /// <summary>
            /// Enum DMQUEUE for "DM_QUEUE"
            /// </summary>
            [EnumMember(Value = "DM_QUEUE")]
            DMQUEUE,
            
            /// <summary>
            /// Enum DMQUEUEDETAIL for "DM_QUEUEDETAIL"
            /// </summary>
            [EnumMember(Value = "DM_QUEUEDETAIL")]
            DMQUEUEDETAIL,
            
            /// <summary>
            /// Enum NOTHING for "NOTHING"
            /// </summary>
            [EnumMember(Value = "NOTHING")]
            NOTHING,
            
            /// <summary>
            /// Enum DMCACHE for "DM_CACHE"
            /// </summary>
            [EnumMember(Value = "DM_CACHE")]
            DMCACHE,
            
            /// <summary>
            /// Enum DMTHUMBNAIL for "DM_THUMBNAIL"
            /// </summary>
            [EnumMember(Value = "DM_THUMBNAIL")]
            DMTHUMBNAIL,
            
            /// <summary>
            /// Enum DMSMSACCOUNT for "DM_SMSACCOUNT"
            /// </summary>
            [EnumMember(Value = "DM_SMSACCOUNT")]
            DMSMSACCOUNT,
            
            /// <summary>
            /// Enum DMSHARING for "DM_SHARING"
            /// </summary>
            [EnumMember(Value = "DM_SHARING")]
            DMSHARING,
            
            /// <summary>
            /// Enum DMSHARINGDEFINITION for "DM_SHARING_DEFINITION"
            /// </summary>
            [EnumMember(Value = "DM_SHARING_DEFINITION")]
            DMSHARINGDEFINITION,
            
            /// <summary>
            /// Enum DMSHARINGDETAIL for "DM_SHARING_DETAIL"
            /// </summary>
            [EnumMember(Value = "DM_SHARING_DETAIL")]
            DMSHARINGDETAIL,
            
            /// <summary>
            /// Enum DMSHARINGRECEIVER for "DM_SHARING_RECEIVER"
            /// </summary>
            [EnumMember(Value = "DM_SHARING_RECEIVER")]
            DMSHARINGRECEIVER,
            
            /// <summary>
            /// Enum DMSHARINGOPERATION for "DM_SHARING_OPERATION"
            /// </summary>
            [EnumMember(Value = "DM_SHARING_OPERATION")]
            DMSHARINGOPERATION,
            
            /// <summary>
            /// Enum DMTASKWORK for "DM_TASKWORK"
            /// </summary>
            [EnumMember(Value = "DM_TASKWORK")]
            DMTASKWORK,
            
            /// <summary>
            /// Enum DMTASKWORKCLOSE for "DM_TASKWORK_CLOSE"
            /// </summary>
            [EnumMember(Value = "DM_TASKWORK_CLOSE")]
            DMTASKWORKCLOSE,
            
            /// <summary>
            /// Enum DMINSTRUCTIONS for "DM_INSTRUCTIONS"
            /// </summary>
            [EnumMember(Value = "DM_INSTRUCTIONS")]
            DMINSTRUCTIONS,
            
            /// <summary>
            /// Enum DMTASKS for "DM_TASKS"
            /// </summary>
            [EnumMember(Value = "DM_TASKS")]
            DMTASKS,
            
            /// <summary>
            /// Enum DMWORKFLOW for "DM_WORKFLOW"
            /// </summary>
            [EnumMember(Value = "DM_WORKFLOW")]
            DMWORKFLOW,
            
            /// <summary>
            /// Enum DMAOO for "DM_AOO"
            /// </summary>
            [EnumMember(Value = "DM_AOO")]
            DMAOO,
            
            /// <summary>
            /// Enum DMLOGONPROVIDERS for "DM_LOGONPROVIDERS"
            /// </summary>
            [EnumMember(Value = "DM_LOGONPROVIDERS")]
            DMLOGONPROVIDERS,
            
            /// <summary>
            /// Enum DMMASSIVEUPDATESMAPPING for "DM_MASSIVEUPDATES_MAPPING"
            /// </summary>
            [EnumMember(Value = "DM_MASSIVEUPDATES_MAPPING")]
            DMMASSIVEUPDATESMAPPING,
            
            /// <summary>
            /// Enum DMSTORAGE for "DM_STORAGE"
            /// </summary>
            [EnumMember(Value = "DM_STORAGE")]
            DMSTORAGE,
            
            /// <summary>
            /// Enum DMTIPIDOCDEFMAIL for "DM_TIPIDOC_DEFMAIL"
            /// </summary>
            [EnumMember(Value = "DM_TIPIDOC_DEFMAIL")]
            DMTIPIDOCDEFMAIL,
            
            /// <summary>
            /// Enum DMLOGS for "DM_LOGS"
            /// </summary>
            [EnumMember(Value = "DM_LOGS")]
            DMLOGS,
            
            /// <summary>
            /// Enum DMPNDEVICE for "DM_PN_DEVICE"
            /// </summary>
            [EnumMember(Value = "DM_PN_DEVICE")]
            DMPNDEVICE,
            
            /// <summary>
            /// Enum DMPNNOTIFICATIONS for "DM_PN_NOTIFICATIONS"
            /// </summary>
            [EnumMember(Value = "DM_PN_NOTIFICATIONS")]
            DMPNNOTIFICATIONS,
            
            /// <summary>
            /// Enum DMCOLLABORATION for "DM_COLLABORATION"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION")]
            DMCOLLABORATION,
            
            /// <summary>
            /// Enum DMCOLLABORATIONMASTER for "DM_COLLABORATION_MASTER"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION_MASTER")]
            DMCOLLABORATIONMASTER,
            
            /// <summary>
            /// Enum DMCOLLABORATIONDETAIL for "DM_COLLABORATION_DETAIL"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION_DETAIL")]
            DMCOLLABORATIONDETAIL,
            
            /// <summary>
            /// Enum WSVERSAMENTI for "WS_VERSAMENTI"
            /// </summary>
            [EnumMember(Value = "WS_VERSAMENTI")]
            WSVERSAMENTI,
            
            /// <summary>
            /// Enum WSVERSAMENTIDETTATT for "WS_VERSAMENTI_DETT_ATT"
            /// </summary>
            [EnumMember(Value = "WS_VERSAMENTI_DETT_ATT")]
            WSVERSAMENTIDETTATT,
            
            /// <summary>
            /// Enum WSVERSAMENTIDETTNOTE for "WS_VERSAMENTI_DETT_NOTE"
            /// </summary>
            [EnumMember(Value = "WS_VERSAMENTI_DETT_NOTE")]
            WSVERSAMENTIDETTNOTE,
            
            /// <summary>
            /// Enum WSVERSAMENTIDETTDOC for "WS_VERSAMENTI_DETT_DOC"
            /// </summary>
            [EnumMember(Value = "WS_VERSAMENTI_DETT_DOC")]
            WSVERSAMENTIDETTDOC,
            
            /// <summary>
            /// Enum WSAOS for "WS_AOS"
            /// </summary>
            [EnumMember(Value = "WS_AOS")]
            WSAOS,
            
            /// <summary>
            /// Enum WSAOSMAPPING for "WS_AOS_MAPPING"
            /// </summary>
            [EnumMember(Value = "WS_AOS_MAPPING")]
            WSAOSMAPPING,
            
            /// <summary>
            /// Enum WSDOCTOIX for "WS_DOCTOIX"
            /// </summary>
            [EnumMember(Value = "WS_DOCTOIX")]
            WSDOCTOIX,
            
            /// <summary>
            /// Enum WSDOCTOIXDETAIL for "WS_DOCTOIX_DETAIL"
            /// </summary>
            [EnumMember(Value = "WS_DOCTOIX_DETAIL")]
            WSDOCTOIXDETAIL,
            
            /// <summary>
            /// Enum WSTIPIDOCUMENTO for "WS_TIPIDOCUMENTO"
            /// </summary>
            [EnumMember(Value = "WS_TIPIDOCUMENTO")]
            WSTIPIDOCUMENTO,
            
            /// <summary>
            /// Enum WSCREDENTIAL for "WS_CREDENTIAL"
            /// </summary>
            [EnumMember(Value = "WS_CREDENTIAL")]
            WSCREDENTIAL,
            
            /// <summary>
            /// Enum WSCLASSINORM for "WS_CLASSINORM"
            /// </summary>
            [EnumMember(Value = "WS_CLASSINORM")]
            WSCLASSINORM,
            
            /// <summary>
            /// Enum WSCLASSINORMFILTER for "WS_CLASSINORM_FILTER"
            /// </summary>
            [EnumMember(Value = "WS_CLASSINORM_FILTER")]
            WSCLASSINORMFILTER,
            
            /// <summary>
            /// Enum WSTIPIDOCEXPORT for "WS_TIPIDOC_EXPORT"
            /// </summary>
            [EnumMember(Value = "WS_TIPIDOC_EXPORT")]
            WSTIPIDOCEXPORT,
            
            /// <summary>
            /// Enum WSTIPIDOCROTT for "WS_TIPIDOC_ROTT"
            /// </summary>
            [EnumMember(Value = "WS_TIPIDOC_ROTT")]
            WSTIPIDOCROTT,
            
            /// <summary>
            /// Enum WSNOTIFY for "WS_NOTIFY"
            /// </summary>
            [EnumMember(Value = "WS_NOTIFY")]
            WSNOTIFY,
            
            /// <summary>
            /// Enum WSNOTIFYMAPPING for "WS_NOTIFY_MAPPING"
            /// </summary>
            [EnumMember(Value = "WS_NOTIFY_MAPPING")]
            WSNOTIFYMAPPING,
            
            /// <summary>
            /// Enum DMCOLLABORATIONTEMPLATE for "DM_COLLABORATION_TEMPLATE"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION_TEMPLATE")]
            DMCOLLABORATIONTEMPLATE,
            
            /// <summary>
            /// Enum DMCOLLABORATIONTAKEOFF for "DM_COLLABORATION_TAKEOFF"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION_TAKEOFF")]
            DMCOLLABORATIONTAKEOFF,
            
            /// <summary>
            /// Enum DMCOLLABORATIONTEMPLATEM for "DM_COLLABORATION_TEMPLATE_M"
            /// </summary>
            [EnumMember(Value = "DM_COLLABORATION_TEMPLATE_M")]
            DMCOLLABORATIONTEMPLATEM,
            
            /// <summary>
            /// Enum WSCONFCLASSEIXCE for "WS_CONFCLASSEIXCE"
            /// </summary>
            [EnumMember(Value = "WS_CONFCLASSEIXCE")]
            WSCONFCLASSEIXCE,
            
            /// <summary>
            /// Enum WSCAMPIMETADATIIXCE for "WS_CAMPIMETADATIIXCE"
            /// </summary>
            [EnumMember(Value = "WS_CAMPIMETADATIIXCE")]
            WSCAMPIMETADATIIXCE,
            
            /// <summary>
            /// Enum WSDOCTOIXCE for "WS_DOCTOIXCE"
            /// </summary>
            [EnumMember(Value = "WS_DOCTOIXCE")]
            WSDOCTOIXCE,
            
            /// <summary>
            /// Enum WSDOCTOIXCEDETAIL for "WS_DOCTOIXCE_DETAIL"
            /// </summary>
            [EnumMember(Value = "WS_DOCTOIXCE_DETAIL")]
            WSDOCTOIXCEDETAIL,
            
            /// <summary>
            /// Enum WSVERSAMENTO for "WS_VERSAMENTO"
            /// </summary>
            [EnumMember(Value = "WS_VERSAMENTO")]
            WSVERSAMENTO,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMDETT for "DM_PLUGINCUSTOM_DETT"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOM_DETT")]
            DMPLUGINCUSTOMDETT,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOM for "DM_PLUGINCUSTOM"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOM")]
            DMPLUGINCUSTOM,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMWF for "DM_PLUGINCUSTOMWF"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOMWF")]
            DMPLUGINCUSTOMWF,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMWFCONF for "DM_PLUGINCUSTOMWF_CONF"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOMWF_CONF")]
            DMPLUGINCUSTOMWFCONF,
            
            /// <summary>
            /// Enum DMLINKS for "DM_LINKS"
            /// </summary>
            [EnumMember(Value = "DM_LINKS")]
            DMLINKS,
            
            /// <summary>
            /// Enum DMLINKSMANSDYN for "DM_LINKS_MANSDYN"
            /// </summary>
            [EnumMember(Value = "DM_LINKS_MANSDYN")]
            DMLINKSMANSDYN,
            
            /// <summary>
            /// Enum DMLINKSMANSDYNDETT for "DM_LINKS_MANSDYN_DETT"
            /// </summary>
            [EnumMember(Value = "DM_LINKS_MANSDYN_DETT")]
            DMLINKSMANSDYNDETT,
            
            /// <summary>
            /// Enum DMMANSIONIDYNTASK for "DM_MANSIONIDYNTASK"
            /// </summary>
            [EnumMember(Value = "DM_MANSIONIDYNTASK")]
            DMMANSIONIDYNTASK,
            
            /// <summary>
            /// Enum DMFASCICOLIASSOCIAFOLDER for "DM_FASCICOLI_ASSOCIAFOLDER"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLI_ASSOCIAFOLDER")]
            DMFASCICOLIASSOCIAFOLDER,
            
            /// <summary>
            /// Enum DMWEBSERVICESWFLINK for "DM_WEBSERVICESWF_LINK"
            /// </summary>
            [EnumMember(Value = "DM_WEBSERVICESWF_LINK")]
            DMWEBSERVICESWFLINK,
            
            /// <summary>
            /// Enum DMTASKDOCESITI for "DM_TASKDOC_ESITI"
            /// </summary>
            [EnumMember(Value = "DM_TASKDOC_ESITI")]
            DMTASKDOCESITI,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMCONF for "DM_PLUGINCUSTOM_CONF"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOM_CONF")]
            DMPLUGINCUSTOMCONF,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMCONFIP for "DM_PLUGINCUSTOM_CONFIP"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOM_CONFIP")]
            DMPLUGINCUSTOMCONFIP,
            
            /// <summary>
            /// Enum DMPLUGINCUSTOMCONFUSER for "DM_PLUGINCUSTOM_CONFUSER"
            /// </summary>
            [EnumMember(Value = "DM_PLUGINCUSTOM_CONFUSER")]
            DMPLUGINCUSTOMCONFUSER,
            
            /// <summary>
            /// Enum DMINDEX for "DM_INDEX"
            /// </summary>
            [EnumMember(Value = "DM_INDEX")]
            DMINDEX,
            
            /// <summary>
            /// Enum WSDOCTOIXCEVALIDATION for "WS_DOCTOIXCE_VALIDATION"
            /// </summary>
            [EnumMember(Value = "WS_DOCTOIXCE_VALIDATION")]
            WSDOCTOIXCEVALIDATION,
            
            /// <summary>
            /// Enum DMBARCODESETTINGS for "DM_BARCODE_SETTINGS"
            /// </summary>
            [EnumMember(Value = "DM_BARCODE_SETTINGS")]
            DMBARCODESETTINGS,
            
            /// <summary>
            /// Enum DMLOGMASTER for "DM_LOG_MASTER"
            /// </summary>
            [EnumMember(Value = "DM_LOG_MASTER")]
            DMLOGMASTER,
            
            /// <summary>
            /// Enum DMUTENTIUSEDPSW for "DM_UTENTI_USEDPSW"
            /// </summary>
            [EnumMember(Value = "DM_UTENTI_USEDPSW")]
            DMUTENTIUSEDPSW,
            
            /// <summary>
            /// Enum DMCAMPIMODULIMATRICE for "DM_CAMPIMODULI_MATRICE"
            /// </summary>
            [EnumMember(Value = "DM_CAMPIMODULI_MATRICE")]
            DMCAMPIMODULIMATRICE,
            
            /// <summary>
            /// Enum DMMAPWORKFLOW for "DM_MAPWORKFLOW"
            /// </summary>
            [EnumMember(Value = "DM_MAPWORKFLOW")]
            DMMAPWORKFLOW,
            
            /// <summary>
            /// Enum DMALLEGATIDOCREV for "DM_ALLEGATIDOC_REV"
            /// </summary>
            [EnumMember(Value = "DM_ALLEGATIDOC_REV")]
            DMALLEGATIDOCREV,
            
            /// <summary>
            /// Enum DMFASCICOLIRULES for "DM_FASCICOLI_RULES"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLI_RULES")]
            DMFASCICOLIRULES,
            
            /// <summary>
            /// Enum DMFASCICOLIRULESDETAIL for "DM_FASCICOLIRULESDETAIL"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLIRULESDETAIL")]
            DMFASCICOLIRULESDETAIL,
            
            /// <summary>
            /// Enum DMFASCICOLIRULESUSERS for "DM_FASCICOLI_RULES_USERS"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLI_RULES_USERS")]
            DMFASCICOLIRULESUSERS,
            
            /// <summary>
            /// Enum DMARXDRIVESHARERULE for "DM_ARXDRIVESHARERULE"
            /// </summary>
            [EnumMember(Value = "DM_ARXDRIVESHARERULE")]
            DMARXDRIVESHARERULE,
            
            /// <summary>
            /// Enum DMARXDRIVESHARERULEUSERS for "DM_ARXDRIVESHARERULEUSERS"
            /// </summary>
            [EnumMember(Value = "DM_ARXDRIVESHARERULEUSERS")]
            DMARXDRIVESHARERULEUSERS,
            
            /// <summary>
            /// Enum DMLAYOUT for "DM_LAYOUT"
            /// </summary>
            [EnumMember(Value = "DM_LAYOUT")]
            DMLAYOUT,
            
            /// <summary>
            /// Enum DMLAYOUTDETAILS for "DM_LAYOUT_DETAILS"
            /// </summary>
            [EnumMember(Value = "DM_LAYOUT_DETAILS")]
            DMLAYOUTDETAILS,
            
            /// <summary>
            /// Enum DMFASCICOLIMASK for "DM_FASCICOLI_MASK"
            /// </summary>
            [EnumMember(Value = "DM_FASCICOLI_MASK")]
            DMFASCICOLIMASK,
            
            /// <summary>
            /// Enum DMMAILWF for "DM_MAILWF"
            /// </summary>
            [EnumMember(Value = "DM_MAILWF")]
            DMMAILWF,
            
            /// <summary>
            /// Enum DMCONVMESSAGES for "DM_CONV_MESSAGES"
            /// </summary>
            [EnumMember(Value = "DM_CONV_MESSAGES")]
            DMCONVMESSAGES,
            
            /// <summary>
            /// Enum DMCONVERSATION for "DM_CONVERSATION"
            /// </summary>
            [EnumMember(Value = "DM_CONVERSATION")]
            DMCONVERSATION,
            
            /// <summary>
            /// Enum DMMAILWFARCHIVE for "DM_MAILWF_ARCHIVE"
            /// </summary>
            [EnumMember(Value = "DM_MAILWF_ARCHIVE")]
            DMMAILWFARCHIVE
        }

        /// <summary>
        /// Identificativo di riferimento del mondo a cui appartiene la nota (default 14 dm_profile)
        /// </summary>
        /// <value>Identificativo di riferimento del mondo a cui appartiene la nota (default 14 dm_profile)</value>
        [DataMember(Name="countersTable", EmitDefaultValue=false)]
        public CountersTableEnum? CountersTable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NoteDTO" /> class.
        /// </summary>
        /// <param name="Id">Identificativo univoco della nota.</param>
        /// <param name="Docnumber">Identificativo del profilo documentale.</param>
        /// <param name="User">Identificativo utente creatore della nota.</param>
        /// <param name="UserCompleteName">UserCompleteName.</param>
        /// <param name="CreationDate">Data e Ora di creazione della nota.</param>
        /// <param name="Comment">Testo della nota.</param>
        /// <param name="Revision">Revisione del documento al momento della creazione della nota.</param>
        /// <param name="Aosflag">Si definisce se la nota è marcata come nota per conservazione.</param>
        /// <param name="CountersTable">Identificativo di riferimento del mondo a cui appartiene la nota (default 14 dm_profile).</param>
        /// <param name="ExternalId">chiave esterna (assume significato in relazione a DM_COUNTERSTABLE_ID !&#x3D; 14).</param>
        public NoteDTO(int? Id = null, int? Docnumber = null, int? User = null, string UserCompleteName = null, DateTime? CreationDate = null, string Comment = null, int? Revision = null, bool? Aosflag = null, CountersTableEnum? CountersTable = null, int? ExternalId = null)
        {
            this.Id = Id;
            this.Docnumber = Docnumber;
            this.User = User;
            this.UserCompleteName = UserCompleteName;
            this.CreationDate = CreationDate;
            this.Comment = Comment;
            this.Revision = Revision;
            this.Aosflag = Aosflag;
            this.CountersTable = CountersTable;
            this.ExternalId = ExternalId;
        }
        
        /// <summary>
        /// Identificativo univoco della nota
        /// </summary>
        /// <value>Identificativo univoco della nota</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Identificativo del profilo documentale
        /// </summary>
        /// <value>Identificativo del profilo documentale</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }
        /// <summary>
        /// Identificativo utente creatore della nota
        /// </summary>
        /// <value>Identificativo utente creatore della nota</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets UserCompleteName
        /// </summary>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }
        /// <summary>
        /// Data e Ora di creazione della nota
        /// </summary>
        /// <value>Data e Ora di creazione della nota</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Testo della nota
        /// </summary>
        /// <value>Testo della nota</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Revisione del documento al momento della creazione della nota
        /// </summary>
        /// <value>Revisione del documento al momento della creazione della nota</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Si definisce se la nota è marcata come nota per conservazione
        /// </summary>
        /// <value>Si definisce se la nota è marcata come nota per conservazione</value>
        [DataMember(Name="aosflag", EmitDefaultValue=false)]
        public bool? Aosflag { get; set; }
        /// <summary>
        /// chiave esterna (assume significato in relazione a DM_COUNTERSTABLE_ID !&#x3D; 14)
        /// </summary>
        /// <value>chiave esterna (assume significato in relazione a DM_COUNTERSTABLE_ID !&#x3D; 14)</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public int? ExternalId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NoteDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Aosflag: ").Append(Aosflag).Append("\n");
            sb.Append("  CountersTable: ").Append(CountersTable).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NoteDTO);
        }

        /// <summary>
        /// Returns true if NoteDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of NoteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoteDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Docnumber == other.Docnumber ||
                    this.Docnumber != null &&
                    this.Docnumber.Equals(other.Docnumber)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.UserCompleteName == other.UserCompleteName ||
                    this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(other.UserCompleteName)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.Aosflag == other.Aosflag ||
                    this.Aosflag != null &&
                    this.Aosflag.Equals(other.Aosflag)
                ) && 
                (
                    this.CountersTable == other.CountersTable ||
                    this.CountersTable != null &&
                    this.CountersTable.Equals(other.CountersTable)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Docnumber != null)
                    hash = hash * 59 + this.Docnumber.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.UserCompleteName != null)
                    hash = hash * 59 + this.UserCompleteName.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.Aosflag != null)
                    hash = hash * 59 + this.Aosflag.GetHashCode();
                if (this.CountersTable != null)
                    hash = hash * 59 + this.CountersTable.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                return hash;
            }
        }
    }

}
