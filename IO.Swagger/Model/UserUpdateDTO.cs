/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// User class for update
    /// </summary>
    [DataContract]
    public partial class UserUpdateDTO :  IEquatable<UserUpdateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdateDTO" /> class.
        /// </summary>
        /// <param name="user">Identifier.</param>
        /// <param name="businessUnitUserUnlock">Comportamento dell&#39;utente nel caso di impianto ad \&quot;aoo\&quot; bloccate..</param>
        /// <param name="tempArchive">Comportamento dell&#39;utente nel caso di archiviazione provvisoria..</param>
        /// <param name="addressBookProfile">Abilitazione all&#39;inserimento immediato in rubrica durante la profilazione, nel caso non esista il contatto..</param>
        /// <param name="distributionList">Abilitazione alla manutenzione delle liste di distribuzione..</param>
        /// <param name="mailIn">Possible values:  0: Selected  1: All  2: JustAddressBook .</param>
        /// <param name="mailOutStoreExt">Possible values:  0: None  1: Always  2: Never  3: Selected .</param>
        /// <param name="mailOutStoreIn">Possible values:  0: None  1: Always  2: Never  3: Selected .</param>
        /// <param name="mailDeleteProfile">Abilitazione alla cancellazione del profilo se associato alle mail..</param>
        /// <param name="webCompliantCopy">Se attivo impone la visualizzazione degli allegati solo in copia conforme dal Web.</param>
        /// <param name="webSearch">webSearch.</param>
        /// <param name="webQuickSearch">Abilita la ricerche rapide dal WEB.</param>
        /// <param name="webMailBox">Abilita la casella posta dal WEB.</param>
        /// <param name="webFolders">Abilita i fascicoli dal WEB.</param>
        /// <param name="webSearchViews">Abilita le viste dal WEB.</param>
        /// <param name="webBinders">Abilita la pratiche dal WEB.</param>
        /// <param name="webCheckinAdmin">Manutenzione lista di Checkin dal Web.</param>
        /// <param name="mailOutMaxSize">Dimensione massima della posta in uscita espressa in Kb.</param>
        /// <param name="mailOutDefaultType">mailOutDefaultType.</param>
        /// <param name="mailOutType2">mailOutType2.</param>
        /// <param name="mailOutType3">mailOutType3.</param>
        /// <param name="securityStateList">securityStateList.</param>
        /// <param name="group">Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler .</param>
        /// <param name="description">Description.</param>
        /// <param name="email">Email.</param>
        /// <param name="businessUnit">Business Unit.</param>
        /// <param name="password">Password.</param>
        /// <param name="defaultType">Default Document Type of First Level.</param>
        /// <param name="type2">Default Document Type of Second Level.</param>
        /// <param name="type3">Default Document Type of Third Level.</param>
        /// <param name="internalFax">Personal Fax.</param>
        /// <param name="lastMail">Date of last reading email.</param>
        /// <param name="category">Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D .</param>
        /// <param name="workflow">Enabling Workflow Management.</param>
        /// <param name="defaultState">Default Document Status.</param>
        /// <param name="addressBook">Enabling to insert new address book items into profiling.</param>
        /// <param name="userState">Possible values:  0: NonAttivo  1: Attivo  2: Nascosto .</param>
        /// <param name="mailServer">Email Server.</param>
        /// <param name="webAccess">Access via Web.</param>
        /// <param name="upload">Enabled to Import.</param>
        /// <param name="folders">Enabled to OCR.</param>
        /// <param name="flow">Enabled to Workflow.</param>
        /// <param name="sign">Enabled to Sign.</param>
        /// <param name="viewer">Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal .</param>
        /// <param name="protocol">Enabled to Public Amministration (PA) Protocol.</param>
        /// <param name="models">Enabled to Templates.</param>
        /// <param name="domain">Domain.</param>
        /// <param name="outState">Out Status.</param>
        /// <param name="mailBody">Email Body.</param>
        /// <param name="notify">Enabled to Notify.</param>
        /// <param name="mailClient">Mailer client.</param>
        /// <param name="htmlBody">Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione .</param>
        /// <param name="respAos">Person in Charge of AOS.</param>
        /// <param name="assAos">Enabled to Profile Manual Emails.</param>
        /// <param name="codFis">Fiscal Code.</param>
        /// <param name="pin">Pin.</param>
        /// <param name="guest">Guest.</param>
        /// <param name="passwordChange">Change Password.</param>
        /// <param name="marking">Imagine for the Digital Signature.</param>
        /// <param name="type">Type.</param>
        /// <param name="mailOutDefault">Enabled to Profile Manual Outgoing Emails.</param>
        /// <param name="barcodeAccess">Enabled to Barcode.</param>
        /// <param name="mustChangePassword">Possible values:  0: No  1: Yes  2: YesForChangePasswordNew .</param>
        /// <param name="lang">Language.</param>
        /// <param name="ws">Enabled to IX service..</param>
        /// <param name="disablePswExpired">Disabled Expired Password.</param>
        /// <param name="completeDescription">Full Description.</param>
        /// <param name="canAddVirtualStamps">Possible values:  0: NotApplied  1: Allow  2: Denied .</param>
        /// <param name="canApplyStaps">Possible values:  0: NotApplied  1: Allow  2: Denied .</param>
        public UserUpdateDTO(int? user = default(int?), bool? businessUnitUserUnlock = default(bool?), bool? tempArchive = default(bool?), bool? addressBookProfile = default(bool?), bool? distributionList = default(bool?), int? mailIn = default(int?), int? mailOutStoreExt = default(int?), int? mailOutStoreIn = default(int?), bool? mailDeleteProfile = default(bool?), bool? webCompliantCopy = default(bool?), bool? webSearch = default(bool?), bool? webQuickSearch = default(bool?), bool? webMailBox = default(bool?), bool? webFolders = default(bool?), bool? webSearchViews = default(bool?), bool? webBinders = default(bool?), bool? webCheckinAdmin = default(bool?), int? mailOutMaxSize = default(int?), int? mailOutDefaultType = default(int?), int? mailOutType2 = default(int?), int? mailOutType3 = default(int?), List<UserSecurityStateDTO> securityStateList = default(List<UserSecurityStateDTO>), int? group = default(int?), string description = default(string), string email = default(string), string businessUnit = default(string), string password = default(string), int? defaultType = default(int?), int? type2 = default(int?), int? type3 = default(int?), string internalFax = default(string), DateTime? lastMail = default(DateTime?), int? category = default(int?), bool? workflow = default(bool?), string defaultState = default(string), bool? addressBook = default(bool?), int? userState = default(int?), string mailServer = default(string), bool? webAccess = default(bool?), bool? upload = default(bool?), bool? folders = default(bool?), bool? flow = default(bool?), bool? sign = default(bool?), int? viewer = default(int?), bool? protocol = default(bool?), bool? models = default(bool?), string domain = default(string), string outState = default(string), string mailBody = default(string), bool? notify = default(bool?), string mailClient = default(string), int? htmlBody = default(int?), bool? respAos = default(bool?), bool? assAos = default(bool?), string codFis = default(string), string pin = default(string), bool? guest = default(bool?), bool? passwordChange = default(bool?), byte[] marking = default(byte[]), int? type = default(int?), bool? mailOutDefault = default(bool?), bool? barcodeAccess = default(bool?), int? mustChangePassword = default(int?), string lang = default(string), bool? ws = default(bool?), bool? disablePswExpired = default(bool?), string completeDescription = default(string), int? canAddVirtualStamps = default(int?), int? canApplyStaps = default(int?))
        {
            this.User = user;
            this.BusinessUnitUserUnlock = businessUnitUserUnlock;
            this.TempArchive = tempArchive;
            this.AddressBookProfile = addressBookProfile;
            this.DistributionList = distributionList;
            this.MailIn = mailIn;
            this.MailOutStoreExt = mailOutStoreExt;
            this.MailOutStoreIn = mailOutStoreIn;
            this.MailDeleteProfile = mailDeleteProfile;
            this.WebCompliantCopy = webCompliantCopy;
            this.WebSearch = webSearch;
            this.WebQuickSearch = webQuickSearch;
            this.WebMailBox = webMailBox;
            this.WebFolders = webFolders;
            this.WebSearchViews = webSearchViews;
            this.WebBinders = webBinders;
            this.WebCheckinAdmin = webCheckinAdmin;
            this.MailOutMaxSize = mailOutMaxSize;
            this.MailOutDefaultType = mailOutDefaultType;
            this.MailOutType2 = mailOutType2;
            this.MailOutType3 = mailOutType3;
            this.SecurityStateList = securityStateList;
            this.Group = group;
            this.Description = description;
            this.Email = email;
            this.BusinessUnit = businessUnit;
            this.Password = password;
            this.DefaultType = defaultType;
            this.Type2 = type2;
            this.Type3 = type3;
            this.InternalFax = internalFax;
            this.LastMail = lastMail;
            this.Category = category;
            this.Workflow = workflow;
            this.DefaultState = defaultState;
            this.AddressBook = addressBook;
            this.UserState = userState;
            this.MailServer = mailServer;
            this.WebAccess = webAccess;
            this.Upload = upload;
            this.Folders = folders;
            this.Flow = flow;
            this.Sign = sign;
            this.Viewer = viewer;
            this.Protocol = protocol;
            this.Models = models;
            this.Domain = domain;
            this.OutState = outState;
            this.MailBody = mailBody;
            this.Notify = notify;
            this.MailClient = mailClient;
            this.HtmlBody = htmlBody;
            this.RespAos = respAos;
            this.AssAos = assAos;
            this.CodFis = codFis;
            this.Pin = pin;
            this.Guest = guest;
            this.PasswordChange = passwordChange;
            this.Marking = marking;
            this.Type = type;
            this.MailOutDefault = mailOutDefault;
            this.BarcodeAccess = barcodeAccess;
            this.MustChangePassword = mustChangePassword;
            this.Lang = lang;
            this.Ws = ws;
            this.DisablePswExpired = disablePswExpired;
            this.CompleteDescription = completeDescription;
            this.CanAddVirtualStamps = canAddVirtualStamps;
            this.CanApplyStaps = canApplyStaps;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Comportamento dell&#39;utente nel caso di impianto ad \&quot;aoo\&quot; bloccate.
        /// </summary>
        /// <value>Comportamento dell&#39;utente nel caso di impianto ad \&quot;aoo\&quot; bloccate.</value>
        [DataMember(Name="businessUnitUserUnlock", EmitDefaultValue=false)]
        public bool? BusinessUnitUserUnlock { get; set; }

        /// <summary>
        /// Comportamento dell&#39;utente nel caso di archiviazione provvisoria.
        /// </summary>
        /// <value>Comportamento dell&#39;utente nel caso di archiviazione provvisoria.</value>
        [DataMember(Name="tempArchive", EmitDefaultValue=false)]
        public bool? TempArchive { get; set; }

        /// <summary>
        /// Abilitazione all&#39;inserimento immediato in rubrica durante la profilazione, nel caso non esista il contatto.
        /// </summary>
        /// <value>Abilitazione all&#39;inserimento immediato in rubrica durante la profilazione, nel caso non esista il contatto.</value>
        [DataMember(Name="addressBookProfile", EmitDefaultValue=false)]
        public bool? AddressBookProfile { get; set; }

        /// <summary>
        /// Abilitazione alla manutenzione delle liste di distribuzione.
        /// </summary>
        /// <value>Abilitazione alla manutenzione delle liste di distribuzione.</value>
        [DataMember(Name="distributionList", EmitDefaultValue=false)]
        public bool? DistributionList { get; set; }

        /// <summary>
        /// Possible values:  0: Selected  1: All  2: JustAddressBook 
        /// </summary>
        /// <value>Possible values:  0: Selected  1: All  2: JustAddressBook </value>
        [DataMember(Name="mailIn", EmitDefaultValue=false)]
        public int? MailIn { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Always  2: Never  3: Selected 
        /// </summary>
        /// <value>Possible values:  0: None  1: Always  2: Never  3: Selected </value>
        [DataMember(Name="mailOutStoreExt", EmitDefaultValue=false)]
        public int? MailOutStoreExt { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Always  2: Never  3: Selected 
        /// </summary>
        /// <value>Possible values:  0: None  1: Always  2: Never  3: Selected </value>
        [DataMember(Name="mailOutStoreIn", EmitDefaultValue=false)]
        public int? MailOutStoreIn { get; set; }

        /// <summary>
        /// Abilitazione alla cancellazione del profilo se associato alle mail.
        /// </summary>
        /// <value>Abilitazione alla cancellazione del profilo se associato alle mail.</value>
        [DataMember(Name="mailDeleteProfile", EmitDefaultValue=false)]
        public bool? MailDeleteProfile { get; set; }

        /// <summary>
        /// Se attivo impone la visualizzazione degli allegati solo in copia conforme dal Web
        /// </summary>
        /// <value>Se attivo impone la visualizzazione degli allegati solo in copia conforme dal Web</value>
        [DataMember(Name="webCompliantCopy", EmitDefaultValue=false)]
        public bool? WebCompliantCopy { get; set; }

        /// <summary>
        /// Gets or Sets WebSearch
        /// </summary>
        [DataMember(Name="webSearch", EmitDefaultValue=false)]
        public bool? WebSearch { get; set; }

        /// <summary>
        /// Abilita la ricerche rapide dal WEB
        /// </summary>
        /// <value>Abilita la ricerche rapide dal WEB</value>
        [DataMember(Name="webQuickSearch", EmitDefaultValue=false)]
        public bool? WebQuickSearch { get; set; }

        /// <summary>
        /// Abilita la casella posta dal WEB
        /// </summary>
        /// <value>Abilita la casella posta dal WEB</value>
        [DataMember(Name="webMailBox", EmitDefaultValue=false)]
        public bool? WebMailBox { get; set; }

        /// <summary>
        /// Abilita i fascicoli dal WEB
        /// </summary>
        /// <value>Abilita i fascicoli dal WEB</value>
        [DataMember(Name="webFolders", EmitDefaultValue=false)]
        public bool? WebFolders { get; set; }

        /// <summary>
        /// Abilita le viste dal WEB
        /// </summary>
        /// <value>Abilita le viste dal WEB</value>
        [DataMember(Name="webSearchViews", EmitDefaultValue=false)]
        public bool? WebSearchViews { get; set; }

        /// <summary>
        /// Abilita la pratiche dal WEB
        /// </summary>
        /// <value>Abilita la pratiche dal WEB</value>
        [DataMember(Name="webBinders", EmitDefaultValue=false)]
        public bool? WebBinders { get; set; }

        /// <summary>
        /// Manutenzione lista di Checkin dal Web
        /// </summary>
        /// <value>Manutenzione lista di Checkin dal Web</value>
        [DataMember(Name="webCheckinAdmin", EmitDefaultValue=false)]
        public bool? WebCheckinAdmin { get; set; }

        /// <summary>
        /// Dimensione massima della posta in uscita espressa in Kb
        /// </summary>
        /// <value>Dimensione massima della posta in uscita espressa in Kb</value>
        [DataMember(Name="mailOutMaxSize", EmitDefaultValue=false)]
        public int? MailOutMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets MailOutDefaultType
        /// </summary>
        [DataMember(Name="mailOutDefaultType", EmitDefaultValue=false)]
        public int? MailOutDefaultType { get; set; }

        /// <summary>
        /// Gets or Sets MailOutType2
        /// </summary>
        [DataMember(Name="mailOutType2", EmitDefaultValue=false)]
        public int? MailOutType2 { get; set; }

        /// <summary>
        /// Gets or Sets MailOutType3
        /// </summary>
        [DataMember(Name="mailOutType3", EmitDefaultValue=false)]
        public int? MailOutType3 { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStateList
        /// </summary>
        [DataMember(Name="securityStateList", EmitDefaultValue=false)]
        public List<UserSecurityStateDTO> SecurityStateList { get; set; }

        /// <summary>
        /// Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler 
        /// </summary>
        /// <value>Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler </value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public int? Group { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Business Unit
        /// </summary>
        /// <value>Business Unit</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Default Document Type of First Level
        /// </summary>
        /// <value>Default Document Type of First Level</value>
        [DataMember(Name="defaultType", EmitDefaultValue=false)]
        public int? DefaultType { get; set; }

        /// <summary>
        /// Default Document Type of Second Level
        /// </summary>
        /// <value>Default Document Type of Second Level</value>
        [DataMember(Name="type2", EmitDefaultValue=false)]
        public int? Type2 { get; set; }

        /// <summary>
        /// Default Document Type of Third Level
        /// </summary>
        /// <value>Default Document Type of Third Level</value>
        [DataMember(Name="type3", EmitDefaultValue=false)]
        public int? Type3 { get; set; }

        /// <summary>
        /// Personal Fax
        /// </summary>
        /// <value>Personal Fax</value>
        [DataMember(Name="internalFax", EmitDefaultValue=false)]
        public string InternalFax { get; set; }

        /// <summary>
        /// Date of last reading email
        /// </summary>
        /// <value>Date of last reading email</value>
        [DataMember(Name="lastMail", EmitDefaultValue=false)]
        public DateTime? LastMail { get; set; }

        /// <summary>
        /// Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D 
        /// </summary>
        /// <value>Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public int? Category { get; set; }

        /// <summary>
        /// Enabling Workflow Management
        /// </summary>
        /// <value>Enabling Workflow Management</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public bool? Workflow { get; set; }

        /// <summary>
        /// Default Document Status
        /// </summary>
        /// <value>Default Document Status</value>
        [DataMember(Name="defaultState", EmitDefaultValue=false)]
        public string DefaultState { get; set; }

        /// <summary>
        /// Enabling to insert new address book items into profiling
        /// </summary>
        /// <value>Enabling to insert new address book items into profiling</value>
        [DataMember(Name="addressBook", EmitDefaultValue=false)]
        public bool? AddressBook { get; set; }

        /// <summary>
        /// Possible values:  0: NonAttivo  1: Attivo  2: Nascosto 
        /// </summary>
        /// <value>Possible values:  0: NonAttivo  1: Attivo  2: Nascosto </value>
        [DataMember(Name="userState", EmitDefaultValue=false)]
        public int? UserState { get; set; }

        /// <summary>
        /// Email Server
        /// </summary>
        /// <value>Email Server</value>
        [DataMember(Name="mailServer", EmitDefaultValue=false)]
        public string MailServer { get; set; }

        /// <summary>
        /// Access via Web
        /// </summary>
        /// <value>Access via Web</value>
        [DataMember(Name="webAccess", EmitDefaultValue=false)]
        public bool? WebAccess { get; set; }

        /// <summary>
        /// Enabled to Import
        /// </summary>
        /// <value>Enabled to Import</value>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Enabled to OCR
        /// </summary>
        /// <value>Enabled to OCR</value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public bool? Folders { get; set; }

        /// <summary>
        /// Enabled to Workflow
        /// </summary>
        /// <value>Enabled to Workflow</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public bool? Flow { get; set; }

        /// <summary>
        /// Enabled to Sign
        /// </summary>
        /// <value>Enabled to Sign</value>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public bool? Sign { get; set; }

        /// <summary>
        /// Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal 
        /// </summary>
        /// <value>Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal </value>
        [DataMember(Name="viewer", EmitDefaultValue=false)]
        public int? Viewer { get; set; }

        /// <summary>
        /// Enabled to Public Amministration (PA) Protocol
        /// </summary>
        /// <value>Enabled to Public Amministration (PA) Protocol</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public bool? Protocol { get; set; }

        /// <summary>
        /// Enabled to Templates
        /// </summary>
        /// <value>Enabled to Templates</value>
        [DataMember(Name="models", EmitDefaultValue=false)]
        public bool? Models { get; set; }

        /// <summary>
        /// Domain
        /// </summary>
        /// <value>Domain</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Out Status
        /// </summary>
        /// <value>Out Status</value>
        [DataMember(Name="outState", EmitDefaultValue=false)]
        public string OutState { get; set; }

        /// <summary>
        /// Email Body
        /// </summary>
        /// <value>Email Body</value>
        [DataMember(Name="mailBody", EmitDefaultValue=false)]
        public string MailBody { get; set; }

        /// <summary>
        /// Enabled to Notify
        /// </summary>
        /// <value>Enabled to Notify</value>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public bool? Notify { get; set; }

        /// <summary>
        /// Mailer client
        /// </summary>
        /// <value>Mailer client</value>
        [DataMember(Name="mailClient", EmitDefaultValue=false)]
        public string MailClient { get; set; }

        /// <summary>
        /// Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione 
        /// </summary>
        /// <value>Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione </value>
        [DataMember(Name="htmlBody", EmitDefaultValue=false)]
        public int? HtmlBody { get; set; }

        /// <summary>
        /// Person in Charge of AOS
        /// </summary>
        /// <value>Person in Charge of AOS</value>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public bool? RespAos { get; set; }

        /// <summary>
        /// Enabled to Profile Manual Emails
        /// </summary>
        /// <value>Enabled to Profile Manual Emails</value>
        [DataMember(Name="assAos", EmitDefaultValue=false)]
        public bool? AssAos { get; set; }

        /// <summary>
        /// Fiscal Code
        /// </summary>
        /// <value>Fiscal Code</value>
        [DataMember(Name="codFis", EmitDefaultValue=false)]
        public string CodFis { get; set; }

        /// <summary>
        /// Pin
        /// </summary>
        /// <value>Pin</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Guest
        /// </summary>
        /// <value>Guest</value>
        [DataMember(Name="guest", EmitDefaultValue=false)]
        public bool? Guest { get; set; }

        /// <summary>
        /// Change Password
        /// </summary>
        /// <value>Change Password</value>
        [DataMember(Name="passwordChange", EmitDefaultValue=false)]
        public bool? PasswordChange { get; set; }

        /// <summary>
        /// Imagine for the Digital Signature
        /// </summary>
        /// <value>Imagine for the Digital Signature</value>
        [DataMember(Name="marking", EmitDefaultValue=false)]
        public byte[] Marking { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Enabled to Profile Manual Outgoing Emails
        /// </summary>
        /// <value>Enabled to Profile Manual Outgoing Emails</value>
        [DataMember(Name="mailOutDefault", EmitDefaultValue=false)]
        public bool? MailOutDefault { get; set; }

        /// <summary>
        /// Enabled to Barcode
        /// </summary>
        /// <value>Enabled to Barcode</value>
        [DataMember(Name="barcodeAccess", EmitDefaultValue=false)]
        public bool? BarcodeAccess { get; set; }

        /// <summary>
        /// Possible values:  0: No  1: Yes  2: YesForChangePasswordNew 
        /// </summary>
        /// <value>Possible values:  0: No  1: Yes  2: YesForChangePasswordNew </value>
        [DataMember(Name="mustChangePassword", EmitDefaultValue=false)]
        public int? MustChangePassword { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Enabled to IX service.
        /// </summary>
        /// <value>Enabled to IX service.</value>
        [DataMember(Name="ws", EmitDefaultValue=false)]
        public bool? Ws { get; set; }

        /// <summary>
        /// Disabled Expired Password
        /// </summary>
        /// <value>Disabled Expired Password</value>
        [DataMember(Name="disablePswExpired", EmitDefaultValue=false)]
        public bool? DisablePswExpired { get; set; }

        /// <summary>
        /// Full Description
        /// </summary>
        /// <value>Full Description</value>
        [DataMember(Name="completeDescription", EmitDefaultValue=false)]
        public string CompleteDescription { get; set; }

        /// <summary>
        /// Possible values:  0: NotApplied  1: Allow  2: Denied 
        /// </summary>
        /// <value>Possible values:  0: NotApplied  1: Allow  2: Denied </value>
        [DataMember(Name="canAddVirtualStamps", EmitDefaultValue=false)]
        public int? CanAddVirtualStamps { get; set; }

        /// <summary>
        /// Possible values:  0: NotApplied  1: Allow  2: Denied 
        /// </summary>
        /// <value>Possible values:  0: NotApplied  1: Allow  2: Denied </value>
        [DataMember(Name="canApplyStaps", EmitDefaultValue=false)]
        public int? CanApplyStaps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUpdateDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  BusinessUnitUserUnlock: ").Append(BusinessUnitUserUnlock).Append("\n");
            sb.Append("  TempArchive: ").Append(TempArchive).Append("\n");
            sb.Append("  AddressBookProfile: ").Append(AddressBookProfile).Append("\n");
            sb.Append("  DistributionList: ").Append(DistributionList).Append("\n");
            sb.Append("  MailIn: ").Append(MailIn).Append("\n");
            sb.Append("  MailOutStoreExt: ").Append(MailOutStoreExt).Append("\n");
            sb.Append("  MailOutStoreIn: ").Append(MailOutStoreIn).Append("\n");
            sb.Append("  MailDeleteProfile: ").Append(MailDeleteProfile).Append("\n");
            sb.Append("  WebCompliantCopy: ").Append(WebCompliantCopy).Append("\n");
            sb.Append("  WebSearch: ").Append(WebSearch).Append("\n");
            sb.Append("  WebQuickSearch: ").Append(WebQuickSearch).Append("\n");
            sb.Append("  WebMailBox: ").Append(WebMailBox).Append("\n");
            sb.Append("  WebFolders: ").Append(WebFolders).Append("\n");
            sb.Append("  WebSearchViews: ").Append(WebSearchViews).Append("\n");
            sb.Append("  WebBinders: ").Append(WebBinders).Append("\n");
            sb.Append("  WebCheckinAdmin: ").Append(WebCheckinAdmin).Append("\n");
            sb.Append("  MailOutMaxSize: ").Append(MailOutMaxSize).Append("\n");
            sb.Append("  MailOutDefaultType: ").Append(MailOutDefaultType).Append("\n");
            sb.Append("  MailOutType2: ").Append(MailOutType2).Append("\n");
            sb.Append("  MailOutType3: ").Append(MailOutType3).Append("\n");
            sb.Append("  SecurityStateList: ").Append(SecurityStateList).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DefaultType: ").Append(DefaultType).Append("\n");
            sb.Append("  Type2: ").Append(Type2).Append("\n");
            sb.Append("  Type3: ").Append(Type3).Append("\n");
            sb.Append("  InternalFax: ").Append(InternalFax).Append("\n");
            sb.Append("  LastMail: ").Append(LastMail).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  DefaultState: ").Append(DefaultState).Append("\n");
            sb.Append("  AddressBook: ").Append(AddressBook).Append("\n");
            sb.Append("  UserState: ").Append(UserState).Append("\n");
            sb.Append("  MailServer: ").Append(MailServer).Append("\n");
            sb.Append("  WebAccess: ").Append(WebAccess).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  OutState: ").Append(OutState).Append("\n");
            sb.Append("  MailBody: ").Append(MailBody).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  MailClient: ").Append(MailClient).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  AssAos: ").Append(AssAos).Append("\n");
            sb.Append("  CodFis: ").Append(CodFis).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  PasswordChange: ").Append(PasswordChange).Append("\n");
            sb.Append("  Marking: ").Append(Marking).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MailOutDefault: ").Append(MailOutDefault).Append("\n");
            sb.Append("  BarcodeAccess: ").Append(BarcodeAccess).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Ws: ").Append(Ws).Append("\n");
            sb.Append("  DisablePswExpired: ").Append(DisablePswExpired).Append("\n");
            sb.Append("  CompleteDescription: ").Append(CompleteDescription).Append("\n");
            sb.Append("  CanAddVirtualStamps: ").Append(CanAddVirtualStamps).Append("\n");
            sb.Append("  CanApplyStaps: ").Append(CanApplyStaps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUpdateDTO);
        }

        /// <summary>
        /// Returns true if UserUpdateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUpdateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUpdateDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.BusinessUnitUserUnlock == input.BusinessUnitUserUnlock ||
                    (this.BusinessUnitUserUnlock != null &&
                    this.BusinessUnitUserUnlock.Equals(input.BusinessUnitUserUnlock))
                ) && 
                (
                    this.TempArchive == input.TempArchive ||
                    (this.TempArchive != null &&
                    this.TempArchive.Equals(input.TempArchive))
                ) && 
                (
                    this.AddressBookProfile == input.AddressBookProfile ||
                    (this.AddressBookProfile != null &&
                    this.AddressBookProfile.Equals(input.AddressBookProfile))
                ) && 
                (
                    this.DistributionList == input.DistributionList ||
                    (this.DistributionList != null &&
                    this.DistributionList.Equals(input.DistributionList))
                ) && 
                (
                    this.MailIn == input.MailIn ||
                    (this.MailIn != null &&
                    this.MailIn.Equals(input.MailIn))
                ) && 
                (
                    this.MailOutStoreExt == input.MailOutStoreExt ||
                    (this.MailOutStoreExt != null &&
                    this.MailOutStoreExt.Equals(input.MailOutStoreExt))
                ) && 
                (
                    this.MailOutStoreIn == input.MailOutStoreIn ||
                    (this.MailOutStoreIn != null &&
                    this.MailOutStoreIn.Equals(input.MailOutStoreIn))
                ) && 
                (
                    this.MailDeleteProfile == input.MailDeleteProfile ||
                    (this.MailDeleteProfile != null &&
                    this.MailDeleteProfile.Equals(input.MailDeleteProfile))
                ) && 
                (
                    this.WebCompliantCopy == input.WebCompliantCopy ||
                    (this.WebCompliantCopy != null &&
                    this.WebCompliantCopy.Equals(input.WebCompliantCopy))
                ) && 
                (
                    this.WebSearch == input.WebSearch ||
                    (this.WebSearch != null &&
                    this.WebSearch.Equals(input.WebSearch))
                ) && 
                (
                    this.WebQuickSearch == input.WebQuickSearch ||
                    (this.WebQuickSearch != null &&
                    this.WebQuickSearch.Equals(input.WebQuickSearch))
                ) && 
                (
                    this.WebMailBox == input.WebMailBox ||
                    (this.WebMailBox != null &&
                    this.WebMailBox.Equals(input.WebMailBox))
                ) && 
                (
                    this.WebFolders == input.WebFolders ||
                    (this.WebFolders != null &&
                    this.WebFolders.Equals(input.WebFolders))
                ) && 
                (
                    this.WebSearchViews == input.WebSearchViews ||
                    (this.WebSearchViews != null &&
                    this.WebSearchViews.Equals(input.WebSearchViews))
                ) && 
                (
                    this.WebBinders == input.WebBinders ||
                    (this.WebBinders != null &&
                    this.WebBinders.Equals(input.WebBinders))
                ) && 
                (
                    this.WebCheckinAdmin == input.WebCheckinAdmin ||
                    (this.WebCheckinAdmin != null &&
                    this.WebCheckinAdmin.Equals(input.WebCheckinAdmin))
                ) && 
                (
                    this.MailOutMaxSize == input.MailOutMaxSize ||
                    (this.MailOutMaxSize != null &&
                    this.MailOutMaxSize.Equals(input.MailOutMaxSize))
                ) && 
                (
                    this.MailOutDefaultType == input.MailOutDefaultType ||
                    (this.MailOutDefaultType != null &&
                    this.MailOutDefaultType.Equals(input.MailOutDefaultType))
                ) && 
                (
                    this.MailOutType2 == input.MailOutType2 ||
                    (this.MailOutType2 != null &&
                    this.MailOutType2.Equals(input.MailOutType2))
                ) && 
                (
                    this.MailOutType3 == input.MailOutType3 ||
                    (this.MailOutType3 != null &&
                    this.MailOutType3.Equals(input.MailOutType3))
                ) && 
                (
                    this.SecurityStateList == input.SecurityStateList ||
                    this.SecurityStateList != null &&
                    this.SecurityStateList.SequenceEqual(input.SecurityStateList)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.DefaultType == input.DefaultType ||
                    (this.DefaultType != null &&
                    this.DefaultType.Equals(input.DefaultType))
                ) && 
                (
                    this.Type2 == input.Type2 ||
                    (this.Type2 != null &&
                    this.Type2.Equals(input.Type2))
                ) && 
                (
                    this.Type3 == input.Type3 ||
                    (this.Type3 != null &&
                    this.Type3.Equals(input.Type3))
                ) && 
                (
                    this.InternalFax == input.InternalFax ||
                    (this.InternalFax != null &&
                    this.InternalFax.Equals(input.InternalFax))
                ) && 
                (
                    this.LastMail == input.LastMail ||
                    (this.LastMail != null &&
                    this.LastMail.Equals(input.LastMail))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                ) && 
                (
                    this.DefaultState == input.DefaultState ||
                    (this.DefaultState != null &&
                    this.DefaultState.Equals(input.DefaultState))
                ) && 
                (
                    this.AddressBook == input.AddressBook ||
                    (this.AddressBook != null &&
                    this.AddressBook.Equals(input.AddressBook))
                ) && 
                (
                    this.UserState == input.UserState ||
                    (this.UserState != null &&
                    this.UserState.Equals(input.UserState))
                ) && 
                (
                    this.MailServer == input.MailServer ||
                    (this.MailServer != null &&
                    this.MailServer.Equals(input.MailServer))
                ) && 
                (
                    this.WebAccess == input.WebAccess ||
                    (this.WebAccess != null &&
                    this.WebAccess.Equals(input.WebAccess))
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Folders == input.Folders ||
                    (this.Folders != null &&
                    this.Folders.Equals(input.Folders))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                ) && 
                (
                    this.Viewer == input.Viewer ||
                    (this.Viewer != null &&
                    this.Viewer.Equals(input.Viewer))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Models == input.Models ||
                    (this.Models != null &&
                    this.Models.Equals(input.Models))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.OutState == input.OutState ||
                    (this.OutState != null &&
                    this.OutState.Equals(input.OutState))
                ) && 
                (
                    this.MailBody == input.MailBody ||
                    (this.MailBody != null &&
                    this.MailBody.Equals(input.MailBody))
                ) && 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                ) && 
                (
                    this.MailClient == input.MailClient ||
                    (this.MailClient != null &&
                    this.MailClient.Equals(input.MailClient))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.RespAos == input.RespAos ||
                    (this.RespAos != null &&
                    this.RespAos.Equals(input.RespAos))
                ) && 
                (
                    this.AssAos == input.AssAos ||
                    (this.AssAos != null &&
                    this.AssAos.Equals(input.AssAos))
                ) && 
                (
                    this.CodFis == input.CodFis ||
                    (this.CodFis != null &&
                    this.CodFis.Equals(input.CodFis))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.Guest == input.Guest ||
                    (this.Guest != null &&
                    this.Guest.Equals(input.Guest))
                ) && 
                (
                    this.PasswordChange == input.PasswordChange ||
                    (this.PasswordChange != null &&
                    this.PasswordChange.Equals(input.PasswordChange))
                ) && 
                (
                    this.Marking == input.Marking ||
                    (this.Marking != null &&
                    this.Marking.Equals(input.Marking))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MailOutDefault == input.MailOutDefault ||
                    (this.MailOutDefault != null &&
                    this.MailOutDefault.Equals(input.MailOutDefault))
                ) && 
                (
                    this.BarcodeAccess == input.BarcodeAccess ||
                    (this.BarcodeAccess != null &&
                    this.BarcodeAccess.Equals(input.BarcodeAccess))
                ) && 
                (
                    this.MustChangePassword == input.MustChangePassword ||
                    (this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(input.MustChangePassword))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.Ws == input.Ws ||
                    (this.Ws != null &&
                    this.Ws.Equals(input.Ws))
                ) && 
                (
                    this.DisablePswExpired == input.DisablePswExpired ||
                    (this.DisablePswExpired != null &&
                    this.DisablePswExpired.Equals(input.DisablePswExpired))
                ) && 
                (
                    this.CompleteDescription == input.CompleteDescription ||
                    (this.CompleteDescription != null &&
                    this.CompleteDescription.Equals(input.CompleteDescription))
                ) && 
                (
                    this.CanAddVirtualStamps == input.CanAddVirtualStamps ||
                    (this.CanAddVirtualStamps != null &&
                    this.CanAddVirtualStamps.Equals(input.CanAddVirtualStamps))
                ) && 
                (
                    this.CanApplyStaps == input.CanApplyStaps ||
                    (this.CanApplyStaps != null &&
                    this.CanApplyStaps.Equals(input.CanApplyStaps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.BusinessUnitUserUnlock != null)
                    hashCode = hashCode * 59 + this.BusinessUnitUserUnlock.GetHashCode();
                if (this.TempArchive != null)
                    hashCode = hashCode * 59 + this.TempArchive.GetHashCode();
                if (this.AddressBookProfile != null)
                    hashCode = hashCode * 59 + this.AddressBookProfile.GetHashCode();
                if (this.DistributionList != null)
                    hashCode = hashCode * 59 + this.DistributionList.GetHashCode();
                if (this.MailIn != null)
                    hashCode = hashCode * 59 + this.MailIn.GetHashCode();
                if (this.MailOutStoreExt != null)
                    hashCode = hashCode * 59 + this.MailOutStoreExt.GetHashCode();
                if (this.MailOutStoreIn != null)
                    hashCode = hashCode * 59 + this.MailOutStoreIn.GetHashCode();
                if (this.MailDeleteProfile != null)
                    hashCode = hashCode * 59 + this.MailDeleteProfile.GetHashCode();
                if (this.WebCompliantCopy != null)
                    hashCode = hashCode * 59 + this.WebCompliantCopy.GetHashCode();
                if (this.WebSearch != null)
                    hashCode = hashCode * 59 + this.WebSearch.GetHashCode();
                if (this.WebQuickSearch != null)
                    hashCode = hashCode * 59 + this.WebQuickSearch.GetHashCode();
                if (this.WebMailBox != null)
                    hashCode = hashCode * 59 + this.WebMailBox.GetHashCode();
                if (this.WebFolders != null)
                    hashCode = hashCode * 59 + this.WebFolders.GetHashCode();
                if (this.WebSearchViews != null)
                    hashCode = hashCode * 59 + this.WebSearchViews.GetHashCode();
                if (this.WebBinders != null)
                    hashCode = hashCode * 59 + this.WebBinders.GetHashCode();
                if (this.WebCheckinAdmin != null)
                    hashCode = hashCode * 59 + this.WebCheckinAdmin.GetHashCode();
                if (this.MailOutMaxSize != null)
                    hashCode = hashCode * 59 + this.MailOutMaxSize.GetHashCode();
                if (this.MailOutDefaultType != null)
                    hashCode = hashCode * 59 + this.MailOutDefaultType.GetHashCode();
                if (this.MailOutType2 != null)
                    hashCode = hashCode * 59 + this.MailOutType2.GetHashCode();
                if (this.MailOutType3 != null)
                    hashCode = hashCode * 59 + this.MailOutType3.GetHashCode();
                if (this.SecurityStateList != null)
                    hashCode = hashCode * 59 + this.SecurityStateList.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.DefaultType != null)
                    hashCode = hashCode * 59 + this.DefaultType.GetHashCode();
                if (this.Type2 != null)
                    hashCode = hashCode * 59 + this.Type2.GetHashCode();
                if (this.Type3 != null)
                    hashCode = hashCode * 59 + this.Type3.GetHashCode();
                if (this.InternalFax != null)
                    hashCode = hashCode * 59 + this.InternalFax.GetHashCode();
                if (this.LastMail != null)
                    hashCode = hashCode * 59 + this.LastMail.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                if (this.DefaultState != null)
                    hashCode = hashCode * 59 + this.DefaultState.GetHashCode();
                if (this.AddressBook != null)
                    hashCode = hashCode * 59 + this.AddressBook.GetHashCode();
                if (this.UserState != null)
                    hashCode = hashCode * 59 + this.UserState.GetHashCode();
                if (this.MailServer != null)
                    hashCode = hashCode * 59 + this.MailServer.GetHashCode();
                if (this.WebAccess != null)
                    hashCode = hashCode * 59 + this.WebAccess.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Folders != null)
                    hashCode = hashCode * 59 + this.Folders.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                if (this.Viewer != null)
                    hashCode = hashCode * 59 + this.Viewer.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Models != null)
                    hashCode = hashCode * 59 + this.Models.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.OutState != null)
                    hashCode = hashCode * 59 + this.OutState.GetHashCode();
                if (this.MailBody != null)
                    hashCode = hashCode * 59 + this.MailBody.GetHashCode();
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                if (this.MailClient != null)
                    hashCode = hashCode * 59 + this.MailClient.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.RespAos != null)
                    hashCode = hashCode * 59 + this.RespAos.GetHashCode();
                if (this.AssAos != null)
                    hashCode = hashCode * 59 + this.AssAos.GetHashCode();
                if (this.CodFis != null)
                    hashCode = hashCode * 59 + this.CodFis.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.Guest != null)
                    hashCode = hashCode * 59 + this.Guest.GetHashCode();
                if (this.PasswordChange != null)
                    hashCode = hashCode * 59 + this.PasswordChange.GetHashCode();
                if (this.Marking != null)
                    hashCode = hashCode * 59 + this.Marking.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MailOutDefault != null)
                    hashCode = hashCode * 59 + this.MailOutDefault.GetHashCode();
                if (this.BarcodeAccess != null)
                    hashCode = hashCode * 59 + this.BarcodeAccess.GetHashCode();
                if (this.MustChangePassword != null)
                    hashCode = hashCode * 59 + this.MustChangePassword.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.Ws != null)
                    hashCode = hashCode * 59 + this.Ws.GetHashCode();
                if (this.DisablePswExpired != null)
                    hashCode = hashCode * 59 + this.DisablePswExpired.GetHashCode();
                if (this.CompleteDescription != null)
                    hashCode = hashCode * 59 + this.CompleteDescription.GetHashCode();
                if (this.CanAddVirtualStamps != null)
                    hashCode = hashCode * 59 + this.CanAddVirtualStamps.GetHashCode();
                if (this.CanApplyStaps != null)
                    hashCode = hashCode * 59 + this.CanApplyStaps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
