/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmailDestinationAddressDTO
    /// </summary>
    [DataContract]
    public partial class EmailDestinationAddressDTO :  IEquatable<EmailDestinationAddressDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDestinationAddressDTO" /> class.
        /// </summary>
        /// <param name="destinationKind">Possible values:  0: To  1: Cc  2: Bcc .</param>
        /// <param name="isInternal">Specifies if is an internal message.</param>
        /// <param name="className">ClassName.</param>
        /// <param name="alias">Alias.</param>
        /// <param name="email">Email.</param>
        /// <param name="userId">Arxivar user identifier.</param>
        public EmailDestinationAddressDTO(int? destinationKind = default(int?), bool? isInternal = default(bool?), string className = default(string), string alias = default(string), string email = default(string), int? userId = default(int?))
        {
            this.DestinationKind = destinationKind;
            this.IsInternal = isInternal;
            this.ClassName = className;
            this.Alias = alias;
            this.Email = email;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Possible values:  0: To  1: Cc  2: Bcc 
        /// </summary>
        /// <value>Possible values:  0: To  1: Cc  2: Bcc </value>
        [DataMember(Name="destinationKind", EmitDefaultValue=false)]
        public int? DestinationKind { get; set; }

        /// <summary>
        /// Specifies if is an internal message
        /// </summary>
        /// <value>Specifies if is an internal message</value>
        [DataMember(Name="isInternal", EmitDefaultValue=false)]
        public bool? IsInternal { get; set; }

        /// <summary>
        /// ClassName
        /// </summary>
        /// <value>ClassName</value>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Alias
        /// </summary>
        /// <value>Alias</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Arxivar user identifier
        /// </summary>
        /// <value>Arxivar user identifier</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDestinationAddressDTO {\n");
            sb.Append("  DestinationKind: ").Append(DestinationKind).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailDestinationAddressDTO);
        }

        /// <summary>
        /// Returns true if EmailDestinationAddressDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDestinationAddressDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDestinationAddressDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationKind == input.DestinationKind ||
                    (this.DestinationKind != null &&
                    this.DestinationKind.Equals(input.DestinationKind))
                ) && 
                (
                    this.IsInternal == input.IsInternal ||
                    (this.IsInternal != null &&
                    this.IsInternal.Equals(input.IsInternal))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationKind != null)
                    hashCode = hashCode * 59 + this.DestinationKind.GetHashCode();
                if (this.IsInternal != null)
                    hashCode = hashCode * 59 + this.IsInternal.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
