/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Authentication token request
    /// </summary>
    [DataContract]
    public partial class AuthenticationTokenRequestDTO :  IEquatable<AuthenticationTokenRequestDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationTokenRequestDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticationTokenRequestDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationTokenRequestDTO" /> class.
        /// </summary>
        /// <param name="Username">Username (required).</param>
        /// <param name="Password">Password (required).</param>
        /// <param name="ClientId">Client id.</param>
        /// <param name="ClientSecret">Client secret.</param>
        /// <param name="LogonProviderId">Logon provider for authentication (existing association required).</param>
        /// <param name="ImpersonateUserId">Impersonate user id.</param>
        /// <param name="ImpersonateExternalId">Impersonate user by externalId.</param>
        /// <param name="ClientVersion">Client version.</param>
        /// <param name="MachineKey">Machine Key.</param>
        /// <param name="ScopeList">Request scope list.</param>
        public AuthenticationTokenRequestDTO(string Username = null, string Password = null, string ClientId = null, string ClientSecret = null, string LogonProviderId = null, int? ImpersonateUserId = null, string ImpersonateExternalId = null, string ClientVersion = null, string MachineKey = null, List<string> ScopeList = null)
        {
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for AuthenticationTokenRequestDTO and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for AuthenticationTokenRequestDTO and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
            this.ClientId = ClientId;
            this.ClientSecret = ClientSecret;
            this.LogonProviderId = LogonProviderId;
            this.ImpersonateUserId = ImpersonateUserId;
            this.ImpersonateExternalId = ImpersonateExternalId;
            this.ClientVersion = ClientVersion;
            this.MachineKey = MachineKey;
            this.ScopeList = ScopeList;
        }
        
        /// <summary>
        /// Username
        /// </summary>
        /// <value>Username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }
        /// <summary>
        /// Client secret
        /// </summary>
        /// <value>Client secret</value>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }
        /// <summary>
        /// Logon provider for authentication (existing association required)
        /// </summary>
        /// <value>Logon provider for authentication (existing association required)</value>
        [DataMember(Name="logonProviderId", EmitDefaultValue=false)]
        public string LogonProviderId { get; set; }
        /// <summary>
        /// Impersonate user id
        /// </summary>
        /// <value>Impersonate user id</value>
        [DataMember(Name="impersonateUserId", EmitDefaultValue=false)]
        public int? ImpersonateUserId { get; set; }
        /// <summary>
        /// Impersonate user by externalId
        /// </summary>
        /// <value>Impersonate user by externalId</value>
        [DataMember(Name="impersonateExternalId", EmitDefaultValue=false)]
        public string ImpersonateExternalId { get; set; }
        /// <summary>
        /// Client version
        /// </summary>
        /// <value>Client version</value>
        [DataMember(Name="clientVersion", EmitDefaultValue=false)]
        public string ClientVersion { get; set; }
        /// <summary>
        /// Machine Key
        /// </summary>
        /// <value>Machine Key</value>
        [DataMember(Name="machineKey", EmitDefaultValue=false)]
        public string MachineKey { get; set; }
        /// <summary>
        /// Request scope list
        /// </summary>
        /// <value>Request scope list</value>
        [DataMember(Name="scopeList", EmitDefaultValue=false)]
        public List<string> ScopeList { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationTokenRequestDTO {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  LogonProviderId: ").Append(LogonProviderId).Append("\n");
            sb.Append("  ImpersonateUserId: ").Append(ImpersonateUserId).Append("\n");
            sb.Append("  ImpersonateExternalId: ").Append(ImpersonateExternalId).Append("\n");
            sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            sb.Append("  MachineKey: ").Append(MachineKey).Append("\n");
            sb.Append("  ScopeList: ").Append(ScopeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthenticationTokenRequestDTO);
        }

        /// <summary>
        /// Returns true if AuthenticationTokenRequestDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationTokenRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationTokenRequestDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.ClientSecret == other.ClientSecret ||
                    this.ClientSecret != null &&
                    this.ClientSecret.Equals(other.ClientSecret)
                ) && 
                (
                    this.LogonProviderId == other.LogonProviderId ||
                    this.LogonProviderId != null &&
                    this.LogonProviderId.Equals(other.LogonProviderId)
                ) && 
                (
                    this.ImpersonateUserId == other.ImpersonateUserId ||
                    this.ImpersonateUserId != null &&
                    this.ImpersonateUserId.Equals(other.ImpersonateUserId)
                ) && 
                (
                    this.ImpersonateExternalId == other.ImpersonateExternalId ||
                    this.ImpersonateExternalId != null &&
                    this.ImpersonateExternalId.Equals(other.ImpersonateExternalId)
                ) && 
                (
                    this.ClientVersion == other.ClientVersion ||
                    this.ClientVersion != null &&
                    this.ClientVersion.Equals(other.ClientVersion)
                ) && 
                (
                    this.MachineKey == other.MachineKey ||
                    this.MachineKey != null &&
                    this.MachineKey.Equals(other.MachineKey)
                ) && 
                (
                    this.ScopeList == other.ScopeList ||
                    this.ScopeList != null &&
                    this.ScopeList.SequenceEqual(other.ScopeList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hash = hash * 59 + this.ClientSecret.GetHashCode();
                if (this.LogonProviderId != null)
                    hash = hash * 59 + this.LogonProviderId.GetHashCode();
                if (this.ImpersonateUserId != null)
                    hash = hash * 59 + this.ImpersonateUserId.GetHashCode();
                if (this.ImpersonateExternalId != null)
                    hash = hash * 59 + this.ImpersonateExternalId.GetHashCode();
                if (this.ClientVersion != null)
                    hash = hash * 59 + this.ClientVersion.GetHashCode();
                if (this.MachineKey != null)
                    hash = hash * 59 + this.MachineKey.GetHashCode();
                if (this.ScopeList != null)
                    hash = hash * 59 + this.ScopeList.GetHashCode();
                return hash;
            }
        }
    }

}
