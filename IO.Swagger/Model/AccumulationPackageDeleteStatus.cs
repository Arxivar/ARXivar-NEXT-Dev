/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccumulationPackageDeleteStatus
    /// </summary>
    [DataContract]
    public partial class AccumulationPackageDeleteStatus :  IEquatable<AccumulationPackageDeleteStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccumulationPackageDeleteStatus" /> class.
        /// </summary>
        /// <param name="DeleteStatus">Possible values:  0: Ok  1: Ko  2: DetachRequired  3: DetachPending .</param>
        /// <param name="ErrorMessage">ErrorMessage.</param>
        /// <param name="DocumentsCount">DocumentsCount.</param>
        public AccumulationPackageDeleteStatus(int? DeleteStatus = default(int?), string ErrorMessage = default(string), int? DocumentsCount = default(int?))
        {
            this.DeleteStatus = DeleteStatus;
            this.ErrorMessage = ErrorMessage;
            this.DocumentsCount = DocumentsCount;
        }
        
        /// <summary>
        /// Possible values:  0: Ok  1: Ko  2: DetachRequired  3: DetachPending 
        /// </summary>
        /// <value>Possible values:  0: Ok  1: Ko  2: DetachRequired  3: DetachPending </value>
        [DataMember(Name="deleteStatus", EmitDefaultValue=false)]
        public int? DeleteStatus { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsCount
        /// </summary>
        [DataMember(Name="documentsCount", EmitDefaultValue=false)]
        public int? DocumentsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccumulationPackageDeleteStatus {\n");
            sb.Append("  DeleteStatus: ").Append(DeleteStatus).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  DocumentsCount: ").Append(DocumentsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccumulationPackageDeleteStatus);
        }

        /// <summary>
        /// Returns true if AccumulationPackageDeleteStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of AccumulationPackageDeleteStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccumulationPackageDeleteStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeleteStatus == input.DeleteStatus ||
                    (this.DeleteStatus != null &&
                    this.DeleteStatus.Equals(input.DeleteStatus))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.DocumentsCount == input.DocumentsCount ||
                    (this.DocumentsCount != null &&
                    this.DocumentsCount.Equals(input.DocumentsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteStatus != null)
                    hashCode = hashCode * 59 + this.DeleteStatus.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.DocumentsCount != null)
                    hashCode = hashCode * 59 + this.DocumentsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
