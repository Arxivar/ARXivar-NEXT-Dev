/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StampDefinitionDTO
    /// </summary>
    [DataContract]
    public partial class StampDefinitionDTO :  IEquatable<StampDefinitionDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampDefinitionDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="StampName">StampName.</param>
        /// <param name="StampDescription">StampDescription.</param>
        public StampDefinitionDTO(string Id = null, string StampName = null, string StampDescription = null)
        {
            this.Id = Id;
            this.StampName = StampName;
            this.StampDescription = StampDescription;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets StampName
        /// </summary>
        [DataMember(Name="stampName", EmitDefaultValue=false)]
        public string StampName { get; set; }
        /// <summary>
        /// Gets or Sets StampDescription
        /// </summary>
        [DataMember(Name="stampDescription", EmitDefaultValue=false)]
        public string StampDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StampDefinitionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StampName: ").Append(StampName).Append("\n");
            sb.Append("  StampDescription: ").Append(StampDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StampDefinitionDTO);
        }

        /// <summary>
        /// Returns true if StampDefinitionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of StampDefinitionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StampDefinitionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.StampName == other.StampName ||
                    this.StampName != null &&
                    this.StampName.Equals(other.StampName)
                ) && 
                (
                    this.StampDescription == other.StampDescription ||
                    this.StampDescription != null &&
                    this.StampDescription.Equals(other.StampDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.StampName != null)
                    hash = hash * 59 + this.StampName.GetHashCode();
                if (this.StampDescription != null)
                    hash = hash * 59 + this.StampDescription.GetHashCode();
                return hash;
            }
        }
    }

}
