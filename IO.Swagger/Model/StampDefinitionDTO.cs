/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of stamp
    /// </summary>
    [DataContract]
    public partial class StampDefinitionDTO :  IEquatable<StampDefinitionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampDefinitionDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="stampName">Name.</param>
        /// <param name="stampDescription">Description.</param>
        /// <param name="isResizable">Is Resizable..</param>
        /// <param name="removeAfterApplied">Indicates if the stamp definition must be removed after applied.</param>
        /// <param name="xaml">Xaml string for the stamp..</param>
        /// <param name="dmTipidocumentoId">Document type of stamp..</param>
        /// <param name="bindings">List of binding for the stamp..</param>
        public StampDefinitionDTO(string id = default(string), string stampName = default(string), string stampDescription = default(string), bool? isResizable = default(bool?), bool? removeAfterApplied = default(bool?), string xaml = default(string), int? dmTipidocumentoId = default(int?), List<StampDefinitionBindingElementDTO> bindings = default(List<StampDefinitionBindingElementDTO>))
        {
            this.Id = id;
            this.StampName = stampName;
            this.StampDescription = stampDescription;
            this.IsResizable = isResizable;
            this.RemoveAfterApplied = removeAfterApplied;
            this.Xaml = xaml;
            this.DmTipidocumentoId = dmTipidocumentoId;
            this.Bindings = bindings;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="stampName", EmitDefaultValue=false)]
        public string StampName { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="stampDescription", EmitDefaultValue=false)]
        public string StampDescription { get; set; }

        /// <summary>
        /// Is Resizable.
        /// </summary>
        /// <value>Is Resizable.</value>
        [DataMember(Name="isResizable", EmitDefaultValue=false)]
        public bool? IsResizable { get; set; }

        /// <summary>
        /// Indicates if the stamp definition must be removed after applied
        /// </summary>
        /// <value>Indicates if the stamp definition must be removed after applied</value>
        [DataMember(Name="removeAfterApplied", EmitDefaultValue=false)]
        public bool? RemoveAfterApplied { get; set; }

        /// <summary>
        /// Xaml string for the stamp.
        /// </summary>
        /// <value>Xaml string for the stamp.</value>
        [DataMember(Name="xaml", EmitDefaultValue=false)]
        public string Xaml { get; set; }

        /// <summary>
        /// Document type of stamp.
        /// </summary>
        /// <value>Document type of stamp.</value>
        [DataMember(Name="dmTipidocumentoId", EmitDefaultValue=false)]
        public int? DmTipidocumentoId { get; set; }

        /// <summary>
        /// List of binding for the stamp.
        /// </summary>
        /// <value>List of binding for the stamp.</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<StampDefinitionBindingElementDTO> Bindings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StampDefinitionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StampName: ").Append(StampName).Append("\n");
            sb.Append("  StampDescription: ").Append(StampDescription).Append("\n");
            sb.Append("  IsResizable: ").Append(IsResizable).Append("\n");
            sb.Append("  RemoveAfterApplied: ").Append(RemoveAfterApplied).Append("\n");
            sb.Append("  Xaml: ").Append(Xaml).Append("\n");
            sb.Append("  DmTipidocumentoId: ").Append(DmTipidocumentoId).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StampDefinitionDTO);
        }

        /// <summary>
        /// Returns true if StampDefinitionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of StampDefinitionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StampDefinitionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StampName == input.StampName ||
                    (this.StampName != null &&
                    this.StampName.Equals(input.StampName))
                ) && 
                (
                    this.StampDescription == input.StampDescription ||
                    (this.StampDescription != null &&
                    this.StampDescription.Equals(input.StampDescription))
                ) && 
                (
                    this.IsResizable == input.IsResizable ||
                    (this.IsResizable != null &&
                    this.IsResizable.Equals(input.IsResizable))
                ) && 
                (
                    this.RemoveAfterApplied == input.RemoveAfterApplied ||
                    (this.RemoveAfterApplied != null &&
                    this.RemoveAfterApplied.Equals(input.RemoveAfterApplied))
                ) && 
                (
                    this.Xaml == input.Xaml ||
                    (this.Xaml != null &&
                    this.Xaml.Equals(input.Xaml))
                ) && 
                (
                    this.DmTipidocumentoId == input.DmTipidocumentoId ||
                    (this.DmTipidocumentoId != null &&
                    this.DmTipidocumentoId.Equals(input.DmTipidocumentoId))
                ) && 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StampName != null)
                    hashCode = hashCode * 59 + this.StampName.GetHashCode();
                if (this.StampDescription != null)
                    hashCode = hashCode * 59 + this.StampDescription.GetHashCode();
                if (this.IsResizable != null)
                    hashCode = hashCode * 59 + this.IsResizable.GetHashCode();
                if (this.RemoveAfterApplied != null)
                    hashCode = hashCode * 59 + this.RemoveAfterApplied.GetHashCode();
                if (this.Xaml != null)
                    hashCode = hashCode * 59 + this.Xaml.GetHashCode();
                if (this.DmTipidocumentoId != null)
                    hashCode = hashCode * 59 + this.DmTipidocumentoId.GetHashCode();
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
