/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of address book field
    /// </summary>
    [DataContract]
    public partial class RubricaFieldDTO :  IEquatable<RubricaFieldDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RubricaFieldDTO" /> class.
        /// </summary>
        /// <param name="Label">Field label translated into the language used.</param>
        /// <param name="KeyField">Field key in the database.</param>
        /// <param name="Selected">If field is selected for the result.</param>
        /// <param name="Index">Field order for the result.</param>
        public RubricaFieldDTO(string Label = default(string), string KeyField = default(string), bool? Selected = default(bool?), int? Index = default(int?))
        {
            this.Label = Label;
            this.KeyField = KeyField;
            this.Selected = Selected;
            this.Index = Index;
        }
        
        /// <summary>
        /// Field label translated into the language used
        /// </summary>
        /// <value>Field label translated into the language used</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Field key in the database
        /// </summary>
        /// <value>Field key in the database</value>
        [DataMember(Name="keyField", EmitDefaultValue=false)]
        public string KeyField { get; set; }

        /// <summary>
        /// If field is selected for the result
        /// </summary>
        /// <value>If field is selected for the result</value>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public bool? Selected { get; set; }

        /// <summary>
        /// Field order for the result
        /// </summary>
        /// <value>Field order for the result</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RubricaFieldDTO {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  KeyField: ").Append(KeyField).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RubricaFieldDTO);
        }

        /// <summary>
        /// Returns true if RubricaFieldDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RubricaFieldDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RubricaFieldDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.KeyField == input.KeyField ||
                    (this.KeyField != null &&
                    this.KeyField.Equals(input.KeyField))
                ) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.KeyField != null)
                    hashCode = hashCode * 59 + this.KeyField.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
