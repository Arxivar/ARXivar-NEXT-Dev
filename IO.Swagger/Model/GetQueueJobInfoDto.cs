/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetQueueJobInfoDto
    /// </summary>
    [DataContract]
    public partial class GetQueueJobInfoDto :  IEquatable<GetQueueJobInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQueueJobInfoDto" /> class.
        /// </summary>
        /// <param name="JobStateEnum">Possible values:  0: Awaiting  1: Deleted  2: Enqueued  3: Failed  4: Processing  5: Scheduled  6: SucceededKo  7: SucceededOk .</param>
        /// <param name="QueueMethod">Possible values:  0: Work  1: WorkItem  2: End .</param>
        /// <param name="StartItem">StartItem.</param>
        /// <param name="Count">Count.</param>
        public GetQueueJobInfoDto(int? JobStateEnum = default(int?), int? QueueMethod = default(int?), int? StartItem = default(int?), int? Count = default(int?))
        {
            this.JobStateEnum = JobStateEnum;
            this.QueueMethod = QueueMethod;
            this.StartItem = StartItem;
            this.Count = Count;
        }
        
        /// <summary>
        /// Possible values:  0: Awaiting  1: Deleted  2: Enqueued  3: Failed  4: Processing  5: Scheduled  6: SucceededKo  7: SucceededOk 
        /// </summary>
        /// <value>Possible values:  0: Awaiting  1: Deleted  2: Enqueued  3: Failed  4: Processing  5: Scheduled  6: SucceededKo  7: SucceededOk </value>
        [DataMember(Name="jobStateEnum", EmitDefaultValue=false)]
        public int? JobStateEnum { get; set; }

        /// <summary>
        /// Possible values:  0: Work  1: WorkItem  2: End 
        /// </summary>
        /// <value>Possible values:  0: Work  1: WorkItem  2: End </value>
        [DataMember(Name="queueMethod", EmitDefaultValue=false)]
        public int? QueueMethod { get; set; }

        /// <summary>
        /// Gets or Sets StartItem
        /// </summary>
        [DataMember(Name="startItem", EmitDefaultValue=false)]
        public int? StartItem { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetQueueJobInfoDto {\n");
            sb.Append("  JobStateEnum: ").Append(JobStateEnum).Append("\n");
            sb.Append("  QueueMethod: ").Append(QueueMethod).Append("\n");
            sb.Append("  StartItem: ").Append(StartItem).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetQueueJobInfoDto);
        }

        /// <summary>
        /// Returns true if GetQueueJobInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GetQueueJobInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetQueueJobInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobStateEnum == input.JobStateEnum ||
                    (this.JobStateEnum != null &&
                    this.JobStateEnum.Equals(input.JobStateEnum))
                ) && 
                (
                    this.QueueMethod == input.QueueMethod ||
                    (this.QueueMethod != null &&
                    this.QueueMethod.Equals(input.QueueMethod))
                ) && 
                (
                    this.StartItem == input.StartItem ||
                    (this.StartItem != null &&
                    this.StartItem.Equals(input.StartItem))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobStateEnum != null)
                    hashCode = hashCode * 59 + this.JobStateEnum.GetHashCode();
                if (this.QueueMethod != null)
                    hashCode = hashCode * 59 + this.QueueMethod.GetHashCode();
                if (this.StartItem != null)
                    hashCode = hashCode * 59 + this.StartItem.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
