/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dynamic job operation
    /// </summary>
    [DataContract]
    public partial class TaskWorkDynamicJobOperationDTO :  IEquatable<TaskWorkDynamicJobOperationDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkDynamicJobOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ProcessId">Process Id.</param>
        /// <param name="TaskWorkId">TaskWork Id.</param>
        /// <param name="DynamicJob">Dynamic job.</param>
        /// <param name="OutcomeValue">Value for outcome.</param>
        /// <param name="ExecuteAfter">After execution.</param>
        /// <param name="IsRequired">Required.</param>
        /// <param name="IsExecuted">Executed.</param>
        public TaskWorkDynamicJobOperationDTO(int? Id = null, int? ProcessId = null, int? TaskWorkId = null, UserCompleteDTO DynamicJob = null, string OutcomeValue = null, bool? ExecuteAfter = null, bool? IsRequired = null, bool? IsExecuted = null)
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.TaskWorkId = TaskWorkId;
            this.DynamicJob = DynamicJob;
            this.OutcomeValue = OutcomeValue;
            this.ExecuteAfter = ExecuteAfter;
            this.IsRequired = IsRequired;
            this.IsExecuted = IsExecuted;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Process Id
        /// </summary>
        /// <value>Process Id</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }
        /// <summary>
        /// TaskWork Id
        /// </summary>
        /// <value>TaskWork Id</value>
        [DataMember(Name="taskWorkId", EmitDefaultValue=false)]
        public int? TaskWorkId { get; set; }
        /// <summary>
        /// Dynamic job
        /// </summary>
        /// <value>Dynamic job</value>
        [DataMember(Name="dynamicJob", EmitDefaultValue=false)]
        public UserCompleteDTO DynamicJob { get; set; }
        /// <summary>
        /// Value for outcome
        /// </summary>
        /// <value>Value for outcome</value>
        [DataMember(Name="outcomeValue", EmitDefaultValue=false)]
        public string OutcomeValue { get; set; }
        /// <summary>
        /// After execution
        /// </summary>
        /// <value>After execution</value>
        [DataMember(Name="executeAfter", EmitDefaultValue=false)]
        public bool? ExecuteAfter { get; set; }
        /// <summary>
        /// Required
        /// </summary>
        /// <value>Required</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }
        /// <summary>
        /// Executed
        /// </summary>
        /// <value>Executed</value>
        [DataMember(Name="isExecuted", EmitDefaultValue=false)]
        public bool? IsExecuted { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkDynamicJobOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  TaskWorkId: ").Append(TaskWorkId).Append("\n");
            sb.Append("  DynamicJob: ").Append(DynamicJob).Append("\n");
            sb.Append("  OutcomeValue: ").Append(OutcomeValue).Append("\n");
            sb.Append("  ExecuteAfter: ").Append(ExecuteAfter).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsExecuted: ").Append(IsExecuted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskWorkDynamicJobOperationDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkDynamicJobOperationDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskWorkDynamicJobOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkDynamicJobOperationDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.TaskWorkId == other.TaskWorkId ||
                    this.TaskWorkId != null &&
                    this.TaskWorkId.Equals(other.TaskWorkId)
                ) && 
                (
                    this.DynamicJob == other.DynamicJob ||
                    this.DynamicJob != null &&
                    this.DynamicJob.Equals(other.DynamicJob)
                ) && 
                (
                    this.OutcomeValue == other.OutcomeValue ||
                    this.OutcomeValue != null &&
                    this.OutcomeValue.Equals(other.OutcomeValue)
                ) && 
                (
                    this.ExecuteAfter == other.ExecuteAfter ||
                    this.ExecuteAfter != null &&
                    this.ExecuteAfter.Equals(other.ExecuteAfter)
                ) && 
                (
                    this.IsRequired == other.IsRequired ||
                    this.IsRequired != null &&
                    this.IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    this.IsExecuted == other.IsExecuted ||
                    this.IsExecuted != null &&
                    this.IsExecuted.Equals(other.IsExecuted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.TaskWorkId != null)
                    hash = hash * 59 + this.TaskWorkId.GetHashCode();
                if (this.DynamicJob != null)
                    hash = hash * 59 + this.DynamicJob.GetHashCode();
                if (this.OutcomeValue != null)
                    hash = hash * 59 + this.OutcomeValue.GetHashCode();
                if (this.ExecuteAfter != null)
                    hash = hash * 59 + this.ExecuteAfter.GetHashCode();
                if (this.IsRequired != null)
                    hash = hash * 59 + this.IsRequired.GetHashCode();
                if (this.IsExecuted != null)
                    hash = hash * 59 + this.IsExecuted.GetHashCode();
                return hash;
            }
        }
    }

}
