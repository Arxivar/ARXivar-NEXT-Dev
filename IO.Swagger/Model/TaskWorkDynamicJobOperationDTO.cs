/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dynamic job operation
    /// </summary>
    [DataContract]
    public partial class TaskWorkDynamicJobOperationDTO :  IEquatable<TaskWorkDynamicJobOperationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkDynamicJobOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ProcessId">Process Id.</param>
        /// <param name="TaskWorkId">TaskWork Id.</param>
        /// <param name="DynamicJob">Dynamic job.</param>
        /// <param name="OutcomeValue">Value for outcome.</param>
        /// <param name="ExecuteAfter">After execution.</param>
        /// <param name="IsRequired">Required.</param>
        /// <param name="IsExecuted">Executed.</param>
        public TaskWorkDynamicJobOperationDTO(int? Id = default(int?), int? ProcessId = default(int?), int? TaskWorkId = default(int?), UserCompleteDTO DynamicJob = default(UserCompleteDTO), string OutcomeValue = default(string), bool? ExecuteAfter = default(bool?), bool? IsRequired = default(bool?), bool? IsExecuted = default(bool?))
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.TaskWorkId = TaskWorkId;
            this.DynamicJob = DynamicJob;
            this.OutcomeValue = OutcomeValue;
            this.ExecuteAfter = ExecuteAfter;
            this.IsRequired = IsRequired;
            this.IsExecuted = IsExecuted;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Process Id
        /// </summary>
        /// <value>Process Id</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// TaskWork Id
        /// </summary>
        /// <value>TaskWork Id</value>
        [DataMember(Name="taskWorkId", EmitDefaultValue=false)]
        public int? TaskWorkId { get; set; }

        /// <summary>
        /// Dynamic job
        /// </summary>
        /// <value>Dynamic job</value>
        [DataMember(Name="dynamicJob", EmitDefaultValue=false)]
        public UserCompleteDTO DynamicJob { get; set; }

        /// <summary>
        /// Value for outcome
        /// </summary>
        /// <value>Value for outcome</value>
        [DataMember(Name="outcomeValue", EmitDefaultValue=false)]
        public string OutcomeValue { get; set; }

        /// <summary>
        /// After execution
        /// </summary>
        /// <value>After execution</value>
        [DataMember(Name="executeAfter", EmitDefaultValue=false)]
        public bool? ExecuteAfter { get; set; }

        /// <summary>
        /// Required
        /// </summary>
        /// <value>Required</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Executed
        /// </summary>
        /// <value>Executed</value>
        [DataMember(Name="isExecuted", EmitDefaultValue=false)]
        public bool? IsExecuted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkDynamicJobOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  TaskWorkId: ").Append(TaskWorkId).Append("\n");
            sb.Append("  DynamicJob: ").Append(DynamicJob).Append("\n");
            sb.Append("  OutcomeValue: ").Append(OutcomeValue).Append("\n");
            sb.Append("  ExecuteAfter: ").Append(ExecuteAfter).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsExecuted: ").Append(IsExecuted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskWorkDynamicJobOperationDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkDynamicJobOperationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskWorkDynamicJobOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkDynamicJobOperationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.TaskWorkId == input.TaskWorkId ||
                    (this.TaskWorkId != null &&
                    this.TaskWorkId.Equals(input.TaskWorkId))
                ) && 
                (
                    this.DynamicJob == input.DynamicJob ||
                    (this.DynamicJob != null &&
                    this.DynamicJob.Equals(input.DynamicJob))
                ) && 
                (
                    this.OutcomeValue == input.OutcomeValue ||
                    (this.OutcomeValue != null &&
                    this.OutcomeValue.Equals(input.OutcomeValue))
                ) && 
                (
                    this.ExecuteAfter == input.ExecuteAfter ||
                    (this.ExecuteAfter != null &&
                    this.ExecuteAfter.Equals(input.ExecuteAfter))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsExecuted == input.IsExecuted ||
                    (this.IsExecuted != null &&
                    this.IsExecuted.Equals(input.IsExecuted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.TaskWorkId != null)
                    hashCode = hashCode * 59 + this.TaskWorkId.GetHashCode();
                if (this.DynamicJob != null)
                    hashCode = hashCode * 59 + this.DynamicJob.GetHashCode();
                if (this.OutcomeValue != null)
                    hashCode = hashCode * 59 + this.OutcomeValue.GetHashCode();
                if (this.ExecuteAfter != null)
                    hashCode = hashCode * 59 + this.ExecuteAfter.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IsExecuted != null)
                    hashCode = hashCode * 59 + this.IsExecuted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
