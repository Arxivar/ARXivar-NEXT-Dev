/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldString
    /// </summary>
    [DataContract]
    public partial class FieldString :  IEquatable<FieldString>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldString" /> class.
        /// </summary>
        /// <param name="Valore">Valore.</param>
        /// <param name="Operatore">Possible values:  0: Non_Impostato  1: Uguale  2: Diverso  3: Inizia  4: Contiene  5: Termina  6: Nullo  7: Non_Nullo  8: Vuoto  9: Non_Vuoto  10: Nullo_o_Vuoto  11: Non_Nullo_e_Non_Vuoto  12: Like .</param>
        /// <param name="Size">Size.</param>
        /// <param name="Encryption">Possible values:  0: None  1: AesEncryption .</param>
        /// <param name="ForceCaseInsensitive">ForceCaseInsensitive.</param>
        /// <param name="Nome">Nome.</param>
        /// <param name="NomeTabella">NomeTabella.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="Multiple">Multiple.</param>
        /// <param name="Label">Label.</param>
        public FieldString(string Valore = default(string), int? Operatore = default(int?), int? Size = default(int?), int? Encryption = default(int?), bool? ForceCaseInsensitive = default(bool?), string Nome = default(string), string NomeTabella = default(string), string ExternalId = default(string), string Multiple = default(string), string Label = default(string))
        {
            this.Valore = Valore;
            this.Operatore = Operatore;
            this.Size = Size;
            this.Encryption = Encryption;
            this.ForceCaseInsensitive = ForceCaseInsensitive;
            this.Nome = Nome;
            this.NomeTabella = NomeTabella;
            this.ExternalId = ExternalId;
            this.Multiple = Multiple;
            this.Label = Label;
        }
        
        /// <summary>
        /// Gets or Sets Valore
        /// </summary>
        [DataMember(Name="valore", EmitDefaultValue=false)]
        public string Valore { get; set; }

        /// <summary>
        /// Possible values:  0: Non_Impostato  1: Uguale  2: Diverso  3: Inizia  4: Contiene  5: Termina  6: Nullo  7: Non_Nullo  8: Vuoto  9: Non_Vuoto  10: Nullo_o_Vuoto  11: Non_Nullo_e_Non_Vuoto  12: Like 
        /// </summary>
        /// <value>Possible values:  0: Non_Impostato  1: Uguale  2: Diverso  3: Inizia  4: Contiene  5: Termina  6: Nullo  7: Non_Nullo  8: Vuoto  9: Non_Vuoto  10: Nullo_o_Vuoto  11: Non_Nullo_e_Non_Vuoto  12: Like </value>
        [DataMember(Name="operatore", EmitDefaultValue=false)]
        public int? Operatore { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: AesEncryption 
        /// </summary>
        /// <value>Possible values:  0: None  1: AesEncryption </value>
        [DataMember(Name="encryption", EmitDefaultValue=false)]
        public int? Encryption { get; set; }

        /// <summary>
        /// Gets or Sets ForceCaseInsensitive
        /// </summary>
        [DataMember(Name="forceCaseInsensitive", EmitDefaultValue=false)]
        public bool? ForceCaseInsensitive { get; set; }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [DataMember(Name="nome", EmitDefaultValue=false)]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or Sets NomeTabella
        /// </summary>
        [DataMember(Name="nomeTabella", EmitDefaultValue=false)]
        public string NomeTabella { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Multiple
        /// </summary>
        [DataMember(Name="multiple", EmitDefaultValue=false)]
        public string Multiple { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldString {\n");
            sb.Append("  Valore: ").Append(Valore).Append("\n");
            sb.Append("  Operatore: ").Append(Operatore).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  ForceCaseInsensitive: ").Append(ForceCaseInsensitive).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  NomeTabella: ").Append(NomeTabella).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Multiple: ").Append(Multiple).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldString);
        }

        /// <summary>
        /// Returns true if FieldString instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldString to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldString input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valore == input.Valore ||
                    (this.Valore != null &&
                    this.Valore.Equals(input.Valore))
                ) && 
                (
                    this.Operatore == input.Operatore ||
                    (this.Operatore != null &&
                    this.Operatore.Equals(input.Operatore))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    (this.Encryption != null &&
                    this.Encryption.Equals(input.Encryption))
                ) && 
                (
                    this.ForceCaseInsensitive == input.ForceCaseInsensitive ||
                    (this.ForceCaseInsensitive != null &&
                    this.ForceCaseInsensitive.Equals(input.ForceCaseInsensitive))
                ) && 
                (
                    this.Nome == input.Nome ||
                    (this.Nome != null &&
                    this.Nome.Equals(input.Nome))
                ) && 
                (
                    this.NomeTabella == input.NomeTabella ||
                    (this.NomeTabella != null &&
                    this.NomeTabella.Equals(input.NomeTabella))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Multiple == input.Multiple ||
                    (this.Multiple != null &&
                    this.Multiple.Equals(input.Multiple))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valore != null)
                    hashCode = hashCode * 59 + this.Valore.GetHashCode();
                if (this.Operatore != null)
                    hashCode = hashCode * 59 + this.Operatore.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Encryption != null)
                    hashCode = hashCode * 59 + this.Encryption.GetHashCode();
                if (this.ForceCaseInsensitive != null)
                    hashCode = hashCode * 59 + this.ForceCaseInsensitive.GetHashCode();
                if (this.Nome != null)
                    hashCode = hashCode * 59 + this.Nome.GetHashCode();
                if (this.NomeTabella != null)
                    hashCode = hashCode * 59 + this.NomeTabella.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Multiple != null)
                    hashCode = hashCode * 59 + this.Multiple.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
