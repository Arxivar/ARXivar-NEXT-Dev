/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OptionsDTO
    /// </summary>
    [DataContract]
    public partial class OptionsDTO :  IEquatable<OptionsDTO>
    {
        /// <summary>
        /// Ordinamento.
        /// </summary>
        /// <value>Ordinamento.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderEnum
        {
            
            /// <summary>
            /// Enum Nessuno for "Nessuno"
            /// </summary>
            [EnumMember(Value = "Nessuno")]
            Nessuno,
            
            /// <summary>
            /// Enum Ascendente for "Ascendente"
            /// </summary>
            [EnumMember(Value = "Ascendente")]
            Ascendente,
            
            /// <summary>
            /// Enum Descrescente for "Descrescente"
            /// </summary>
            [EnumMember(Value = "Descrescente")]
            Descrescente
        }

        /// <summary>
        /// Ordinamento.
        /// </summary>
        /// <value>Ordinamento.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OrderEnum? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsDTO" /> class.
        /// </summary>
        /// <param name="Id">Identificativo dell&#39;opzione..</param>
        /// <param name="User">Identificativo utente o gruppo..</param>
        /// <param name="Argument">Argomento dell&#39;opzione..</param>
        /// <param name="Visible">Campo di visibilità..</param>
        /// <param name="Sequence">Numero di sequenza..</param>
        /// <param name="Label">Etichetta..</param>
        /// <param name="Size">Dimensione del campo..</param>
        /// <param name="Order">Ordinamento..</param>
        /// <param name="Table">Nome tabella associata..</param>
        /// <param name="Alias">Identificativo esterno da assegnare al campo..</param>
        /// <param name="Value">Valore dell&#39;opzione..</param>
        /// <param name="Ldata">Valore di tipo data..</param>
        /// <param name="Field">Nome del Campo.</param>
        /// <param name="Content">Contenuto esteso.</param>
        public OptionsDTO(int? Id = null, int? User = null, string Argument = null, bool? Visible = null, int? Sequence = null, string Label = null, int? Size = null, OrderEnum? Order = null, string Table = null, string Alias = null, string Value = null, DateTime? Ldata = null, string Field = null, byte[] Content = null)
        {
            this.Id = Id;
            this.User = User;
            this.Argument = Argument;
            this.Visible = Visible;
            this.Sequence = Sequence;
            this.Label = Label;
            this.Size = Size;
            this.Order = Order;
            this.Table = Table;
            this.Alias = Alias;
            this.Value = Value;
            this.Ldata = Ldata;
            this.Field = Field;
            this.Content = Content;
        }
        
        /// <summary>
        /// Identificativo dell&#39;opzione.
        /// </summary>
        /// <value>Identificativo dell&#39;opzione.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Identificativo utente o gruppo.
        /// </summary>
        /// <value>Identificativo utente o gruppo.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Argomento dell&#39;opzione.
        /// </summary>
        /// <value>Argomento dell&#39;opzione.</value>
        [DataMember(Name="argument", EmitDefaultValue=false)]
        public string Argument { get; set; }
        /// <summary>
        /// Campo di visibilità.
        /// </summary>
        /// <value>Campo di visibilità.</value>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }
        /// <summary>
        /// Numero di sequenza.
        /// </summary>
        /// <value>Numero di sequenza.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Etichetta.
        /// </summary>
        /// <value>Etichetta.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Dimensione del campo.
        /// </summary>
        /// <value>Dimensione del campo.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }
        /// <summary>
        /// Nome tabella associata.
        /// </summary>
        /// <value>Nome tabella associata.</value>
        [DataMember(Name="table", EmitDefaultValue=false)]
        public string Table { get; set; }
        /// <summary>
        /// Identificativo esterno da assegnare al campo.
        /// </summary>
        /// <value>Identificativo esterno da assegnare al campo.</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }
        /// <summary>
        /// Valore dell&#39;opzione.
        /// </summary>
        /// <value>Valore dell&#39;opzione.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Valore di tipo data.
        /// </summary>
        /// <value>Valore di tipo data.</value>
        [DataMember(Name="ldata", EmitDefaultValue=false)]
        public DateTime? Ldata { get; set; }
        /// <summary>
        /// Nome del Campo
        /// </summary>
        /// <value>Nome del Campo</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }
        /// <summary>
        /// Contenuto esteso
        /// </summary>
        /// <value>Contenuto esteso</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public byte[] Content { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionsDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Argument: ").Append(Argument).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Ldata: ").Append(Ldata).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OptionsDTO);
        }

        /// <summary>
        /// Returns true if OptionsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Argument == other.Argument ||
                    this.Argument != null &&
                    this.Argument.Equals(other.Argument)
                ) && 
                (
                    this.Visible == other.Visible ||
                    this.Visible != null &&
                    this.Visible.Equals(other.Visible)
                ) && 
                (
                    this.Sequence == other.Sequence ||
                    this.Sequence != null &&
                    this.Sequence.Equals(other.Sequence)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Table == other.Table ||
                    this.Table != null &&
                    this.Table.Equals(other.Table)
                ) && 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Ldata == other.Ldata ||
                    this.Ldata != null &&
                    this.Ldata.Equals(other.Ldata)
                ) && 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Argument != null)
                    hash = hash * 59 + this.Argument.GetHashCode();
                if (this.Visible != null)
                    hash = hash * 59 + this.Visible.GetHashCode();
                if (this.Sequence != null)
                    hash = hash * 59 + this.Sequence.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Table != null)
                    hash = hash * 59 + this.Table.GetHashCode();
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Ldata != null)
                    hash = hash * 59 + this.Ldata.GetHashCode();
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }
    }

}
