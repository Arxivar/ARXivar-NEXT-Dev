/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Authorize params for external app
    /// </summary>
    [DataContract]
    public partial class ExternalAppAuthParamsDTO :  IEquatable<ExternalAppAuthParamsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAppAuthParamsDTO" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="authorizeUrl">authorizeUrl.</param>
        /// <param name="tokenUrl">tokenUrl.</param>
        /// <param name="scopeList">scopeList.</param>
        public ExternalAppAuthParamsDTO(string clientId = default(string), string authorizeUrl = default(string), string tokenUrl = default(string), List<string> scopeList = default(List<string>))
        {
            this.ClientId = clientId;
            this.AuthorizeUrl = authorizeUrl;
            this.TokenUrl = tokenUrl;
            this.ScopeList = scopeList;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizeUrl
        /// </summary>
        [DataMember(Name="authorizeUrl", EmitDefaultValue=false)]
        public string AuthorizeUrl { get; set; }

        /// <summary>
        /// Gets or Sets TokenUrl
        /// </summary>
        [DataMember(Name="tokenUrl", EmitDefaultValue=false)]
        public string TokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets ScopeList
        /// </summary>
        [DataMember(Name="scopeList", EmitDefaultValue=false)]
        public List<string> ScopeList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalAppAuthParamsDTO {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  AuthorizeUrl: ").Append(AuthorizeUrl).Append("\n");
            sb.Append("  TokenUrl: ").Append(TokenUrl).Append("\n");
            sb.Append("  ScopeList: ").Append(ScopeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalAppAuthParamsDTO);
        }

        /// <summary>
        /// Returns true if ExternalAppAuthParamsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalAppAuthParamsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalAppAuthParamsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.AuthorizeUrl == input.AuthorizeUrl ||
                    (this.AuthorizeUrl != null &&
                    this.AuthorizeUrl.Equals(input.AuthorizeUrl))
                ) && 
                (
                    this.TokenUrl == input.TokenUrl ||
                    (this.TokenUrl != null &&
                    this.TokenUrl.Equals(input.TokenUrl))
                ) && 
                (
                    this.ScopeList == input.ScopeList ||
                    this.ScopeList != null &&
                    this.ScopeList.SequenceEqual(input.ScopeList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.AuthorizeUrl != null)
                    hashCode = hashCode * 59 + this.AuthorizeUrl.GetHashCode();
                if (this.TokenUrl != null)
                    hashCode = hashCode * 59 + this.TokenUrl.GetHashCode();
                if (this.ScopeList != null)
                    hashCode = hashCode * 59 + this.ScopeList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
