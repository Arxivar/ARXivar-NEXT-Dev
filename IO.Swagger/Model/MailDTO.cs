/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MailDTO
    /// </summary>
    [DataContract]
    public partial class MailDTO :  IEquatable<MailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MailDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MailDTO" /> class.
        /// </summary>
        /// <param name="from">Mail from contact.</param>
        /// <param name="to">Mail to contact list.</param>
        /// <param name="cc">Mail Cc contact list.</param>
        /// <param name="subject">Mail subject.</param>
        /// <param name="mailDateTime">Mail datetime.</param>
        /// <param name="mode">Possible values:  0: Incoming  1: Outcoming  2: ManualIncoming  3: ManualOutcoming  (required).</param>
        /// <param name="bufferId">Buffer id of mail file (required).</param>
        /// <param name="optionList">Additional request option list.</param>
        public MailDTO(MailContactDTO from = default(MailContactDTO), List<MailContactDTO> to = default(List<MailContactDTO>), List<MailContactDTO> cc = default(List<MailContactDTO>), string subject = default(string), DateTime? mailDateTime = default(DateTime?), int? mode = default(int?), string bufferId = default(string), List<KeyValueDTO> optionList = default(List<KeyValueDTO>))
        {
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for MailDTO and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }
            // to ensure "bufferId" is required (not null)
            if (bufferId == null)
            {
                throw new InvalidDataException("bufferId is a required property for MailDTO and cannot be null");
            }
            else
            {
                this.BufferId = bufferId;
            }
            this.From = from;
            this.To = to;
            this.Cc = cc;
            this.Subject = subject;
            this.MailDateTime = mailDateTime;
            this.OptionList = optionList;
        }
        
        /// <summary>
        /// Mail from contact
        /// </summary>
        /// <value>Mail from contact</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public MailContactDTO From { get; set; }

        /// <summary>
        /// Mail to contact list
        /// </summary>
        /// <value>Mail to contact list</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<MailContactDTO> To { get; set; }

        /// <summary>
        /// Mail Cc contact list
        /// </summary>
        /// <value>Mail Cc contact list</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<MailContactDTO> Cc { get; set; }

        /// <summary>
        /// Mail subject
        /// </summary>
        /// <value>Mail subject</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Mail datetime
        /// </summary>
        /// <value>Mail datetime</value>
        [DataMember(Name="mailDateTime", EmitDefaultValue=false)]
        public DateTime? MailDateTime { get; set; }

        /// <summary>
        /// Possible values:  0: Incoming  1: Outcoming  2: ManualIncoming  3: ManualOutcoming 
        /// </summary>
        /// <value>Possible values:  0: Incoming  1: Outcoming  2: ManualIncoming  3: ManualOutcoming </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Buffer id of mail file
        /// </summary>
        /// <value>Buffer id of mail file</value>
        [DataMember(Name="bufferId", EmitDefaultValue=false)]
        public string BufferId { get; set; }

        /// <summary>
        /// Additional request option list
        /// </summary>
        /// <value>Additional request option list</value>
        [DataMember(Name="optionList", EmitDefaultValue=false)]
        public List<KeyValueDTO> OptionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailDTO {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MailDateTime: ").Append(MailDateTime).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  BufferId: ").Append(BufferId).Append("\n");
            sb.Append("  OptionList: ").Append(OptionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailDTO);
        }

        /// <summary>
        /// Returns true if MailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.MailDateTime == input.MailDateTime ||
                    (this.MailDateTime != null &&
                    this.MailDateTime.Equals(input.MailDateTime))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.BufferId == input.BufferId ||
                    (this.BufferId != null &&
                    this.BufferId.Equals(input.BufferId))
                ) && 
                (
                    this.OptionList == input.OptionList ||
                    this.OptionList != null &&
                    this.OptionList.SequenceEqual(input.OptionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.MailDateTime != null)
                    hashCode = hashCode * 59 + this.MailDateTime.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.BufferId != null)
                    hashCode = hashCode * 59 + this.BufferId.GetHashCode();
                if (this.OptionList != null)
                    hashCode = hashCode * 59 + this.OptionList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
