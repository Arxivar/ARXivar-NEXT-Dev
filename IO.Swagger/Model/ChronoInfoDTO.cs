/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of Chrono information
    /// </summary>
    [DataContract]
    public partial class ChronoInfoDTO :  IEquatable<ChronoInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChronoInfoDTO" /> class.
        /// </summary>
        /// <param name="ChronoId">Identifier.</param>
        /// <param name="ChronoName">Name.</param>
        /// <param name="IntermediateIndex">Index.</param>
        /// <param name="StartDate">Start date.</param>
        /// <param name="StopDate">End date.</param>
        /// <param name="Duration">Duration.</param>
        /// <param name="TotalItermediate">Total Value.</param>
        public ChronoInfoDTO(string ChronoId = default(string), string ChronoName = default(string), int? IntermediateIndex = default(int?), DateTime? StartDate = default(DateTime?), DateTime? StopDate = default(DateTime?), int? Duration = default(int?), int? TotalItermediate = default(int?))
        {
            this.ChronoId = ChronoId;
            this.ChronoName = ChronoName;
            this.IntermediateIndex = IntermediateIndex;
            this.StartDate = StartDate;
            this.StopDate = StopDate;
            this.Duration = Duration;
            this.TotalItermediate = TotalItermediate;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="chronoId", EmitDefaultValue=false)]
        public string ChronoId { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="chronoName", EmitDefaultValue=false)]
        public string ChronoName { get; set; }

        /// <summary>
        /// Index
        /// </summary>
        /// <value>Index</value>
        [DataMember(Name="intermediateIndex", EmitDefaultValue=false)]
        public int? IntermediateIndex { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="stopDate", EmitDefaultValue=false)]
        public DateTime? StopDate { get; set; }

        /// <summary>
        /// Duration
        /// </summary>
        /// <value>Duration</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Total Value
        /// </summary>
        /// <value>Total Value</value>
        [DataMember(Name="totalItermediate", EmitDefaultValue=false)]
        public int? TotalItermediate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChronoInfoDTO {\n");
            sb.Append("  ChronoId: ").Append(ChronoId).Append("\n");
            sb.Append("  ChronoName: ").Append(ChronoName).Append("\n");
            sb.Append("  IntermediateIndex: ").Append(IntermediateIndex).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StopDate: ").Append(StopDate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  TotalItermediate: ").Append(TotalItermediate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChronoInfoDTO);
        }

        /// <summary>
        /// Returns true if ChronoInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ChronoInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChronoInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChronoId == input.ChronoId ||
                    (this.ChronoId != null &&
                    this.ChronoId.Equals(input.ChronoId))
                ) && 
                (
                    this.ChronoName == input.ChronoName ||
                    (this.ChronoName != null &&
                    this.ChronoName.Equals(input.ChronoName))
                ) && 
                (
                    this.IntermediateIndex == input.IntermediateIndex ||
                    (this.IntermediateIndex != null &&
                    this.IntermediateIndex.Equals(input.IntermediateIndex))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StopDate == input.StopDate ||
                    (this.StopDate != null &&
                    this.StopDate.Equals(input.StopDate))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.TotalItermediate == input.TotalItermediate ||
                    (this.TotalItermediate != null &&
                    this.TotalItermediate.Equals(input.TotalItermediate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChronoId != null)
                    hashCode = hashCode * 59 + this.ChronoId.GetHashCode();
                if (this.ChronoName != null)
                    hashCode = hashCode * 59 + this.ChronoName.GetHashCode();
                if (this.IntermediateIndex != null)
                    hashCode = hashCode * 59 + this.IntermediateIndex.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StopDate != null)
                    hashCode = hashCode * 59 + this.StopDate.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.TotalItermediate != null)
                    hashCode = hashCode * 59 + this.TotalItermediate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
