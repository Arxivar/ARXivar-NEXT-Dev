/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PostProfilationActionDTO
    /// </summary>
    [DataContract]
    public partial class PostProfilationActionDTO :  IEquatable<PostProfilationActionDTO>
    {
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum StartWorkFlow for "StartWorkFlow"
            /// </summary>
            [EnumMember(Value = "StartWorkFlow")]
            StartWorkFlow,
            
            /// <summary>
            /// Enum SendViaFax for "SendViaFax"
            /// </summary>
            [EnumMember(Value = "SendViaFax")]
            SendViaFax,
            
            /// <summary>
            /// Enum SendViaMail for "SendViaMail"
            /// </summary>
            [EnumMember(Value = "SendViaMail")]
            SendViaMail,
            
            /// <summary>
            /// Enum AttachToActiveWorkflow for "AttachToActiveWorkflow"
            /// </summary>
            [EnumMember(Value = "AttachToActiveWorkflow")]
            AttachToActiveWorkflow,
            
            /// <summary>
            /// Enum InsertInAssociation for "InsertInAssociation"
            /// </summary>
            [EnumMember(Value = "InsertInAssociation")]
            InsertInAssociation,
            
            /// <summary>
            /// Enum InsertInFolder for "InsertInFolder"
            /// </summary>
            [EnumMember(Value = "InsertInFolder")]
            InsertInFolder,
            
            /// <summary>
            /// Enum InsertInManualRelation for "InsertInManualRelation"
            /// </summary>
            [EnumMember(Value = "InsertInManualRelation")]
            InsertInManualRelation,
            
            /// <summary>
            /// Enum SetPermissions for "SetPermissions"
            /// </summary>
            [EnumMember(Value = "SetPermissions")]
            SetPermissions,
            
            /// <summary>
            /// Enum AttachMemo for "AttachMemo"
            /// </summary>
            [EnumMember(Value = "AttachMemo")]
            AttachMemo,
            
            /// <summary>
            /// Enum StartCollaboration for "StartCollaboration"
            /// </summary>
            [EnumMember(Value = "StartCollaboration")]
            StartCollaboration,
            
            /// <summary>
            /// Enum ImmediatlyScan for "ImmediatlyScan"
            /// </summary>
            [EnumMember(Value = "ImmediatlyScan")]
            ImmediatlyScan
        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostProfilationActionDTO" /> class.
        /// </summary>
        /// <param name="ShortDescription">ShortDescription.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Action">Action.</param>
        /// <param name="Visible">Visible.</param>
        /// <param name="Value">Value.</param>
        public PostProfilationActionDTO(string ShortDescription = null, string Description = null, ActionEnum? Action = null, bool? Visible = null, bool? Value = null)
        {
            this.ShortDescription = ShortDescription;
            this.Description = Description;
            this.Action = Action;
            this.Visible = Visible;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public bool? Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostProfilationActionDTO {\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PostProfilationActionDTO);
        }

        /// <summary>
        /// Returns true if PostProfilationActionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PostProfilationActionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostProfilationActionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Visible == other.Visible ||
                    this.Visible != null &&
                    this.Visible.Equals(other.Visible)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Visible != null)
                    hash = hash * 59 + this.Visible.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }
    }

}
