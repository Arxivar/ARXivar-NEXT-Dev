/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccumulationPackageDTO
    /// </summary>
    [DataContract]
    public partial class AccumulationPackageDTO :  IEquatable<AccumulationPackageDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccumulationPackageDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="IxceAccumulationPackageId">IxceAccumulationPackageId.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Status">Possible values:  0: Inserted  1: Created  2: Open  3: Closed  4: InProcessing  5: Error  6: Preserved  7: Reopened .</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="LastUpdate">LastUpdate.</param>
        /// <param name="DocumentTypeSystemId">DocumentTypeSystemId.</param>
        /// <param name="DocumentTypeDescription">DocumentTypeDescription.</param>
        /// <param name="ServiceType">Possible values:  0: IX  1: IXCE  2: IXCE_V2  3: IX_V2 .</param>
        /// <param name="BusinessUnitId">BusinessUnitId.</param>
        /// <param name="OrganizationUnitId">OrganizationUnitId.</param>
        /// <param name="ClassId">ClassId.</param>
        /// <param name="IxceRuleId">IxceRuleId.</param>
        public AccumulationPackageDTO(int? Id = default(int?), string IxceAccumulationPackageId = default(string), string Description = default(string), int? Status = default(int?), DateTime? CreationDate = default(DateTime?), DateTime? LastUpdate = default(DateTime?), int? DocumentTypeSystemId = default(int?), string DocumentTypeDescription = default(string), int? ServiceType = default(int?), string BusinessUnitId = default(string), string OrganizationUnitId = default(string), string ClassId = default(string), int? IxceRuleId = default(int?))
        {
            this.Id = Id;
            this.IxceAccumulationPackageId = IxceAccumulationPackageId;
            this.Description = Description;
            this.Status = Status;
            this.CreationDate = CreationDate;
            this.LastUpdate = LastUpdate;
            this.DocumentTypeSystemId = DocumentTypeSystemId;
            this.DocumentTypeDescription = DocumentTypeDescription;
            this.ServiceType = ServiceType;
            this.BusinessUnitId = BusinessUnitId;
            this.OrganizationUnitId = OrganizationUnitId;
            this.ClassId = ClassId;
            this.IxceRuleId = IxceRuleId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IxceAccumulationPackageId
        /// </summary>
        [DataMember(Name="ixceAccumulationPackageId", EmitDefaultValue=false)]
        public string IxceAccumulationPackageId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Possible values:  0: Inserted  1: Created  2: Open  3: Closed  4: InProcessing  5: Error  6: Preserved  7: Reopened 
        /// </summary>
        /// <value>Possible values:  0: Inserted  1: Created  2: Open  3: Closed  4: InProcessing  5: Error  6: Preserved  7: Reopened </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name="lastUpdate", EmitDefaultValue=false)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeSystemId
        /// </summary>
        [DataMember(Name="documentTypeSystemId", EmitDefaultValue=false)]
        public int? DocumentTypeSystemId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeDescription
        /// </summary>
        [DataMember(Name="documentTypeDescription", EmitDefaultValue=false)]
        public string DocumentTypeDescription { get; set; }

        /// <summary>
        /// Possible values:  0: IX  1: IXCE  2: IXCE_V2  3: IX_V2 
        /// </summary>
        /// <value>Possible values:  0: IX  1: IXCE  2: IXCE_V2  3: IX_V2 </value>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public int? ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="businessUnitId", EmitDefaultValue=false)]
        public string BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitId
        /// </summary>
        [DataMember(Name="organizationUnitId", EmitDefaultValue=false)]
        public string OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or Sets ClassId
        /// </summary>
        [DataMember(Name="classId", EmitDefaultValue=false)]
        public string ClassId { get; set; }

        /// <summary>
        /// Gets or Sets IxceRuleId
        /// </summary>
        [DataMember(Name="ixceRuleId", EmitDefaultValue=false)]
        public int? IxceRuleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccumulationPackageDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IxceAccumulationPackageId: ").Append(IxceAccumulationPackageId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  DocumentTypeSystemId: ").Append(DocumentTypeSystemId).Append("\n");
            sb.Append("  DocumentTypeDescription: ").Append(DocumentTypeDescription).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  OrganizationUnitId: ").Append(OrganizationUnitId).Append("\n");
            sb.Append("  ClassId: ").Append(ClassId).Append("\n");
            sb.Append("  IxceRuleId: ").Append(IxceRuleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccumulationPackageDTO);
        }

        /// <summary>
        /// Returns true if AccumulationPackageDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AccumulationPackageDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccumulationPackageDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IxceAccumulationPackageId == input.IxceAccumulationPackageId ||
                    (this.IxceAccumulationPackageId != null &&
                    this.IxceAccumulationPackageId.Equals(input.IxceAccumulationPackageId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.DocumentTypeSystemId == input.DocumentTypeSystemId ||
                    (this.DocumentTypeSystemId != null &&
                    this.DocumentTypeSystemId.Equals(input.DocumentTypeSystemId))
                ) && 
                (
                    this.DocumentTypeDescription == input.DocumentTypeDescription ||
                    (this.DocumentTypeDescription != null &&
                    this.DocumentTypeDescription.Equals(input.DocumentTypeDescription))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.OrganizationUnitId == input.OrganizationUnitId ||
                    (this.OrganizationUnitId != null &&
                    this.OrganizationUnitId.Equals(input.OrganizationUnitId))
                ) && 
                (
                    this.ClassId == input.ClassId ||
                    (this.ClassId != null &&
                    this.ClassId.Equals(input.ClassId))
                ) && 
                (
                    this.IxceRuleId == input.IxceRuleId ||
                    (this.IxceRuleId != null &&
                    this.IxceRuleId.Equals(input.IxceRuleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IxceAccumulationPackageId != null)
                    hashCode = hashCode * 59 + this.IxceAccumulationPackageId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.DocumentTypeSystemId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeSystemId.GetHashCode();
                if (this.DocumentTypeDescription != null)
                    hashCode = hashCode * 59 + this.DocumentTypeDescription.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.OrganizationUnitId != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitId.GetHashCode();
                if (this.ClassId != null)
                    hashCode = hashCode * 59 + this.ClassId.GetHashCode();
                if (this.IxceRuleId != null)
                    hashCode = hashCode * 59 + this.IxceRuleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
