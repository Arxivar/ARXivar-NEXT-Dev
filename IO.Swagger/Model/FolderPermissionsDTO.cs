/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of folder permission
    /// </summary>
    [DataContract]
    public partial class FolderPermissionsDTO :  IEquatable<FolderPermissionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderPermissionsDTO" /> class.
        /// </summary>
        /// <param name="Spread">Spread to sub-levels folders.</param>
        /// <param name="UsersPermissions">List of user permissions.</param>
        /// <param name="PermissionsProperties">Permission Properties.</param>
        public FolderPermissionsDTO(bool? Spread = default(bool?), List<UserPermissionDTO> UsersPermissions = default(List<UserPermissionDTO>), List<PermissionPropertiesDTO> PermissionsProperties = default(List<PermissionPropertiesDTO>))
        {
            this.Spread = Spread;
            this.UsersPermissions = UsersPermissions;
            this.PermissionsProperties = PermissionsProperties;
        }
        
        /// <summary>
        /// Spread to sub-levels folders
        /// </summary>
        /// <value>Spread to sub-levels folders</value>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public bool? Spread { get; set; }

        /// <summary>
        /// List of user permissions
        /// </summary>
        /// <value>List of user permissions</value>
        [DataMember(Name="usersPermissions", EmitDefaultValue=false)]
        public List<UserPermissionDTO> UsersPermissions { get; set; }

        /// <summary>
        /// Permission Properties
        /// </summary>
        /// <value>Permission Properties</value>
        [DataMember(Name="permissionsProperties", EmitDefaultValue=false)]
        public List<PermissionPropertiesDTO> PermissionsProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderPermissionsDTO {\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  UsersPermissions: ").Append(UsersPermissions).Append("\n");
            sb.Append("  PermissionsProperties: ").Append(PermissionsProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderPermissionsDTO);
        }

        /// <summary>
        /// Returns true if FolderPermissionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderPermissionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderPermissionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.UsersPermissions == input.UsersPermissions ||
                    this.UsersPermissions != null &&
                    this.UsersPermissions.SequenceEqual(input.UsersPermissions)
                ) && 
                (
                    this.PermissionsProperties == input.PermissionsProperties ||
                    this.PermissionsProperties != null &&
                    this.PermissionsProperties.SequenceEqual(input.PermissionsProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Spread != null)
                    hashCode = hashCode * 59 + this.Spread.GetHashCode();
                if (this.UsersPermissions != null)
                    hashCode = hashCode * 59 + this.UsersPermissions.GetHashCode();
                if (this.PermissionsProperties != null)
                    hashCode = hashCode * 59 + this.PermissionsProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
