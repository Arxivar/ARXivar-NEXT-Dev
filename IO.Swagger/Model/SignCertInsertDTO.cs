/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of signature certificate to insert
    /// </summary>
    [DataContract]
    public partial class SignCertInsertDTO :  IEquatable<SignCertInsertDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCertInsertDTO" /> class.
        /// </summary>
        /// <param name="CertId">Certificate Identifier.</param>
        /// <param name="RequestOtp">Request OTP.</param>
        /// <param name="CertDescription">Certificate Description.</param>
        /// <param name="Delegante">Delegating.</param>
        /// <param name="CertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba .</param>
        public SignCertInsertDTO(string CertId = default(string), bool? RequestOtp = default(bool?), string CertDescription = default(string), string Delegante = default(string), int? CertType = default(int?))
        {
            this.CertId = CertId;
            this.RequestOtp = RequestOtp;
            this.CertDescription = CertDescription;
            this.Delegante = Delegante;
            this.CertType = CertType;
        }
        
        /// <summary>
        /// Certificate Identifier
        /// </summary>
        /// <value>Certificate Identifier</value>
        [DataMember(Name="certId", EmitDefaultValue=false)]
        public string CertId { get; set; }

        /// <summary>
        /// Request OTP
        /// </summary>
        /// <value>Request OTP</value>
        [DataMember(Name="requestOtp", EmitDefaultValue=false)]
        public bool? RequestOtp { get; set; }

        /// <summary>
        /// Certificate Description
        /// </summary>
        /// <value>Certificate Description</value>
        [DataMember(Name="certDescription", EmitDefaultValue=false)]
        public string CertDescription { get; set; }

        /// <summary>
        /// Delegating
        /// </summary>
        /// <value>Delegating</value>
        [DataMember(Name="delegante", EmitDefaultValue=false)]
        public string Delegante { get; set; }

        /// <summary>
        /// Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba 
        /// </summary>
        /// <value>Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </value>
        [DataMember(Name="certType", EmitDefaultValue=false)]
        public int? CertType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignCertInsertDTO {\n");
            sb.Append("  CertId: ").Append(CertId).Append("\n");
            sb.Append("  RequestOtp: ").Append(RequestOtp).Append("\n");
            sb.Append("  CertDescription: ").Append(CertDescription).Append("\n");
            sb.Append("  Delegante: ").Append(Delegante).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignCertInsertDTO);
        }

        /// <summary>
        /// Returns true if SignCertInsertDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignCertInsertDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignCertInsertDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertId == input.CertId ||
                    (this.CertId != null &&
                    this.CertId.Equals(input.CertId))
                ) && 
                (
                    this.RequestOtp == input.RequestOtp ||
                    (this.RequestOtp != null &&
                    this.RequestOtp.Equals(input.RequestOtp))
                ) && 
                (
                    this.CertDescription == input.CertDescription ||
                    (this.CertDescription != null &&
                    this.CertDescription.Equals(input.CertDescription))
                ) && 
                (
                    this.Delegante == input.Delegante ||
                    (this.Delegante != null &&
                    this.Delegante.Equals(input.Delegante))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertId != null)
                    hashCode = hashCode * 59 + this.CertId.GetHashCode();
                if (this.RequestOtp != null)
                    hashCode = hashCode * 59 + this.RequestOtp.GetHashCode();
                if (this.CertDescription != null)
                    hashCode = hashCode * 59 + this.CertDescription.GetHashCode();
                if (this.Delegante != null)
                    hashCode = hashCode * 59 + this.Delegante.GetHashCode();
                if (this.CertType != null)
                    hashCode = hashCode * 59 + this.CertType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
