/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of user desktop information
    /// </summary>
    [DataContract]
    public partial class DesktopDTO :  IEquatable<DesktopDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopDTO" /> class.
        /// </summary>
        /// <param name="Masks">List of Masks.</param>
        /// <param name="QuickSearches">List of Quick Search.</param>
        /// <param name="Profiles">List of Documents.</param>
        /// <param name="Views">List of Views.</param>
        /// <param name="Models">List of Models.</param>
        /// <param name="Folders">List of Folders.</param>
        public DesktopDTO(List<MaskDTO> Masks = default(List<MaskDTO>), List<FindDTO> QuickSearches = default(List<FindDTO>), List<ProfileForDesktopDTO> Profiles = default(List<ProfileForDesktopDTO>), List<ViewDTO> Views = default(List<ViewDTO>), List<ModelDTO> Models = default(List<ModelDTO>), List<FolderDTO> Folders = default(List<FolderDTO>))
        {
            this.Masks = Masks;
            this.QuickSearches = QuickSearches;
            this.Profiles = Profiles;
            this.Views = Views;
            this.Models = Models;
            this.Folders = Folders;
        }
        
        /// <summary>
        /// List of Masks
        /// </summary>
        /// <value>List of Masks</value>
        [DataMember(Name="masks", EmitDefaultValue=false)]
        public List<MaskDTO> Masks { get; set; }

        /// <summary>
        /// List of Quick Search
        /// </summary>
        /// <value>List of Quick Search</value>
        [DataMember(Name="quickSearches", EmitDefaultValue=false)]
        public List<FindDTO> QuickSearches { get; set; }

        /// <summary>
        /// List of Documents
        /// </summary>
        /// <value>List of Documents</value>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public List<ProfileForDesktopDTO> Profiles { get; set; }

        /// <summary>
        /// List of Views
        /// </summary>
        /// <value>List of Views</value>
        [DataMember(Name="views", EmitDefaultValue=false)]
        public List<ViewDTO> Views { get; set; }

        /// <summary>
        /// List of Models
        /// </summary>
        /// <value>List of Models</value>
        [DataMember(Name="models", EmitDefaultValue=false)]
        public List<ModelDTO> Models { get; set; }

        /// <summary>
        /// List of Folders
        /// </summary>
        /// <value>List of Folders</value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public List<FolderDTO> Folders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopDTO {\n");
            sb.Append("  Masks: ").Append(Masks).Append("\n");
            sb.Append("  QuickSearches: ").Append(QuickSearches).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopDTO);
        }

        /// <summary>
        /// Returns true if DesktopDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Masks == input.Masks ||
                    this.Masks != null &&
                    this.Masks.SequenceEqual(input.Masks)
                ) && 
                (
                    this.QuickSearches == input.QuickSearches ||
                    this.QuickSearches != null &&
                    this.QuickSearches.SequenceEqual(input.QuickSearches)
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                ) && 
                (
                    this.Views == input.Views ||
                    this.Views != null &&
                    this.Views.SequenceEqual(input.Views)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                ) && 
                (
                    this.Folders == input.Folders ||
                    this.Folders != null &&
                    this.Folders.SequenceEqual(input.Folders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Masks != null)
                    hashCode = hashCode * 59 + this.Masks.GetHashCode();
                if (this.QuickSearches != null)
                    hashCode = hashCode * 59 + this.QuickSearches.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.Views != null)
                    hashCode = hashCode * 59 + this.Views.GetHashCode();
                if (this.Models != null)
                    hashCode = hashCode * 59 + this.Models.GetHashCode();
                if (this.Folders != null)
                    hashCode = hashCode * 59 + this.Folders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
