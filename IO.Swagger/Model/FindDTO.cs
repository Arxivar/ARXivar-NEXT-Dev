/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FindDTO
    /// </summary>
    [DataContract]
    public partial class FindDTO :  IEquatable<FindDTO>
    {
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextEnum
        {
            
            /// <summary>
            /// Enum DmProfileSearch for "Dm_Profile_Search"
            /// </summary>
            [EnumMember(Value = "Dm_Profile_Search")]
            DmProfileSearch,
            
            /// <summary>
            /// Enum DmElencoPraticheSearch for "Dm_ElencoPratiche_Search"
            /// </summary>
            [EnumMember(Value = "Dm_ElencoPratiche_Search")]
            DmElencoPraticheSearch,
            
            /// <summary>
            /// Enum DmTaskWorkSearch for "Dm_TaskWork_Search"
            /// </summary>
            [EnumMember(Value = "Dm_TaskWork_Search")]
            DmTaskWorkSearch,
            
            /// <summary>
            /// Enum DmUtentiBaseSearch for "Dm_UtentiBase_Search"
            /// </summary>
            [EnumMember(Value = "Dm_UtentiBase_Search")]
            DmUtentiBaseSearch,
            
            /// <summary>
            /// Enum DmContattiSearch for "Dm_Contatti_Search"
            /// </summary>
            [EnumMember(Value = "Dm_Contatti_Search")]
            DmContattiSearch,
            
            /// <summary>
            /// Enum ExternalData for "ExternalData"
            /// </summary>
            [EnumMember(Value = "ExternalData")]
            ExternalData,
            
            /// <summary>
            /// Enum DmProfileSearchForFasciculation for "Dm_Profile_Search_For_Fasciculation"
            /// </summary>
            [EnumMember(Value = "Dm_Profile_Search_For_Fasciculation")]
            DmProfileSearchForFasciculation,
            
            /// <summary>
            /// Enum DmProfileSearchForUserDefault for "Dm_Profile_Search_For_User_Default"
            /// </summary>
            [EnumMember(Value = "Dm_Profile_Search_For_User_Default")]
            DmProfileSearchForUserDefault,
            
            /// <summary>
            /// Enum DmContattiSearchForUserDefault for "Dm_Contatti_Search_For_User_Default"
            /// </summary>
            [EnumMember(Value = "Dm_Contatti_Search_For_User_Default")]
            DmContattiSearchForUserDefault
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public ContextEnum? Context { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="OwnerDescription">OwnerDescription.</param>
        /// <param name="Context">Context.</param>
        /// <param name="ShowFields">ShowFields.</param>
        /// <param name="FormOpen">FormOpen.</param>
        /// <param name="ShowOnDesktop">ShowOnDesktop.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="TableName">TableName.</param>
        /// <param name="TableFieldId">TableFieldId.</param>
        public FindDTO(string Id = null, string Description = null, int? Owner = null, string OwnerDescription = null, ContextEnum? Context = null, bool? ShowFields = null, bool? FormOpen = null, bool? ShowOnDesktop = null, int? FolderId = null, string ExternalId = null, string TableName = null, string TableFieldId = null)
        {
            this.Id = Id;
            this.Description = Description;
            this.Owner = Owner;
            this.OwnerDescription = OwnerDescription;
            this.Context = Context;
            this.ShowFields = ShowFields;
            this.FormOpen = FormOpen;
            this.ShowOnDesktop = ShowOnDesktop;
            this.FolderId = FolderId;
            this.ExternalId = ExternalId;
            this.TableName = TableName;
            this.TableFieldId = TableFieldId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public int? Owner { get; set; }
        /// <summary>
        /// Gets or Sets OwnerDescription
        /// </summary>
        [DataMember(Name="ownerDescription", EmitDefaultValue=false)]
        public string OwnerDescription { get; set; }
        /// <summary>
        /// Gets or Sets ShowFields
        /// </summary>
        [DataMember(Name="showFields", EmitDefaultValue=false)]
        public bool? ShowFields { get; set; }
        /// <summary>
        /// Gets or Sets FormOpen
        /// </summary>
        [DataMember(Name="formOpen", EmitDefaultValue=false)]
        public bool? FormOpen { get; set; }
        /// <summary>
        /// Gets or Sets ShowOnDesktop
        /// </summary>
        [DataMember(Name="showOnDesktop", EmitDefaultValue=false)]
        public bool? ShowOnDesktop { get; set; }
        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }
        /// <summary>
        /// Gets or Sets TableFieldId
        /// </summary>
        [DataMember(Name="tableFieldId", EmitDefaultValue=false)]
        public string TableFieldId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerDescription: ").Append(OwnerDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ShowFields: ").Append(ShowFields).Append("\n");
            sb.Append("  FormOpen: ").Append(FormOpen).Append("\n");
            sb.Append("  ShowOnDesktop: ").Append(ShowOnDesktop).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  TableFieldId: ").Append(TableFieldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FindDTO);
        }

        /// <summary>
        /// Returns true if FindDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FindDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.OwnerDescription == other.OwnerDescription ||
                    this.OwnerDescription != null &&
                    this.OwnerDescription.Equals(other.OwnerDescription)
                ) && 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.ShowFields == other.ShowFields ||
                    this.ShowFields != null &&
                    this.ShowFields.Equals(other.ShowFields)
                ) && 
                (
                    this.FormOpen == other.FormOpen ||
                    this.FormOpen != null &&
                    this.FormOpen.Equals(other.FormOpen)
                ) && 
                (
                    this.ShowOnDesktop == other.ShowOnDesktop ||
                    this.ShowOnDesktop != null &&
                    this.ShowOnDesktop.Equals(other.ShowOnDesktop)
                ) && 
                (
                    this.FolderId == other.FolderId ||
                    this.FolderId != null &&
                    this.FolderId.Equals(other.FolderId)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.TableName == other.TableName ||
                    this.TableName != null &&
                    this.TableName.Equals(other.TableName)
                ) && 
                (
                    this.TableFieldId == other.TableFieldId ||
                    this.TableFieldId != null &&
                    this.TableFieldId.Equals(other.TableFieldId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.OwnerDescription != null)
                    hash = hash * 59 + this.OwnerDescription.GetHashCode();
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.ShowFields != null)
                    hash = hash * 59 + this.ShowFields.GetHashCode();
                if (this.FormOpen != null)
                    hash = hash * 59 + this.FormOpen.GetHashCode();
                if (this.ShowOnDesktop != null)
                    hash = hash * 59 + this.ShowOnDesktop.GetHashCode();
                if (this.FolderId != null)
                    hash = hash * 59 + this.FolderId.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.TableName != null)
                    hash = hash * 59 + this.TableName.GetHashCode();
                if (this.TableFieldId != null)
                    hash = hash * 59 + this.TableFieldId.GetHashCode();
                return hash;
            }
        }
    }

}
