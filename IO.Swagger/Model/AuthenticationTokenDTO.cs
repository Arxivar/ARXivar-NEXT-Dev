/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AuthenticationTokenDTO
    /// </summary>
    [DataContract]
    public partial class AuthenticationTokenDTO :  IEquatable<AuthenticationTokenDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationTokenDTO" /> class.
        /// </summary>
        /// <param name="Error">Error code.</param>
        /// <param name="ErrorDescription">Error desciption.</param>
        /// <param name="ErrorUri">Error Uri.</param>
        /// <param name="AccessToken">Access token string.</param>
        /// <param name="TokenType">Token type (bearer).</param>
        /// <param name="ExpiresIn">Token and refresh token expire in ExpiresIn seconds.</param>
        /// <param name="RefreshToken">Refresh token string.</param>
        /// <param name="Issued">Issue date of the token.</param>
        /// <param name="Expires">Expiration date of the token.</param>
        /// <param name="ArxclientId">Client id.</param>
        /// <param name="ArxuserMustChangePassword">User must change password after this &#39;login&#39;.</param>
        public AuthenticationTokenDTO(string Error = null, string ErrorDescription = null, string ErrorUri = null, string AccessToken = null, string TokenType = null, int? ExpiresIn = null, string RefreshToken = null, DateTime? Issued = null, DateTime? Expires = null, string ArxclientId = null, bool? ArxuserMustChangePassword = null)
        {
            this.Error = Error;
            this.ErrorDescription = ErrorDescription;
            this.ErrorUri = ErrorUri;
            this.AccessToken = AccessToken;
            this.TokenType = TokenType;
            this.ExpiresIn = ExpiresIn;
            this.RefreshToken = RefreshToken;
            this.Issued = Issued;
            this.Expires = Expires;
            this.ArxclientId = ArxclientId;
            this.ArxuserMustChangePassword = ArxuserMustChangePassword;
        }
        
        /// <summary>
        /// Error code
        /// </summary>
        /// <value>Error code</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }
        /// <summary>
        /// Error desciption
        /// </summary>
        /// <value>Error desciption</value>
        [DataMember(Name="errorDescription", EmitDefaultValue=false)]
        public string ErrorDescription { get; set; }
        /// <summary>
        /// Error Uri
        /// </summary>
        /// <value>Error Uri</value>
        [DataMember(Name="errorUri", EmitDefaultValue=false)]
        public string ErrorUri { get; set; }
        /// <summary>
        /// Access token string
        /// </summary>
        /// <value>Access token string</value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }
        /// <summary>
        /// Token type (bearer)
        /// </summary>
        /// <value>Token type (bearer)</value>
        [DataMember(Name="tokenType", EmitDefaultValue=false)]
        public string TokenType { get; set; }
        /// <summary>
        /// Token and refresh token expire in ExpiresIn seconds
        /// </summary>
        /// <value>Token and refresh token expire in ExpiresIn seconds</value>
        [DataMember(Name="expiresIn", EmitDefaultValue=false)]
        public int? ExpiresIn { get; set; }
        /// <summary>
        /// Refresh token string
        /// </summary>
        /// <value>Refresh token string</value>
        [DataMember(Name="refreshToken", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }
        /// <summary>
        /// Issue date of the token
        /// </summary>
        /// <value>Issue date of the token</value>
        [DataMember(Name="issued", EmitDefaultValue=false)]
        public DateTime? Issued { get; set; }
        /// <summary>
        /// Expiration date of the token
        /// </summary>
        /// <value>Expiration date of the token</value>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public DateTime? Expires { get; set; }
        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [DataMember(Name="arxclientId", EmitDefaultValue=false)]
        public string ArxclientId { get; set; }
        /// <summary>
        /// User must change password after this &#39;login&#39;
        /// </summary>
        /// <value>User must change password after this &#39;login&#39;</value>
        [DataMember(Name="arxuserMustChangePassword", EmitDefaultValue=false)]
        public bool? ArxuserMustChangePassword { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationTokenDTO {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  ErrorUri: ").Append(ErrorUri).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Issued: ").Append(Issued).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  ArxclientId: ").Append(ArxclientId).Append("\n");
            sb.Append("  ArxuserMustChangePassword: ").Append(ArxuserMustChangePassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthenticationTokenDTO);
        }

        /// <summary>
        /// Returns true if AuthenticationTokenDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationTokenDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationTokenDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.ErrorDescription == other.ErrorDescription ||
                    this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(other.ErrorDescription)
                ) && 
                (
                    this.ErrorUri == other.ErrorUri ||
                    this.ErrorUri != null &&
                    this.ErrorUri.Equals(other.ErrorUri)
                ) && 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    this.TokenType == other.TokenType ||
                    this.TokenType != null &&
                    this.TokenType.Equals(other.TokenType)
                ) && 
                (
                    this.ExpiresIn == other.ExpiresIn ||
                    this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(other.ExpiresIn)
                ) && 
                (
                    this.RefreshToken == other.RefreshToken ||
                    this.RefreshToken != null &&
                    this.RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    this.Issued == other.Issued ||
                    this.Issued != null &&
                    this.Issued.Equals(other.Issued)
                ) && 
                (
                    this.Expires == other.Expires ||
                    this.Expires != null &&
                    this.Expires.Equals(other.Expires)
                ) && 
                (
                    this.ArxclientId == other.ArxclientId ||
                    this.ArxclientId != null &&
                    this.ArxclientId.Equals(other.ArxclientId)
                ) && 
                (
                    this.ArxuserMustChangePassword == other.ArxuserMustChangePassword ||
                    this.ArxuserMustChangePassword != null &&
                    this.ArxuserMustChangePassword.Equals(other.ArxuserMustChangePassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.ErrorDescription != null)
                    hash = hash * 59 + this.ErrorDescription.GetHashCode();
                if (this.ErrorUri != null)
                    hash = hash * 59 + this.ErrorUri.GetHashCode();
                if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                if (this.TokenType != null)
                    hash = hash * 59 + this.TokenType.GetHashCode();
                if (this.ExpiresIn != null)
                    hash = hash * 59 + this.ExpiresIn.GetHashCode();
                if (this.RefreshToken != null)
                    hash = hash * 59 + this.RefreshToken.GetHashCode();
                if (this.Issued != null)
                    hash = hash * 59 + this.Issued.GetHashCode();
                if (this.Expires != null)
                    hash = hash * 59 + this.Expires.GetHashCode();
                if (this.ArxclientId != null)
                    hash = hash * 59 + this.ArxclientId.GetHashCode();
                if (this.ArxuserMustChangePassword != null)
                    hash = hash * 59 + this.ArxuserMustChangePassword.GetHashCode();
                return hash;
            }
        }
    }

}
