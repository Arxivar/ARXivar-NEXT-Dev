/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AuthenticationTokenDTO
    /// </summary>
    [DataContract]
    public partial class AuthenticationTokenDTO :  IEquatable<AuthenticationTokenDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationTokenDTO" /> class.
        /// </summary>
        /// <param name="AccessToken">AccessToken.</param>
        /// <param name="RefreshToken">RefreshToken.</param>
        /// <param name="TokenType">TokenType.</param>
        /// <param name="ExiprationDate">ExiprationDate.</param>
        /// <param name="IssueDate">IssueDate.</param>
        /// <param name="MustChangePassword">MustChangePassword.</param>
        public AuthenticationTokenDTO(string AccessToken = null, string RefreshToken = null, string TokenType = null, DateTime? ExiprationDate = null, DateTime? IssueDate = null, bool? MustChangePassword = null)
        {
            this.AccessToken = AccessToken;
            this.RefreshToken = RefreshToken;
            this.TokenType = TokenType;
            this.ExiprationDate = ExiprationDate;
            this.IssueDate = IssueDate;
            this.MustChangePassword = MustChangePassword;
        }
        
        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }
        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refresh_Token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }
        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name="tokenType", EmitDefaultValue=false)]
        public string TokenType { get; set; }
        /// <summary>
        /// Gets or Sets ExiprationDate
        /// </summary>
        [DataMember(Name="exiprationDate", EmitDefaultValue=false)]
        public DateTime? ExiprationDate { get; set; }
        /// <summary>
        /// Gets or Sets IssueDate
        /// </summary>
        [DataMember(Name="issueDate", EmitDefaultValue=false)]
        public DateTime? IssueDate { get; set; }
        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [DataMember(Name="mustChangePassword", EmitDefaultValue=false)]
        public bool? MustChangePassword { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationTokenDTO {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExiprationDate: ").Append(ExiprationDate).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthenticationTokenDTO);
        }

        /// <summary>
        /// Returns true if AuthenticationTokenDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationTokenDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationTokenDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    this.RefreshToken == other.RefreshToken ||
                    this.RefreshToken != null &&
                    this.RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    this.TokenType == other.TokenType ||
                    this.TokenType != null &&
                    this.TokenType.Equals(other.TokenType)
                ) && 
                (
                    this.ExiprationDate == other.ExiprationDate ||
                    this.ExiprationDate != null &&
                    this.ExiprationDate.Equals(other.ExiprationDate)
                ) && 
                (
                    this.IssueDate == other.IssueDate ||
                    this.IssueDate != null &&
                    this.IssueDate.Equals(other.IssueDate)
                ) && 
                (
                    this.MustChangePassword == other.MustChangePassword ||
                    this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(other.MustChangePassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                if (this.RefreshToken != null)
                    hash = hash * 59 + this.RefreshToken.GetHashCode();
                if (this.TokenType != null)
                    hash = hash * 59 + this.TokenType.GetHashCode();
                if (this.ExiprationDate != null)
                    hash = hash * 59 + this.ExiprationDate.GetHashCode();
                if (this.IssueDate != null)
                    hash = hash * 59 + this.IssueDate.GetHashCode();
                if (this.MustChangePassword != null)
                    hash = hash * 59 + this.MustChangePassword.GetHashCode();
                return hash;
            }
        }
    }

}
