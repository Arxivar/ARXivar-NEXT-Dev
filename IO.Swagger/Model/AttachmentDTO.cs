/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of Attachment
    /// </summary>
    [DataContract]
    public partial class AttachmentDTO :  IEquatable<AttachmentDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentDTO" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier.</param>
        /// <param name="Docnumber">Document Identifier.</param>
        /// <param name="Revision">Revision number.</param>
        /// <param name="Filename">Name for the zip file..</param>
        /// <param name="Filepath">Path of compressed file..</param>
        /// <param name="Originalname">Name of the file..</param>
        /// <param name="Device">Possible values:  0: Hd  1: Cd .</param>
        /// <param name="Cdlabel">CD Label.</param>
        /// <param name="Comment">Description.</param>
        /// <param name="Importdate">Creation Date.</param>
        /// <param name="User">Identifier of the author.</param>
        /// <param name="UserCompleteName">Full name of the author.</param>
        /// <param name="Block">Possible values:  0: None  1: Active  2: Marked .</param>
        /// <param name="Compliantcopy">Replace with the profile data for web visualization.</param>
        /// <param name="Footprint">Hash of the file.</param>
        /// <param name="Checksend">Send the file in the case of email shipment.</param>
        /// <param name="Aosflag">Kept in the replacement mode with the document profile.</param>
        /// <param name="Access">Possible values:  0: Access_Denied  1: Read_Only  2: Edit  4: Full_Trust  -1: None .</param>
        /// <param name="SaveType">Possible values:  0: File_System  1: Database .</param>
        /// <param name="Filesize">File Size.</param>
        /// <param name="Kind">Possible values:  0: ExternalAttachement  1: InternalAttachement .</param>
        /// <param name="AttachedDocnumber">Document Identifier if the internal attachment.</param>
        /// <param name="IxCheck">Send the file to IX service in the case of shipment.</param>
        /// <param name="AttachmentRevision">AttachmentRevision.</param>
        /// <param name="CompressionMode">Possible values:  0: None  1: CompressChilkat91  2: CompressChilkat95  3: CompressChilkat95AndCryptoAes256 .</param>
        public AttachmentDTO(int? Id = default(int?), int? Docnumber = default(int?), int? Revision = default(int?), string Filename = default(string), string Filepath = default(string), string Originalname = default(string), int? Device = default(int?), string Cdlabel = default(string), string Comment = default(string), DateTime? Importdate = default(DateTime?), int? User = default(int?), string UserCompleteName = default(string), int? Block = default(int?), bool? Compliantcopy = default(bool?), string Footprint = default(string), bool? Checksend = default(bool?), bool? Aosflag = default(bool?), int? Access = default(int?), int? SaveType = default(int?), long? Filesize = default(long?), int? Kind = default(int?), int? AttachedDocnumber = default(int?), bool? IxCheck = default(bool?), int? AttachmentRevision = default(int?), int? CompressionMode = default(int?))
        {
            this.Id = Id;
            this.Docnumber = Docnumber;
            this.Revision = Revision;
            this.Filename = Filename;
            this.Filepath = Filepath;
            this.Originalname = Originalname;
            this.Device = Device;
            this.Cdlabel = Cdlabel;
            this.Comment = Comment;
            this.Importdate = Importdate;
            this.User = User;
            this.UserCompleteName = UserCompleteName;
            this.Block = Block;
            this.Compliantcopy = Compliantcopy;
            this.Footprint = Footprint;
            this.Checksend = Checksend;
            this.Aosflag = Aosflag;
            this.Access = Access;
            this.SaveType = SaveType;
            this.Filesize = Filesize;
            this.Kind = Kind;
            this.AttachedDocnumber = AttachedDocnumber;
            this.IxCheck = IxCheck;
            this.AttachmentRevision = AttachmentRevision;
            this.CompressionMode = CompressionMode;
        }
        
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Document Identifier
        /// </summary>
        /// <value>Document Identifier</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }

        /// <summary>
        /// Revision number
        /// </summary>
        /// <value>Revision number</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }

        /// <summary>
        /// Name for the zip file.
        /// </summary>
        /// <value>Name for the zip file.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Path of compressed file.
        /// </summary>
        /// <value>Path of compressed file.</value>
        [DataMember(Name="filepath", EmitDefaultValue=false)]
        public string Filepath { get; set; }

        /// <summary>
        /// Name of the file.
        /// </summary>
        /// <value>Name of the file.</value>
        [DataMember(Name="originalname", EmitDefaultValue=false)]
        public string Originalname { get; set; }

        /// <summary>
        /// Possible values:  0: Hd  1: Cd 
        /// </summary>
        /// <value>Possible values:  0: Hd  1: Cd </value>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public int? Device { get; set; }

        /// <summary>
        /// CD Label
        /// </summary>
        /// <value>CD Label</value>
        [DataMember(Name="cdlabel", EmitDefaultValue=false)]
        public string Cdlabel { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Creation Date
        /// </summary>
        /// <value>Creation Date</value>
        [DataMember(Name="importdate", EmitDefaultValue=false)]
        public DateTime? Importdate { get; set; }

        /// <summary>
        /// Identifier of the author
        /// </summary>
        /// <value>Identifier of the author</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Full name of the author
        /// </summary>
        /// <value>Full name of the author</value>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Active  2: Marked 
        /// </summary>
        /// <value>Possible values:  0: None  1: Active  2: Marked </value>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public int? Block { get; set; }

        /// <summary>
        /// Replace with the profile data for web visualization
        /// </summary>
        /// <value>Replace with the profile data for web visualization</value>
        [DataMember(Name="compliantcopy", EmitDefaultValue=false)]
        public bool? Compliantcopy { get; set; }

        /// <summary>
        /// Hash of the file
        /// </summary>
        /// <value>Hash of the file</value>
        [DataMember(Name="footprint", EmitDefaultValue=false)]
        public string Footprint { get; set; }

        /// <summary>
        /// Send the file in the case of email shipment
        /// </summary>
        /// <value>Send the file in the case of email shipment</value>
        [DataMember(Name="checksend", EmitDefaultValue=false)]
        public bool? Checksend { get; set; }

        /// <summary>
        /// Kept in the replacement mode with the document profile
        /// </summary>
        /// <value>Kept in the replacement mode with the document profile</value>
        [DataMember(Name="aosflag", EmitDefaultValue=false)]
        public bool? Aosflag { get; set; }

        /// <summary>
        /// Possible values:  0: Access_Denied  1: Read_Only  2: Edit  4: Full_Trust  -1: None 
        /// </summary>
        /// <value>Possible values:  0: Access_Denied  1: Read_Only  2: Edit  4: Full_Trust  -1: None </value>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public int? Access { get; set; }

        /// <summary>
        /// Possible values:  0: File_System  1: Database 
        /// </summary>
        /// <value>Possible values:  0: File_System  1: Database </value>
        [DataMember(Name="saveType", EmitDefaultValue=false)]
        public int? SaveType { get; set; }

        /// <summary>
        /// File Size
        /// </summary>
        /// <value>File Size</value>
        [DataMember(Name="filesize", EmitDefaultValue=false)]
        public long? Filesize { get; set; }

        /// <summary>
        /// Possible values:  0: ExternalAttachement  1: InternalAttachement 
        /// </summary>
        /// <value>Possible values:  0: ExternalAttachement  1: InternalAttachement </value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public int? Kind { get; set; }

        /// <summary>
        /// Document Identifier if the internal attachment
        /// </summary>
        /// <value>Document Identifier if the internal attachment</value>
        [DataMember(Name="attachedDocnumber", EmitDefaultValue=false)]
        public int? AttachedDocnumber { get; set; }

        /// <summary>
        /// Send the file to IX service in the case of shipment
        /// </summary>
        /// <value>Send the file to IX service in the case of shipment</value>
        [DataMember(Name="ixCheck", EmitDefaultValue=false)]
        public bool? IxCheck { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentRevision
        /// </summary>
        [DataMember(Name="attachmentRevision", EmitDefaultValue=false)]
        public int? AttachmentRevision { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: CompressChilkat91  2: CompressChilkat95  3: CompressChilkat95AndCryptoAes256 
        /// </summary>
        /// <value>Possible values:  0: None  1: CompressChilkat91  2: CompressChilkat95  3: CompressChilkat95AndCryptoAes256 </value>
        [DataMember(Name="compressionMode", EmitDefaultValue=false)]
        public int? CompressionMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Filepath: ").Append(Filepath).Append("\n");
            sb.Append("  Originalname: ").Append(Originalname).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Cdlabel: ").Append(Cdlabel).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Importdate: ").Append(Importdate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Compliantcopy: ").Append(Compliantcopy).Append("\n");
            sb.Append("  Footprint: ").Append(Footprint).Append("\n");
            sb.Append("  Checksend: ").Append(Checksend).Append("\n");
            sb.Append("  Aosflag: ").Append(Aosflag).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  SaveType: ").Append(SaveType).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  AttachedDocnumber: ").Append(AttachedDocnumber).Append("\n");
            sb.Append("  IxCheck: ").Append(IxCheck).Append("\n");
            sb.Append("  AttachmentRevision: ").Append(AttachmentRevision).Append("\n");
            sb.Append("  CompressionMode: ").Append(CompressionMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachmentDTO);
        }

        /// <summary>
        /// Returns true if AttachmentDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachmentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Docnumber == input.Docnumber ||
                    (this.Docnumber != null &&
                    this.Docnumber.Equals(input.Docnumber))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Filepath == input.Filepath ||
                    (this.Filepath != null &&
                    this.Filepath.Equals(input.Filepath))
                ) && 
                (
                    this.Originalname == input.Originalname ||
                    (this.Originalname != null &&
                    this.Originalname.Equals(input.Originalname))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.Cdlabel == input.Cdlabel ||
                    (this.Cdlabel != null &&
                    this.Cdlabel.Equals(input.Cdlabel))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Importdate == input.Importdate ||
                    (this.Importdate != null &&
                    this.Importdate.Equals(input.Importdate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserCompleteName == input.UserCompleteName ||
                    (this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(input.UserCompleteName))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Compliantcopy == input.Compliantcopy ||
                    (this.Compliantcopy != null &&
                    this.Compliantcopy.Equals(input.Compliantcopy))
                ) && 
                (
                    this.Footprint == input.Footprint ||
                    (this.Footprint != null &&
                    this.Footprint.Equals(input.Footprint))
                ) && 
                (
                    this.Checksend == input.Checksend ||
                    (this.Checksend != null &&
                    this.Checksend.Equals(input.Checksend))
                ) && 
                (
                    this.Aosflag == input.Aosflag ||
                    (this.Aosflag != null &&
                    this.Aosflag.Equals(input.Aosflag))
                ) && 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.SaveType == input.SaveType ||
                    (this.SaveType != null &&
                    this.SaveType.Equals(input.SaveType))
                ) && 
                (
                    this.Filesize == input.Filesize ||
                    (this.Filesize != null &&
                    this.Filesize.Equals(input.Filesize))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.AttachedDocnumber == input.AttachedDocnumber ||
                    (this.AttachedDocnumber != null &&
                    this.AttachedDocnumber.Equals(input.AttachedDocnumber))
                ) && 
                (
                    this.IxCheck == input.IxCheck ||
                    (this.IxCheck != null &&
                    this.IxCheck.Equals(input.IxCheck))
                ) && 
                (
                    this.AttachmentRevision == input.AttachmentRevision ||
                    (this.AttachmentRevision != null &&
                    this.AttachmentRevision.Equals(input.AttachmentRevision))
                ) && 
                (
                    this.CompressionMode == input.CompressionMode ||
                    (this.CompressionMode != null &&
                    this.CompressionMode.Equals(input.CompressionMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Docnumber != null)
                    hashCode = hashCode * 59 + this.Docnumber.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Filepath != null)
                    hashCode = hashCode * 59 + this.Filepath.GetHashCode();
                if (this.Originalname != null)
                    hashCode = hashCode * 59 + this.Originalname.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.Cdlabel != null)
                    hashCode = hashCode * 59 + this.Cdlabel.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Importdate != null)
                    hashCode = hashCode * 59 + this.Importdate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserCompleteName != null)
                    hashCode = hashCode * 59 + this.UserCompleteName.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.Compliantcopy != null)
                    hashCode = hashCode * 59 + this.Compliantcopy.GetHashCode();
                if (this.Footprint != null)
                    hashCode = hashCode * 59 + this.Footprint.GetHashCode();
                if (this.Checksend != null)
                    hashCode = hashCode * 59 + this.Checksend.GetHashCode();
                if (this.Aosflag != null)
                    hashCode = hashCode * 59 + this.Aosflag.GetHashCode();
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.SaveType != null)
                    hashCode = hashCode * 59 + this.SaveType.GetHashCode();
                if (this.Filesize != null)
                    hashCode = hashCode * 59 + this.Filesize.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.AttachedDocnumber != null)
                    hashCode = hashCode * 59 + this.AttachedDocnumber.GetHashCode();
                if (this.IxCheck != null)
                    hashCode = hashCode * 59 + this.IxCheck.GetHashCode();
                if (this.AttachmentRevision != null)
                    hashCode = hashCode * 59 + this.AttachmentRevision.GetHashCode();
                if (this.CompressionMode != null)
                    hashCode = hashCode * 59 + this.CompressionMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
