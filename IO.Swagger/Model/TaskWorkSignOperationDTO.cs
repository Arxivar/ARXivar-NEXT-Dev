/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWork sign operation DTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkSignOperationDTO :  IEquatable<TaskWorkSignOperationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkSignOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Operation description.</param>
        /// <param name="RequiredModeEnum">Possible values:  0: No  1: Yes  2: BasedOnOutcome .</param>
        /// <param name="IsExecuted">Executed.</param>
        /// <param name="TaskWorkDocumentSignConfigurations">Array of sign configuration.</param>
        public TaskWorkSignOperationDTO(int? Id = default(int?), string Description = default(string), int? RequiredModeEnum = default(int?), bool? IsExecuted = default(bool?), List<int?> TaskWorkDocumentSignConfigurations = default(List<int?>))
        {
            this.Id = Id;
            this.Description = Description;
            this.RequiredModeEnum = RequiredModeEnum;
            this.IsExecuted = IsExecuted;
            this.TaskWorkDocumentSignConfigurations = TaskWorkDocumentSignConfigurations;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Operation description
        /// </summary>
        /// <value>Operation description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Possible values:  0: No  1: Yes  2: BasedOnOutcome 
        /// </summary>
        /// <value>Possible values:  0: No  1: Yes  2: BasedOnOutcome </value>
        [DataMember(Name="requiredModeEnum", EmitDefaultValue=false)]
        public int? RequiredModeEnum { get; set; }

        /// <summary>
        /// Executed
        /// </summary>
        /// <value>Executed</value>
        [DataMember(Name="isExecuted", EmitDefaultValue=false)]
        public bool? IsExecuted { get; set; }

        /// <summary>
        /// Array of sign configuration
        /// </summary>
        /// <value>Array of sign configuration</value>
        [DataMember(Name="taskWorkDocumentSignConfigurations", EmitDefaultValue=false)]
        public List<int?> TaskWorkDocumentSignConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkSignOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RequiredModeEnum: ").Append(RequiredModeEnum).Append("\n");
            sb.Append("  IsExecuted: ").Append(IsExecuted).Append("\n");
            sb.Append("  TaskWorkDocumentSignConfigurations: ").Append(TaskWorkDocumentSignConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskWorkSignOperationDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkSignOperationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskWorkSignOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkSignOperationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RequiredModeEnum == input.RequiredModeEnum ||
                    (this.RequiredModeEnum != null &&
                    this.RequiredModeEnum.Equals(input.RequiredModeEnum))
                ) && 
                (
                    this.IsExecuted == input.IsExecuted ||
                    (this.IsExecuted != null &&
                    this.IsExecuted.Equals(input.IsExecuted))
                ) && 
                (
                    this.TaskWorkDocumentSignConfigurations == input.TaskWorkDocumentSignConfigurations ||
                    this.TaskWorkDocumentSignConfigurations != null &&
                    this.TaskWorkDocumentSignConfigurations.SequenceEqual(input.TaskWorkDocumentSignConfigurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RequiredModeEnum != null)
                    hashCode = hashCode * 59 + this.RequiredModeEnum.GetHashCode();
                if (this.IsExecuted != null)
                    hashCode = hashCode * 59 + this.IsExecuted.GetHashCode();
                if (this.TaskWorkDocumentSignConfigurations != null)
                    hashCode = hashCode * 59 + this.TaskWorkDocumentSignConfigurations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
