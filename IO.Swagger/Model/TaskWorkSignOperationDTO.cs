/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWork sign operation DTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkSignOperationDTO :  IEquatable<TaskWorkSignOperationDTO>
    {
        /// <summary>
        /// Required mode
        /// </summary>
        /// <value>Required mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredModeEnumEnum
        {
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes,
            
            /// <summary>
            /// Enum BasedOnOutcome for "BasedOnOutcome"
            /// </summary>
            [EnumMember(Value = "BasedOnOutcome")]
            BasedOnOutcome
        }


        /// <summary>
        /// Gets or Sets TaskWorkDocumentSignConfigurations
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskWorkDocumentSignConfigurationsEnum
        {
            
            /// <summary>
            /// Enum Principal for "Principal"
            /// </summary>
            [EnumMember(Value = "Principal")]
            Principal,
            
            /// <summary>
            /// Enum AllSecondary for "AllSecondary"
            /// </summary>
            [EnumMember(Value = "AllSecondary")]
            AllSecondary,
            
            /// <summary>
            /// Enum AllAttachments for "AllAttachments"
            /// </summary>
            [EnumMember(Value = "AllAttachments")]
            AllAttachments,
            
            /// <summary>
            /// Enum SecondaryChoice for "SecondaryChoice"
            /// </summary>
            [EnumMember(Value = "SecondaryChoice")]
            SecondaryChoice,
            
            /// <summary>
            /// Enum AttachmentsChoice for "AttachmentsChoice"
            /// </summary>
            [EnumMember(Value = "AttachmentsChoice")]
            AttachmentsChoice
        }

        /// <summary>
        /// Required mode
        /// </summary>
        /// <value>Required mode</value>
        [DataMember(Name="requiredModeEnum", EmitDefaultValue=false)]
        public RequiredModeEnumEnum? RequiredModeEnum { get; set; }
        /// <summary>
        /// Array of sign configuration
        /// </summary>
        /// <value>Array of sign configuration</value>
        [DataMember(Name="taskWorkDocumentSignConfigurations", EmitDefaultValue=false)]
        public List<TaskWorkDocumentSignConfigurationsEnum> TaskWorkDocumentSignConfigurations { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkSignOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Description">Operation description.</param>
        /// <param name="RequiredModeEnum">Required mode.</param>
        /// <param name="IsExecuted">Executed.</param>
        /// <param name="TaskWorkDocumentSignConfigurations">Array of sign configuration.</param>
        public TaskWorkSignOperationDTO(int? Id = null, string Description = null, RequiredModeEnumEnum? RequiredModeEnum = null, bool? IsExecuted = null, List<TaskWorkDocumentSignConfigurationsEnum> TaskWorkDocumentSignConfigurations = null)
        {
            this.Id = Id;
            this.Description = Description;
            this.RequiredModeEnum = RequiredModeEnum;
            this.IsExecuted = IsExecuted;
            this.TaskWorkDocumentSignConfigurations = TaskWorkDocumentSignConfigurations;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Operation description
        /// </summary>
        /// <value>Operation description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Executed
        /// </summary>
        /// <value>Executed</value>
        [DataMember(Name="isExecuted", EmitDefaultValue=false)]
        public bool? IsExecuted { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkSignOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RequiredModeEnum: ").Append(RequiredModeEnum).Append("\n");
            sb.Append("  IsExecuted: ").Append(IsExecuted).Append("\n");
            sb.Append("  TaskWorkDocumentSignConfigurations: ").Append(TaskWorkDocumentSignConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskWorkSignOperationDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkSignOperationDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskWorkSignOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkSignOperationDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.RequiredModeEnum == other.RequiredModeEnum ||
                    this.RequiredModeEnum != null &&
                    this.RequiredModeEnum.Equals(other.RequiredModeEnum)
                ) && 
                (
                    this.IsExecuted == other.IsExecuted ||
                    this.IsExecuted != null &&
                    this.IsExecuted.Equals(other.IsExecuted)
                ) && 
                (
                    this.TaskWorkDocumentSignConfigurations == other.TaskWorkDocumentSignConfigurations ||
                    this.TaskWorkDocumentSignConfigurations != null &&
                    this.TaskWorkDocumentSignConfigurations.SequenceEqual(other.TaskWorkDocumentSignConfigurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.RequiredModeEnum != null)
                    hash = hash * 59 + this.RequiredModeEnum.GetHashCode();
                if (this.IsExecuted != null)
                    hash = hash * 59 + this.IsExecuted.GetHashCode();
                if (this.TaskWorkDocumentSignConfigurations != null)
                    hash = hash * 59 + this.TaskWorkDocumentSignConfigurations.GetHashCode();
                return hash;
            }
        }
    }

}
