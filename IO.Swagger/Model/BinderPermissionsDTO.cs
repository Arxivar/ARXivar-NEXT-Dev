/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BinderPermissionsDTO
    /// </summary>
    [DataContract]
    public partial class BinderPermissionsDTO :  IEquatable<BinderPermissionsDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinderPermissionsDTO" /> class.
        /// </summary>
        /// <param name="Spread">Spread.</param>
        /// <param name="UsersPermissions">List of user permissions.</param>
        /// <param name="PermissionsProperties">Possibile permission for the object.</param>
        public BinderPermissionsDTO(bool? Spread = null, List<UserPermissionDTO> UsersPermissions = null, List<PermissionPropertiesDTO> PermissionsProperties = null)
        {
            this.Spread = Spread;
            this.UsersPermissions = UsersPermissions;
            this.PermissionsProperties = PermissionsProperties;
        }
        
        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public bool? Spread { get; set; }
        /// <summary>
        /// List of user permissions
        /// </summary>
        /// <value>List of user permissions</value>
        [DataMember(Name="usersPermissions", EmitDefaultValue=false)]
        public List<UserPermissionDTO> UsersPermissions { get; set; }
        /// <summary>
        /// Possibile permission for the object
        /// </summary>
        /// <value>Possibile permission for the object</value>
        [DataMember(Name="permissionsProperties", EmitDefaultValue=false)]
        public List<PermissionPropertiesDTO> PermissionsProperties { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinderPermissionsDTO {\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  UsersPermissions: ").Append(UsersPermissions).Append("\n");
            sb.Append("  PermissionsProperties: ").Append(PermissionsProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BinderPermissionsDTO);
        }

        /// <summary>
        /// Returns true if BinderPermissionsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of BinderPermissionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinderPermissionsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Spread == other.Spread ||
                    this.Spread != null &&
                    this.Spread.Equals(other.Spread)
                ) && 
                (
                    this.UsersPermissions == other.UsersPermissions ||
                    this.UsersPermissions != null &&
                    this.UsersPermissions.SequenceEqual(other.UsersPermissions)
                ) && 
                (
                    this.PermissionsProperties == other.PermissionsProperties ||
                    this.PermissionsProperties != null &&
                    this.PermissionsProperties.SequenceEqual(other.PermissionsProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Spread != null)
                    hash = hash * 59 + this.Spread.GetHashCode();
                if (this.UsersPermissions != null)
                    hash = hash * 59 + this.UsersPermissions.GetHashCode();
                if (this.PermissionsProperties != null)
                    hash = hash * 59 + this.PermissionsProperties.GetHashCode();
                return hash;
            }
        }
    }

}
