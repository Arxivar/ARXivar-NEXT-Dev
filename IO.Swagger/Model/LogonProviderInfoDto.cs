/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LogonProviderInfoDto
    /// </summary>
    [DataContract]
    public partial class LogonProviderInfoDto :  IEquatable<LogonProviderInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogonProviderInfoDto" /> class.
        /// </summary>
        /// <param name="logonProviderId">logonProviderId.</param>
        /// <param name="description">description.</param>
        /// <param name="version">version.</param>
        /// <param name="iconB64">iconB64.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="implicitFlow">implicitFlow.</param>
        /// <param name="visible">visible.</param>
        public LogonProviderInfoDto(string logonProviderId = default(string), string description = default(string), string version = default(string), string iconB64 = default(string), bool? isDefault = default(bool?), bool? implicitFlow = default(bool?), bool? visible = default(bool?))
        {
            this.LogonProviderId = logonProviderId;
            this.Description = description;
            this.Version = version;
            this.IconB64 = iconB64;
            this.IsDefault = isDefault;
            this.ImplicitFlow = implicitFlow;
            this.Visible = visible;
        }
        
        /// <summary>
        /// Gets or Sets LogonProviderId
        /// </summary>
        [DataMember(Name="logonProviderId", EmitDefaultValue=false)]
        public string LogonProviderId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets IconB64
        /// </summary>
        [DataMember(Name="iconB64", EmitDefaultValue=false)]
        public string IconB64 { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets ImplicitFlow
        /// </summary>
        [DataMember(Name="implicitFlow", EmitDefaultValue=false)]
        public bool? ImplicitFlow { get; set; }

        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogonProviderInfoDto {\n");
            sb.Append("  LogonProviderId: ").Append(LogonProviderId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  IconB64: ").Append(IconB64).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ImplicitFlow: ").Append(ImplicitFlow).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogonProviderInfoDto);
        }

        /// <summary>
        /// Returns true if LogonProviderInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LogonProviderInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogonProviderInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogonProviderId == input.LogonProviderId ||
                    (this.LogonProviderId != null &&
                    this.LogonProviderId.Equals(input.LogonProviderId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.IconB64 == input.IconB64 ||
                    (this.IconB64 != null &&
                    this.IconB64.Equals(input.IconB64))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.ImplicitFlow == input.ImplicitFlow ||
                    (this.ImplicitFlow != null &&
                    this.ImplicitFlow.Equals(input.ImplicitFlow))
                ) && 
                (
                    this.Visible == input.Visible ||
                    (this.Visible != null &&
                    this.Visible.Equals(input.Visible))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogonProviderId != null)
                    hashCode = hashCode * 59 + this.LogonProviderId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.IconB64 != null)
                    hashCode = hashCode * 59 + this.IconB64.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.ImplicitFlow != null)
                    hashCode = hashCode * 59 + this.ImplicitFlow.GetHashCode();
                if (this.Visible != null)
                    hashCode = hashCode * 59 + this.Visible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
