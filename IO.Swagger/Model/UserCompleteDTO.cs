/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserCompleteDTO
    /// </summary>
    [DataContract]
    public partial class UserCompleteDTO :  IEquatable<UserCompleteDTO>
    {
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GroupEnum
        {
            
            /// <summary>
            /// Enum NonImpostato for "Non_Impostato"
            /// </summary>
            [EnumMember(Value = "Non_Impostato")]
            NonImpostato,
            
            /// <summary>
            /// Enum Admin for "Admin"
            /// </summary>
            [EnumMember(Value = "Admin")]
            Admin,
            
            /// <summary>
            /// Enum User for "User"
            /// </summary>
            [EnumMember(Value = "User")]
            User,
            
            /// <summary>
            /// Enum Profiler for "Profiler"
            /// </summary>
            [EnumMember(Value = "Profiler")]
            Profiler
        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum U for "U"
            /// </summary>
            [EnumMember(Value = "U")]
            U,
            
            /// <summary>
            /// Enum S for "S"
            /// </summary>
            [EnumMember(Value = "S")]
            S,
            
            /// <summary>
            /// Enum M for "M"
            /// </summary>
            [EnumMember(Value = "M")]
            M,
            
            /// <summary>
            /// Enum F for "F"
            /// </summary>
            [EnumMember(Value = "F")]
            F,
            
            /// <summary>
            /// Enum G for "G"
            /// </summary>
            [EnumMember(Value = "G")]
            G,
            
            /// <summary>
            /// Enum I for "I"
            /// </summary>
            [EnumMember(Value = "I")]
            I,
            
            /// <summary>
            /// Enum D for "D"
            /// </summary>
            [EnumMember(Value = "D")]
            D
        }

        /// <summary>
        /// Gets or Sets UserState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserStateEnum
        {
            
            /// <summary>
            /// Enum NonAttivo for "NonAttivo"
            /// </summary>
            [EnumMember(Value = "NonAttivo")]
            NonAttivo,
            
            /// <summary>
            /// Enum Attivo for "Attivo"
            /// </summary>
            [EnumMember(Value = "Attivo")]
            Attivo,
            
            /// <summary>
            /// Enum Nascosto for "Nascosto"
            /// </summary>
            [EnumMember(Value = "Nascosto")]
            Nascosto
        }

        /// <summary>
        /// Gets or Sets Viewer
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViewerEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Lite for "Lite"
            /// </summary>
            [EnumMember(Value = "Lite")]
            Lite,
            
            /// <summary>
            /// Enum Comunicazioni for "Comunicazioni"
            /// </summary>
            [EnumMember(Value = "Comunicazioni")]
            Comunicazioni,
            
            /// <summary>
            /// Enum Portal for "Portal"
            /// </summary>
            [EnumMember(Value = "Portal")]
            Portal
        }

        /// <summary>
        /// Gets or Sets HtmlBody
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HtmlBodyEnum
        {
            
            /// <summary>
            /// Enum Disabilitato for "Disabilitato"
            /// </summary>
            [EnumMember(Value = "Disabilitato")]
            Disabilitato,
            
            /// <summary>
            /// Enum SoloSpedizione for "SoloSpedizione"
            /// </summary>
            [EnumMember(Value = "SoloSpedizione")]
            SoloSpedizione,
            
            /// <summary>
            /// Enum SoloRicezione for "SoloRicezione"
            /// </summary>
            [EnumMember(Value = "SoloRicezione")]
            SoloRicezione,
            
            /// <summary>
            /// Enum SpedizioneRicezione for "SpedizioneRicezione"
            /// </summary>
            [EnumMember(Value = "SpedizioneRicezione")]
            SpedizioneRicezione
        }

        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MustChangePasswordEnum
        {
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes,
            
            /// <summary>
            /// Enum YesForChangePasswordNew for "YesForChangePasswordNew"
            /// </summary>
            [EnumMember(Value = "YesForChangePasswordNew")]
            YesForChangePasswordNew
        }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public GroupEnum? Group { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Gets or Sets UserState
        /// </summary>
        [DataMember(Name="userState", EmitDefaultValue=false)]
        public UserStateEnum? UserState { get; set; }
        /// <summary>
        /// Gets or Sets Viewer
        /// </summary>
        [DataMember(Name="viewer", EmitDefaultValue=false)]
        public ViewerEnum? Viewer { get; set; }
        /// <summary>
        /// Gets or Sets HtmlBody
        /// </summary>
        [DataMember(Name="htmlBody", EmitDefaultValue=false)]
        public HtmlBodyEnum? HtmlBody { get; set; }
        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [DataMember(Name="mustChangePassword", EmitDefaultValue=false)]
        public MustChangePasswordEnum? MustChangePassword { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCompleteDTO" /> class.
        /// </summary>
        /// <param name="User">User.</param>
        /// <param name="Group">Group.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Email">Email.</param>
        /// <param name="BusinessUnit">BusinessUnit.</param>
        /// <param name="Password">Password.</param>
        /// <param name="PasswordNew">PasswordNew.</param>
        /// <param name="DefaultType">DefaultType.</param>
        /// <param name="Type2">Type2.</param>
        /// <param name="Type3">Type3.</param>
        /// <param name="InternalFax">InternalFax.</param>
        /// <param name="LastMail">LastMail.</param>
        /// <param name="Category">Category.</param>
        /// <param name="Workflow">Workflow.</param>
        /// <param name="DefaultState">DefaultState.</param>
        /// <param name="AddressBook">AddressBook.</param>
        /// <param name="UserState">UserState.</param>
        /// <param name="MailServer">MailServer.</param>
        /// <param name="WebAccess">WebAccess.</param>
        /// <param name="Upload">Upload.</param>
        /// <param name="Folders">Folders.</param>
        /// <param name="Flow">Flow.</param>
        /// <param name="Sign">Sign.</param>
        /// <param name="Viewer">Viewer.</param>
        /// <param name="Protocol">Protocol.</param>
        /// <param name="Models">Models.</param>
        /// <param name="Domain">Domain.</param>
        /// <param name="OutState">OutState.</param>
        /// <param name="MailBody">MailBody.</param>
        /// <param name="Notify">Notify.</param>
        /// <param name="MailClient">MailClient.</param>
        /// <param name="HtmlBody">HtmlBody.</param>
        /// <param name="RespAos">RespAos.</param>
        /// <param name="AssAos">AssAos.</param>
        /// <param name="CodFis">CodFis.</param>
        /// <param name="Pin">Pin.</param>
        /// <param name="Guest">Guest.</param>
        /// <param name="PasswordChange">PasswordChange.</param>
        /// <param name="Marking">Marking.</param>
        /// <param name="Type">Type.</param>
        /// <param name="MailOutDefault">MailOutDefault.</param>
        /// <param name="BarcodeAccess">BarcodeAccess.</param>
        /// <param name="MustChangePassword">MustChangePassword.</param>
        /// <param name="Lang">Lang.</param>
        /// <param name="ProfileDefaultId">ProfileDefaultId.</param>
        /// <param name="Ws">Ws.</param>
        /// <param name="PswFailCount">PswFailCount.</param>
        /// <param name="PswLastFailDate">PswLastFailDate.</param>
        /// <param name="PswFailIpCaller">PswFailIpCaller.</param>
        /// <param name="DisablePswExpired">DisablePswExpired.</param>
        /// <param name="LockOutDateTimeUtc">LockOutDateTimeUtc.</param>
        /// <param name="CompleteName">CompleteName.</param>
        public UserCompleteDTO(int? User = null, GroupEnum? Group = null, string Description = null, string Email = null, string BusinessUnit = null, string Password = null, string PasswordNew = null, int? DefaultType = null, int? Type2 = null, int? Type3 = null, string InternalFax = null, DateTime? LastMail = null, CategoryEnum? Category = null, bool? Workflow = null, string DefaultState = null, bool? AddressBook = null, UserStateEnum? UserState = null, string MailServer = null, bool? WebAccess = null, bool? Upload = null, bool? Folders = null, bool? Flow = null, bool? Sign = null, ViewerEnum? Viewer = null, bool? Protocol = null, bool? Models = null, string Domain = null, string OutState = null, string MailBody = null, bool? Notify = null, string MailClient = null, HtmlBodyEnum? HtmlBody = null, bool? RespAos = null, bool? AssAos = null, string CodFis = null, string Pin = null, bool? Guest = null, bool? PasswordChange = null, byte[] Marking = null, int? Type = null, bool? MailOutDefault = null, bool? BarcodeAccess = null, MustChangePasswordEnum? MustChangePassword = null, string Lang = null, int? ProfileDefaultId = null, bool? Ws = null, int? PswFailCount = null, DateTime? PswLastFailDate = null, string PswFailIpCaller = null, bool? DisablePswExpired = null, DateTime? LockOutDateTimeUtc = null, string CompleteName = null)
        {
            this.User = User;
            this.Group = Group;
            this.Description = Description;
            this.Email = Email;
            this.BusinessUnit = BusinessUnit;
            this.Password = Password;
            this.PasswordNew = PasswordNew;
            this.DefaultType = DefaultType;
            this.Type2 = Type2;
            this.Type3 = Type3;
            this.InternalFax = InternalFax;
            this.LastMail = LastMail;
            this.Category = Category;
            this.Workflow = Workflow;
            this.DefaultState = DefaultState;
            this.AddressBook = AddressBook;
            this.UserState = UserState;
            this.MailServer = MailServer;
            this.WebAccess = WebAccess;
            this.Upload = Upload;
            this.Folders = Folders;
            this.Flow = Flow;
            this.Sign = Sign;
            this.Viewer = Viewer;
            this.Protocol = Protocol;
            this.Models = Models;
            this.Domain = Domain;
            this.OutState = OutState;
            this.MailBody = MailBody;
            this.Notify = Notify;
            this.MailClient = MailClient;
            this.HtmlBody = HtmlBody;
            this.RespAos = RespAos;
            this.AssAos = AssAos;
            this.CodFis = CodFis;
            this.Pin = Pin;
            this.Guest = Guest;
            this.PasswordChange = PasswordChange;
            this.Marking = Marking;
            this.Type = Type;
            this.MailOutDefault = MailOutDefault;
            this.BarcodeAccess = BarcodeAccess;
            this.MustChangePassword = MustChangePassword;
            this.Lang = Lang;
            this.ProfileDefaultId = ProfileDefaultId;
            this.Ws = Ws;
            this.PswFailCount = PswFailCount;
            this.PswLastFailDate = PswLastFailDate;
            this.PswFailIpCaller = PswFailIpCaller;
            this.DisablePswExpired = DisablePswExpired;
            this.LockOutDateTimeUtc = LockOutDateTimeUtc;
            this.CompleteName = CompleteName;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets PasswordNew
        /// </summary>
        [DataMember(Name="passwordNew", EmitDefaultValue=false)]
        public string PasswordNew { get; set; }
        /// <summary>
        /// Gets or Sets DefaultType
        /// </summary>
        [DataMember(Name="defaultType", EmitDefaultValue=false)]
        public int? DefaultType { get; set; }
        /// <summary>
        /// Gets or Sets Type2
        /// </summary>
        [DataMember(Name="type2", EmitDefaultValue=false)]
        public int? Type2 { get; set; }
        /// <summary>
        /// Gets or Sets Type3
        /// </summary>
        [DataMember(Name="type3", EmitDefaultValue=false)]
        public int? Type3 { get; set; }
        /// <summary>
        /// Gets or Sets InternalFax
        /// </summary>
        [DataMember(Name="internalFax", EmitDefaultValue=false)]
        public string InternalFax { get; set; }
        /// <summary>
        /// Gets or Sets LastMail
        /// </summary>
        [DataMember(Name="lastMail", EmitDefaultValue=false)]
        public DateTime? LastMail { get; set; }
        /// <summary>
        /// Gets or Sets Workflow
        /// </summary>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public bool? Workflow { get; set; }
        /// <summary>
        /// Gets or Sets DefaultState
        /// </summary>
        [DataMember(Name="defaultState", EmitDefaultValue=false)]
        public string DefaultState { get; set; }
        /// <summary>
        /// Gets or Sets AddressBook
        /// </summary>
        [DataMember(Name="addressBook", EmitDefaultValue=false)]
        public bool? AddressBook { get; set; }
        /// <summary>
        /// Gets or Sets MailServer
        /// </summary>
        [DataMember(Name="mailServer", EmitDefaultValue=false)]
        public string MailServer { get; set; }
        /// <summary>
        /// Gets or Sets WebAccess
        /// </summary>
        [DataMember(Name="webAccess", EmitDefaultValue=false)]
        public bool? WebAccess { get; set; }
        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }
        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public bool? Folders { get; set; }
        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public bool? Flow { get; set; }
        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public bool? Sign { get; set; }
        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public bool? Protocol { get; set; }
        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name="models", EmitDefaultValue=false)]
        public bool? Models { get; set; }
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }
        /// <summary>
        /// Gets or Sets OutState
        /// </summary>
        [DataMember(Name="outState", EmitDefaultValue=false)]
        public string OutState { get; set; }
        /// <summary>
        /// Gets or Sets MailBody
        /// </summary>
        [DataMember(Name="mailBody", EmitDefaultValue=false)]
        public string MailBody { get; set; }
        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public bool? Notify { get; set; }
        /// <summary>
        /// Gets or Sets MailClient
        /// </summary>
        [DataMember(Name="mailClient", EmitDefaultValue=false)]
        public string MailClient { get; set; }
        /// <summary>
        /// Gets or Sets RespAos
        /// </summary>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public bool? RespAos { get; set; }
        /// <summary>
        /// Gets or Sets AssAos
        /// </summary>
        [DataMember(Name="assAos", EmitDefaultValue=false)]
        public bool? AssAos { get; set; }
        /// <summary>
        /// Gets or Sets CodFis
        /// </summary>
        [DataMember(Name="codFis", EmitDefaultValue=false)]
        public string CodFis { get; set; }
        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }
        /// <summary>
        /// Gets or Sets Guest
        /// </summary>
        [DataMember(Name="guest", EmitDefaultValue=false)]
        public bool? Guest { get; set; }
        /// <summary>
        /// Gets or Sets PasswordChange
        /// </summary>
        [DataMember(Name="passwordChange", EmitDefaultValue=false)]
        public bool? PasswordChange { get; set; }
        /// <summary>
        /// Gets or Sets Marking
        /// </summary>
        [DataMember(Name="marking", EmitDefaultValue=false)]
        public byte[] Marking { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }
        /// <summary>
        /// Gets or Sets MailOutDefault
        /// </summary>
        [DataMember(Name="mailOutDefault", EmitDefaultValue=false)]
        public bool? MailOutDefault { get; set; }
        /// <summary>
        /// Gets or Sets BarcodeAccess
        /// </summary>
        [DataMember(Name="barcodeAccess", EmitDefaultValue=false)]
        public bool? BarcodeAccess { get; set; }
        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }
        /// <summary>
        /// Gets or Sets ProfileDefaultId
        /// </summary>
        [DataMember(Name="profileDefault_Id", EmitDefaultValue=false)]
        public int? ProfileDefaultId { get; set; }
        /// <summary>
        /// Gets or Sets Ws
        /// </summary>
        [DataMember(Name="ws", EmitDefaultValue=false)]
        public bool? Ws { get; set; }
        /// <summary>
        /// Gets or Sets PswFailCount
        /// </summary>
        [DataMember(Name="pswFailCount", EmitDefaultValue=false)]
        public int? PswFailCount { get; set; }
        /// <summary>
        /// Gets or Sets PswLastFailDate
        /// </summary>
        [DataMember(Name="pswLastFailDate", EmitDefaultValue=false)]
        public DateTime? PswLastFailDate { get; set; }
        /// <summary>
        /// Gets or Sets PswFailIpCaller
        /// </summary>
        [DataMember(Name="pswFailIpCaller", EmitDefaultValue=false)]
        public string PswFailIpCaller { get; set; }
        /// <summary>
        /// Gets or Sets DisablePswExpired
        /// </summary>
        [DataMember(Name="disablePswExpired", EmitDefaultValue=false)]
        public bool? DisablePswExpired { get; set; }
        /// <summary>
        /// Gets or Sets LockOutDateTimeUtc
        /// </summary>
        [DataMember(Name="lockOutDateTimeUtc", EmitDefaultValue=false)]
        public DateTime? LockOutDateTimeUtc { get; set; }
        /// <summary>
        /// Gets or Sets CompleteName
        /// </summary>
        [DataMember(Name="completeName", EmitDefaultValue=false)]
        public string CompleteName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCompleteDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordNew: ").Append(PasswordNew).Append("\n");
            sb.Append("  DefaultType: ").Append(DefaultType).Append("\n");
            sb.Append("  Type2: ").Append(Type2).Append("\n");
            sb.Append("  Type3: ").Append(Type3).Append("\n");
            sb.Append("  InternalFax: ").Append(InternalFax).Append("\n");
            sb.Append("  LastMail: ").Append(LastMail).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  DefaultState: ").Append(DefaultState).Append("\n");
            sb.Append("  AddressBook: ").Append(AddressBook).Append("\n");
            sb.Append("  UserState: ").Append(UserState).Append("\n");
            sb.Append("  MailServer: ").Append(MailServer).Append("\n");
            sb.Append("  WebAccess: ").Append(WebAccess).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  OutState: ").Append(OutState).Append("\n");
            sb.Append("  MailBody: ").Append(MailBody).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  MailClient: ").Append(MailClient).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  AssAos: ").Append(AssAos).Append("\n");
            sb.Append("  CodFis: ").Append(CodFis).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  PasswordChange: ").Append(PasswordChange).Append("\n");
            sb.Append("  Marking: ").Append(Marking).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MailOutDefault: ").Append(MailOutDefault).Append("\n");
            sb.Append("  BarcodeAccess: ").Append(BarcodeAccess).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  ProfileDefaultId: ").Append(ProfileDefaultId).Append("\n");
            sb.Append("  Ws: ").Append(Ws).Append("\n");
            sb.Append("  PswFailCount: ").Append(PswFailCount).Append("\n");
            sb.Append("  PswLastFailDate: ").Append(PswLastFailDate).Append("\n");
            sb.Append("  PswFailIpCaller: ").Append(PswFailIpCaller).Append("\n");
            sb.Append("  DisablePswExpired: ").Append(DisablePswExpired).Append("\n");
            sb.Append("  LockOutDateTimeUtc: ").Append(LockOutDateTimeUtc).Append("\n");
            sb.Append("  CompleteName: ").Append(CompleteName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserCompleteDTO);
        }

        /// <summary>
        /// Returns true if UserCompleteDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UserCompleteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCompleteDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Group == other.Group ||
                    this.Group != null &&
                    this.Group.Equals(other.Group)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.BusinessUnit == other.BusinessUnit ||
                    this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(other.BusinessUnit)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PasswordNew == other.PasswordNew ||
                    this.PasswordNew != null &&
                    this.PasswordNew.Equals(other.PasswordNew)
                ) && 
                (
                    this.DefaultType == other.DefaultType ||
                    this.DefaultType != null &&
                    this.DefaultType.Equals(other.DefaultType)
                ) && 
                (
                    this.Type2 == other.Type2 ||
                    this.Type2 != null &&
                    this.Type2.Equals(other.Type2)
                ) && 
                (
                    this.Type3 == other.Type3 ||
                    this.Type3 != null &&
                    this.Type3.Equals(other.Type3)
                ) && 
                (
                    this.InternalFax == other.InternalFax ||
                    this.InternalFax != null &&
                    this.InternalFax.Equals(other.InternalFax)
                ) && 
                (
                    this.LastMail == other.LastMail ||
                    this.LastMail != null &&
                    this.LastMail.Equals(other.LastMail)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.Equals(other.Workflow)
                ) && 
                (
                    this.DefaultState == other.DefaultState ||
                    this.DefaultState != null &&
                    this.DefaultState.Equals(other.DefaultState)
                ) && 
                (
                    this.AddressBook == other.AddressBook ||
                    this.AddressBook != null &&
                    this.AddressBook.Equals(other.AddressBook)
                ) && 
                (
                    this.UserState == other.UserState ||
                    this.UserState != null &&
                    this.UserState.Equals(other.UserState)
                ) && 
                (
                    this.MailServer == other.MailServer ||
                    this.MailServer != null &&
                    this.MailServer.Equals(other.MailServer)
                ) && 
                (
                    this.WebAccess == other.WebAccess ||
                    this.WebAccess != null &&
                    this.WebAccess.Equals(other.WebAccess)
                ) && 
                (
                    this.Upload == other.Upload ||
                    this.Upload != null &&
                    this.Upload.Equals(other.Upload)
                ) && 
                (
                    this.Folders == other.Folders ||
                    this.Folders != null &&
                    this.Folders.Equals(other.Folders)
                ) && 
                (
                    this.Flow == other.Flow ||
                    this.Flow != null &&
                    this.Flow.Equals(other.Flow)
                ) && 
                (
                    this.Sign == other.Sign ||
                    this.Sign != null &&
                    this.Sign.Equals(other.Sign)
                ) && 
                (
                    this.Viewer == other.Viewer ||
                    this.Viewer != null &&
                    this.Viewer.Equals(other.Viewer)
                ) && 
                (
                    this.Protocol == other.Protocol ||
                    this.Protocol != null &&
                    this.Protocol.Equals(other.Protocol)
                ) && 
                (
                    this.Models == other.Models ||
                    this.Models != null &&
                    this.Models.Equals(other.Models)
                ) && 
                (
                    this.Domain == other.Domain ||
                    this.Domain != null &&
                    this.Domain.Equals(other.Domain)
                ) && 
                (
                    this.OutState == other.OutState ||
                    this.OutState != null &&
                    this.OutState.Equals(other.OutState)
                ) && 
                (
                    this.MailBody == other.MailBody ||
                    this.MailBody != null &&
                    this.MailBody.Equals(other.MailBody)
                ) && 
                (
                    this.Notify == other.Notify ||
                    this.Notify != null &&
                    this.Notify.Equals(other.Notify)
                ) && 
                (
                    this.MailClient == other.MailClient ||
                    this.MailClient != null &&
                    this.MailClient.Equals(other.MailClient)
                ) && 
                (
                    this.HtmlBody == other.HtmlBody ||
                    this.HtmlBody != null &&
                    this.HtmlBody.Equals(other.HtmlBody)
                ) && 
                (
                    this.RespAos == other.RespAos ||
                    this.RespAos != null &&
                    this.RespAos.Equals(other.RespAos)
                ) && 
                (
                    this.AssAos == other.AssAos ||
                    this.AssAos != null &&
                    this.AssAos.Equals(other.AssAos)
                ) && 
                (
                    this.CodFis == other.CodFis ||
                    this.CodFis != null &&
                    this.CodFis.Equals(other.CodFis)
                ) && 
                (
                    this.Pin == other.Pin ||
                    this.Pin != null &&
                    this.Pin.Equals(other.Pin)
                ) && 
                (
                    this.Guest == other.Guest ||
                    this.Guest != null &&
                    this.Guest.Equals(other.Guest)
                ) && 
                (
                    this.PasswordChange == other.PasswordChange ||
                    this.PasswordChange != null &&
                    this.PasswordChange.Equals(other.PasswordChange)
                ) && 
                (
                    this.Marking == other.Marking ||
                    this.Marking != null &&
                    this.Marking.Equals(other.Marking)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.MailOutDefault == other.MailOutDefault ||
                    this.MailOutDefault != null &&
                    this.MailOutDefault.Equals(other.MailOutDefault)
                ) && 
                (
                    this.BarcodeAccess == other.BarcodeAccess ||
                    this.BarcodeAccess != null &&
                    this.BarcodeAccess.Equals(other.BarcodeAccess)
                ) && 
                (
                    this.MustChangePassword == other.MustChangePassword ||
                    this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(other.MustChangePassword)
                ) && 
                (
                    this.Lang == other.Lang ||
                    this.Lang != null &&
                    this.Lang.Equals(other.Lang)
                ) && 
                (
                    this.ProfileDefaultId == other.ProfileDefaultId ||
                    this.ProfileDefaultId != null &&
                    this.ProfileDefaultId.Equals(other.ProfileDefaultId)
                ) && 
                (
                    this.Ws == other.Ws ||
                    this.Ws != null &&
                    this.Ws.Equals(other.Ws)
                ) && 
                (
                    this.PswFailCount == other.PswFailCount ||
                    this.PswFailCount != null &&
                    this.PswFailCount.Equals(other.PswFailCount)
                ) && 
                (
                    this.PswLastFailDate == other.PswLastFailDate ||
                    this.PswLastFailDate != null &&
                    this.PswLastFailDate.Equals(other.PswLastFailDate)
                ) && 
                (
                    this.PswFailIpCaller == other.PswFailIpCaller ||
                    this.PswFailIpCaller != null &&
                    this.PswFailIpCaller.Equals(other.PswFailIpCaller)
                ) && 
                (
                    this.DisablePswExpired == other.DisablePswExpired ||
                    this.DisablePswExpired != null &&
                    this.DisablePswExpired.Equals(other.DisablePswExpired)
                ) && 
                (
                    this.LockOutDateTimeUtc == other.LockOutDateTimeUtc ||
                    this.LockOutDateTimeUtc != null &&
                    this.LockOutDateTimeUtc.Equals(other.LockOutDateTimeUtc)
                ) && 
                (
                    this.CompleteName == other.CompleteName ||
                    this.CompleteName != null &&
                    this.CompleteName.Equals(other.CompleteName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Group != null)
                    hash = hash * 59 + this.Group.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.BusinessUnit != null)
                    hash = hash * 59 + this.BusinessUnit.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PasswordNew != null)
                    hash = hash * 59 + this.PasswordNew.GetHashCode();
                if (this.DefaultType != null)
                    hash = hash * 59 + this.DefaultType.GetHashCode();
                if (this.Type2 != null)
                    hash = hash * 59 + this.Type2.GetHashCode();
                if (this.Type3 != null)
                    hash = hash * 59 + this.Type3.GetHashCode();
                if (this.InternalFax != null)
                    hash = hash * 59 + this.InternalFax.GetHashCode();
                if (this.LastMail != null)
                    hash = hash * 59 + this.LastMail.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                if (this.DefaultState != null)
                    hash = hash * 59 + this.DefaultState.GetHashCode();
                if (this.AddressBook != null)
                    hash = hash * 59 + this.AddressBook.GetHashCode();
                if (this.UserState != null)
                    hash = hash * 59 + this.UserState.GetHashCode();
                if (this.MailServer != null)
                    hash = hash * 59 + this.MailServer.GetHashCode();
                if (this.WebAccess != null)
                    hash = hash * 59 + this.WebAccess.GetHashCode();
                if (this.Upload != null)
                    hash = hash * 59 + this.Upload.GetHashCode();
                if (this.Folders != null)
                    hash = hash * 59 + this.Folders.GetHashCode();
                if (this.Flow != null)
                    hash = hash * 59 + this.Flow.GetHashCode();
                if (this.Sign != null)
                    hash = hash * 59 + this.Sign.GetHashCode();
                if (this.Viewer != null)
                    hash = hash * 59 + this.Viewer.GetHashCode();
                if (this.Protocol != null)
                    hash = hash * 59 + this.Protocol.GetHashCode();
                if (this.Models != null)
                    hash = hash * 59 + this.Models.GetHashCode();
                if (this.Domain != null)
                    hash = hash * 59 + this.Domain.GetHashCode();
                if (this.OutState != null)
                    hash = hash * 59 + this.OutState.GetHashCode();
                if (this.MailBody != null)
                    hash = hash * 59 + this.MailBody.GetHashCode();
                if (this.Notify != null)
                    hash = hash * 59 + this.Notify.GetHashCode();
                if (this.MailClient != null)
                    hash = hash * 59 + this.MailClient.GetHashCode();
                if (this.HtmlBody != null)
                    hash = hash * 59 + this.HtmlBody.GetHashCode();
                if (this.RespAos != null)
                    hash = hash * 59 + this.RespAos.GetHashCode();
                if (this.AssAos != null)
                    hash = hash * 59 + this.AssAos.GetHashCode();
                if (this.CodFis != null)
                    hash = hash * 59 + this.CodFis.GetHashCode();
                if (this.Pin != null)
                    hash = hash * 59 + this.Pin.GetHashCode();
                if (this.Guest != null)
                    hash = hash * 59 + this.Guest.GetHashCode();
                if (this.PasswordChange != null)
                    hash = hash * 59 + this.PasswordChange.GetHashCode();
                if (this.Marking != null)
                    hash = hash * 59 + this.Marking.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.MailOutDefault != null)
                    hash = hash * 59 + this.MailOutDefault.GetHashCode();
                if (this.BarcodeAccess != null)
                    hash = hash * 59 + this.BarcodeAccess.GetHashCode();
                if (this.MustChangePassword != null)
                    hash = hash * 59 + this.MustChangePassword.GetHashCode();
                if (this.Lang != null)
                    hash = hash * 59 + this.Lang.GetHashCode();
                if (this.ProfileDefaultId != null)
                    hash = hash * 59 + this.ProfileDefaultId.GetHashCode();
                if (this.Ws != null)
                    hash = hash * 59 + this.Ws.GetHashCode();
                if (this.PswFailCount != null)
                    hash = hash * 59 + this.PswFailCount.GetHashCode();
                if (this.PswLastFailDate != null)
                    hash = hash * 59 + this.PswLastFailDate.GetHashCode();
                if (this.PswFailIpCaller != null)
                    hash = hash * 59 + this.PswFailIpCaller.GetHashCode();
                if (this.DisablePswExpired != null)
                    hash = hash * 59 + this.DisablePswExpired.GetHashCode();
                if (this.LockOutDateTimeUtc != null)
                    hash = hash * 59 + this.LockOutDateTimeUtc.GetHashCode();
                if (this.CompleteName != null)
                    hash = hash * 59 + this.CompleteName.GetHashCode();
                return hash;
            }
        }
    }

}
