/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of user
    /// </summary>
    [DataContract]
    public partial class UserCompleteDTO :  IEquatable<UserCompleteDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCompleteDTO" /> class.
        /// </summary>
        /// <param name="User">Identifier.</param>
        /// <param name="Group">Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler .</param>
        /// <param name="Description">Description.</param>
        /// <param name="Email">Email.</param>
        /// <param name="BusinessUnit">Business Unit.</param>
        /// <param name="Password">Password.</param>
        /// <param name="PasswordNew">New Password.</param>
        /// <param name="DefaultType">Default Document Type of First Level.</param>
        /// <param name="Type2">Default Document Type of Second Level.</param>
        /// <param name="Type3">Default Document Type of Third Level.</param>
        /// <param name="InternalFax">Personal Fax.</param>
        /// <param name="LastMail">Date of last reading email.</param>
        /// <param name="Category">Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D .</param>
        /// <param name="Workflow">Enabling Workflow Management.</param>
        /// <param name="DefaultState">Default Document Status.</param>
        /// <param name="AddressBook">Enabling to insert new address book items into profiling.</param>
        /// <param name="UserState">Possible values:  0: NonAttivo  1: Attivo  2: Nascosto .</param>
        /// <param name="MailServer">Email Server.</param>
        /// <param name="WebAccess">Access via Web.</param>
        /// <param name="Upload">Enabled to Import.</param>
        /// <param name="Folders">Enabled to OCR.</param>
        /// <param name="Flow">Enabled to Workflow.</param>
        /// <param name="Sign">Enabled to Sign.</param>
        /// <param name="Viewer">Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal .</param>
        /// <param name="Protocol">Enabled to Public Amministration (PA) Protocol.</param>
        /// <param name="Models">Enabled to Templates.</param>
        /// <param name="Domain">Domain.</param>
        /// <param name="OutState">Out Status.</param>
        /// <param name="MailBody">Email Body.</param>
        /// <param name="Notify">Enabled to Notify.</param>
        /// <param name="MailClient">Mailer client.</param>
        /// <param name="HtmlBody">Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione .</param>
        /// <param name="RespAos">Person in Charge of AOS.</param>
        /// <param name="AssAos">Enabled to Profile Manual Emails.</param>
        /// <param name="CodFis">Fiscal Code.</param>
        /// <param name="Pin">Pin.</param>
        /// <param name="Guest">Guest.</param>
        /// <param name="PasswordChange">Change Password.</param>
        /// <param name="Marking">Imagine for the Digital Signature.</param>
        /// <param name="Type">Type.</param>
        /// <param name="MailOutDefault">Enabled to Profile Manual Outgoing Emails.</param>
        /// <param name="BarcodeAccess">Enabled to Barcode.</param>
        /// <param name="MustChangePassword">Possible values:  0: No  1: Yes  2: YesForChangePasswordNew .</param>
        /// <param name="Lang">Language.</param>
        /// <param name="ProfileDefaultId">Predefined Profile Identifier.</param>
        /// <param name="Ws">Enabled to IX service..</param>
        /// <param name="PswFailCount">Count of the failed attempts to change password.</param>
        /// <param name="PswLastFailDate">Last failed Attempt to change password.</param>
        /// <param name="PswFailIpCaller">Ip Address used by failed change password.</param>
        /// <param name="DisablePswExpired">Disabled Expired Password.</param>
        /// <param name="LockOutDateTimeUtc">User Date Blocked.</param>
        /// <param name="CompleteName">Full Name.</param>
        public UserCompleteDTO(int? User = default(int?), int? Group = default(int?), string Description = default(string), string Email = default(string), string BusinessUnit = default(string), string Password = default(string), string PasswordNew = default(string), int? DefaultType = default(int?), int? Type2 = default(int?), int? Type3 = default(int?), string InternalFax = default(string), DateTime? LastMail = default(DateTime?), int? Category = default(int?), bool? Workflow = default(bool?), string DefaultState = default(string), bool? AddressBook = default(bool?), int? UserState = default(int?), string MailServer = default(string), bool? WebAccess = default(bool?), bool? Upload = default(bool?), bool? Folders = default(bool?), bool? Flow = default(bool?), bool? Sign = default(bool?), int? Viewer = default(int?), bool? Protocol = default(bool?), bool? Models = default(bool?), string Domain = default(string), string OutState = default(string), string MailBody = default(string), bool? Notify = default(bool?), string MailClient = default(string), int? HtmlBody = default(int?), bool? RespAos = default(bool?), bool? AssAos = default(bool?), string CodFis = default(string), string Pin = default(string), bool? Guest = default(bool?), bool? PasswordChange = default(bool?), byte[] Marking = default(byte[]), int? Type = default(int?), bool? MailOutDefault = default(bool?), bool? BarcodeAccess = default(bool?), int? MustChangePassword = default(int?), string Lang = default(string), int? ProfileDefaultId = default(int?), bool? Ws = default(bool?), int? PswFailCount = default(int?), DateTime? PswLastFailDate = default(DateTime?), string PswFailIpCaller = default(string), bool? DisablePswExpired = default(bool?), DateTime? LockOutDateTimeUtc = default(DateTime?), string CompleteName = default(string))
        {
            this.User = User;
            this.Group = Group;
            this.Description = Description;
            this.Email = Email;
            this.BusinessUnit = BusinessUnit;
            this.Password = Password;
            this.PasswordNew = PasswordNew;
            this.DefaultType = DefaultType;
            this.Type2 = Type2;
            this.Type3 = Type3;
            this.InternalFax = InternalFax;
            this.LastMail = LastMail;
            this.Category = Category;
            this.Workflow = Workflow;
            this.DefaultState = DefaultState;
            this.AddressBook = AddressBook;
            this.UserState = UserState;
            this.MailServer = MailServer;
            this.WebAccess = WebAccess;
            this.Upload = Upload;
            this.Folders = Folders;
            this.Flow = Flow;
            this.Sign = Sign;
            this.Viewer = Viewer;
            this.Protocol = Protocol;
            this.Models = Models;
            this.Domain = Domain;
            this.OutState = OutState;
            this.MailBody = MailBody;
            this.Notify = Notify;
            this.MailClient = MailClient;
            this.HtmlBody = HtmlBody;
            this.RespAos = RespAos;
            this.AssAos = AssAos;
            this.CodFis = CodFis;
            this.Pin = Pin;
            this.Guest = Guest;
            this.PasswordChange = PasswordChange;
            this.Marking = Marking;
            this.Type = Type;
            this.MailOutDefault = MailOutDefault;
            this.BarcodeAccess = BarcodeAccess;
            this.MustChangePassword = MustChangePassword;
            this.Lang = Lang;
            this.ProfileDefaultId = ProfileDefaultId;
            this.Ws = Ws;
            this.PswFailCount = PswFailCount;
            this.PswLastFailDate = PswLastFailDate;
            this.PswFailIpCaller = PswFailIpCaller;
            this.DisablePswExpired = DisablePswExpired;
            this.LockOutDateTimeUtc = LockOutDateTimeUtc;
            this.CompleteName = CompleteName;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler 
        /// </summary>
        /// <value>Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler </value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public int? Group { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Business Unit
        /// </summary>
        /// <value>Business Unit</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// New Password
        /// </summary>
        /// <value>New Password</value>
        [DataMember(Name="passwordNew", EmitDefaultValue=false)]
        public string PasswordNew { get; set; }

        /// <summary>
        /// Default Document Type of First Level
        /// </summary>
        /// <value>Default Document Type of First Level</value>
        [DataMember(Name="defaultType", EmitDefaultValue=false)]
        public int? DefaultType { get; set; }

        /// <summary>
        /// Default Document Type of Second Level
        /// </summary>
        /// <value>Default Document Type of Second Level</value>
        [DataMember(Name="type2", EmitDefaultValue=false)]
        public int? Type2 { get; set; }

        /// <summary>
        /// Default Document Type of Third Level
        /// </summary>
        /// <value>Default Document Type of Third Level</value>
        [DataMember(Name="type3", EmitDefaultValue=false)]
        public int? Type3 { get; set; }

        /// <summary>
        /// Personal Fax
        /// </summary>
        /// <value>Personal Fax</value>
        [DataMember(Name="internalFax", EmitDefaultValue=false)]
        public string InternalFax { get; set; }

        /// <summary>
        /// Date of last reading email
        /// </summary>
        /// <value>Date of last reading email</value>
        [DataMember(Name="lastMail", EmitDefaultValue=false)]
        public DateTime? LastMail { get; set; }

        /// <summary>
        /// Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D 
        /// </summary>
        /// <value>Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public int? Category { get; set; }

        /// <summary>
        /// Enabling Workflow Management
        /// </summary>
        /// <value>Enabling Workflow Management</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public bool? Workflow { get; set; }

        /// <summary>
        /// Default Document Status
        /// </summary>
        /// <value>Default Document Status</value>
        [DataMember(Name="defaultState", EmitDefaultValue=false)]
        public string DefaultState { get; set; }

        /// <summary>
        /// Enabling to insert new address book items into profiling
        /// </summary>
        /// <value>Enabling to insert new address book items into profiling</value>
        [DataMember(Name="addressBook", EmitDefaultValue=false)]
        public bool? AddressBook { get; set; }

        /// <summary>
        /// Possible values:  0: NonAttivo  1: Attivo  2: Nascosto 
        /// </summary>
        /// <value>Possible values:  0: NonAttivo  1: Attivo  2: Nascosto </value>
        [DataMember(Name="userState", EmitDefaultValue=false)]
        public int? UserState { get; set; }

        /// <summary>
        /// Email Server
        /// </summary>
        /// <value>Email Server</value>
        [DataMember(Name="mailServer", EmitDefaultValue=false)]
        public string MailServer { get; set; }

        /// <summary>
        /// Access via Web
        /// </summary>
        /// <value>Access via Web</value>
        [DataMember(Name="webAccess", EmitDefaultValue=false)]
        public bool? WebAccess { get; set; }

        /// <summary>
        /// Enabled to Import
        /// </summary>
        /// <value>Enabled to Import</value>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Enabled to OCR
        /// </summary>
        /// <value>Enabled to OCR</value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public bool? Folders { get; set; }

        /// <summary>
        /// Enabled to Workflow
        /// </summary>
        /// <value>Enabled to Workflow</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public bool? Flow { get; set; }

        /// <summary>
        /// Enabled to Sign
        /// </summary>
        /// <value>Enabled to Sign</value>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public bool? Sign { get; set; }

        /// <summary>
        /// Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal 
        /// </summary>
        /// <value>Possible values:  0: Standard  1: Lite  2: Comunicazioni  3: Portal </value>
        [DataMember(Name="viewer", EmitDefaultValue=false)]
        public int? Viewer { get; set; }

        /// <summary>
        /// Enabled to Public Amministration (PA) Protocol
        /// </summary>
        /// <value>Enabled to Public Amministration (PA) Protocol</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public bool? Protocol { get; set; }

        /// <summary>
        /// Enabled to Templates
        /// </summary>
        /// <value>Enabled to Templates</value>
        [DataMember(Name="models", EmitDefaultValue=false)]
        public bool? Models { get; set; }

        /// <summary>
        /// Domain
        /// </summary>
        /// <value>Domain</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Out Status
        /// </summary>
        /// <value>Out Status</value>
        [DataMember(Name="outState", EmitDefaultValue=false)]
        public string OutState { get; set; }

        /// <summary>
        /// Email Body
        /// </summary>
        /// <value>Email Body</value>
        [DataMember(Name="mailBody", EmitDefaultValue=false)]
        public string MailBody { get; set; }

        /// <summary>
        /// Enabled to Notify
        /// </summary>
        /// <value>Enabled to Notify</value>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public bool? Notify { get; set; }

        /// <summary>
        /// Mailer client
        /// </summary>
        /// <value>Mailer client</value>
        [DataMember(Name="mailClient", EmitDefaultValue=false)]
        public string MailClient { get; set; }

        /// <summary>
        /// Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione 
        /// </summary>
        /// <value>Possible values:  0: Disabilitato  1: SoloSpedizione  2: SoloRicezione  3: SpedizioneRicezione </value>
        [DataMember(Name="htmlBody", EmitDefaultValue=false)]
        public int? HtmlBody { get; set; }

        /// <summary>
        /// Person in Charge of AOS
        /// </summary>
        /// <value>Person in Charge of AOS</value>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public bool? RespAos { get; set; }

        /// <summary>
        /// Enabled to Profile Manual Emails
        /// </summary>
        /// <value>Enabled to Profile Manual Emails</value>
        [DataMember(Name="assAos", EmitDefaultValue=false)]
        public bool? AssAos { get; set; }

        /// <summary>
        /// Fiscal Code
        /// </summary>
        /// <value>Fiscal Code</value>
        [DataMember(Name="codFis", EmitDefaultValue=false)]
        public string CodFis { get; set; }

        /// <summary>
        /// Pin
        /// </summary>
        /// <value>Pin</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Guest
        /// </summary>
        /// <value>Guest</value>
        [DataMember(Name="guest", EmitDefaultValue=false)]
        public bool? Guest { get; set; }

        /// <summary>
        /// Change Password
        /// </summary>
        /// <value>Change Password</value>
        [DataMember(Name="passwordChange", EmitDefaultValue=false)]
        public bool? PasswordChange { get; set; }

        /// <summary>
        /// Imagine for the Digital Signature
        /// </summary>
        /// <value>Imagine for the Digital Signature</value>
        [DataMember(Name="marking", EmitDefaultValue=false)]
        public byte[] Marking { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Enabled to Profile Manual Outgoing Emails
        /// </summary>
        /// <value>Enabled to Profile Manual Outgoing Emails</value>
        [DataMember(Name="mailOutDefault", EmitDefaultValue=false)]
        public bool? MailOutDefault { get; set; }

        /// <summary>
        /// Enabled to Barcode
        /// </summary>
        /// <value>Enabled to Barcode</value>
        [DataMember(Name="barcodeAccess", EmitDefaultValue=false)]
        public bool? BarcodeAccess { get; set; }

        /// <summary>
        /// Possible values:  0: No  1: Yes  2: YesForChangePasswordNew 
        /// </summary>
        /// <value>Possible values:  0: No  1: Yes  2: YesForChangePasswordNew </value>
        [DataMember(Name="mustChangePassword", EmitDefaultValue=false)]
        public int? MustChangePassword { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Predefined Profile Identifier
        /// </summary>
        /// <value>Predefined Profile Identifier</value>
        [DataMember(Name="profileDefault_Id", EmitDefaultValue=false)]
        public int? ProfileDefaultId { get; set; }

        /// <summary>
        /// Enabled to IX service.
        /// </summary>
        /// <value>Enabled to IX service.</value>
        [DataMember(Name="ws", EmitDefaultValue=false)]
        public bool? Ws { get; set; }

        /// <summary>
        /// Count of the failed attempts to change password
        /// </summary>
        /// <value>Count of the failed attempts to change password</value>
        [DataMember(Name="pswFailCount", EmitDefaultValue=false)]
        public int? PswFailCount { get; set; }

        /// <summary>
        /// Last failed Attempt to change password
        /// </summary>
        /// <value>Last failed Attempt to change password</value>
        [DataMember(Name="pswLastFailDate", EmitDefaultValue=false)]
        public DateTime? PswLastFailDate { get; set; }

        /// <summary>
        /// Ip Address used by failed change password
        /// </summary>
        /// <value>Ip Address used by failed change password</value>
        [DataMember(Name="pswFailIpCaller", EmitDefaultValue=false)]
        public string PswFailIpCaller { get; set; }

        /// <summary>
        /// Disabled Expired Password
        /// </summary>
        /// <value>Disabled Expired Password</value>
        [DataMember(Name="disablePswExpired", EmitDefaultValue=false)]
        public bool? DisablePswExpired { get; set; }

        /// <summary>
        /// User Date Blocked
        /// </summary>
        /// <value>User Date Blocked</value>
        [DataMember(Name="lockOutDateTimeUtc", EmitDefaultValue=false)]
        public DateTime? LockOutDateTimeUtc { get; set; }

        /// <summary>
        /// Full Name
        /// </summary>
        /// <value>Full Name</value>
        [DataMember(Name="completeName", EmitDefaultValue=false)]
        public string CompleteName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCompleteDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordNew: ").Append(PasswordNew).Append("\n");
            sb.Append("  DefaultType: ").Append(DefaultType).Append("\n");
            sb.Append("  Type2: ").Append(Type2).Append("\n");
            sb.Append("  Type3: ").Append(Type3).Append("\n");
            sb.Append("  InternalFax: ").Append(InternalFax).Append("\n");
            sb.Append("  LastMail: ").Append(LastMail).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  DefaultState: ").Append(DefaultState).Append("\n");
            sb.Append("  AddressBook: ").Append(AddressBook).Append("\n");
            sb.Append("  UserState: ").Append(UserState).Append("\n");
            sb.Append("  MailServer: ").Append(MailServer).Append("\n");
            sb.Append("  WebAccess: ").Append(WebAccess).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Viewer: ").Append(Viewer).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  OutState: ").Append(OutState).Append("\n");
            sb.Append("  MailBody: ").Append(MailBody).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  MailClient: ").Append(MailClient).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  AssAos: ").Append(AssAos).Append("\n");
            sb.Append("  CodFis: ").Append(CodFis).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  PasswordChange: ").Append(PasswordChange).Append("\n");
            sb.Append("  Marking: ").Append(Marking).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MailOutDefault: ").Append(MailOutDefault).Append("\n");
            sb.Append("  BarcodeAccess: ").Append(BarcodeAccess).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  ProfileDefaultId: ").Append(ProfileDefaultId).Append("\n");
            sb.Append("  Ws: ").Append(Ws).Append("\n");
            sb.Append("  PswFailCount: ").Append(PswFailCount).Append("\n");
            sb.Append("  PswLastFailDate: ").Append(PswLastFailDate).Append("\n");
            sb.Append("  PswFailIpCaller: ").Append(PswFailIpCaller).Append("\n");
            sb.Append("  DisablePswExpired: ").Append(DisablePswExpired).Append("\n");
            sb.Append("  LockOutDateTimeUtc: ").Append(LockOutDateTimeUtc).Append("\n");
            sb.Append("  CompleteName: ").Append(CompleteName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserCompleteDTO);
        }

        /// <summary>
        /// Returns true if UserCompleteDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserCompleteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCompleteDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PasswordNew == input.PasswordNew ||
                    (this.PasswordNew != null &&
                    this.PasswordNew.Equals(input.PasswordNew))
                ) && 
                (
                    this.DefaultType == input.DefaultType ||
                    (this.DefaultType != null &&
                    this.DefaultType.Equals(input.DefaultType))
                ) && 
                (
                    this.Type2 == input.Type2 ||
                    (this.Type2 != null &&
                    this.Type2.Equals(input.Type2))
                ) && 
                (
                    this.Type3 == input.Type3 ||
                    (this.Type3 != null &&
                    this.Type3.Equals(input.Type3))
                ) && 
                (
                    this.InternalFax == input.InternalFax ||
                    (this.InternalFax != null &&
                    this.InternalFax.Equals(input.InternalFax))
                ) && 
                (
                    this.LastMail == input.LastMail ||
                    (this.LastMail != null &&
                    this.LastMail.Equals(input.LastMail))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                ) && 
                (
                    this.DefaultState == input.DefaultState ||
                    (this.DefaultState != null &&
                    this.DefaultState.Equals(input.DefaultState))
                ) && 
                (
                    this.AddressBook == input.AddressBook ||
                    (this.AddressBook != null &&
                    this.AddressBook.Equals(input.AddressBook))
                ) && 
                (
                    this.UserState == input.UserState ||
                    (this.UserState != null &&
                    this.UserState.Equals(input.UserState))
                ) && 
                (
                    this.MailServer == input.MailServer ||
                    (this.MailServer != null &&
                    this.MailServer.Equals(input.MailServer))
                ) && 
                (
                    this.WebAccess == input.WebAccess ||
                    (this.WebAccess != null &&
                    this.WebAccess.Equals(input.WebAccess))
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Folders == input.Folders ||
                    (this.Folders != null &&
                    this.Folders.Equals(input.Folders))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                ) && 
                (
                    this.Viewer == input.Viewer ||
                    (this.Viewer != null &&
                    this.Viewer.Equals(input.Viewer))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Models == input.Models ||
                    (this.Models != null &&
                    this.Models.Equals(input.Models))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.OutState == input.OutState ||
                    (this.OutState != null &&
                    this.OutState.Equals(input.OutState))
                ) && 
                (
                    this.MailBody == input.MailBody ||
                    (this.MailBody != null &&
                    this.MailBody.Equals(input.MailBody))
                ) && 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                ) && 
                (
                    this.MailClient == input.MailClient ||
                    (this.MailClient != null &&
                    this.MailClient.Equals(input.MailClient))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.RespAos == input.RespAos ||
                    (this.RespAos != null &&
                    this.RespAos.Equals(input.RespAos))
                ) && 
                (
                    this.AssAos == input.AssAos ||
                    (this.AssAos != null &&
                    this.AssAos.Equals(input.AssAos))
                ) && 
                (
                    this.CodFis == input.CodFis ||
                    (this.CodFis != null &&
                    this.CodFis.Equals(input.CodFis))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.Guest == input.Guest ||
                    (this.Guest != null &&
                    this.Guest.Equals(input.Guest))
                ) && 
                (
                    this.PasswordChange == input.PasswordChange ||
                    (this.PasswordChange != null &&
                    this.PasswordChange.Equals(input.PasswordChange))
                ) && 
                (
                    this.Marking == input.Marking ||
                    (this.Marking != null &&
                    this.Marking.Equals(input.Marking))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MailOutDefault == input.MailOutDefault ||
                    (this.MailOutDefault != null &&
                    this.MailOutDefault.Equals(input.MailOutDefault))
                ) && 
                (
                    this.BarcodeAccess == input.BarcodeAccess ||
                    (this.BarcodeAccess != null &&
                    this.BarcodeAccess.Equals(input.BarcodeAccess))
                ) && 
                (
                    this.MustChangePassword == input.MustChangePassword ||
                    (this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(input.MustChangePassword))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.ProfileDefaultId == input.ProfileDefaultId ||
                    (this.ProfileDefaultId != null &&
                    this.ProfileDefaultId.Equals(input.ProfileDefaultId))
                ) && 
                (
                    this.Ws == input.Ws ||
                    (this.Ws != null &&
                    this.Ws.Equals(input.Ws))
                ) && 
                (
                    this.PswFailCount == input.PswFailCount ||
                    (this.PswFailCount != null &&
                    this.PswFailCount.Equals(input.PswFailCount))
                ) && 
                (
                    this.PswLastFailDate == input.PswLastFailDate ||
                    (this.PswLastFailDate != null &&
                    this.PswLastFailDate.Equals(input.PswLastFailDate))
                ) && 
                (
                    this.PswFailIpCaller == input.PswFailIpCaller ||
                    (this.PswFailIpCaller != null &&
                    this.PswFailIpCaller.Equals(input.PswFailIpCaller))
                ) && 
                (
                    this.DisablePswExpired == input.DisablePswExpired ||
                    (this.DisablePswExpired != null &&
                    this.DisablePswExpired.Equals(input.DisablePswExpired))
                ) && 
                (
                    this.LockOutDateTimeUtc == input.LockOutDateTimeUtc ||
                    (this.LockOutDateTimeUtc != null &&
                    this.LockOutDateTimeUtc.Equals(input.LockOutDateTimeUtc))
                ) && 
                (
                    this.CompleteName == input.CompleteName ||
                    (this.CompleteName != null &&
                    this.CompleteName.Equals(input.CompleteName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PasswordNew != null)
                    hashCode = hashCode * 59 + this.PasswordNew.GetHashCode();
                if (this.DefaultType != null)
                    hashCode = hashCode * 59 + this.DefaultType.GetHashCode();
                if (this.Type2 != null)
                    hashCode = hashCode * 59 + this.Type2.GetHashCode();
                if (this.Type3 != null)
                    hashCode = hashCode * 59 + this.Type3.GetHashCode();
                if (this.InternalFax != null)
                    hashCode = hashCode * 59 + this.InternalFax.GetHashCode();
                if (this.LastMail != null)
                    hashCode = hashCode * 59 + this.LastMail.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                if (this.DefaultState != null)
                    hashCode = hashCode * 59 + this.DefaultState.GetHashCode();
                if (this.AddressBook != null)
                    hashCode = hashCode * 59 + this.AddressBook.GetHashCode();
                if (this.UserState != null)
                    hashCode = hashCode * 59 + this.UserState.GetHashCode();
                if (this.MailServer != null)
                    hashCode = hashCode * 59 + this.MailServer.GetHashCode();
                if (this.WebAccess != null)
                    hashCode = hashCode * 59 + this.WebAccess.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Folders != null)
                    hashCode = hashCode * 59 + this.Folders.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                if (this.Viewer != null)
                    hashCode = hashCode * 59 + this.Viewer.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Models != null)
                    hashCode = hashCode * 59 + this.Models.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.OutState != null)
                    hashCode = hashCode * 59 + this.OutState.GetHashCode();
                if (this.MailBody != null)
                    hashCode = hashCode * 59 + this.MailBody.GetHashCode();
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                if (this.MailClient != null)
                    hashCode = hashCode * 59 + this.MailClient.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.RespAos != null)
                    hashCode = hashCode * 59 + this.RespAos.GetHashCode();
                if (this.AssAos != null)
                    hashCode = hashCode * 59 + this.AssAos.GetHashCode();
                if (this.CodFis != null)
                    hashCode = hashCode * 59 + this.CodFis.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.Guest != null)
                    hashCode = hashCode * 59 + this.Guest.GetHashCode();
                if (this.PasswordChange != null)
                    hashCode = hashCode * 59 + this.PasswordChange.GetHashCode();
                if (this.Marking != null)
                    hashCode = hashCode * 59 + this.Marking.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MailOutDefault != null)
                    hashCode = hashCode * 59 + this.MailOutDefault.GetHashCode();
                if (this.BarcodeAccess != null)
                    hashCode = hashCode * 59 + this.BarcodeAccess.GetHashCode();
                if (this.MustChangePassword != null)
                    hashCode = hashCode * 59 + this.MustChangePassword.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.ProfileDefaultId != null)
                    hashCode = hashCode * 59 + this.ProfileDefaultId.GetHashCode();
                if (this.Ws != null)
                    hashCode = hashCode * 59 + this.Ws.GetHashCode();
                if (this.PswFailCount != null)
                    hashCode = hashCode * 59 + this.PswFailCount.GetHashCode();
                if (this.PswLastFailDate != null)
                    hashCode = hashCode * 59 + this.PswLastFailDate.GetHashCode();
                if (this.PswFailIpCaller != null)
                    hashCode = hashCode * 59 + this.PswFailIpCaller.GetHashCode();
                if (this.DisablePswExpired != null)
                    hashCode = hashCode * 59 + this.DisablePswExpired.GetHashCode();
                if (this.LockOutDateTimeUtc != null)
                    hashCode = hashCode * 59 + this.LockOutDateTimeUtc.GetHashCode();
                if (this.CompleteName != null)
                    hashCode = hashCode * 59 + this.CompleteName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
