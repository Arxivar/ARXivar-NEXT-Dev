/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Oggetto per tenere il risultato della coda
    /// </summary>
    [DataContract]
    public partial class JobResultDto :  IEquatable<JobResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobResultDto" /> class.
        /// </summary>
        /// <param name="QueueJob">Queue Job.</param>
        /// <param name="JobError">JobError.</param>
        /// <param name="KeyValueParameters">KeyValueParameters.</param>
        /// <param name="IsError">IsError.</param>
        public JobResultDto(QueueJobDto QueueJob = default(QueueJobDto), JobErrorDto JobError = default(JobErrorDto), List<KeyValueParameterDto> KeyValueParameters = default(List<KeyValueParameterDto>), bool? IsError = default(bool?))
        {
            this.QueueJob = QueueJob;
            this.JobError = JobError;
            this.KeyValueParameters = KeyValueParameters;
            this.IsError = IsError;
        }
        
        /// <summary>
        /// Queue Job
        /// </summary>
        /// <value>Queue Job</value>
        [DataMember(Name="queueJob", EmitDefaultValue=false)]
        public QueueJobDto QueueJob { get; set; }

        /// <summary>
        /// Gets or Sets JobError
        /// </summary>
        [DataMember(Name="jobError", EmitDefaultValue=false)]
        public JobErrorDto JobError { get; set; }

        /// <summary>
        /// Gets or Sets KeyValueParameters
        /// </summary>
        [DataMember(Name="keyValueParameters", EmitDefaultValue=false)]
        public List<KeyValueParameterDto> KeyValueParameters { get; set; }

        /// <summary>
        /// Gets or Sets IsError
        /// </summary>
        [DataMember(Name="isError", EmitDefaultValue=false)]
        public bool? IsError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobResultDto {\n");
            sb.Append("  QueueJob: ").Append(QueueJob).Append("\n");
            sb.Append("  JobError: ").Append(JobError).Append("\n");
            sb.Append("  KeyValueParameters: ").Append(KeyValueParameters).Append("\n");
            sb.Append("  IsError: ").Append(IsError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobResultDto);
        }

        /// <summary>
        /// Returns true if JobResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of JobResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueJob == input.QueueJob ||
                    (this.QueueJob != null &&
                    this.QueueJob.Equals(input.QueueJob))
                ) && 
                (
                    this.JobError == input.JobError ||
                    (this.JobError != null &&
                    this.JobError.Equals(input.JobError))
                ) && 
                (
                    this.KeyValueParameters == input.KeyValueParameters ||
                    this.KeyValueParameters != null &&
                    this.KeyValueParameters.SequenceEqual(input.KeyValueParameters)
                ) && 
                (
                    this.IsError == input.IsError ||
                    (this.IsError != null &&
                    this.IsError.Equals(input.IsError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueJob != null)
                    hashCode = hashCode * 59 + this.QueueJob.GetHashCode();
                if (this.JobError != null)
                    hashCode = hashCode * 59 + this.JobError.GetHashCode();
                if (this.KeyValueParameters != null)
                    hashCode = hashCode * 59 + this.KeyValueParameters.GetHashCode();
                if (this.IsError != null)
                    hashCode = hashCode * 59 + this.IsError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
