/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RelationNodeDTO
    /// </summary>
    [DataContract]
    public partial class RelationNodeDTO :  IEquatable<RelationNodeDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationNodeDTO" /> class.
        /// </summary>
        /// <param name="DocNumber">DocNumber.</param>
        /// <param name="DocumentType">DocumentType.</param>
        /// <param name="Description">Description.</param>
        /// <param name="IsGroup">IsGroup.</param>
        /// <param name="AccessDenied">AccessDenied.</param>
        /// <param name="Childs">Childs.</param>
        public RelationNodeDTO(int? DocNumber = null, int? DocumentType = null, string Description = null, bool? IsGroup = null, bool? AccessDenied = null, List<RelationNodeDTO> Childs = null)
        {
            this.DocNumber = DocNumber;
            this.DocumentType = DocumentType;
            this.Description = Description;
            this.IsGroup = IsGroup;
            this.AccessDenied = AccessDenied;
            this.Childs = Childs;
        }
        
        /// <summary>
        /// Gets or Sets DocNumber
        /// </summary>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }
        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public int? DocumentType { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup", EmitDefaultValue=false)]
        public bool? IsGroup { get; set; }
        /// <summary>
        /// Gets or Sets AccessDenied
        /// </summary>
        [DataMember(Name="accessDenied", EmitDefaultValue=false)]
        public bool? AccessDenied { get; set; }
        /// <summary>
        /// Gets or Sets Childs
        /// </summary>
        [DataMember(Name="childs", EmitDefaultValue=false)]
        public List<RelationNodeDTO> Childs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelationNodeDTO {\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  AccessDenied: ").Append(AccessDenied).Append("\n");
            sb.Append("  Childs: ").Append(Childs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RelationNodeDTO);
        }

        /// <summary>
        /// Returns true if RelationNodeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of RelationNodeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationNodeDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocNumber == other.DocNumber ||
                    this.DocNumber != null &&
                    this.DocNumber.Equals(other.DocNumber)
                ) && 
                (
                    this.DocumentType == other.DocumentType ||
                    this.DocumentType != null &&
                    this.DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IsGroup == other.IsGroup ||
                    this.IsGroup != null &&
                    this.IsGroup.Equals(other.IsGroup)
                ) && 
                (
                    this.AccessDenied == other.AccessDenied ||
                    this.AccessDenied != null &&
                    this.AccessDenied.Equals(other.AccessDenied)
                ) && 
                (
                    this.Childs == other.Childs ||
                    this.Childs != null &&
                    this.Childs.SequenceEqual(other.Childs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocNumber != null)
                    hash = hash * 59 + this.DocNumber.GetHashCode();
                if (this.DocumentType != null)
                    hash = hash * 59 + this.DocumentType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IsGroup != null)
                    hash = hash * 59 + this.IsGroup.GetHashCode();
                if (this.AccessDenied != null)
                    hash = hash * 59 + this.AccessDenied.GetHashCode();
                if (this.Childs != null)
                    hash = hash * 59 + this.Childs.GetHashCode();
                return hash;
            }
        }
    }

}
