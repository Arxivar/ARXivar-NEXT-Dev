/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FolderCompositionRule
    /// </summary>
    [DataContract]
    public partial class FolderCompositionRule :  IEquatable<FolderCompositionRule>
    {
        /// <summary>
        /// Gets or Sets ParseMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParseModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum ByPosition for "ByPosition"
            /// </summary>
            [EnumMember(Value = "ByPosition")]
            ByPosition,
            
            /// <summary>
            /// Enum BySeparator for "BySeparator"
            /// </summary>
            [EnumMember(Value = "BySeparator")]
            BySeparator
        }

        /// <summary>
        /// Gets or Sets ParseMode
        /// </summary>
        [DataMember(Name="parseMode", EmitDefaultValue=false)]
        public ParseModeEnum? ParseMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderCompositionRule" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="ParseMode">ParseMode.</param>
        /// <param name="Character">Character.</param>
        /// <param name="CreationDateTime">CreationDateTime.</param>
        /// <param name="CompositionRuleDetails">CompositionRuleDetails.</param>
        public FolderCompositionRule(int? Id = null, int? FolderId = null, int? UserId = null, ParseModeEnum? ParseMode = null, string Character = null, DateTime? CreationDateTime = null, List<FolderCompositionRuleDetail> CompositionRuleDetails = null)
        {
            this.Id = Id;
            this.FolderId = FolderId;
            this.UserId = UserId;
            this.ParseMode = ParseMode;
            this.Character = Character;
            this.CreationDateTime = CreationDateTime;
            this.CompositionRuleDetails = CompositionRuleDetails;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Character
        /// </summary>
        [DataMember(Name="character", EmitDefaultValue=false)]
        public string Character { get; set; }
        /// <summary>
        /// Gets or Sets CreationDateTime
        /// </summary>
        [DataMember(Name="creationDateTime", EmitDefaultValue=false)]
        public DateTime? CreationDateTime { get; set; }
        /// <summary>
        /// Gets or Sets CompositionRuleDetails
        /// </summary>
        [DataMember(Name="compositionRuleDetails", EmitDefaultValue=false)]
        public List<FolderCompositionRuleDetail> CompositionRuleDetails { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderCompositionRule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ParseMode: ").Append(ParseMode).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  CompositionRuleDetails: ").Append(CompositionRuleDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderCompositionRule);
        }

        /// <summary>
        /// Returns true if FolderCompositionRule instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderCompositionRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderCompositionRule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.FolderId == other.FolderId ||
                    this.FolderId != null &&
                    this.FolderId.Equals(other.FolderId)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.ParseMode == other.ParseMode ||
                    this.ParseMode != null &&
                    this.ParseMode.Equals(other.ParseMode)
                ) && 
                (
                    this.Character == other.Character ||
                    this.Character != null &&
                    this.Character.Equals(other.Character)
                ) && 
                (
                    this.CreationDateTime == other.CreationDateTime ||
                    this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(other.CreationDateTime)
                ) && 
                (
                    this.CompositionRuleDetails == other.CompositionRuleDetails ||
                    this.CompositionRuleDetails != null &&
                    this.CompositionRuleDetails.SequenceEqual(other.CompositionRuleDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.FolderId != null)
                    hash = hash * 59 + this.FolderId.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.ParseMode != null)
                    hash = hash * 59 + this.ParseMode.GetHashCode();
                if (this.Character != null)
                    hash = hash * 59 + this.Character.GetHashCode();
                if (this.CreationDateTime != null)
                    hash = hash * 59 + this.CreationDateTime.GetHashCode();
                if (this.CompositionRuleDetails != null)
                    hash = hash * 59 + this.CompositionRuleDetails.GetHashCode();
                return hash;
            }
        }
    }

}
