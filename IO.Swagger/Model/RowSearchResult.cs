/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RowSearchResult
    /// </summary>
    [DataContract]
    public partial class RowSearchResult :  IEquatable<RowSearchResult>
    {
        /// <summary>
        /// Gets or Sets RowSerchResultContext
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RowSerchResultContextEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Profiles for "Profiles"
            /// </summary>
            [EnumMember(Value = "Profiles")]
            Profiles,
            
            /// <summary>
            /// Enum InternalAttachments for "InternalAttachments"
            /// </summary>
            [EnumMember(Value = "InternalAttachments")]
            InternalAttachments,
            
            /// <summary>
            /// Enum ExternalAttachments for "ExternalAttachments"
            /// </summary>
            [EnumMember(Value = "ExternalAttachments")]
            ExternalAttachments,
            
            /// <summary>
            /// Enum AddressBook for "AddressBook"
            /// </summary>
            [EnumMember(Value = "AddressBook")]
            AddressBook,
            
            /// <summary>
            /// Enum CheckInOut for "CheckInOut"
            /// </summary>
            [EnumMember(Value = "CheckInOut")]
            CheckInOut,
            
            /// <summary>
            /// Enum TaskWork for "TaskWork"
            /// </summary>
            [EnumMember(Value = "TaskWork")]
            TaskWork
        }

        /// <summary>
        /// Gets or Sets RowSerchResultContext
        /// </summary>
        [DataMember(Name="rowSerchResultContext", EmitDefaultValue=false)]
        public RowSerchResultContextEnum? RowSerchResultContext { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RowSearchResult" /> class.
        /// </summary>
        /// <param name="RowSerchResultContext">RowSerchResultContext.</param>
        /// <param name="Columns">Columns.</param>
        public RowSearchResult(RowSerchResultContextEnum? RowSerchResultContext = null, List<ColumnSearchResult> Columns = null)
        {
            this.RowSerchResultContext = RowSerchResultContext;
            this.Columns = Columns;
        }
        
        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<ColumnSearchResult> Columns { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RowSearchResult {\n");
            sb.Append("  RowSerchResultContext: ").Append(RowSerchResultContext).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RowSearchResult);
        }

        /// <summary>
        /// Returns true if RowSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of RowSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RowSearchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RowSerchResultContext == other.RowSerchResultContext ||
                    this.RowSerchResultContext != null &&
                    this.RowSerchResultContext.Equals(other.RowSerchResultContext)
                ) && 
                (
                    this.Columns == other.Columns ||
                    this.Columns != null &&
                    this.Columns.SequenceEqual(other.Columns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RowSerchResultContext != null)
                    hash = hash * 59 + this.RowSerchResultContext.GetHashCode();
                if (this.Columns != null)
                    hash = hash * 59 + this.Columns.GetHashCode();
                return hash;
            }
        }
    }

}
