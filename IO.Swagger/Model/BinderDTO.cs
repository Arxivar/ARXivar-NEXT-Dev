/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BinderDTO
    /// </summary>
    [DataContract]
    public partial class BinderDTO :  IEquatable<BinderDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinderDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="BinderTypeId">BinderTypeId.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="BinderName">BinderName.</param>
        /// <param name="Code">Code.</param>
        /// <param name="EndDate">EndDate.</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="BinderState">BinderState.</param>
        /// <param name="User">User.</param>
        /// <param name="UserCompleteName">UserCompleteName.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="BinderTypeDescription">BinderTypeDescription.</param>
        /// <param name="Fields">Fields.</param>
        public BinderDTO(int? Id = null, int? BinderTypeId = null, int? FolderId = null, string BinderName = null, string Code = null, DateTime? EndDate = null, DateTime? StartDate = null, int? BinderState = null, int? User = null, string UserCompleteName = null, string ExternalId = null, string BinderTypeDescription = null, List<FieldBaseDTO> Fields = null)
        {
            this.Id = Id;
            this.BinderTypeId = BinderTypeId;
            this.FolderId = FolderId;
            this.BinderName = BinderName;
            this.Code = Code;
            this.EndDate = EndDate;
            this.StartDate = StartDate;
            this.BinderState = BinderState;
            this.User = User;
            this.UserCompleteName = UserCompleteName;
            this.ExternalId = ExternalId;
            this.BinderTypeDescription = BinderTypeDescription;
            this.Fields = Fields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets BinderTypeId
        /// </summary>
        [DataMember(Name="binderTypeId", EmitDefaultValue=false)]
        public int? BinderTypeId { get; set; }
        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }
        /// <summary>
        /// Gets or Sets BinderName
        /// </summary>
        [DataMember(Name="binderName", EmitDefaultValue=false)]
        public string BinderName { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Gets or Sets BinderState
        /// </summary>
        [DataMember(Name="binderState", EmitDefaultValue=false)]
        public int? BinderState { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets UserCompleteName
        /// </summary>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets BinderTypeDescription
        /// </summary>
        [DataMember(Name="binderTypeDescription", EmitDefaultValue=false)]
        public string BinderTypeDescription { get; set; }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FieldBaseDTO> Fields { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinderDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BinderTypeId: ").Append(BinderTypeId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  BinderName: ").Append(BinderName).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  BinderState: ").Append(BinderState).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BinderTypeDescription: ").Append(BinderTypeDescription).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BinderDTO);
        }

        /// <summary>
        /// Returns true if BinderDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of BinderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinderDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BinderTypeId == other.BinderTypeId ||
                    this.BinderTypeId != null &&
                    this.BinderTypeId.Equals(other.BinderTypeId)
                ) && 
                (
                    this.FolderId == other.FolderId ||
                    this.FolderId != null &&
                    this.FolderId.Equals(other.FolderId)
                ) && 
                (
                    this.BinderName == other.BinderName ||
                    this.BinderName != null &&
                    this.BinderName.Equals(other.BinderName)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.BinderState == other.BinderState ||
                    this.BinderState != null &&
                    this.BinderState.Equals(other.BinderState)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.UserCompleteName == other.UserCompleteName ||
                    this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(other.UserCompleteName)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.BinderTypeDescription == other.BinderTypeDescription ||
                    this.BinderTypeDescription != null &&
                    this.BinderTypeDescription.Equals(other.BinderTypeDescription)
                ) && 
                (
                    this.Fields == other.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(other.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BinderTypeId != null)
                    hash = hash * 59 + this.BinderTypeId.GetHashCode();
                if (this.FolderId != null)
                    hash = hash * 59 + this.FolderId.GetHashCode();
                if (this.BinderName != null)
                    hash = hash * 59 + this.BinderName.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.BinderState != null)
                    hash = hash * 59 + this.BinderState.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.UserCompleteName != null)
                    hash = hash * 59 + this.UserCompleteName.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.BinderTypeDescription != null)
                    hash = hash * 59 + this.BinderTypeDescription.GetHashCode();
                if (this.Fields != null)
                    hash = hash * 59 + this.Fields.GetHashCode();
                return hash;
            }
        }
    }

}
