/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of binder
    /// </summary>
    [DataContract]
    public partial class BinderDTO :  IEquatable<BinderDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinderDTO" /> class.
        /// </summary>
        /// <param name="Id">Identifier.</param>
        /// <param name="BinderTypeId">Type Identifier.</param>
        /// <param name="FolderId">Folder Identifier.</param>
        /// <param name="BinderName">Name.</param>
        /// <param name="Code">Code.</param>
        /// <param name="EndDate">Expiry.</param>
        /// <param name="StartDate">Start Date.</param>
        /// <param name="BinderState">State.</param>
        /// <param name="User">Author Identifier.</param>
        /// <param name="UserCompleteName">Author Name.</param>
        /// <param name="ExternalId">External Identifier.</param>
        /// <param name="BinderTypeDescription">Type Description.</param>
        /// <param name="Fields">Fields.</param>
        public BinderDTO(int? Id = default(int?), int? BinderTypeId = default(int?), int? FolderId = default(int?), string BinderName = default(string), string Code = default(string), DateTime? EndDate = default(DateTime?), DateTime? StartDate = default(DateTime?), int? BinderState = default(int?), int? User = default(int?), string UserCompleteName = default(string), string ExternalId = default(string), string BinderTypeDescription = default(string), List<FieldBaseDTO> Fields = default(List<FieldBaseDTO>))
        {
            this.Id = Id;
            this.BinderTypeId = BinderTypeId;
            this.FolderId = FolderId;
            this.BinderName = BinderName;
            this.Code = Code;
            this.EndDate = EndDate;
            this.StartDate = StartDate;
            this.BinderState = BinderState;
            this.User = User;
            this.UserCompleteName = UserCompleteName;
            this.ExternalId = ExternalId;
            this.BinderTypeDescription = BinderTypeDescription;
            this.Fields = Fields;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Type Identifier
        /// </summary>
        /// <value>Type Identifier</value>
        [DataMember(Name="binderTypeId", EmitDefaultValue=false)]
        public int? BinderTypeId { get; set; }

        /// <summary>
        /// Folder Identifier
        /// </summary>
        /// <value>Folder Identifier</value>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="binderName", EmitDefaultValue=false)]
        public string BinderName { get; set; }

        /// <summary>
        /// Code
        /// </summary>
        /// <value>Code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Expiry
        /// </summary>
        /// <value>Expiry</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Start Date
        /// </summary>
        /// <value>Start Date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="binderState", EmitDefaultValue=false)]
        public int? BinderState { get; set; }

        /// <summary>
        /// Author Identifier
        /// </summary>
        /// <value>Author Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Author Name
        /// </summary>
        /// <value>Author Name</value>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }

        /// <summary>
        /// External Identifier
        /// </summary>
        /// <value>External Identifier</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Type Description
        /// </summary>
        /// <value>Type Description</value>
        [DataMember(Name="binderTypeDescription", EmitDefaultValue=false)]
        public string BinderTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FieldBaseDTO> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinderDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BinderTypeId: ").Append(BinderTypeId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  BinderName: ").Append(BinderName).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  BinderState: ").Append(BinderState).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BinderTypeDescription: ").Append(BinderTypeDescription).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinderDTO);
        }

        /// <summary>
        /// Returns true if BinderDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BinderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinderDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BinderTypeId == input.BinderTypeId ||
                    (this.BinderTypeId != null &&
                    this.BinderTypeId.Equals(input.BinderTypeId))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.BinderName == input.BinderName ||
                    (this.BinderName != null &&
                    this.BinderName.Equals(input.BinderName))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.BinderState == input.BinderState ||
                    (this.BinderState != null &&
                    this.BinderState.Equals(input.BinderState))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserCompleteName == input.UserCompleteName ||
                    (this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(input.UserCompleteName))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.BinderTypeDescription == input.BinderTypeDescription ||
                    (this.BinderTypeDescription != null &&
                    this.BinderTypeDescription.Equals(input.BinderTypeDescription))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BinderTypeId != null)
                    hashCode = hashCode * 59 + this.BinderTypeId.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.BinderName != null)
                    hashCode = hashCode * 59 + this.BinderName.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.BinderState != null)
                    hashCode = hashCode * 59 + this.BinderState.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserCompleteName != null)
                    hashCode = hashCode * 59 + this.UserCompleteName.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.BinderTypeDescription != null)
                    hashCode = hashCode * 59 + this.BinderTypeDescription.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
