/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWorkOperationsDTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkOperationsDTO :  IEquatable<TaskWorkOperationsDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsDTO" /> class.
        /// </summary>
        /// <param name="TaskWorkCommandsOperations">TaskWork commands..</param>
        /// <param name="TaskWorkVariablesOperation">Process variables to set..</param>
        /// <param name="TaskWorkDocumentOperations">Document operations..</param>
        /// <param name="TaskWorkProfessionalRoleOperations">Professional roles..</param>
        /// <param name="TaskWorkOperatingInstructions">Operating Instruction.</param>
        /// <param name="TaskWorkDynamicJobOperation">Dynamic jobs.</param>
        /// <param name="TaskWorkSignOperations">Sign operations.</param>
        /// <param name="CanReAssignTask">Reassign task opertiona.</param>
        public TaskWorkOperationsDTO(List<TaskWorkCommandDTO> TaskWorkCommandsOperations = null, TaskWorkVariableOperationDTO TaskWorkVariablesOperation = null, List<TaskWorkDocumentOperationDTO> TaskWorkDocumentOperations = null, List<ProfessionalRoleOperationDTO> TaskWorkProfessionalRoleOperations = null, List<string> TaskWorkOperatingInstructions = null, List<TaskWorkDynamicJobOperationDTO> TaskWorkDynamicJobOperation = null, List<TaskWorkSignOperationDTO> TaskWorkSignOperations = null, bool? CanReAssignTask = null)
        {
            this.TaskWorkCommandsOperations = TaskWorkCommandsOperations;
            this.TaskWorkVariablesOperation = TaskWorkVariablesOperation;
            this.TaskWorkDocumentOperations = TaskWorkDocumentOperations;
            this.TaskWorkProfessionalRoleOperations = TaskWorkProfessionalRoleOperations;
            this.TaskWorkOperatingInstructions = TaskWorkOperatingInstructions;
            this.TaskWorkDynamicJobOperation = TaskWorkDynamicJobOperation;
            this.TaskWorkSignOperations = TaskWorkSignOperations;
            this.CanReAssignTask = CanReAssignTask;
        }
        
        /// <summary>
        /// TaskWork commands.
        /// </summary>
        /// <value>TaskWork commands.</value>
        [DataMember(Name="taskWorkCommandsOperations", EmitDefaultValue=false)]
        public List<TaskWorkCommandDTO> TaskWorkCommandsOperations { get; set; }
        /// <summary>
        /// Process variables to set.
        /// </summary>
        /// <value>Process variables to set.</value>
        [DataMember(Name="taskWorkVariablesOperation", EmitDefaultValue=false)]
        public TaskWorkVariableOperationDTO TaskWorkVariablesOperation { get; set; }
        /// <summary>
        /// Document operations.
        /// </summary>
        /// <value>Document operations.</value>
        [DataMember(Name="taskWorkDocumentOperations", EmitDefaultValue=false)]
        public List<TaskWorkDocumentOperationDTO> TaskWorkDocumentOperations { get; set; }
        /// <summary>
        /// Professional roles.
        /// </summary>
        /// <value>Professional roles.</value>
        [DataMember(Name="taskWorkProfessionalRoleOperations", EmitDefaultValue=false)]
        public List<ProfessionalRoleOperationDTO> TaskWorkProfessionalRoleOperations { get; set; }
        /// <summary>
        /// Operating Instruction
        /// </summary>
        /// <value>Operating Instruction</value>
        [DataMember(Name="taskWorkOperatingInstructions", EmitDefaultValue=false)]
        public List<string> TaskWorkOperatingInstructions { get; set; }
        /// <summary>
        /// Dynamic jobs
        /// </summary>
        /// <value>Dynamic jobs</value>
        [DataMember(Name="taskWorkDynamicJobOperation", EmitDefaultValue=false)]
        public List<TaskWorkDynamicJobOperationDTO> TaskWorkDynamicJobOperation { get; set; }
        /// <summary>
        /// Sign operations
        /// </summary>
        /// <value>Sign operations</value>
        [DataMember(Name="taskWorkSignOperations", EmitDefaultValue=false)]
        public List<TaskWorkSignOperationDTO> TaskWorkSignOperations { get; set; }
        /// <summary>
        /// Reassign task opertiona
        /// </summary>
        /// <value>Reassign task opertiona</value>
        [DataMember(Name="canReAssignTask", EmitDefaultValue=false)]
        public bool? CanReAssignTask { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkOperationsDTO {\n");
            sb.Append("  TaskWorkCommandsOperations: ").Append(TaskWorkCommandsOperations).Append("\n");
            sb.Append("  TaskWorkVariablesOperation: ").Append(TaskWorkVariablesOperation).Append("\n");
            sb.Append("  TaskWorkDocumentOperations: ").Append(TaskWorkDocumentOperations).Append("\n");
            sb.Append("  TaskWorkProfessionalRoleOperations: ").Append(TaskWorkProfessionalRoleOperations).Append("\n");
            sb.Append("  TaskWorkOperatingInstructions: ").Append(TaskWorkOperatingInstructions).Append("\n");
            sb.Append("  TaskWorkDynamicJobOperation: ").Append(TaskWorkDynamicJobOperation).Append("\n");
            sb.Append("  TaskWorkSignOperations: ").Append(TaskWorkSignOperations).Append("\n");
            sb.Append("  CanReAssignTask: ").Append(CanReAssignTask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskWorkOperationsDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkOperationsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskWorkOperationsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkOperationsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaskWorkCommandsOperations == other.TaskWorkCommandsOperations ||
                    this.TaskWorkCommandsOperations != null &&
                    this.TaskWorkCommandsOperations.SequenceEqual(other.TaskWorkCommandsOperations)
                ) && 
                (
                    this.TaskWorkVariablesOperation == other.TaskWorkVariablesOperation ||
                    this.TaskWorkVariablesOperation != null &&
                    this.TaskWorkVariablesOperation.Equals(other.TaskWorkVariablesOperation)
                ) && 
                (
                    this.TaskWorkDocumentOperations == other.TaskWorkDocumentOperations ||
                    this.TaskWorkDocumentOperations != null &&
                    this.TaskWorkDocumentOperations.SequenceEqual(other.TaskWorkDocumentOperations)
                ) && 
                (
                    this.TaskWorkProfessionalRoleOperations == other.TaskWorkProfessionalRoleOperations ||
                    this.TaskWorkProfessionalRoleOperations != null &&
                    this.TaskWorkProfessionalRoleOperations.SequenceEqual(other.TaskWorkProfessionalRoleOperations)
                ) && 
                (
                    this.TaskWorkOperatingInstructions == other.TaskWorkOperatingInstructions ||
                    this.TaskWorkOperatingInstructions != null &&
                    this.TaskWorkOperatingInstructions.SequenceEqual(other.TaskWorkOperatingInstructions)
                ) && 
                (
                    this.TaskWorkDynamicJobOperation == other.TaskWorkDynamicJobOperation ||
                    this.TaskWorkDynamicJobOperation != null &&
                    this.TaskWorkDynamicJobOperation.SequenceEqual(other.TaskWorkDynamicJobOperation)
                ) && 
                (
                    this.TaskWorkSignOperations == other.TaskWorkSignOperations ||
                    this.TaskWorkSignOperations != null &&
                    this.TaskWorkSignOperations.SequenceEqual(other.TaskWorkSignOperations)
                ) && 
                (
                    this.CanReAssignTask == other.CanReAssignTask ||
                    this.CanReAssignTask != null &&
                    this.CanReAssignTask.Equals(other.CanReAssignTask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaskWorkCommandsOperations != null)
                    hash = hash * 59 + this.TaskWorkCommandsOperations.GetHashCode();
                if (this.TaskWorkVariablesOperation != null)
                    hash = hash * 59 + this.TaskWorkVariablesOperation.GetHashCode();
                if (this.TaskWorkDocumentOperations != null)
                    hash = hash * 59 + this.TaskWorkDocumentOperations.GetHashCode();
                if (this.TaskWorkProfessionalRoleOperations != null)
                    hash = hash * 59 + this.TaskWorkProfessionalRoleOperations.GetHashCode();
                if (this.TaskWorkOperatingInstructions != null)
                    hash = hash * 59 + this.TaskWorkOperatingInstructions.GetHashCode();
                if (this.TaskWorkDynamicJobOperation != null)
                    hash = hash * 59 + this.TaskWorkDynamicJobOperation.GetHashCode();
                if (this.TaskWorkSignOperations != null)
                    hash = hash * 59 + this.TaskWorkSignOperations.GetHashCode();
                if (this.CanReAssignTask != null)
                    hash = hash * 59 + this.CanReAssignTask.GetHashCode();
                return hash;
            }
        }
    }

}
