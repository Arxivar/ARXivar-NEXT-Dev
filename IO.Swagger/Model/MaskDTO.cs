/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MaskDTO
    /// </summary>
    [DataContract]
    public partial class MaskDTO :  IEquatable<MaskDTO>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Nothing for "Nothing"
            /// </summary>
            [EnumMember(Value = "Nothing")]
            Nothing,
            
            /// <summary>
            /// Enum Barcode for "Barcode"
            /// </summary>
            [EnumMember(Value = "Barcode")]
            Barcode,
            
            /// <summary>
            /// Enum Archiviazione for "Archiviazione"
            /// </summary>
            [EnumMember(Value = "Archiviazione")]
            Archiviazione
        }

        /// <summary>
        /// Gets or Sets PaMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum OnlyNever for "OnlyNever"
            /// </summary>
            [EnumMember(Value = "OnlyNever")]
            OnlyNever,
            
            /// <summary>
            /// Enum OnlyOptionally for "OnlyOptionally"
            /// </summary>
            [EnumMember(Value = "OnlyOptionally")]
            OnlyOptionally,
            
            /// <summary>
            /// Enum NeverOrOptionally for "NeverOrOptionally"
            /// </summary>
            [EnumMember(Value = "NeverOrOptionally")]
            NeverOrOptionally,
            
            /// <summary>
            /// Enum OnlyAlways for "OnlyAlways"
            /// </summary>
            [EnumMember(Value = "OnlyAlways")]
            OnlyAlways,
            
            /// <summary>
            /// Enum AlwaysOrNever for "AlwaysOrNever"
            /// </summary>
            [EnumMember(Value = "AlwaysOrNever")]
            AlwaysOrNever,
            
            /// <summary>
            /// Enum AlwaysOrOptionally for "AlwaysOrOptionally"
            /// </summary>
            [EnumMember(Value = "AlwaysOrOptionally")]
            AlwaysOrOptionally,
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All
        }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum UserMask for "UserMask"
            /// </summary>
            [EnumMember(Value = "UserMask")]
            UserMask,
            
            /// <summary>
            /// Enum SystemMask for "SystemMask"
            /// </summary>
            [EnumMember(Value = "SystemMask")]
            SystemMask
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets PaMode
        /// </summary>
        [DataMember(Name="paMode", EmitDefaultValue=false)]
        public PaModeEnum? PaMode { get; set; }
        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaskDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="MaskName">MaskName.</param>
        /// <param name="MaskDescription">MaskDescription.</param>
        /// <param name="PredefinedProfileId">PredefinedProfileId.</param>
        /// <param name="User">User.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="IsRoot">IsRoot.</param>
        /// <param name="Type">Type.</param>
        /// <param name="PaMode">PaMode.</param>
        /// <param name="ShowAdditional">ShowAdditional.</param>
        /// <param name="Kind">Kind.</param>
        /// <param name="ShowGroups">ShowGroups.</param>
        /// <param name="UserCompleteName">UserCompleteName.</param>
        /// <param name="PredefinedProfile">PredefinedProfile.</param>
        /// <param name="MaskDetails">MaskDetails.</param>
        /// <param name="MaskClassOptions">MaskClassOptions.</param>
        public MaskDTO(string Id = null, string MaskName = null, string MaskDescription = null, int? PredefinedProfileId = null, int? User = null, string ExternalId = null, bool? IsRoot = null, TypeEnum? Type = null, PaModeEnum? PaMode = null, bool? ShowAdditional = null, KindEnum? Kind = null, bool? ShowGroups = null, string UserCompleteName = null, PredefinedProfileDTO PredefinedProfile = null, List<MaskDetailDTO> MaskDetails = null, List<MaskClassOptionsDTO> MaskClassOptions = null)
        {
            this.Id = Id;
            this.MaskName = MaskName;
            this.MaskDescription = MaskDescription;
            this.PredefinedProfileId = PredefinedProfileId;
            this.User = User;
            this.ExternalId = ExternalId;
            this.IsRoot = IsRoot;
            this.Type = Type;
            this.PaMode = PaMode;
            this.ShowAdditional = ShowAdditional;
            this.Kind = Kind;
            this.ShowGroups = ShowGroups;
            this.UserCompleteName = UserCompleteName;
            this.PredefinedProfile = PredefinedProfile;
            this.MaskDetails = MaskDetails;
            this.MaskClassOptions = MaskClassOptions;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets MaskName
        /// </summary>
        [DataMember(Name="maskName", EmitDefaultValue=false)]
        public string MaskName { get; set; }
        /// <summary>
        /// Gets or Sets MaskDescription
        /// </summary>
        [DataMember(Name="maskDescription", EmitDefaultValue=false)]
        public string MaskDescription { get; set; }
        /// <summary>
        /// Gets or Sets PredefinedProfileId
        /// </summary>
        [DataMember(Name="predefinedProfileId", EmitDefaultValue=false)]
        public int? PredefinedProfileId { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets IsRoot
        /// </summary>
        [DataMember(Name="isRoot", EmitDefaultValue=false)]
        public bool? IsRoot { get; set; }
        /// <summary>
        /// Gets or Sets ShowAdditional
        /// </summary>
        [DataMember(Name="showAdditional", EmitDefaultValue=false)]
        public bool? ShowAdditional { get; set; }
        /// <summary>
        /// Gets or Sets ShowGroups
        /// </summary>
        [DataMember(Name="showGroups", EmitDefaultValue=false)]
        public bool? ShowGroups { get; set; }
        /// <summary>
        /// Gets or Sets UserCompleteName
        /// </summary>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }
        /// <summary>
        /// Gets or Sets PredefinedProfile
        /// </summary>
        [DataMember(Name="predefinedProfile", EmitDefaultValue=false)]
        public PredefinedProfileDTO PredefinedProfile { get; set; }
        /// <summary>
        /// Gets or Sets MaskDetails
        /// </summary>
        [DataMember(Name="maskDetails", EmitDefaultValue=false)]
        public List<MaskDetailDTO> MaskDetails { get; set; }
        /// <summary>
        /// Gets or Sets MaskClassOptions
        /// </summary>
        [DataMember(Name="maskClassOptions", EmitDefaultValue=false)]
        public List<MaskClassOptionsDTO> MaskClassOptions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaskDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaskName: ").Append(MaskName).Append("\n");
            sb.Append("  MaskDescription: ").Append(MaskDescription).Append("\n");
            sb.Append("  PredefinedProfileId: ").Append(PredefinedProfileId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  IsRoot: ").Append(IsRoot).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PaMode: ").Append(PaMode).Append("\n");
            sb.Append("  ShowAdditional: ").Append(ShowAdditional).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  ShowGroups: ").Append(ShowGroups).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  PredefinedProfile: ").Append(PredefinedProfile).Append("\n");
            sb.Append("  MaskDetails: ").Append(MaskDetails).Append("\n");
            sb.Append("  MaskClassOptions: ").Append(MaskClassOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MaskDTO);
        }

        /// <summary>
        /// Returns true if MaskDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of MaskDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaskDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MaskName == other.MaskName ||
                    this.MaskName != null &&
                    this.MaskName.Equals(other.MaskName)
                ) && 
                (
                    this.MaskDescription == other.MaskDescription ||
                    this.MaskDescription != null &&
                    this.MaskDescription.Equals(other.MaskDescription)
                ) && 
                (
                    this.PredefinedProfileId == other.PredefinedProfileId ||
                    this.PredefinedProfileId != null &&
                    this.PredefinedProfileId.Equals(other.PredefinedProfileId)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.IsRoot == other.IsRoot ||
                    this.IsRoot != null &&
                    this.IsRoot.Equals(other.IsRoot)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.PaMode == other.PaMode ||
                    this.PaMode != null &&
                    this.PaMode.Equals(other.PaMode)
                ) && 
                (
                    this.ShowAdditional == other.ShowAdditional ||
                    this.ShowAdditional != null &&
                    this.ShowAdditional.Equals(other.ShowAdditional)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.ShowGroups == other.ShowGroups ||
                    this.ShowGroups != null &&
                    this.ShowGroups.Equals(other.ShowGroups)
                ) && 
                (
                    this.UserCompleteName == other.UserCompleteName ||
                    this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(other.UserCompleteName)
                ) && 
                (
                    this.PredefinedProfile == other.PredefinedProfile ||
                    this.PredefinedProfile != null &&
                    this.PredefinedProfile.Equals(other.PredefinedProfile)
                ) && 
                (
                    this.MaskDetails == other.MaskDetails ||
                    this.MaskDetails != null &&
                    this.MaskDetails.SequenceEqual(other.MaskDetails)
                ) && 
                (
                    this.MaskClassOptions == other.MaskClassOptions ||
                    this.MaskClassOptions != null &&
                    this.MaskClassOptions.SequenceEqual(other.MaskClassOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MaskName != null)
                    hash = hash * 59 + this.MaskName.GetHashCode();
                if (this.MaskDescription != null)
                    hash = hash * 59 + this.MaskDescription.GetHashCode();
                if (this.PredefinedProfileId != null)
                    hash = hash * 59 + this.PredefinedProfileId.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.IsRoot != null)
                    hash = hash * 59 + this.IsRoot.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.PaMode != null)
                    hash = hash * 59 + this.PaMode.GetHashCode();
                if (this.ShowAdditional != null)
                    hash = hash * 59 + this.ShowAdditional.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.ShowGroups != null)
                    hash = hash * 59 + this.ShowGroups.GetHashCode();
                if (this.UserCompleteName != null)
                    hash = hash * 59 + this.UserCompleteName.GetHashCode();
                if (this.PredefinedProfile != null)
                    hash = hash * 59 + this.PredefinedProfile.GetHashCode();
                if (this.MaskDetails != null)
                    hash = hash * 59 + this.MaskDetails.GetHashCode();
                if (this.MaskClassOptions != null)
                    hash = hash * 59 + this.MaskClassOptions.GetHashCode();
                return hash;
            }
        }
    }

}
