/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Classe che definisce l&#39;esecuzione del riconoscimento ottico dei caratteri (OCR) su un profilo documentale.
    /// </summary>
    [DataContract]
    public partial class DocToOcrDTO :  IEquatable<DocToOcrDTO>
    {
        /// <summary>
        /// Stato dell'esecuzione dell'operazione OCR.
        /// </summary>
        /// <value>Stato dell'esecuzione dell'operazione OCR.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum Failed for "Failed"
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed,
            
            /// <summary>
            /// Enum Scheduled for "Scheduled"
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            Scheduled,
            
            /// <summary>
            /// Enum PendingRev for "Pending_Rev"
            /// </summary>
            [EnumMember(Value = "Pending_Rev")]
            PendingRev,
            
            /// <summary>
            /// Enum FailedRev for "Failed_Rev"
            /// </summary>
            [EnumMember(Value = "Failed_Rev")]
            FailedRev,
            
            /// <summary>
            /// Enum ScheduledRev for "Scheduled_Rev"
            /// </summary>
            [EnumMember(Value = "Scheduled_Rev")]
            ScheduledRev
        }

        /// <summary>
        /// Stato dell'esecuzione dell'operazione OCR.
        /// </summary>
        /// <value>Stato dell'esecuzione dell'operazione OCR.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocToOcrDTO" /> class.
        /// </summary>
        /// <param name="Docnumber">Identificativo del profilo documentale..</param>
        /// <param name="Status">Stato dell&#39;esecuzione dell&#39;operazione OCR..</param>
        /// <param name="Revision">Numero di revisione del profilo documentale..</param>
        /// <param name="OcrDate">Data di schedulazione dell&#39;operazione OCR..</param>
        /// <param name="User">Identificativo dell&#39;utente che sta eseguendo l&#39;operazione..</param>
        /// <param name="Guid">Identificativo dell&#39;operazione OCR..</param>
        /// <param name="NumAttemps">Numero di tentativi fatti per eseguire correttamente l&#39;operazione di riconoscimento..</param>
        /// <param name="ErrorMessage">Messaggio nel caso in cui l&#39;operazione di riconoscimento sia in errore..</param>
        public DocToOcrDTO(int? Docnumber = null, StatusEnum? Status = null, int? Revision = null, DateTime? OcrDate = null, int? User = null, string Guid = null, int? NumAttemps = null, string ErrorMessage = null)
        {
            this.Docnumber = Docnumber;
            this.Status = Status;
            this.Revision = Revision;
            this.OcrDate = OcrDate;
            this.User = User;
            this.Guid = Guid;
            this.NumAttemps = NumAttemps;
            this.ErrorMessage = ErrorMessage;
        }
        
        /// <summary>
        /// Identificativo del profilo documentale.
        /// </summary>
        /// <value>Identificativo del profilo documentale.</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }
        /// <summary>
        /// Numero di revisione del profilo documentale.
        /// </summary>
        /// <value>Numero di revisione del profilo documentale.</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Data di schedulazione dell&#39;operazione OCR.
        /// </summary>
        /// <value>Data di schedulazione dell&#39;operazione OCR.</value>
        [DataMember(Name="ocrDate", EmitDefaultValue=false)]
        public DateTime? OcrDate { get; set; }
        /// <summary>
        /// Identificativo dell&#39;utente che sta eseguendo l&#39;operazione.
        /// </summary>
        /// <value>Identificativo dell&#39;utente che sta eseguendo l&#39;operazione.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Identificativo dell&#39;operazione OCR.
        /// </summary>
        /// <value>Identificativo dell&#39;operazione OCR.</value>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Numero di tentativi fatti per eseguire correttamente l&#39;operazione di riconoscimento.
        /// </summary>
        /// <value>Numero di tentativi fatti per eseguire correttamente l&#39;operazione di riconoscimento.</value>
        [DataMember(Name="numAttemps", EmitDefaultValue=false)]
        public int? NumAttemps { get; set; }
        /// <summary>
        /// Messaggio nel caso in cui l&#39;operazione di riconoscimento sia in errore.
        /// </summary>
        /// <value>Messaggio nel caso in cui l&#39;operazione di riconoscimento sia in errore.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocToOcrDTO {\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  OcrDate: ").Append(OcrDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  NumAttemps: ").Append(NumAttemps).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocToOcrDTO);
        }

        /// <summary>
        /// Returns true if DocToOcrDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of DocToOcrDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocToOcrDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Docnumber == other.Docnumber ||
                    this.Docnumber != null &&
                    this.Docnumber.Equals(other.Docnumber)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.OcrDate == other.OcrDate ||
                    this.OcrDate != null &&
                    this.OcrDate.Equals(other.OcrDate)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.NumAttemps == other.NumAttemps ||
                    this.NumAttemps != null &&
                    this.NumAttemps.Equals(other.NumAttemps)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Docnumber != null)
                    hash = hash * 59 + this.Docnumber.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.OcrDate != null)
                    hash = hash * 59 + this.OcrDate.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.NumAttemps != null)
                    hash = hash * 59 + this.NumAttemps.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                return hash;
            }
        }
    }

}
