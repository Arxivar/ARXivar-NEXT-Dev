/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConcreteFields
    /// </summary>
    [DataContract]
    public partial class ConcreteFields :  IEquatable<ConcreteFields>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConcreteFields" /> class.
        /// </summary>
        /// <param name="FromField">FromField.</param>
        /// <param name="SendersField">SendersField.</param>
        /// <param name="ToField">ToField.</param>
        /// <param name="CcField">CcField.</param>
        /// <param name="BusinessUnitField">BusinessUnitField.</param>
        /// <param name="DocumentTypeField">DocumentTypeField.</param>
        /// <param name="NumberField">NumberField.</param>
        /// <param name="SubjectField">SubjectField.</param>
        /// <param name="OriginField">OriginField.</param>
        /// <param name="StateField">StateField.</param>
        /// <param name="BinderField">BinderField.</param>
        /// <param name="DocumentDateExpiredField">DocumentDateExpiredField.</param>
        /// <param name="ImportantField">ImportantField.</param>
        /// <param name="ProtocolDateField">ProtocolDateField.</param>
        /// <param name="AdditionalFieldsGroup">AdditionalFieldsGroup.</param>
        /// <param name="AdditionalFieldsString">AdditionalFieldsString.</param>
        /// <param name="AdditionalFieldsBoolean">AdditionalFieldsBoolean.</param>
        /// <param name="AdditionalFieldsClasse">AdditionalFieldsClasse.</param>
        /// <param name="AdditionalFieldsCombo">AdditionalFieldsCombo.</param>
        /// <param name="AdditionalFieldsDateTime">AdditionalFieldsDateTime.</param>
        /// <param name="AdditionalFieldsMultivalue">AdditionalFieldsMultivalue.</param>
        /// <param name="AdditionalFieldsInt">AdditionalFieldsInt.</param>
        /// <param name="AdditionalFieldsDouble">AdditionalFieldsDouble.</param>
        /// <param name="AdditionalFieldsTable">AdditionalFieldsTable.</param>
        public ConcreteFields(FromFieldDTO FromField = null, SendersFieldDTO SendersField = null, ToFieldDTO ToField = null, CcFieldDTO CcField = null, BusinessUnitFieldDTO BusinessUnitField = null, DocumentTypeFieldDTO DocumentTypeField = null, NumberFieldDTO NumberField = null, SubjectFieldDTO SubjectField = null, OriginFieldDTO OriginField = null, StateFieldDTO StateField = null, BinderFieldDTO BinderField = null, DocumentDateExpiredFieldDTO DocumentDateExpiredField = null, ImportantFieldDTO ImportantField = null, ProtocolDateFieldDTO ProtocolDateField = null, List<AdditionalFieldGroupDTO> AdditionalFieldsGroup = null, List<AdditionalFieldStringDTO> AdditionalFieldsString = null, List<AdditionalFieldBooleanDTO> AdditionalFieldsBoolean = null, List<AdditionalFieldClasseDTO> AdditionalFieldsClasse = null, List<AdditionalFieldComboDTO> AdditionalFieldsCombo = null, List<AdditionalFieldDateTimeDTO> AdditionalFieldsDateTime = null, List<AdditionalFieldMultivalueDTO> AdditionalFieldsMultivalue = null, List<AdditionalFieldIntDTO> AdditionalFieldsInt = null, List<AdditionalFieldDoubleDTO> AdditionalFieldsDouble = null, List<AdditionalFieldTableDTO> AdditionalFieldsTable = null)
        {
            this.FromField = FromField;
            this.SendersField = SendersField;
            this.ToField = ToField;
            this.CcField = CcField;
            this.BusinessUnitField = BusinessUnitField;
            this.DocumentTypeField = DocumentTypeField;
            this.NumberField = NumberField;
            this.SubjectField = SubjectField;
            this.OriginField = OriginField;
            this.StateField = StateField;
            this.BinderField = BinderField;
            this.DocumentDateExpiredField = DocumentDateExpiredField;
            this.ImportantField = ImportantField;
            this.ProtocolDateField = ProtocolDateField;
            this.AdditionalFieldsGroup = AdditionalFieldsGroup;
            this.AdditionalFieldsString = AdditionalFieldsString;
            this.AdditionalFieldsBoolean = AdditionalFieldsBoolean;
            this.AdditionalFieldsClasse = AdditionalFieldsClasse;
            this.AdditionalFieldsCombo = AdditionalFieldsCombo;
            this.AdditionalFieldsDateTime = AdditionalFieldsDateTime;
            this.AdditionalFieldsMultivalue = AdditionalFieldsMultivalue;
            this.AdditionalFieldsInt = AdditionalFieldsInt;
            this.AdditionalFieldsDouble = AdditionalFieldsDouble;
            this.AdditionalFieldsTable = AdditionalFieldsTable;
        }
        
        /// <summary>
        /// Gets or Sets FromField
        /// </summary>
        [DataMember(Name="fromField", EmitDefaultValue=false)]
        public FromFieldDTO FromField { get; set; }
        /// <summary>
        /// Gets or Sets SendersField
        /// </summary>
        [DataMember(Name="sendersField", EmitDefaultValue=false)]
        public SendersFieldDTO SendersField { get; set; }
        /// <summary>
        /// Gets or Sets ToField
        /// </summary>
        [DataMember(Name="toField", EmitDefaultValue=false)]
        public ToFieldDTO ToField { get; set; }
        /// <summary>
        /// Gets or Sets CcField
        /// </summary>
        [DataMember(Name="ccField", EmitDefaultValue=false)]
        public CcFieldDTO CcField { get; set; }
        /// <summary>
        /// Gets or Sets BusinessUnitField
        /// </summary>
        [DataMember(Name="businessUnitField", EmitDefaultValue=false)]
        public BusinessUnitFieldDTO BusinessUnitField { get; set; }
        /// <summary>
        /// Gets or Sets DocumentTypeField
        /// </summary>
        [DataMember(Name="documentTypeField", EmitDefaultValue=false)]
        public DocumentTypeFieldDTO DocumentTypeField { get; set; }
        /// <summary>
        /// Gets or Sets NumberField
        /// </summary>
        [DataMember(Name="numberField", EmitDefaultValue=false)]
        public NumberFieldDTO NumberField { get; set; }
        /// <summary>
        /// Gets or Sets SubjectField
        /// </summary>
        [DataMember(Name="subjectField", EmitDefaultValue=false)]
        public SubjectFieldDTO SubjectField { get; set; }
        /// <summary>
        /// Gets or Sets OriginField
        /// </summary>
        [DataMember(Name="originField", EmitDefaultValue=false)]
        public OriginFieldDTO OriginField { get; set; }
        /// <summary>
        /// Gets or Sets StateField
        /// </summary>
        [DataMember(Name="stateField", EmitDefaultValue=false)]
        public StateFieldDTO StateField { get; set; }
        /// <summary>
        /// Gets or Sets BinderField
        /// </summary>
        [DataMember(Name="binderField", EmitDefaultValue=false)]
        public BinderFieldDTO BinderField { get; set; }
        /// <summary>
        /// Gets or Sets DocumentDateExpiredField
        /// </summary>
        [DataMember(Name="documentDateExpiredField", EmitDefaultValue=false)]
        public DocumentDateExpiredFieldDTO DocumentDateExpiredField { get; set; }
        /// <summary>
        /// Gets or Sets ImportantField
        /// </summary>
        [DataMember(Name="importantField", EmitDefaultValue=false)]
        public ImportantFieldDTO ImportantField { get; set; }
        /// <summary>
        /// Gets or Sets ProtocolDateField
        /// </summary>
        [DataMember(Name="protocolDateField", EmitDefaultValue=false)]
        public ProtocolDateFieldDTO ProtocolDateField { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsGroup
        /// </summary>
        [DataMember(Name="additionalFieldsGroup", EmitDefaultValue=false)]
        public List<AdditionalFieldGroupDTO> AdditionalFieldsGroup { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsString
        /// </summary>
        [DataMember(Name="additionalFieldsString", EmitDefaultValue=false)]
        public List<AdditionalFieldStringDTO> AdditionalFieldsString { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsBoolean
        /// </summary>
        [DataMember(Name="additionalFieldsBoolean", EmitDefaultValue=false)]
        public List<AdditionalFieldBooleanDTO> AdditionalFieldsBoolean { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsClasse
        /// </summary>
        [DataMember(Name="additionalFieldsClasse", EmitDefaultValue=false)]
        public List<AdditionalFieldClasseDTO> AdditionalFieldsClasse { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsCombo
        /// </summary>
        [DataMember(Name="additionalFieldsCombo", EmitDefaultValue=false)]
        public List<AdditionalFieldComboDTO> AdditionalFieldsCombo { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsDateTime
        /// </summary>
        [DataMember(Name="additionalFieldsDateTime", EmitDefaultValue=false)]
        public List<AdditionalFieldDateTimeDTO> AdditionalFieldsDateTime { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsMultivalue
        /// </summary>
        [DataMember(Name="additionalFieldsMultivalue", EmitDefaultValue=false)]
        public List<AdditionalFieldMultivalueDTO> AdditionalFieldsMultivalue { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsInt
        /// </summary>
        [DataMember(Name="additionalFieldsInt", EmitDefaultValue=false)]
        public List<AdditionalFieldIntDTO> AdditionalFieldsInt { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsDouble
        /// </summary>
        [DataMember(Name="additionalFieldsDouble", EmitDefaultValue=false)]
        public List<AdditionalFieldDoubleDTO> AdditionalFieldsDouble { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalFieldsTable
        /// </summary>
        [DataMember(Name="additionalFieldsTable", EmitDefaultValue=false)]
        public List<AdditionalFieldTableDTO> AdditionalFieldsTable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConcreteFields {\n");
            sb.Append("  FromField: ").Append(FromField).Append("\n");
            sb.Append("  SendersField: ").Append(SendersField).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  CcField: ").Append(CcField).Append("\n");
            sb.Append("  BusinessUnitField: ").Append(BusinessUnitField).Append("\n");
            sb.Append("  DocumentTypeField: ").Append(DocumentTypeField).Append("\n");
            sb.Append("  NumberField: ").Append(NumberField).Append("\n");
            sb.Append("  SubjectField: ").Append(SubjectField).Append("\n");
            sb.Append("  OriginField: ").Append(OriginField).Append("\n");
            sb.Append("  StateField: ").Append(StateField).Append("\n");
            sb.Append("  BinderField: ").Append(BinderField).Append("\n");
            sb.Append("  DocumentDateExpiredField: ").Append(DocumentDateExpiredField).Append("\n");
            sb.Append("  ImportantField: ").Append(ImportantField).Append("\n");
            sb.Append("  ProtocolDateField: ").Append(ProtocolDateField).Append("\n");
            sb.Append("  AdditionalFieldsGroup: ").Append(AdditionalFieldsGroup).Append("\n");
            sb.Append("  AdditionalFieldsString: ").Append(AdditionalFieldsString).Append("\n");
            sb.Append("  AdditionalFieldsBoolean: ").Append(AdditionalFieldsBoolean).Append("\n");
            sb.Append("  AdditionalFieldsClasse: ").Append(AdditionalFieldsClasse).Append("\n");
            sb.Append("  AdditionalFieldsCombo: ").Append(AdditionalFieldsCombo).Append("\n");
            sb.Append("  AdditionalFieldsDateTime: ").Append(AdditionalFieldsDateTime).Append("\n");
            sb.Append("  AdditionalFieldsMultivalue: ").Append(AdditionalFieldsMultivalue).Append("\n");
            sb.Append("  AdditionalFieldsInt: ").Append(AdditionalFieldsInt).Append("\n");
            sb.Append("  AdditionalFieldsDouble: ").Append(AdditionalFieldsDouble).Append("\n");
            sb.Append("  AdditionalFieldsTable: ").Append(AdditionalFieldsTable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConcreteFields);
        }

        /// <summary>
        /// Returns true if ConcreteFields instances are equal
        /// </summary>
        /// <param name="other">Instance of ConcreteFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConcreteFields other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FromField == other.FromField ||
                    this.FromField != null &&
                    this.FromField.Equals(other.FromField)
                ) && 
                (
                    this.SendersField == other.SendersField ||
                    this.SendersField != null &&
                    this.SendersField.Equals(other.SendersField)
                ) && 
                (
                    this.ToField == other.ToField ||
                    this.ToField != null &&
                    this.ToField.Equals(other.ToField)
                ) && 
                (
                    this.CcField == other.CcField ||
                    this.CcField != null &&
                    this.CcField.Equals(other.CcField)
                ) && 
                (
                    this.BusinessUnitField == other.BusinessUnitField ||
                    this.BusinessUnitField != null &&
                    this.BusinessUnitField.Equals(other.BusinessUnitField)
                ) && 
                (
                    this.DocumentTypeField == other.DocumentTypeField ||
                    this.DocumentTypeField != null &&
                    this.DocumentTypeField.Equals(other.DocumentTypeField)
                ) && 
                (
                    this.NumberField == other.NumberField ||
                    this.NumberField != null &&
                    this.NumberField.Equals(other.NumberField)
                ) && 
                (
                    this.SubjectField == other.SubjectField ||
                    this.SubjectField != null &&
                    this.SubjectField.Equals(other.SubjectField)
                ) && 
                (
                    this.OriginField == other.OriginField ||
                    this.OriginField != null &&
                    this.OriginField.Equals(other.OriginField)
                ) && 
                (
                    this.StateField == other.StateField ||
                    this.StateField != null &&
                    this.StateField.Equals(other.StateField)
                ) && 
                (
                    this.BinderField == other.BinderField ||
                    this.BinderField != null &&
                    this.BinderField.Equals(other.BinderField)
                ) && 
                (
                    this.DocumentDateExpiredField == other.DocumentDateExpiredField ||
                    this.DocumentDateExpiredField != null &&
                    this.DocumentDateExpiredField.Equals(other.DocumentDateExpiredField)
                ) && 
                (
                    this.ImportantField == other.ImportantField ||
                    this.ImportantField != null &&
                    this.ImportantField.Equals(other.ImportantField)
                ) && 
                (
                    this.ProtocolDateField == other.ProtocolDateField ||
                    this.ProtocolDateField != null &&
                    this.ProtocolDateField.Equals(other.ProtocolDateField)
                ) && 
                (
                    this.AdditionalFieldsGroup == other.AdditionalFieldsGroup ||
                    this.AdditionalFieldsGroup != null &&
                    this.AdditionalFieldsGroup.SequenceEqual(other.AdditionalFieldsGroup)
                ) && 
                (
                    this.AdditionalFieldsString == other.AdditionalFieldsString ||
                    this.AdditionalFieldsString != null &&
                    this.AdditionalFieldsString.SequenceEqual(other.AdditionalFieldsString)
                ) && 
                (
                    this.AdditionalFieldsBoolean == other.AdditionalFieldsBoolean ||
                    this.AdditionalFieldsBoolean != null &&
                    this.AdditionalFieldsBoolean.SequenceEqual(other.AdditionalFieldsBoolean)
                ) && 
                (
                    this.AdditionalFieldsClasse == other.AdditionalFieldsClasse ||
                    this.AdditionalFieldsClasse != null &&
                    this.AdditionalFieldsClasse.SequenceEqual(other.AdditionalFieldsClasse)
                ) && 
                (
                    this.AdditionalFieldsCombo == other.AdditionalFieldsCombo ||
                    this.AdditionalFieldsCombo != null &&
                    this.AdditionalFieldsCombo.SequenceEqual(other.AdditionalFieldsCombo)
                ) && 
                (
                    this.AdditionalFieldsDateTime == other.AdditionalFieldsDateTime ||
                    this.AdditionalFieldsDateTime != null &&
                    this.AdditionalFieldsDateTime.SequenceEqual(other.AdditionalFieldsDateTime)
                ) && 
                (
                    this.AdditionalFieldsMultivalue == other.AdditionalFieldsMultivalue ||
                    this.AdditionalFieldsMultivalue != null &&
                    this.AdditionalFieldsMultivalue.SequenceEqual(other.AdditionalFieldsMultivalue)
                ) && 
                (
                    this.AdditionalFieldsInt == other.AdditionalFieldsInt ||
                    this.AdditionalFieldsInt != null &&
                    this.AdditionalFieldsInt.SequenceEqual(other.AdditionalFieldsInt)
                ) && 
                (
                    this.AdditionalFieldsDouble == other.AdditionalFieldsDouble ||
                    this.AdditionalFieldsDouble != null &&
                    this.AdditionalFieldsDouble.SequenceEqual(other.AdditionalFieldsDouble)
                ) && 
                (
                    this.AdditionalFieldsTable == other.AdditionalFieldsTable ||
                    this.AdditionalFieldsTable != null &&
                    this.AdditionalFieldsTable.SequenceEqual(other.AdditionalFieldsTable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FromField != null)
                    hash = hash * 59 + this.FromField.GetHashCode();
                if (this.SendersField != null)
                    hash = hash * 59 + this.SendersField.GetHashCode();
                if (this.ToField != null)
                    hash = hash * 59 + this.ToField.GetHashCode();
                if (this.CcField != null)
                    hash = hash * 59 + this.CcField.GetHashCode();
                if (this.BusinessUnitField != null)
                    hash = hash * 59 + this.BusinessUnitField.GetHashCode();
                if (this.DocumentTypeField != null)
                    hash = hash * 59 + this.DocumentTypeField.GetHashCode();
                if (this.NumberField != null)
                    hash = hash * 59 + this.NumberField.GetHashCode();
                if (this.SubjectField != null)
                    hash = hash * 59 + this.SubjectField.GetHashCode();
                if (this.OriginField != null)
                    hash = hash * 59 + this.OriginField.GetHashCode();
                if (this.StateField != null)
                    hash = hash * 59 + this.StateField.GetHashCode();
                if (this.BinderField != null)
                    hash = hash * 59 + this.BinderField.GetHashCode();
                if (this.DocumentDateExpiredField != null)
                    hash = hash * 59 + this.DocumentDateExpiredField.GetHashCode();
                if (this.ImportantField != null)
                    hash = hash * 59 + this.ImportantField.GetHashCode();
                if (this.ProtocolDateField != null)
                    hash = hash * 59 + this.ProtocolDateField.GetHashCode();
                if (this.AdditionalFieldsGroup != null)
                    hash = hash * 59 + this.AdditionalFieldsGroup.GetHashCode();
                if (this.AdditionalFieldsString != null)
                    hash = hash * 59 + this.AdditionalFieldsString.GetHashCode();
                if (this.AdditionalFieldsBoolean != null)
                    hash = hash * 59 + this.AdditionalFieldsBoolean.GetHashCode();
                if (this.AdditionalFieldsClasse != null)
                    hash = hash * 59 + this.AdditionalFieldsClasse.GetHashCode();
                if (this.AdditionalFieldsCombo != null)
                    hash = hash * 59 + this.AdditionalFieldsCombo.GetHashCode();
                if (this.AdditionalFieldsDateTime != null)
                    hash = hash * 59 + this.AdditionalFieldsDateTime.GetHashCode();
                if (this.AdditionalFieldsMultivalue != null)
                    hash = hash * 59 + this.AdditionalFieldsMultivalue.GetHashCode();
                if (this.AdditionalFieldsInt != null)
                    hash = hash * 59 + this.AdditionalFieldsInt.GetHashCode();
                if (this.AdditionalFieldsDouble != null)
                    hash = hash * 59 + this.AdditionalFieldsDouble.GetHashCode();
                if (this.AdditionalFieldsTable != null)
                    hash = hash * 59 + this.AdditionalFieldsTable.GetHashCode();
                return hash;
            }
        }
    }

}
