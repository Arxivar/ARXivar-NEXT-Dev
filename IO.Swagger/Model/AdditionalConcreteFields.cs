/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of Additional Fields
    /// </summary>
    [DataContract]
    public partial class AdditionalConcreteFields :  IEquatable<AdditionalConcreteFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalConcreteFields" /> class.
        /// </summary>
        /// <param name="AdditionalFieldsGroup">Additional fields of Group type.</param>
        /// <param name="AdditionalFieldsString">Additional fields of Text type.</param>
        /// <param name="AdditionalFieldsBoolean">Additional fields of Boolean type.</param>
        /// <param name="AdditionalFieldsClasse">Additional fields of Matrix type.</param>
        /// <param name="AdditionalFieldsCombo">Additional fields of Combo List type.</param>
        /// <param name="AdditionalFieldsDateTime">Additional fields of Datatime type.</param>
        /// <param name="AdditionalFieldsMultivalue">Additional fields of Multivalues type.</param>
        /// <param name="AdditionalFieldsInt">Additional fields of Numeric type.</param>
        /// <param name="AdditionalFieldsDouble">Additional fields of Decimal type.</param>
        /// <param name="AdditionalFieldsTable">Additional fields of Table type.</param>
        public AdditionalConcreteFields(List<AdditionalFieldGroupDTO> AdditionalFieldsGroup = default(List<AdditionalFieldGroupDTO>), List<AdditionalFieldStringDTO> AdditionalFieldsString = default(List<AdditionalFieldStringDTO>), List<AdditionalFieldBooleanDTO> AdditionalFieldsBoolean = default(List<AdditionalFieldBooleanDTO>), List<AdditionalFieldClasseDTO> AdditionalFieldsClasse = default(List<AdditionalFieldClasseDTO>), List<AdditionalFieldComboDTO> AdditionalFieldsCombo = default(List<AdditionalFieldComboDTO>), List<AdditionalFieldDateTimeDTO> AdditionalFieldsDateTime = default(List<AdditionalFieldDateTimeDTO>), List<AdditionalFieldMultivalueDTO> AdditionalFieldsMultivalue = default(List<AdditionalFieldMultivalueDTO>), List<AdditionalFieldIntDTO> AdditionalFieldsInt = default(List<AdditionalFieldIntDTO>), List<AdditionalFieldDoubleDTO> AdditionalFieldsDouble = default(List<AdditionalFieldDoubleDTO>), List<AdditionalFieldTableDTO> AdditionalFieldsTable = default(List<AdditionalFieldTableDTO>))
        {
            this.AdditionalFieldsGroup = AdditionalFieldsGroup;
            this.AdditionalFieldsString = AdditionalFieldsString;
            this.AdditionalFieldsBoolean = AdditionalFieldsBoolean;
            this.AdditionalFieldsClasse = AdditionalFieldsClasse;
            this.AdditionalFieldsCombo = AdditionalFieldsCombo;
            this.AdditionalFieldsDateTime = AdditionalFieldsDateTime;
            this.AdditionalFieldsMultivalue = AdditionalFieldsMultivalue;
            this.AdditionalFieldsInt = AdditionalFieldsInt;
            this.AdditionalFieldsDouble = AdditionalFieldsDouble;
            this.AdditionalFieldsTable = AdditionalFieldsTable;
        }
        
        /// <summary>
        /// Additional fields of Group type
        /// </summary>
        /// <value>Additional fields of Group type</value>
        [DataMember(Name="additionalFieldsGroup", EmitDefaultValue=false)]
        public List<AdditionalFieldGroupDTO> AdditionalFieldsGroup { get; set; }

        /// <summary>
        /// Additional fields of Text type
        /// </summary>
        /// <value>Additional fields of Text type</value>
        [DataMember(Name="additionalFieldsString", EmitDefaultValue=false)]
        public List<AdditionalFieldStringDTO> AdditionalFieldsString { get; set; }

        /// <summary>
        /// Additional fields of Boolean type
        /// </summary>
        /// <value>Additional fields of Boolean type</value>
        [DataMember(Name="additionalFieldsBoolean", EmitDefaultValue=false)]
        public List<AdditionalFieldBooleanDTO> AdditionalFieldsBoolean { get; set; }

        /// <summary>
        /// Additional fields of Matrix type
        /// </summary>
        /// <value>Additional fields of Matrix type</value>
        [DataMember(Name="additionalFieldsClasse", EmitDefaultValue=false)]
        public List<AdditionalFieldClasseDTO> AdditionalFieldsClasse { get; set; }

        /// <summary>
        /// Additional fields of Combo List type
        /// </summary>
        /// <value>Additional fields of Combo List type</value>
        [DataMember(Name="additionalFieldsCombo", EmitDefaultValue=false)]
        public List<AdditionalFieldComboDTO> AdditionalFieldsCombo { get; set; }

        /// <summary>
        /// Additional fields of Datatime type
        /// </summary>
        /// <value>Additional fields of Datatime type</value>
        [DataMember(Name="additionalFieldsDateTime", EmitDefaultValue=false)]
        public List<AdditionalFieldDateTimeDTO> AdditionalFieldsDateTime { get; set; }

        /// <summary>
        /// Additional fields of Multivalues type
        /// </summary>
        /// <value>Additional fields of Multivalues type</value>
        [DataMember(Name="additionalFieldsMultivalue", EmitDefaultValue=false)]
        public List<AdditionalFieldMultivalueDTO> AdditionalFieldsMultivalue { get; set; }

        /// <summary>
        /// Additional fields of Numeric type
        /// </summary>
        /// <value>Additional fields of Numeric type</value>
        [DataMember(Name="additionalFieldsInt", EmitDefaultValue=false)]
        public List<AdditionalFieldIntDTO> AdditionalFieldsInt { get; set; }

        /// <summary>
        /// Additional fields of Decimal type
        /// </summary>
        /// <value>Additional fields of Decimal type</value>
        [DataMember(Name="additionalFieldsDouble", EmitDefaultValue=false)]
        public List<AdditionalFieldDoubleDTO> AdditionalFieldsDouble { get; set; }

        /// <summary>
        /// Additional fields of Table type
        /// </summary>
        /// <value>Additional fields of Table type</value>
        [DataMember(Name="additionalFieldsTable", EmitDefaultValue=false)]
        public List<AdditionalFieldTableDTO> AdditionalFieldsTable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalConcreteFields {\n");
            sb.Append("  AdditionalFieldsGroup: ").Append(AdditionalFieldsGroup).Append("\n");
            sb.Append("  AdditionalFieldsString: ").Append(AdditionalFieldsString).Append("\n");
            sb.Append("  AdditionalFieldsBoolean: ").Append(AdditionalFieldsBoolean).Append("\n");
            sb.Append("  AdditionalFieldsClasse: ").Append(AdditionalFieldsClasse).Append("\n");
            sb.Append("  AdditionalFieldsCombo: ").Append(AdditionalFieldsCombo).Append("\n");
            sb.Append("  AdditionalFieldsDateTime: ").Append(AdditionalFieldsDateTime).Append("\n");
            sb.Append("  AdditionalFieldsMultivalue: ").Append(AdditionalFieldsMultivalue).Append("\n");
            sb.Append("  AdditionalFieldsInt: ").Append(AdditionalFieldsInt).Append("\n");
            sb.Append("  AdditionalFieldsDouble: ").Append(AdditionalFieldsDouble).Append("\n");
            sb.Append("  AdditionalFieldsTable: ").Append(AdditionalFieldsTable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalConcreteFields);
        }

        /// <summary>
        /// Returns true if AdditionalConcreteFields instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalConcreteFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalConcreteFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalFieldsGroup == input.AdditionalFieldsGroup ||
                    this.AdditionalFieldsGroup != null &&
                    this.AdditionalFieldsGroup.SequenceEqual(input.AdditionalFieldsGroup)
                ) && 
                (
                    this.AdditionalFieldsString == input.AdditionalFieldsString ||
                    this.AdditionalFieldsString != null &&
                    this.AdditionalFieldsString.SequenceEqual(input.AdditionalFieldsString)
                ) && 
                (
                    this.AdditionalFieldsBoolean == input.AdditionalFieldsBoolean ||
                    this.AdditionalFieldsBoolean != null &&
                    this.AdditionalFieldsBoolean.SequenceEqual(input.AdditionalFieldsBoolean)
                ) && 
                (
                    this.AdditionalFieldsClasse == input.AdditionalFieldsClasse ||
                    this.AdditionalFieldsClasse != null &&
                    this.AdditionalFieldsClasse.SequenceEqual(input.AdditionalFieldsClasse)
                ) && 
                (
                    this.AdditionalFieldsCombo == input.AdditionalFieldsCombo ||
                    this.AdditionalFieldsCombo != null &&
                    this.AdditionalFieldsCombo.SequenceEqual(input.AdditionalFieldsCombo)
                ) && 
                (
                    this.AdditionalFieldsDateTime == input.AdditionalFieldsDateTime ||
                    this.AdditionalFieldsDateTime != null &&
                    this.AdditionalFieldsDateTime.SequenceEqual(input.AdditionalFieldsDateTime)
                ) && 
                (
                    this.AdditionalFieldsMultivalue == input.AdditionalFieldsMultivalue ||
                    this.AdditionalFieldsMultivalue != null &&
                    this.AdditionalFieldsMultivalue.SequenceEqual(input.AdditionalFieldsMultivalue)
                ) && 
                (
                    this.AdditionalFieldsInt == input.AdditionalFieldsInt ||
                    this.AdditionalFieldsInt != null &&
                    this.AdditionalFieldsInt.SequenceEqual(input.AdditionalFieldsInt)
                ) && 
                (
                    this.AdditionalFieldsDouble == input.AdditionalFieldsDouble ||
                    this.AdditionalFieldsDouble != null &&
                    this.AdditionalFieldsDouble.SequenceEqual(input.AdditionalFieldsDouble)
                ) && 
                (
                    this.AdditionalFieldsTable == input.AdditionalFieldsTable ||
                    this.AdditionalFieldsTable != null &&
                    this.AdditionalFieldsTable.SequenceEqual(input.AdditionalFieldsTable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalFieldsGroup != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsGroup.GetHashCode();
                if (this.AdditionalFieldsString != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsString.GetHashCode();
                if (this.AdditionalFieldsBoolean != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsBoolean.GetHashCode();
                if (this.AdditionalFieldsClasse != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsClasse.GetHashCode();
                if (this.AdditionalFieldsCombo != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsCombo.GetHashCode();
                if (this.AdditionalFieldsDateTime != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsDateTime.GetHashCode();
                if (this.AdditionalFieldsMultivalue != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsMultivalue.GetHashCode();
                if (this.AdditionalFieldsInt != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsInt.GetHashCode();
                if (this.AdditionalFieldsDouble != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsDouble.GetHashCode();
                if (this.AdditionalFieldsTable != null)
                    hashCode = hashCode * 59 + this.AdditionalFieldsTable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
