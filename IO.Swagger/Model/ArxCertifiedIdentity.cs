/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ArxCertifiedIdentity
    /// </summary>
    [DataContract]
    public partial class ArxCertifiedIdentity :  IEquatable<ArxCertifiedIdentity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCertifiedIdentity" /> class.
        /// </summary>
        /// <param name="CommonName">CommonName.</param>
        /// <param name="Organization">Organization.</param>
        /// <param name="OrganizationalUnit">OrganizationalUnit.</param>
        /// <param name="Locality">Locality.</param>
        /// <param name="State">State.</param>
        /// <param name="Country">Country.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        public ArxCertifiedIdentity(string CommonName = default(string), string Organization = default(string), string OrganizationalUnit = default(string), string Locality = default(string), string State = default(string), string Country = default(string), string SerialNumber = default(string))
        {
            this.CommonName = CommonName;
            this.Organization = Organization;
            this.OrganizationalUnit = OrganizationalUnit;
            this.Locality = Locality;
            this.State = State;
            this.Country = Country;
            this.SerialNumber = SerialNumber;
        }
        
        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalUnit
        /// </summary>
        [DataMember(Name="organizationalUnit", EmitDefaultValue=false)]
        public string OrganizationalUnit { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxCertifiedIdentity {\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  OrganizationalUnit: ").Append(OrganizationalUnit).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxCertifiedIdentity);
        }

        /// <summary>
        /// Returns true if ArxCertifiedIdentity instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxCertifiedIdentity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxCertifiedIdentity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.OrganizationalUnit == input.OrganizationalUnit ||
                    (this.OrganizationalUnit != null &&
                    this.OrganizationalUnit.Equals(input.OrganizationalUnit))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.OrganizationalUnit != null)
                    hashCode = hashCode * 59 + this.OrganizationalUnit.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
