/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VerifyInfoDTO
    /// </summary>
    [DataContract]
    public partial class VerifyInfoDTO :  IEquatable<VerifyInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyInfoDTO" /> class.
        /// </summary>
        /// <param name="fileName">fileName.</param>
        /// <param name="envelopeInfoList">envelopeInfoList.</param>
        /// <param name="validationMessageList">validationMessageList.</param>
        public VerifyInfoDTO(string fileName = default(string), List<EnvelopeInfoDTO> envelopeInfoList = default(List<EnvelopeInfoDTO>), List<ValidationMessageDTO> validationMessageList = default(List<ValidationMessageDTO>))
        {
            this.FileName = fileName;
            this.EnvelopeInfoList = envelopeInfoList;
            this.ValidationMessageList = validationMessageList;
        }
        
        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets EnvelopeInfoList
        /// </summary>
        [DataMember(Name="envelopeInfoList", EmitDefaultValue=false)]
        public List<EnvelopeInfoDTO> EnvelopeInfoList { get; set; }

        /// <summary>
        /// Gets or Sets ValidationMessageList
        /// </summary>
        [DataMember(Name="validationMessageList", EmitDefaultValue=false)]
        public List<ValidationMessageDTO> ValidationMessageList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyInfoDTO {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  EnvelopeInfoList: ").Append(EnvelopeInfoList).Append("\n");
            sb.Append("  ValidationMessageList: ").Append(ValidationMessageList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyInfoDTO);
        }

        /// <summary>
        /// Returns true if VerifyInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.EnvelopeInfoList == input.EnvelopeInfoList ||
                    this.EnvelopeInfoList != null &&
                    this.EnvelopeInfoList.SequenceEqual(input.EnvelopeInfoList)
                ) && 
                (
                    this.ValidationMessageList == input.ValidationMessageList ||
                    this.ValidationMessageList != null &&
                    this.ValidationMessageList.SequenceEqual(input.ValidationMessageList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.EnvelopeInfoList != null)
                    hashCode = hashCode * 59 + this.EnvelopeInfoList.GetHashCode();
                if (this.ValidationMessageList != null)
                    hashCode = hashCode * 59 + this.ValidationMessageList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
