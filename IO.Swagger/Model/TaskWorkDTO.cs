/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWorkDTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkDTO :  IEquatable<TaskWorkDTO>
    {
        /// <summary>
        /// State of the task.
        /// </summary>
        /// <value>State of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Ended for "Ended"
            /// </summary>
            [EnumMember(Value = "Ended")]
            Ended,
            
            /// <summary>
            /// Enum Active for "Active"
            /// </summary>
            [EnumMember(Value = "Active")]
            Active,
            
            /// <summary>
            /// Enum NotActive for "NotActive"
            /// </summary>
            [EnumMember(Value = "NotActive")]
            NotActive
        }

        /// <summary>
        /// Security for the task principal profile.
        /// </summary>
        /// <value>Security for the task principal profile.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrincipalProfileSecurityEnum
        {
            
            /// <summary>
            /// Enum Read for "Read"
            /// </summary>
            [EnumMember(Value = "Read")]
            Read,
            
            /// <summary>
            /// Enum Write for "Write"
            /// </summary>
            [EnumMember(Value = "Write")]
            Write,
            
            /// <summary>
            /// Enum FromSecurity for "FromSecurity"
            /// </summary>
            [EnumMember(Value = "FromSecurity")]
            FromSecurity
        }

        /// <summary>
        /// Mode of selection of the performer of the task.
        /// </summary>
        /// <value>Mode of selection of the performer of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserEnumSelectionEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum List for "List"
            /// </summary>
            [EnumMember(Value = "List")]
            List,
            
            /// <summary>
            /// Enum OrganizationChart for "OrganizationChart"
            /// </summary>
            [EnumMember(Value = "OrganizationChart")]
            OrganizationChart
        }

        /// <summary>
        /// Priorità associata al task.
        /// </summary>
        /// <value>Priorità associata al task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Medium for "Medium"
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium,
            
            /// <summary>
            /// Enum High for "High"
            /// </summary>
            [EnumMember(Value = "High")]
            High
        }

        /// <summary>
        /// Task type.
        /// </summary>
        /// <value>Task type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Connection for "Connection"
            /// </summary>
            [EnumMember(Value = "Connection")]
            Connection,
            
            /// <summary>
            /// Enum Process for "Process"
            /// </summary>
            [EnumMember(Value = "Process")]
            Process,
            
            /// <summary>
            /// Enum Pause for "Pause"
            /// </summary>
            [EnumMember(Value = "Pause")]
            Pause,
            
            /// <summary>
            /// Enum Task5 for "Task5"
            /// </summary>
            [EnumMember(Value = "Task5")]
            Task5,
            
            /// <summary>
            /// Enum Documentation for "Documentation"
            /// </summary>
            [EnumMember(Value = "Documentation")]
            Documentation,
            
            /// <summary>
            /// Enum Chrono for "Chrono"
            /// </summary>
            [EnumMember(Value = "Chrono")]
            Chrono
        }

        /// <summary>
        /// Modality for the task reassign operation
        /// </summary>
        /// <value>Modality for the task reassign operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReassignModeEnum
        {
            
            /// <summary>
            /// Enum NotEnabled for "NotEnabled"
            /// </summary>
            [EnumMember(Value = "NotEnabled")]
            NotEnabled,
            
            /// <summary>
            /// Enum EnabledToEveryone for "EnabledToEveryone"
            /// </summary>
            [EnumMember(Value = "EnabledToEveryone")]
            EnabledToEveryone,
            
            /// <summary>
            /// Enum EnabledToSelected for "EnabledToSelected"
            /// </summary>
            [EnumMember(Value = "EnabledToSelected")]
            EnabledToSelected
        }

        /// <summary>
        /// Modality for the task auto assign operation
        /// </summary>
        /// <value>Modality for the task auto assign operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutoAssignModeEnum
        {
            
            /// <summary>
            /// Enum NotEnabled for "NotEnabled"
            /// </summary>
            [EnumMember(Value = "NotEnabled")]
            NotEnabled,
            
            /// <summary>
            /// Enum EnabledToEveryone for "EnabledToEveryone"
            /// </summary>
            [EnumMember(Value = "EnabledToEveryone")]
            EnabledToEveryone,
            
            /// <summary>
            /// Enum EnabledToSelected for "EnabledToSelected"
            /// </summary>
            [EnumMember(Value = "EnabledToSelected")]
            EnabledToSelected
        }

        /// <summary>
        /// State of the task.
        /// </summary>
        /// <value>State of the task.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Security for the task principal profile.
        /// </summary>
        /// <value>Security for the task principal profile.</value>
        [DataMember(Name="principalProfileSecurity", EmitDefaultValue=false)]
        public PrincipalProfileSecurityEnum? PrincipalProfileSecurity { get; set; }
        /// <summary>
        /// Mode of selection of the performer of the task.
        /// </summary>
        /// <value>Mode of selection of the performer of the task.</value>
        [DataMember(Name="userEnumSelection", EmitDefaultValue=false)]
        public UserEnumSelectionEnum? UserEnumSelection { get; set; }
        /// <summary>
        /// Priorità associata al task.
        /// </summary>
        /// <value>Priorità associata al task.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Task type.
        /// </summary>
        /// <value>Task type.</value>
        [DataMember(Name="taskType", EmitDefaultValue=false)]
        public TaskTypeEnum? TaskType { get; set; }
        /// <summary>
        /// Modality for the task reassign operation
        /// </summary>
        /// <value>Modality for the task reassign operation</value>
        [DataMember(Name="reassignMode", EmitDefaultValue=false)]
        public ReassignModeEnum? ReassignMode { get; set; }
        /// <summary>
        /// Modality for the task auto assign operation
        /// </summary>
        /// <value>Modality for the task auto assign operation</value>
        [DataMember(Name="autoAssignMode", EmitDefaultValue=false)]
        public AutoAssignModeEnum? AutoAssignMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkDTO" /> class.
        /// </summary>
        /// <param name="Id">Taskwork Id..</param>
        /// <param name="ProcessId">Process Id..</param>
        /// <param name="WorkflowId">WorkflowId.</param>
        /// <param name="Notes">Notes presence..</param>
        /// <param name="Attachments">Attachments presence..</param>
        /// <param name="Docnumber">Principal profile..</param>
        /// <param name="Revision">Principal profile revision.</param>
        /// <param name="StartDate">Start date of the task.</param>
        /// <param name="TaskName">Task name.</param>
        /// <param name="TaskDescription">Description for the task.</param>
        /// <param name="User">User Id.</param>
        /// <param name="EndDate">End date for the task.</param>
        /// <param name="State">State of the task..</param>
        /// <param name="ExpireDate">Expire date of the task..</param>
        /// <param name="PrincipalProfileSecurity">Security for the task principal profile..</param>
        /// <param name="NodeId">Id for the task node..</param>
        /// <param name="UserEnumSelection">Mode of selection of the performer of the task..</param>
        /// <param name="NewProfileInput">New profile input..</param>
        /// <param name="ProfileEdit">Principal profile edit allowed.</param>
        /// <param name="FolderInsert">Folder insert for task profiles..</param>
        /// <param name="Priority">Priorità associata al task..</param>
        /// <param name="ModelId">Id of the archiviation model..</param>
        /// <param name="TaskType">Task type..</param>
        /// <param name="ExecutionMode">Execution modality..</param>
        /// <param name="MailNotification">Smtp mail notification..</param>
        /// <param name="AutomaticTaskFeedDate">Date automatic feed..</param>
        /// <param name="PasswordRequired">Password request for the conclusion of the task..</param>
        /// <param name="NewMemo">Creating a new memo..</param>
        /// <param name="Readed">The task was read..</param>
        /// <param name="AsyncCommand">Execution mode in the case of shell operation..</param>
        /// <param name="EditCopy">Copy the file in the edit buffer..</param>
        /// <param name="TakingChargeRequired">Taking Charge Request..</param>
        /// <param name="TaskDeadlineDate">Date of expiration of the task..</param>
        /// <param name="TaskActivationDate">Task activation date.</param>
        /// <param name="ProfessionalRoleSelectionDescription">Description of the professionals role selection operation..</param>
        /// <param name="ProcessVariablesSetDescription">Description of the operation of process variables setting..</param>
        /// <param name="OrganizationChartId">Id of the organization chart.</param>
        /// <param name="DelegationId">Delegation id..</param>
        /// <param name="OpenedTaskDate">Date of opening of the task..</param>
        /// <param name="ExitState">Exit state of the task.</param>
        /// <param name="GroupTaskId">Identification of the group task..</param>
        /// <param name="OrganizationChartOriginalUserId">Organization identifier associated with the original user..</param>
        /// <param name="OriginalUserId">ID of the original user prior to delegation.</param>
        /// <param name="ExternalTaskTypeId">External id for the task type.</param>
        /// <param name="ManageMaster">It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process.</param>
        /// <param name="WaitUserExecutionMode">It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities.</param>
        /// <param name="ManageInstruction">It allows to manage the operating instructions by means of an operation on the task.</param>
        /// <param name="HtmlDescriptionEnabled">Specifies whether the task description is html.</param>
        /// <param name="DynamicMansionDescription">Descritpion for the dynamic mansion operation.</param>
        /// <param name="PartsVisibility">This flags enum indicates wich part is visible in the task.</param>
        /// <param name="DefaultExitState">Default exit state for the task.</param>
        /// <param name="ReassignMode">Modality for the task reassign operation.</param>
        /// <param name="AutoAssignMode">Modality for the task auto assign operation.</param>
        /// <param name="NameTranslationId">Id of the translation for the name of the task.</param>
        /// <param name="DescriptionTranslationId">Id of the translation for the description of the task.</param>
        /// <param name="ProfessionalRolesDescriptionTranslationId">Id of the translation for the task professional figures selection operation description.</param>
        /// <param name="VariablesDescriptionTranslationId">Id of the translation for task set variables operation description.</param>
        /// <param name="HtmlDescriptionTranslationId">Id of the translation for Html description of the task.</param>
        /// <param name="DynamicMansionDescriptionTranslationId">Id of the translation for task dynamic mansion selection operation.</param>
        /// <param name="GroupIcon">Icon for the group.</param>
        /// <param name="Executers">Executers of the task.</param>
        /// <param name="AttachmentsVisible">Attachments part visibility.</param>
        /// <param name="DetailsVisible">Task details part visibility.</param>
        /// <param name="ProfilesVisible">Profiles part visibility.</param>
        /// <param name="NotesVisible">Notes part visibility.</param>
        /// <param name="HistoryVisible">History part visibility.</param>
        /// <param name="InstructionVisible">Instructions part visibility.</param>
        /// <param name="ShowProcessVisible">Show process command part visibility.</param>
        /// <param name="VariablesVisible">Variables part visibility.</param>
        /// <param name="ExitStateComboVisible">Exit state part visibility.</param>
        /// <param name="OperationsVisible">Operations part visibility.</param>
        /// <param name="WorkFlowName">Name of the workflow.</param>
        /// <param name="WorkFlowDescription">Description of the workflow.</param>
        /// <param name="WorkFlowDetails">Details of the workflow.</param>
        /// <param name="WorkFlowColor">The color of the workflow.</param>
        public TaskWorkDTO(int? Id = null, int? ProcessId = null, int? WorkflowId = null, bool? Notes = null, bool? Attachments = null, int? Docnumber = null, int? Revision = null, DateTime? StartDate = null, string TaskName = null, string TaskDescription = null, int? User = null, DateTime? EndDate = null, StateEnum? State = null, DateTime? ExpireDate = null, PrincipalProfileSecurityEnum? PrincipalProfileSecurity = null, int? NodeId = null, UserEnumSelectionEnum? UserEnumSelection = null, bool? NewProfileInput = null, bool? ProfileEdit = null, bool? FolderInsert = null, PriorityEnum? Priority = null, int? ModelId = null, TaskTypeEnum? TaskType = null, int? ExecutionMode = null, bool? MailNotification = null, DateTime? AutomaticTaskFeedDate = null, bool? PasswordRequired = null, bool? NewMemo = null, bool? Readed = null, bool? AsyncCommand = null, bool? EditCopy = null, bool? TakingChargeRequired = null, DateTime? TaskDeadlineDate = null, DateTime? TaskActivationDate = null, string ProfessionalRoleSelectionDescription = null, string ProcessVariablesSetDescription = null, int? OrganizationChartId = null, int? DelegationId = null, DateTime? OpenedTaskDate = null, string ExitState = null, string GroupTaskId = null, int? OrganizationChartOriginalUserId = null, int? OriginalUserId = null, string ExternalTaskTypeId = null, bool? ManageMaster = null, int? WaitUserExecutionMode = null, bool? ManageInstruction = null, string HtmlDescriptionEnabled = null, string DynamicMansionDescription = null, int? PartsVisibility = null, string DefaultExitState = null, ReassignModeEnum? ReassignMode = null, AutoAssignModeEnum? AutoAssignMode = null, int? NameTranslationId = null, int? DescriptionTranslationId = null, int? ProfessionalRolesDescriptionTranslationId = null, int? VariablesDescriptionTranslationId = null, int? HtmlDescriptionTranslationId = null, int? DynamicMansionDescriptionTranslationId = null, bool? GroupIcon = null, List<UserCompleteDTO> Executers = null, bool? AttachmentsVisible = null, bool? DetailsVisible = null, bool? ProfilesVisible = null, bool? NotesVisible = null, bool? HistoryVisible = null, bool? InstructionVisible = null, bool? ShowProcessVisible = null, bool? VariablesVisible = null, bool? ExitStateComboVisible = null, bool? OperationsVisible = null, string WorkFlowName = null, string WorkFlowDescription = null, string WorkFlowDetails = null, int? WorkFlowColor = null)
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.WorkflowId = WorkflowId;
            this.Notes = Notes;
            this.Attachments = Attachments;
            this.Docnumber = Docnumber;
            this.Revision = Revision;
            this.StartDate = StartDate;
            this.TaskName = TaskName;
            this.TaskDescription = TaskDescription;
            this.User = User;
            this.EndDate = EndDate;
            this.State = State;
            this.ExpireDate = ExpireDate;
            this.PrincipalProfileSecurity = PrincipalProfileSecurity;
            this.NodeId = NodeId;
            this.UserEnumSelection = UserEnumSelection;
            this.NewProfileInput = NewProfileInput;
            this.ProfileEdit = ProfileEdit;
            this.FolderInsert = FolderInsert;
            this.Priority = Priority;
            this.ModelId = ModelId;
            this.TaskType = TaskType;
            this.ExecutionMode = ExecutionMode;
            this.MailNotification = MailNotification;
            this.AutomaticTaskFeedDate = AutomaticTaskFeedDate;
            this.PasswordRequired = PasswordRequired;
            this.NewMemo = NewMemo;
            this.Readed = Readed;
            this.AsyncCommand = AsyncCommand;
            this.EditCopy = EditCopy;
            this.TakingChargeRequired = TakingChargeRequired;
            this.TaskDeadlineDate = TaskDeadlineDate;
            this.TaskActivationDate = TaskActivationDate;
            this.ProfessionalRoleSelectionDescription = ProfessionalRoleSelectionDescription;
            this.ProcessVariablesSetDescription = ProcessVariablesSetDescription;
            this.OrganizationChartId = OrganizationChartId;
            this.DelegationId = DelegationId;
            this.OpenedTaskDate = OpenedTaskDate;
            this.ExitState = ExitState;
            this.GroupTaskId = GroupTaskId;
            this.OrganizationChartOriginalUserId = OrganizationChartOriginalUserId;
            this.OriginalUserId = OriginalUserId;
            this.ExternalTaskTypeId = ExternalTaskTypeId;
            this.ManageMaster = ManageMaster;
            this.WaitUserExecutionMode = WaitUserExecutionMode;
            this.ManageInstruction = ManageInstruction;
            this.HtmlDescriptionEnabled = HtmlDescriptionEnabled;
            this.DynamicMansionDescription = DynamicMansionDescription;
            this.PartsVisibility = PartsVisibility;
            this.DefaultExitState = DefaultExitState;
            this.ReassignMode = ReassignMode;
            this.AutoAssignMode = AutoAssignMode;
            this.NameTranslationId = NameTranslationId;
            this.DescriptionTranslationId = DescriptionTranslationId;
            this.ProfessionalRolesDescriptionTranslationId = ProfessionalRolesDescriptionTranslationId;
            this.VariablesDescriptionTranslationId = VariablesDescriptionTranslationId;
            this.HtmlDescriptionTranslationId = HtmlDescriptionTranslationId;
            this.DynamicMansionDescriptionTranslationId = DynamicMansionDescriptionTranslationId;
            this.GroupIcon = GroupIcon;
            this.Executers = Executers;
            this.AttachmentsVisible = AttachmentsVisible;
            this.DetailsVisible = DetailsVisible;
            this.ProfilesVisible = ProfilesVisible;
            this.NotesVisible = NotesVisible;
            this.HistoryVisible = HistoryVisible;
            this.InstructionVisible = InstructionVisible;
            this.ShowProcessVisible = ShowProcessVisible;
            this.VariablesVisible = VariablesVisible;
            this.ExitStateComboVisible = ExitStateComboVisible;
            this.OperationsVisible = OperationsVisible;
            this.WorkFlowName = WorkFlowName;
            this.WorkFlowDescription = WorkFlowDescription;
            this.WorkFlowDetails = WorkFlowDetails;
            this.WorkFlowColor = WorkFlowColor;
        }
        
        /// <summary>
        /// Taskwork Id.
        /// </summary>
        /// <value>Taskwork Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Process Id.
        /// </summary>
        /// <value>Process Id.</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }
        /// <summary>
        /// WorkflowId
        /// </summary>
        /// <value>WorkflowId</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public int? WorkflowId { get; set; }
        /// <summary>
        /// Notes presence.
        /// </summary>
        /// <value>Notes presence.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public bool? Notes { get; set; }
        /// <summary>
        /// Attachments presence.
        /// </summary>
        /// <value>Attachments presence.</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public bool? Attachments { get; set; }
        /// <summary>
        /// Principal profile.
        /// </summary>
        /// <value>Principal profile.</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }
        /// <summary>
        /// Principal profile revision
        /// </summary>
        /// <value>Principal profile revision</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Start date of the task
        /// </summary>
        /// <value>Start date of the task</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Task name
        /// </summary>
        /// <value>Task name</value>
        [DataMember(Name="taskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }
        /// <summary>
        /// Description for the task
        /// </summary>
        /// <value>Description for the task</value>
        [DataMember(Name="taskDescription", EmitDefaultValue=false)]
        public string TaskDescription { get; set; }
        /// <summary>
        /// User Id
        /// </summary>
        /// <value>User Id</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// End date for the task
        /// </summary>
        /// <value>End date for the task</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Expire date of the task.
        /// </summary>
        /// <value>Expire date of the task.</value>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public DateTime? ExpireDate { get; set; }
        /// <summary>
        /// Id for the task node.
        /// </summary>
        /// <value>Id for the task node.</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public int? NodeId { get; set; }
        /// <summary>
        /// New profile input.
        /// </summary>
        /// <value>New profile input.</value>
        [DataMember(Name="newProfileInput", EmitDefaultValue=false)]
        public bool? NewProfileInput { get; set; }
        /// <summary>
        /// Principal profile edit allowed
        /// </summary>
        /// <value>Principal profile edit allowed</value>
        [DataMember(Name="profileEdit", EmitDefaultValue=false)]
        public bool? ProfileEdit { get; set; }
        /// <summary>
        /// Folder insert for task profiles.
        /// </summary>
        /// <value>Folder insert for task profiles.</value>
        [DataMember(Name="folderInsert", EmitDefaultValue=false)]
        public bool? FolderInsert { get; set; }
        /// <summary>
        /// Id of the archiviation model.
        /// </summary>
        /// <value>Id of the archiviation model.</value>
        [DataMember(Name="modelId", EmitDefaultValue=false)]
        public int? ModelId { get; set; }
        /// <summary>
        /// Execution modality.
        /// </summary>
        /// <value>Execution modality.</value>
        [DataMember(Name="executionMode", EmitDefaultValue=false)]
        public int? ExecutionMode { get; set; }
        /// <summary>
        /// Smtp mail notification.
        /// </summary>
        /// <value>Smtp mail notification.</value>
        [DataMember(Name="mailNotification", EmitDefaultValue=false)]
        public bool? MailNotification { get; set; }
        /// <summary>
        /// Date automatic feed.
        /// </summary>
        /// <value>Date automatic feed.</value>
        [DataMember(Name="automaticTaskFeedDate", EmitDefaultValue=false)]
        public DateTime? AutomaticTaskFeedDate { get; set; }
        /// <summary>
        /// Password request for the conclusion of the task.
        /// </summary>
        /// <value>Password request for the conclusion of the task.</value>
        [DataMember(Name="passwordRequired", EmitDefaultValue=false)]
        public bool? PasswordRequired { get; set; }
        /// <summary>
        /// Creating a new memo.
        /// </summary>
        /// <value>Creating a new memo.</value>
        [DataMember(Name="newMemo", EmitDefaultValue=false)]
        public bool? NewMemo { get; set; }
        /// <summary>
        /// The task was read.
        /// </summary>
        /// <value>The task was read.</value>
        [DataMember(Name="readed", EmitDefaultValue=false)]
        public bool? Readed { get; set; }
        /// <summary>
        /// Execution mode in the case of shell operation.
        /// </summary>
        /// <value>Execution mode in the case of shell operation.</value>
        [DataMember(Name="asyncCommand", EmitDefaultValue=false)]
        public bool? AsyncCommand { get; set; }
        /// <summary>
        /// Copy the file in the edit buffer.
        /// </summary>
        /// <value>Copy the file in the edit buffer.</value>
        [DataMember(Name="editCopy", EmitDefaultValue=false)]
        public bool? EditCopy { get; set; }
        /// <summary>
        /// Taking Charge Request.
        /// </summary>
        /// <value>Taking Charge Request.</value>
        [DataMember(Name="takingChargeRequired", EmitDefaultValue=false)]
        public bool? TakingChargeRequired { get; set; }
        /// <summary>
        /// Date of expiration of the task.
        /// </summary>
        /// <value>Date of expiration of the task.</value>
        [DataMember(Name="taskDeadlineDate", EmitDefaultValue=false)]
        public DateTime? TaskDeadlineDate { get; set; }
        /// <summary>
        /// Task activation date
        /// </summary>
        /// <value>Task activation date</value>
        [DataMember(Name="taskActivationDate", EmitDefaultValue=false)]
        public DateTime? TaskActivationDate { get; set; }
        /// <summary>
        /// Description of the professionals role selection operation.
        /// </summary>
        /// <value>Description of the professionals role selection operation.</value>
        [DataMember(Name="professionalRoleSelectionDescription", EmitDefaultValue=false)]
        public string ProfessionalRoleSelectionDescription { get; set; }
        /// <summary>
        /// Description of the operation of process variables setting.
        /// </summary>
        /// <value>Description of the operation of process variables setting.</value>
        [DataMember(Name="processVariablesSetDescription", EmitDefaultValue=false)]
        public string ProcessVariablesSetDescription { get; set; }
        /// <summary>
        /// Id of the organization chart
        /// </summary>
        /// <value>Id of the organization chart</value>
        [DataMember(Name="organizationChartId", EmitDefaultValue=false)]
        public int? OrganizationChartId { get; set; }
        /// <summary>
        /// Delegation id.
        /// </summary>
        /// <value>Delegation id.</value>
        [DataMember(Name="delegationId", EmitDefaultValue=false)]
        public int? DelegationId { get; set; }
        /// <summary>
        /// Date of opening of the task.
        /// </summary>
        /// <value>Date of opening of the task.</value>
        [DataMember(Name="openedTaskDate", EmitDefaultValue=false)]
        public DateTime? OpenedTaskDate { get; set; }
        /// <summary>
        /// Exit state of the task
        /// </summary>
        /// <value>Exit state of the task</value>
        [DataMember(Name="exitState", EmitDefaultValue=false)]
        public string ExitState { get; set; }
        /// <summary>
        /// Identification of the group task.
        /// </summary>
        /// <value>Identification of the group task.</value>
        [DataMember(Name="groupTaskId", EmitDefaultValue=false)]
        public string GroupTaskId { get; set; }
        /// <summary>
        /// Organization identifier associated with the original user.
        /// </summary>
        /// <value>Organization identifier associated with the original user.</value>
        [DataMember(Name="organizationChartOriginalUserId", EmitDefaultValue=false)]
        public int? OrganizationChartOriginalUserId { get; set; }
        /// <summary>
        /// ID of the original user prior to delegation
        /// </summary>
        /// <value>ID of the original user prior to delegation</value>
        [DataMember(Name="originalUserId", EmitDefaultValue=false)]
        public int? OriginalUserId { get; set; }
        /// <summary>
        /// External id for the task type
        /// </summary>
        /// <value>External id for the task type</value>
        [DataMember(Name="externalTaskTypeId", EmitDefaultValue=false)]
        public string ExternalTaskTypeId { get; set; }
        /// <summary>
        /// It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process
        /// </summary>
        /// <value>It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process</value>
        [DataMember(Name="manageMaster", EmitDefaultValue=false)]
        public bool? ManageMaster { get; set; }
        /// <summary>
        /// It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities
        /// </summary>
        /// <value>It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities</value>
        [DataMember(Name="waitUserExecutionMode", EmitDefaultValue=false)]
        public int? WaitUserExecutionMode { get; set; }
        /// <summary>
        /// It allows to manage the operating instructions by means of an operation on the task
        /// </summary>
        /// <value>It allows to manage the operating instructions by means of an operation on the task</value>
        [DataMember(Name="manageInstruction", EmitDefaultValue=false)]
        public bool? ManageInstruction { get; set; }
        /// <summary>
        /// Specifies whether the task description is html
        /// </summary>
        /// <value>Specifies whether the task description is html</value>
        [DataMember(Name="htmlDescriptionEnabled", EmitDefaultValue=false)]
        public string HtmlDescriptionEnabled { get; set; }
        /// <summary>
        /// Descritpion for the dynamic mansion operation
        /// </summary>
        /// <value>Descritpion for the dynamic mansion operation</value>
        [DataMember(Name="dynamicMansionDescription", EmitDefaultValue=false)]
        public string DynamicMansionDescription { get; set; }
        /// <summary>
        /// This flags enum indicates wich part is visible in the task
        /// </summary>
        /// <value>This flags enum indicates wich part is visible in the task</value>
        [DataMember(Name="partsVisibility", EmitDefaultValue=false)]
        public int? PartsVisibility { get; set; }
        /// <summary>
        /// Default exit state for the task
        /// </summary>
        /// <value>Default exit state for the task</value>
        [DataMember(Name="defaultExitState", EmitDefaultValue=false)]
        public string DefaultExitState { get; set; }
        /// <summary>
        /// Id of the translation for the name of the task
        /// </summary>
        /// <value>Id of the translation for the name of the task</value>
        [DataMember(Name="nameTranslationId", EmitDefaultValue=false)]
        public int? NameTranslationId { get; set; }
        /// <summary>
        /// Id of the translation for the description of the task
        /// </summary>
        /// <value>Id of the translation for the description of the task</value>
        [DataMember(Name="descriptionTranslationId", EmitDefaultValue=false)]
        public int? DescriptionTranslationId { get; set; }
        /// <summary>
        /// Id of the translation for the task professional figures selection operation description
        /// </summary>
        /// <value>Id of the translation for the task professional figures selection operation description</value>
        [DataMember(Name="professionalRolesDescriptionTranslationId", EmitDefaultValue=false)]
        public int? ProfessionalRolesDescriptionTranslationId { get; set; }
        /// <summary>
        /// Id of the translation for task set variables operation description
        /// </summary>
        /// <value>Id of the translation for task set variables operation description</value>
        [DataMember(Name="variablesDescriptionTranslationId", EmitDefaultValue=false)]
        public int? VariablesDescriptionTranslationId { get; set; }
        /// <summary>
        /// Id of the translation for Html description of the task
        /// </summary>
        /// <value>Id of the translation for Html description of the task</value>
        [DataMember(Name="htmlDescriptionTranslationId", EmitDefaultValue=false)]
        public int? HtmlDescriptionTranslationId { get; set; }
        /// <summary>
        /// Id of the translation for task dynamic mansion selection operation
        /// </summary>
        /// <value>Id of the translation for task dynamic mansion selection operation</value>
        [DataMember(Name="dynamicMansionDescriptionTranslationId", EmitDefaultValue=false)]
        public int? DynamicMansionDescriptionTranslationId { get; set; }
        /// <summary>
        /// Icon for the group
        /// </summary>
        /// <value>Icon for the group</value>
        [DataMember(Name="groupIcon", EmitDefaultValue=false)]
        public bool? GroupIcon { get; set; }
        /// <summary>
        /// Executers of the task
        /// </summary>
        /// <value>Executers of the task</value>
        [DataMember(Name="executers", EmitDefaultValue=false)]
        public List<UserCompleteDTO> Executers { get; set; }
        /// <summary>
        /// Attachments part visibility
        /// </summary>
        /// <value>Attachments part visibility</value>
        [DataMember(Name="attachmentsVisible", EmitDefaultValue=false)]
        public bool? AttachmentsVisible { get; set; }
        /// <summary>
        /// Task details part visibility
        /// </summary>
        /// <value>Task details part visibility</value>
        [DataMember(Name="detailsVisible", EmitDefaultValue=false)]
        public bool? DetailsVisible { get; set; }
        /// <summary>
        /// Profiles part visibility
        /// </summary>
        /// <value>Profiles part visibility</value>
        [DataMember(Name="profilesVisible", EmitDefaultValue=false)]
        public bool? ProfilesVisible { get; set; }
        /// <summary>
        /// Notes part visibility
        /// </summary>
        /// <value>Notes part visibility</value>
        [DataMember(Name="notesVisible", EmitDefaultValue=false)]
        public bool? NotesVisible { get; set; }
        /// <summary>
        /// History part visibility
        /// </summary>
        /// <value>History part visibility</value>
        [DataMember(Name="historyVisible", EmitDefaultValue=false)]
        public bool? HistoryVisible { get; set; }
        /// <summary>
        /// Instructions part visibility
        /// </summary>
        /// <value>Instructions part visibility</value>
        [DataMember(Name="instructionVisible", EmitDefaultValue=false)]
        public bool? InstructionVisible { get; set; }
        /// <summary>
        /// Show process command part visibility
        /// </summary>
        /// <value>Show process command part visibility</value>
        [DataMember(Name="showProcessVisible", EmitDefaultValue=false)]
        public bool? ShowProcessVisible { get; set; }
        /// <summary>
        /// Variables part visibility
        /// </summary>
        /// <value>Variables part visibility</value>
        [DataMember(Name="variablesVisible", EmitDefaultValue=false)]
        public bool? VariablesVisible { get; set; }
        /// <summary>
        /// Exit state part visibility
        /// </summary>
        /// <value>Exit state part visibility</value>
        [DataMember(Name="exitStateComboVisible", EmitDefaultValue=false)]
        public bool? ExitStateComboVisible { get; set; }
        /// <summary>
        /// Operations part visibility
        /// </summary>
        /// <value>Operations part visibility</value>
        [DataMember(Name="operationsVisible", EmitDefaultValue=false)]
        public bool? OperationsVisible { get; set; }
        /// <summary>
        /// Name of the workflow
        /// </summary>
        /// <value>Name of the workflow</value>
        [DataMember(Name="workFlowName", EmitDefaultValue=false)]
        public string WorkFlowName { get; set; }
        /// <summary>
        /// Description of the workflow
        /// </summary>
        /// <value>Description of the workflow</value>
        [DataMember(Name="workFlowDescription", EmitDefaultValue=false)]
        public string WorkFlowDescription { get; set; }
        /// <summary>
        /// Details of the workflow
        /// </summary>
        /// <value>Details of the workflow</value>
        [DataMember(Name="workFlowDetails", EmitDefaultValue=false)]
        public string WorkFlowDetails { get; set; }
        /// <summary>
        /// The color of the workflow
        /// </summary>
        /// <value>The color of the workflow</value>
        [DataMember(Name="workFlowColor", EmitDefaultValue=false)]
        public int? WorkFlowColor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  PrincipalProfileSecurity: ").Append(PrincipalProfileSecurity).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  UserEnumSelection: ").Append(UserEnumSelection).Append("\n");
            sb.Append("  NewProfileInput: ").Append(NewProfileInput).Append("\n");
            sb.Append("  ProfileEdit: ").Append(ProfileEdit).Append("\n");
            sb.Append("  FolderInsert: ").Append(FolderInsert).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  ExecutionMode: ").Append(ExecutionMode).Append("\n");
            sb.Append("  MailNotification: ").Append(MailNotification).Append("\n");
            sb.Append("  AutomaticTaskFeedDate: ").Append(AutomaticTaskFeedDate).Append("\n");
            sb.Append("  PasswordRequired: ").Append(PasswordRequired).Append("\n");
            sb.Append("  NewMemo: ").Append(NewMemo).Append("\n");
            sb.Append("  Readed: ").Append(Readed).Append("\n");
            sb.Append("  AsyncCommand: ").Append(AsyncCommand).Append("\n");
            sb.Append("  EditCopy: ").Append(EditCopy).Append("\n");
            sb.Append("  TakingChargeRequired: ").Append(TakingChargeRequired).Append("\n");
            sb.Append("  TaskDeadlineDate: ").Append(TaskDeadlineDate).Append("\n");
            sb.Append("  TaskActivationDate: ").Append(TaskActivationDate).Append("\n");
            sb.Append("  ProfessionalRoleSelectionDescription: ").Append(ProfessionalRoleSelectionDescription).Append("\n");
            sb.Append("  ProcessVariablesSetDescription: ").Append(ProcessVariablesSetDescription).Append("\n");
            sb.Append("  OrganizationChartId: ").Append(OrganizationChartId).Append("\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  OpenedTaskDate: ").Append(OpenedTaskDate).Append("\n");
            sb.Append("  ExitState: ").Append(ExitState).Append("\n");
            sb.Append("  GroupTaskId: ").Append(GroupTaskId).Append("\n");
            sb.Append("  OrganizationChartOriginalUserId: ").Append(OrganizationChartOriginalUserId).Append("\n");
            sb.Append("  OriginalUserId: ").Append(OriginalUserId).Append("\n");
            sb.Append("  ExternalTaskTypeId: ").Append(ExternalTaskTypeId).Append("\n");
            sb.Append("  ManageMaster: ").Append(ManageMaster).Append("\n");
            sb.Append("  WaitUserExecutionMode: ").Append(WaitUserExecutionMode).Append("\n");
            sb.Append("  ManageInstruction: ").Append(ManageInstruction).Append("\n");
            sb.Append("  HtmlDescriptionEnabled: ").Append(HtmlDescriptionEnabled).Append("\n");
            sb.Append("  DynamicMansionDescription: ").Append(DynamicMansionDescription).Append("\n");
            sb.Append("  PartsVisibility: ").Append(PartsVisibility).Append("\n");
            sb.Append("  DefaultExitState: ").Append(DefaultExitState).Append("\n");
            sb.Append("  ReassignMode: ").Append(ReassignMode).Append("\n");
            sb.Append("  AutoAssignMode: ").Append(AutoAssignMode).Append("\n");
            sb.Append("  NameTranslationId: ").Append(NameTranslationId).Append("\n");
            sb.Append("  DescriptionTranslationId: ").Append(DescriptionTranslationId).Append("\n");
            sb.Append("  ProfessionalRolesDescriptionTranslationId: ").Append(ProfessionalRolesDescriptionTranslationId).Append("\n");
            sb.Append("  VariablesDescriptionTranslationId: ").Append(VariablesDescriptionTranslationId).Append("\n");
            sb.Append("  HtmlDescriptionTranslationId: ").Append(HtmlDescriptionTranslationId).Append("\n");
            sb.Append("  DynamicMansionDescriptionTranslationId: ").Append(DynamicMansionDescriptionTranslationId).Append("\n");
            sb.Append("  GroupIcon: ").Append(GroupIcon).Append("\n");
            sb.Append("  Executers: ").Append(Executers).Append("\n");
            sb.Append("  AttachmentsVisible: ").Append(AttachmentsVisible).Append("\n");
            sb.Append("  DetailsVisible: ").Append(DetailsVisible).Append("\n");
            sb.Append("  ProfilesVisible: ").Append(ProfilesVisible).Append("\n");
            sb.Append("  NotesVisible: ").Append(NotesVisible).Append("\n");
            sb.Append("  HistoryVisible: ").Append(HistoryVisible).Append("\n");
            sb.Append("  InstructionVisible: ").Append(InstructionVisible).Append("\n");
            sb.Append("  ShowProcessVisible: ").Append(ShowProcessVisible).Append("\n");
            sb.Append("  VariablesVisible: ").Append(VariablesVisible).Append("\n");
            sb.Append("  ExitStateComboVisible: ").Append(ExitStateComboVisible).Append("\n");
            sb.Append("  OperationsVisible: ").Append(OperationsVisible).Append("\n");
            sb.Append("  WorkFlowName: ").Append(WorkFlowName).Append("\n");
            sb.Append("  WorkFlowDescription: ").Append(WorkFlowDescription).Append("\n");
            sb.Append("  WorkFlowDetails: ").Append(WorkFlowDetails).Append("\n");
            sb.Append("  WorkFlowColor: ").Append(WorkFlowColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskWorkDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskWorkDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.WorkflowId == other.WorkflowId ||
                    this.WorkflowId != null &&
                    this.WorkflowId.Equals(other.WorkflowId)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.Equals(other.Attachments)
                ) && 
                (
                    this.Docnumber == other.Docnumber ||
                    this.Docnumber != null &&
                    this.Docnumber.Equals(other.Docnumber)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.TaskName == other.TaskName ||
                    this.TaskName != null &&
                    this.TaskName.Equals(other.TaskName)
                ) && 
                (
                    this.TaskDescription == other.TaskDescription ||
                    this.TaskDescription != null &&
                    this.TaskDescription.Equals(other.TaskDescription)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.ExpireDate == other.ExpireDate ||
                    this.ExpireDate != null &&
                    this.ExpireDate.Equals(other.ExpireDate)
                ) && 
                (
                    this.PrincipalProfileSecurity == other.PrincipalProfileSecurity ||
                    this.PrincipalProfileSecurity != null &&
                    this.PrincipalProfileSecurity.Equals(other.PrincipalProfileSecurity)
                ) && 
                (
                    this.NodeId == other.NodeId ||
                    this.NodeId != null &&
                    this.NodeId.Equals(other.NodeId)
                ) && 
                (
                    this.UserEnumSelection == other.UserEnumSelection ||
                    this.UserEnumSelection != null &&
                    this.UserEnumSelection.Equals(other.UserEnumSelection)
                ) && 
                (
                    this.NewProfileInput == other.NewProfileInput ||
                    this.NewProfileInput != null &&
                    this.NewProfileInput.Equals(other.NewProfileInput)
                ) && 
                (
                    this.ProfileEdit == other.ProfileEdit ||
                    this.ProfileEdit != null &&
                    this.ProfileEdit.Equals(other.ProfileEdit)
                ) && 
                (
                    this.FolderInsert == other.FolderInsert ||
                    this.FolderInsert != null &&
                    this.FolderInsert.Equals(other.FolderInsert)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.ModelId == other.ModelId ||
                    this.ModelId != null &&
                    this.ModelId.Equals(other.ModelId)
                ) && 
                (
                    this.TaskType == other.TaskType ||
                    this.TaskType != null &&
                    this.TaskType.Equals(other.TaskType)
                ) && 
                (
                    this.ExecutionMode == other.ExecutionMode ||
                    this.ExecutionMode != null &&
                    this.ExecutionMode.Equals(other.ExecutionMode)
                ) && 
                (
                    this.MailNotification == other.MailNotification ||
                    this.MailNotification != null &&
                    this.MailNotification.Equals(other.MailNotification)
                ) && 
                (
                    this.AutomaticTaskFeedDate == other.AutomaticTaskFeedDate ||
                    this.AutomaticTaskFeedDate != null &&
                    this.AutomaticTaskFeedDate.Equals(other.AutomaticTaskFeedDate)
                ) && 
                (
                    this.PasswordRequired == other.PasswordRequired ||
                    this.PasswordRequired != null &&
                    this.PasswordRequired.Equals(other.PasswordRequired)
                ) && 
                (
                    this.NewMemo == other.NewMemo ||
                    this.NewMemo != null &&
                    this.NewMemo.Equals(other.NewMemo)
                ) && 
                (
                    this.Readed == other.Readed ||
                    this.Readed != null &&
                    this.Readed.Equals(other.Readed)
                ) && 
                (
                    this.AsyncCommand == other.AsyncCommand ||
                    this.AsyncCommand != null &&
                    this.AsyncCommand.Equals(other.AsyncCommand)
                ) && 
                (
                    this.EditCopy == other.EditCopy ||
                    this.EditCopy != null &&
                    this.EditCopy.Equals(other.EditCopy)
                ) && 
                (
                    this.TakingChargeRequired == other.TakingChargeRequired ||
                    this.TakingChargeRequired != null &&
                    this.TakingChargeRequired.Equals(other.TakingChargeRequired)
                ) && 
                (
                    this.TaskDeadlineDate == other.TaskDeadlineDate ||
                    this.TaskDeadlineDate != null &&
                    this.TaskDeadlineDate.Equals(other.TaskDeadlineDate)
                ) && 
                (
                    this.TaskActivationDate == other.TaskActivationDate ||
                    this.TaskActivationDate != null &&
                    this.TaskActivationDate.Equals(other.TaskActivationDate)
                ) && 
                (
                    this.ProfessionalRoleSelectionDescription == other.ProfessionalRoleSelectionDescription ||
                    this.ProfessionalRoleSelectionDescription != null &&
                    this.ProfessionalRoleSelectionDescription.Equals(other.ProfessionalRoleSelectionDescription)
                ) && 
                (
                    this.ProcessVariablesSetDescription == other.ProcessVariablesSetDescription ||
                    this.ProcessVariablesSetDescription != null &&
                    this.ProcessVariablesSetDescription.Equals(other.ProcessVariablesSetDescription)
                ) && 
                (
                    this.OrganizationChartId == other.OrganizationChartId ||
                    this.OrganizationChartId != null &&
                    this.OrganizationChartId.Equals(other.OrganizationChartId)
                ) && 
                (
                    this.DelegationId == other.DelegationId ||
                    this.DelegationId != null &&
                    this.DelegationId.Equals(other.DelegationId)
                ) && 
                (
                    this.OpenedTaskDate == other.OpenedTaskDate ||
                    this.OpenedTaskDate != null &&
                    this.OpenedTaskDate.Equals(other.OpenedTaskDate)
                ) && 
                (
                    this.ExitState == other.ExitState ||
                    this.ExitState != null &&
                    this.ExitState.Equals(other.ExitState)
                ) && 
                (
                    this.GroupTaskId == other.GroupTaskId ||
                    this.GroupTaskId != null &&
                    this.GroupTaskId.Equals(other.GroupTaskId)
                ) && 
                (
                    this.OrganizationChartOriginalUserId == other.OrganizationChartOriginalUserId ||
                    this.OrganizationChartOriginalUserId != null &&
                    this.OrganizationChartOriginalUserId.Equals(other.OrganizationChartOriginalUserId)
                ) && 
                (
                    this.OriginalUserId == other.OriginalUserId ||
                    this.OriginalUserId != null &&
                    this.OriginalUserId.Equals(other.OriginalUserId)
                ) && 
                (
                    this.ExternalTaskTypeId == other.ExternalTaskTypeId ||
                    this.ExternalTaskTypeId != null &&
                    this.ExternalTaskTypeId.Equals(other.ExternalTaskTypeId)
                ) && 
                (
                    this.ManageMaster == other.ManageMaster ||
                    this.ManageMaster != null &&
                    this.ManageMaster.Equals(other.ManageMaster)
                ) && 
                (
                    this.WaitUserExecutionMode == other.WaitUserExecutionMode ||
                    this.WaitUserExecutionMode != null &&
                    this.WaitUserExecutionMode.Equals(other.WaitUserExecutionMode)
                ) && 
                (
                    this.ManageInstruction == other.ManageInstruction ||
                    this.ManageInstruction != null &&
                    this.ManageInstruction.Equals(other.ManageInstruction)
                ) && 
                (
                    this.HtmlDescriptionEnabled == other.HtmlDescriptionEnabled ||
                    this.HtmlDescriptionEnabled != null &&
                    this.HtmlDescriptionEnabled.Equals(other.HtmlDescriptionEnabled)
                ) && 
                (
                    this.DynamicMansionDescription == other.DynamicMansionDescription ||
                    this.DynamicMansionDescription != null &&
                    this.DynamicMansionDescription.Equals(other.DynamicMansionDescription)
                ) && 
                (
                    this.PartsVisibility == other.PartsVisibility ||
                    this.PartsVisibility != null &&
                    this.PartsVisibility.Equals(other.PartsVisibility)
                ) && 
                (
                    this.DefaultExitState == other.DefaultExitState ||
                    this.DefaultExitState != null &&
                    this.DefaultExitState.Equals(other.DefaultExitState)
                ) && 
                (
                    this.ReassignMode == other.ReassignMode ||
                    this.ReassignMode != null &&
                    this.ReassignMode.Equals(other.ReassignMode)
                ) && 
                (
                    this.AutoAssignMode == other.AutoAssignMode ||
                    this.AutoAssignMode != null &&
                    this.AutoAssignMode.Equals(other.AutoAssignMode)
                ) && 
                (
                    this.NameTranslationId == other.NameTranslationId ||
                    this.NameTranslationId != null &&
                    this.NameTranslationId.Equals(other.NameTranslationId)
                ) && 
                (
                    this.DescriptionTranslationId == other.DescriptionTranslationId ||
                    this.DescriptionTranslationId != null &&
                    this.DescriptionTranslationId.Equals(other.DescriptionTranslationId)
                ) && 
                (
                    this.ProfessionalRolesDescriptionTranslationId == other.ProfessionalRolesDescriptionTranslationId ||
                    this.ProfessionalRolesDescriptionTranslationId != null &&
                    this.ProfessionalRolesDescriptionTranslationId.Equals(other.ProfessionalRolesDescriptionTranslationId)
                ) && 
                (
                    this.VariablesDescriptionTranslationId == other.VariablesDescriptionTranslationId ||
                    this.VariablesDescriptionTranslationId != null &&
                    this.VariablesDescriptionTranslationId.Equals(other.VariablesDescriptionTranslationId)
                ) && 
                (
                    this.HtmlDescriptionTranslationId == other.HtmlDescriptionTranslationId ||
                    this.HtmlDescriptionTranslationId != null &&
                    this.HtmlDescriptionTranslationId.Equals(other.HtmlDescriptionTranslationId)
                ) && 
                (
                    this.DynamicMansionDescriptionTranslationId == other.DynamicMansionDescriptionTranslationId ||
                    this.DynamicMansionDescriptionTranslationId != null &&
                    this.DynamicMansionDescriptionTranslationId.Equals(other.DynamicMansionDescriptionTranslationId)
                ) && 
                (
                    this.GroupIcon == other.GroupIcon ||
                    this.GroupIcon != null &&
                    this.GroupIcon.Equals(other.GroupIcon)
                ) && 
                (
                    this.Executers == other.Executers ||
                    this.Executers != null &&
                    this.Executers.SequenceEqual(other.Executers)
                ) && 
                (
                    this.AttachmentsVisible == other.AttachmentsVisible ||
                    this.AttachmentsVisible != null &&
                    this.AttachmentsVisible.Equals(other.AttachmentsVisible)
                ) && 
                (
                    this.DetailsVisible == other.DetailsVisible ||
                    this.DetailsVisible != null &&
                    this.DetailsVisible.Equals(other.DetailsVisible)
                ) && 
                (
                    this.ProfilesVisible == other.ProfilesVisible ||
                    this.ProfilesVisible != null &&
                    this.ProfilesVisible.Equals(other.ProfilesVisible)
                ) && 
                (
                    this.NotesVisible == other.NotesVisible ||
                    this.NotesVisible != null &&
                    this.NotesVisible.Equals(other.NotesVisible)
                ) && 
                (
                    this.HistoryVisible == other.HistoryVisible ||
                    this.HistoryVisible != null &&
                    this.HistoryVisible.Equals(other.HistoryVisible)
                ) && 
                (
                    this.InstructionVisible == other.InstructionVisible ||
                    this.InstructionVisible != null &&
                    this.InstructionVisible.Equals(other.InstructionVisible)
                ) && 
                (
                    this.ShowProcessVisible == other.ShowProcessVisible ||
                    this.ShowProcessVisible != null &&
                    this.ShowProcessVisible.Equals(other.ShowProcessVisible)
                ) && 
                (
                    this.VariablesVisible == other.VariablesVisible ||
                    this.VariablesVisible != null &&
                    this.VariablesVisible.Equals(other.VariablesVisible)
                ) && 
                (
                    this.ExitStateComboVisible == other.ExitStateComboVisible ||
                    this.ExitStateComboVisible != null &&
                    this.ExitStateComboVisible.Equals(other.ExitStateComboVisible)
                ) && 
                (
                    this.OperationsVisible == other.OperationsVisible ||
                    this.OperationsVisible != null &&
                    this.OperationsVisible.Equals(other.OperationsVisible)
                ) && 
                (
                    this.WorkFlowName == other.WorkFlowName ||
                    this.WorkFlowName != null &&
                    this.WorkFlowName.Equals(other.WorkFlowName)
                ) && 
                (
                    this.WorkFlowDescription == other.WorkFlowDescription ||
                    this.WorkFlowDescription != null &&
                    this.WorkFlowDescription.Equals(other.WorkFlowDescription)
                ) && 
                (
                    this.WorkFlowDetails == other.WorkFlowDetails ||
                    this.WorkFlowDetails != null &&
                    this.WorkFlowDetails.Equals(other.WorkFlowDetails)
                ) && 
                (
                    this.WorkFlowColor == other.WorkFlowColor ||
                    this.WorkFlowColor != null &&
                    this.WorkFlowColor.Equals(other.WorkFlowColor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.WorkflowId != null)
                    hash = hash * 59 + this.WorkflowId.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                if (this.Docnumber != null)
                    hash = hash * 59 + this.Docnumber.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.TaskName != null)
                    hash = hash * 59 + this.TaskName.GetHashCode();
                if (this.TaskDescription != null)
                    hash = hash * 59 + this.TaskDescription.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.ExpireDate != null)
                    hash = hash * 59 + this.ExpireDate.GetHashCode();
                if (this.PrincipalProfileSecurity != null)
                    hash = hash * 59 + this.PrincipalProfileSecurity.GetHashCode();
                if (this.NodeId != null)
                    hash = hash * 59 + this.NodeId.GetHashCode();
                if (this.UserEnumSelection != null)
                    hash = hash * 59 + this.UserEnumSelection.GetHashCode();
                if (this.NewProfileInput != null)
                    hash = hash * 59 + this.NewProfileInput.GetHashCode();
                if (this.ProfileEdit != null)
                    hash = hash * 59 + this.ProfileEdit.GetHashCode();
                if (this.FolderInsert != null)
                    hash = hash * 59 + this.FolderInsert.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.ModelId != null)
                    hash = hash * 59 + this.ModelId.GetHashCode();
                if (this.TaskType != null)
                    hash = hash * 59 + this.TaskType.GetHashCode();
                if (this.ExecutionMode != null)
                    hash = hash * 59 + this.ExecutionMode.GetHashCode();
                if (this.MailNotification != null)
                    hash = hash * 59 + this.MailNotification.GetHashCode();
                if (this.AutomaticTaskFeedDate != null)
                    hash = hash * 59 + this.AutomaticTaskFeedDate.GetHashCode();
                if (this.PasswordRequired != null)
                    hash = hash * 59 + this.PasswordRequired.GetHashCode();
                if (this.NewMemo != null)
                    hash = hash * 59 + this.NewMemo.GetHashCode();
                if (this.Readed != null)
                    hash = hash * 59 + this.Readed.GetHashCode();
                if (this.AsyncCommand != null)
                    hash = hash * 59 + this.AsyncCommand.GetHashCode();
                if (this.EditCopy != null)
                    hash = hash * 59 + this.EditCopy.GetHashCode();
                if (this.TakingChargeRequired != null)
                    hash = hash * 59 + this.TakingChargeRequired.GetHashCode();
                if (this.TaskDeadlineDate != null)
                    hash = hash * 59 + this.TaskDeadlineDate.GetHashCode();
                if (this.TaskActivationDate != null)
                    hash = hash * 59 + this.TaskActivationDate.GetHashCode();
                if (this.ProfessionalRoleSelectionDescription != null)
                    hash = hash * 59 + this.ProfessionalRoleSelectionDescription.GetHashCode();
                if (this.ProcessVariablesSetDescription != null)
                    hash = hash * 59 + this.ProcessVariablesSetDescription.GetHashCode();
                if (this.OrganizationChartId != null)
                    hash = hash * 59 + this.OrganizationChartId.GetHashCode();
                if (this.DelegationId != null)
                    hash = hash * 59 + this.DelegationId.GetHashCode();
                if (this.OpenedTaskDate != null)
                    hash = hash * 59 + this.OpenedTaskDate.GetHashCode();
                if (this.ExitState != null)
                    hash = hash * 59 + this.ExitState.GetHashCode();
                if (this.GroupTaskId != null)
                    hash = hash * 59 + this.GroupTaskId.GetHashCode();
                if (this.OrganizationChartOriginalUserId != null)
                    hash = hash * 59 + this.OrganizationChartOriginalUserId.GetHashCode();
                if (this.OriginalUserId != null)
                    hash = hash * 59 + this.OriginalUserId.GetHashCode();
                if (this.ExternalTaskTypeId != null)
                    hash = hash * 59 + this.ExternalTaskTypeId.GetHashCode();
                if (this.ManageMaster != null)
                    hash = hash * 59 + this.ManageMaster.GetHashCode();
                if (this.WaitUserExecutionMode != null)
                    hash = hash * 59 + this.WaitUserExecutionMode.GetHashCode();
                if (this.ManageInstruction != null)
                    hash = hash * 59 + this.ManageInstruction.GetHashCode();
                if (this.HtmlDescriptionEnabled != null)
                    hash = hash * 59 + this.HtmlDescriptionEnabled.GetHashCode();
                if (this.DynamicMansionDescription != null)
                    hash = hash * 59 + this.DynamicMansionDescription.GetHashCode();
                if (this.PartsVisibility != null)
                    hash = hash * 59 + this.PartsVisibility.GetHashCode();
                if (this.DefaultExitState != null)
                    hash = hash * 59 + this.DefaultExitState.GetHashCode();
                if (this.ReassignMode != null)
                    hash = hash * 59 + this.ReassignMode.GetHashCode();
                if (this.AutoAssignMode != null)
                    hash = hash * 59 + this.AutoAssignMode.GetHashCode();
                if (this.NameTranslationId != null)
                    hash = hash * 59 + this.NameTranslationId.GetHashCode();
                if (this.DescriptionTranslationId != null)
                    hash = hash * 59 + this.DescriptionTranslationId.GetHashCode();
                if (this.ProfessionalRolesDescriptionTranslationId != null)
                    hash = hash * 59 + this.ProfessionalRolesDescriptionTranslationId.GetHashCode();
                if (this.VariablesDescriptionTranslationId != null)
                    hash = hash * 59 + this.VariablesDescriptionTranslationId.GetHashCode();
                if (this.HtmlDescriptionTranslationId != null)
                    hash = hash * 59 + this.HtmlDescriptionTranslationId.GetHashCode();
                if (this.DynamicMansionDescriptionTranslationId != null)
                    hash = hash * 59 + this.DynamicMansionDescriptionTranslationId.GetHashCode();
                if (this.GroupIcon != null)
                    hash = hash * 59 + this.GroupIcon.GetHashCode();
                if (this.Executers != null)
                    hash = hash * 59 + this.Executers.GetHashCode();
                if (this.AttachmentsVisible != null)
                    hash = hash * 59 + this.AttachmentsVisible.GetHashCode();
                if (this.DetailsVisible != null)
                    hash = hash * 59 + this.DetailsVisible.GetHashCode();
                if (this.ProfilesVisible != null)
                    hash = hash * 59 + this.ProfilesVisible.GetHashCode();
                if (this.NotesVisible != null)
                    hash = hash * 59 + this.NotesVisible.GetHashCode();
                if (this.HistoryVisible != null)
                    hash = hash * 59 + this.HistoryVisible.GetHashCode();
                if (this.InstructionVisible != null)
                    hash = hash * 59 + this.InstructionVisible.GetHashCode();
                if (this.ShowProcessVisible != null)
                    hash = hash * 59 + this.ShowProcessVisible.GetHashCode();
                if (this.VariablesVisible != null)
                    hash = hash * 59 + this.VariablesVisible.GetHashCode();
                if (this.ExitStateComboVisible != null)
                    hash = hash * 59 + this.ExitStateComboVisible.GetHashCode();
                if (this.OperationsVisible != null)
                    hash = hash * 59 + this.OperationsVisible.GetHashCode();
                if (this.WorkFlowName != null)
                    hash = hash * 59 + this.WorkFlowName.GetHashCode();
                if (this.WorkFlowDescription != null)
                    hash = hash * 59 + this.WorkFlowDescription.GetHashCode();
                if (this.WorkFlowDetails != null)
                    hash = hash * 59 + this.WorkFlowDetails.GetHashCode();
                if (this.WorkFlowColor != null)
                    hash = hash * 59 + this.WorkFlowColor.GetHashCode();
                return hash;
            }
        }
    }

}
