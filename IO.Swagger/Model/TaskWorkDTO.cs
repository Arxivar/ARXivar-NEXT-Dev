/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWorkDTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkDTO :  IEquatable<TaskWorkDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkDTO" /> class.
        /// </summary>
        /// <param name="Id">Identifier.</param>
        /// <param name="ProcessId">Process Identifier.</param>
        /// <param name="WorkflowId">Workflow Identifier.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="Attachments">Attachments.</param>
        /// <param name="Docnumber">Principal Document Identifier.</param>
        /// <param name="Revision">Principal Document Revision Number.</param>
        /// <param name="StartDate">Start Date.</param>
        /// <param name="TaskName">Task Name.</param>
        /// <param name="TaskDescription">Description.</param>
        /// <param name="User">Author Identifier.</param>
        /// <param name="EndDate">End Date.</param>
        /// <param name="State">Possible values:  0: Ended  1: Active  2: NotActive .</param>
        /// <param name="ExpireDate">Expiration Date.</param>
        /// <param name="PrincipalProfileSecurity">Possible values:  0: Read  1: Write  2: FromSecurity .</param>
        /// <param name="NodeId">Task Node Identifier.</param>
        /// <param name="UserEnumSelection">Possible values:  0: Standard  1: List  2: OrganizationChart .</param>
        /// <param name="NewProfileInput">Active the operation to insert a principal document.</param>
        /// <param name="ProfileEdit">Active the operation to update a principal document.</param>
        /// <param name="FolderInsert">Active the operation to insert in folder a principal document.</param>
        /// <param name="Priority">Possible values:  0: Standard  1: Medium  2: High .</param>
        /// <param name="ModelId">Model Identifier for operation to insert a principal document.</param>
        /// <param name="TaskType">Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono .</param>
        /// <param name="ExecutionMode">Execution Mode.</param>
        /// <param name="MailNotification">Smtp for mail notification.</param>
        /// <param name="AutomaticTaskFeedDate">Date of Automatic Feed.</param>
        /// <param name="PasswordRequired">Password request for the conclusion of the task.</param>
        /// <param name="NewMemo">Creating a new memo.</param>
        /// <param name="Readed">The task was read.</param>
        /// <param name="AsyncCommand">Execution mode in the case of shell operation.</param>
        /// <param name="EditCopy">Copy the file in the edit buffer.</param>
        /// <param name="TakingChargeRequired">Taking Charge Request.</param>
        /// <param name="TaskDeadlineDate">Date of expiration of the task.</param>
        /// <param name="TaskActivationDate">Task activation date.</param>
        /// <param name="ProfessionalRoleSelectionDescription">Description of the professionals role selection operation.</param>
        /// <param name="ProcessVariablesSetDescription">Description of the operation of process variables setting.</param>
        /// <param name="OrganizationChartId">Organization Chart Identifier.</param>
        /// <param name="DelegationId">Delegation Identifier.</param>
        /// <param name="OpenedTaskDate">Date of opening.</param>
        /// <param name="ExitState">Exit State.</param>
        /// <param name="GroupTaskId">Group Task Identifier.</param>
        /// <param name="OrganizationChartOriginalUserId">Organization Identifier associated with the original user..</param>
        /// <param name="OriginalUserId">Identifier of Original User to delegation.</param>
        /// <param name="ExternalTaskTypeId">External Identifier.</param>
        /// <param name="ManageMaster">It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process.</param>
        /// <param name="WaitUserExecutionMode">It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities.</param>
        /// <param name="ManageInstruction">It allows to manage the operating instructions by means of an operation on the task.</param>
        /// <param name="HtmlDescriptionEnabled">Specifies whether the task description is html.</param>
        /// <param name="DynamicMansionDescription">Descritpion for the dynamic mansion operation.</param>
        /// <param name="PartsVisibility">This flags enum indicates wich part is visible in the task.</param>
        /// <param name="DefaultExitState">Default exit state for the task.</param>
        /// <param name="ReassignMode">Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected .</param>
        /// <param name="AutoAssignMode">Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected .</param>
        /// <param name="NameTranslationId">Id of the translation for the name of the task.</param>
        /// <param name="DescriptionTranslationId">Id of the translation for the description of the task.</param>
        /// <param name="ProfessionalRolesDescriptionTranslationId">Id of the translation for the task professional figures selection operation description.</param>
        /// <param name="VariablesDescriptionTranslationId">Id of the translation for task set variables operation description.</param>
        /// <param name="HtmlDescriptionTranslationId">Id of the translation for Html description of the task.</param>
        /// <param name="DynamicMansionDescriptionTranslationId">Id of the translation for task dynamic mansion selection operation.</param>
        /// <param name="GroupIcon">Icon for the group.</param>
        /// <param name="Executers">Executers of the task.</param>
        /// <param name="AttachmentsVisible">Attachments part visibility.</param>
        /// <param name="DetailsVisible">Task details part visibility.</param>
        /// <param name="ProfilesVisible">Profiles part visibility.</param>
        /// <param name="NotesVisible">Notes part visibility.</param>
        /// <param name="HistoryVisible">History part visibility.</param>
        /// <param name="InstructionVisible">Instructions part visibility.</param>
        /// <param name="ShowProcessVisible">Show process command part visibility.</param>
        /// <param name="VariablesVisible">Variables part visibility.</param>
        /// <param name="ExitStateComboVisible">Exit state part visibility.</param>
        /// <param name="OperationsVisible">Operations part visibility.</param>
        /// <param name="WorkFlowName">Name of the workflow.</param>
        /// <param name="WorkFlowDescription">Description of the workflow.</param>
        /// <param name="WorkFlowDetails">Details of the workflow.</param>
        /// <param name="WorkFlowColor">The color of the workflow.</param>
        /// <param name="ShowDesignerVisible">Show designer command part visibility.</param>
        public TaskWorkDTO(int? Id = default(int?), int? ProcessId = default(int?), int? WorkflowId = default(int?), bool? Notes = default(bool?), bool? Attachments = default(bool?), int? Docnumber = default(int?), int? Revision = default(int?), DateTime? StartDate = default(DateTime?), string TaskName = default(string), string TaskDescription = default(string), int? User = default(int?), DateTime? EndDate = default(DateTime?), int? State = default(int?), DateTime? ExpireDate = default(DateTime?), int? PrincipalProfileSecurity = default(int?), int? NodeId = default(int?), int? UserEnumSelection = default(int?), bool? NewProfileInput = default(bool?), bool? ProfileEdit = default(bool?), bool? FolderInsert = default(bool?), int? Priority = default(int?), int? ModelId = default(int?), int? TaskType = default(int?), int? ExecutionMode = default(int?), bool? MailNotification = default(bool?), DateTime? AutomaticTaskFeedDate = default(DateTime?), bool? PasswordRequired = default(bool?), bool? NewMemo = default(bool?), bool? Readed = default(bool?), bool? AsyncCommand = default(bool?), bool? EditCopy = default(bool?), bool? TakingChargeRequired = default(bool?), DateTime? TaskDeadlineDate = default(DateTime?), DateTime? TaskActivationDate = default(DateTime?), string ProfessionalRoleSelectionDescription = default(string), string ProcessVariablesSetDescription = default(string), int? OrganizationChartId = default(int?), int? DelegationId = default(int?), DateTime? OpenedTaskDate = default(DateTime?), string ExitState = default(string), string GroupTaskId = default(string), int? OrganizationChartOriginalUserId = default(int?), int? OriginalUserId = default(int?), string ExternalTaskTypeId = default(string), bool? ManageMaster = default(bool?), int? WaitUserExecutionMode = default(int?), bool? ManageInstruction = default(bool?), string HtmlDescriptionEnabled = default(string), string DynamicMansionDescription = default(string), int? PartsVisibility = default(int?), string DefaultExitState = default(string), int? ReassignMode = default(int?), int? AutoAssignMode = default(int?), int? NameTranslationId = default(int?), int? DescriptionTranslationId = default(int?), int? ProfessionalRolesDescriptionTranslationId = default(int?), int? VariablesDescriptionTranslationId = default(int?), int? HtmlDescriptionTranslationId = default(int?), int? DynamicMansionDescriptionTranslationId = default(int?), bool? GroupIcon = default(bool?), List<UserCompleteDTO> Executers = default(List<UserCompleteDTO>), bool? AttachmentsVisible = default(bool?), bool? DetailsVisible = default(bool?), bool? ProfilesVisible = default(bool?), bool? NotesVisible = default(bool?), bool? HistoryVisible = default(bool?), bool? InstructionVisible = default(bool?), bool? ShowProcessVisible = default(bool?), bool? VariablesVisible = default(bool?), bool? ExitStateComboVisible = default(bool?), bool? OperationsVisible = default(bool?), string WorkFlowName = default(string), string WorkFlowDescription = default(string), string WorkFlowDetails = default(string), int? WorkFlowColor = default(int?), bool? ShowDesignerVisible = default(bool?))
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.WorkflowId = WorkflowId;
            this.Notes = Notes;
            this.Attachments = Attachments;
            this.Docnumber = Docnumber;
            this.Revision = Revision;
            this.StartDate = StartDate;
            this.TaskName = TaskName;
            this.TaskDescription = TaskDescription;
            this.User = User;
            this.EndDate = EndDate;
            this.State = State;
            this.ExpireDate = ExpireDate;
            this.PrincipalProfileSecurity = PrincipalProfileSecurity;
            this.NodeId = NodeId;
            this.UserEnumSelection = UserEnumSelection;
            this.NewProfileInput = NewProfileInput;
            this.ProfileEdit = ProfileEdit;
            this.FolderInsert = FolderInsert;
            this.Priority = Priority;
            this.ModelId = ModelId;
            this.TaskType = TaskType;
            this.ExecutionMode = ExecutionMode;
            this.MailNotification = MailNotification;
            this.AutomaticTaskFeedDate = AutomaticTaskFeedDate;
            this.PasswordRequired = PasswordRequired;
            this.NewMemo = NewMemo;
            this.Readed = Readed;
            this.AsyncCommand = AsyncCommand;
            this.EditCopy = EditCopy;
            this.TakingChargeRequired = TakingChargeRequired;
            this.TaskDeadlineDate = TaskDeadlineDate;
            this.TaskActivationDate = TaskActivationDate;
            this.ProfessionalRoleSelectionDescription = ProfessionalRoleSelectionDescription;
            this.ProcessVariablesSetDescription = ProcessVariablesSetDescription;
            this.OrganizationChartId = OrganizationChartId;
            this.DelegationId = DelegationId;
            this.OpenedTaskDate = OpenedTaskDate;
            this.ExitState = ExitState;
            this.GroupTaskId = GroupTaskId;
            this.OrganizationChartOriginalUserId = OrganizationChartOriginalUserId;
            this.OriginalUserId = OriginalUserId;
            this.ExternalTaskTypeId = ExternalTaskTypeId;
            this.ManageMaster = ManageMaster;
            this.WaitUserExecutionMode = WaitUserExecutionMode;
            this.ManageInstruction = ManageInstruction;
            this.HtmlDescriptionEnabled = HtmlDescriptionEnabled;
            this.DynamicMansionDescription = DynamicMansionDescription;
            this.PartsVisibility = PartsVisibility;
            this.DefaultExitState = DefaultExitState;
            this.ReassignMode = ReassignMode;
            this.AutoAssignMode = AutoAssignMode;
            this.NameTranslationId = NameTranslationId;
            this.DescriptionTranslationId = DescriptionTranslationId;
            this.ProfessionalRolesDescriptionTranslationId = ProfessionalRolesDescriptionTranslationId;
            this.VariablesDescriptionTranslationId = VariablesDescriptionTranslationId;
            this.HtmlDescriptionTranslationId = HtmlDescriptionTranslationId;
            this.DynamicMansionDescriptionTranslationId = DynamicMansionDescriptionTranslationId;
            this.GroupIcon = GroupIcon;
            this.Executers = Executers;
            this.AttachmentsVisible = AttachmentsVisible;
            this.DetailsVisible = DetailsVisible;
            this.ProfilesVisible = ProfilesVisible;
            this.NotesVisible = NotesVisible;
            this.HistoryVisible = HistoryVisible;
            this.InstructionVisible = InstructionVisible;
            this.ShowProcessVisible = ShowProcessVisible;
            this.VariablesVisible = VariablesVisible;
            this.ExitStateComboVisible = ExitStateComboVisible;
            this.OperationsVisible = OperationsVisible;
            this.WorkFlowName = WorkFlowName;
            this.WorkFlowDescription = WorkFlowDescription;
            this.WorkFlowDetails = WorkFlowDetails;
            this.WorkFlowColor = WorkFlowColor;
            this.ShowDesignerVisible = ShowDesignerVisible;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Process Identifier
        /// </summary>
        /// <value>Process Identifier</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// Workflow Identifier
        /// </summary>
        /// <value>Workflow Identifier</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public int? WorkflowId { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public bool? Notes { get; set; }

        /// <summary>
        /// Attachments
        /// </summary>
        /// <value>Attachments</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public bool? Attachments { get; set; }

        /// <summary>
        /// Principal Document Identifier
        /// </summary>
        /// <value>Principal Document Identifier</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }

        /// <summary>
        /// Principal Document Revision Number
        /// </summary>
        /// <value>Principal Document Revision Number</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }

        /// <summary>
        /// Start Date
        /// </summary>
        /// <value>Start Date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Task Name
        /// </summary>
        /// <value>Task Name</value>
        [DataMember(Name="taskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="taskDescription", EmitDefaultValue=false)]
        public string TaskDescription { get; set; }

        /// <summary>
        /// Author Identifier
        /// </summary>
        /// <value>Author Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// End Date
        /// </summary>
        /// <value>End Date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Possible values:  0: Ended  1: Active  2: NotActive 
        /// </summary>
        /// <value>Possible values:  0: Ended  1: Active  2: NotActive </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Expiration Date
        /// </summary>
        /// <value>Expiration Date</value>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// Possible values:  0: Read  1: Write  2: FromSecurity 
        /// </summary>
        /// <value>Possible values:  0: Read  1: Write  2: FromSecurity </value>
        [DataMember(Name="principalProfileSecurity", EmitDefaultValue=false)]
        public int? PrincipalProfileSecurity { get; set; }

        /// <summary>
        /// Task Node Identifier
        /// </summary>
        /// <value>Task Node Identifier</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public int? NodeId { get; set; }

        /// <summary>
        /// Possible values:  0: Standard  1: List  2: OrganizationChart 
        /// </summary>
        /// <value>Possible values:  0: Standard  1: List  2: OrganizationChart </value>
        [DataMember(Name="userEnumSelection", EmitDefaultValue=false)]
        public int? UserEnumSelection { get; set; }

        /// <summary>
        /// Active the operation to insert a principal document
        /// </summary>
        /// <value>Active the operation to insert a principal document</value>
        [DataMember(Name="newProfileInput", EmitDefaultValue=false)]
        public bool? NewProfileInput { get; set; }

        /// <summary>
        /// Active the operation to update a principal document
        /// </summary>
        /// <value>Active the operation to update a principal document</value>
        [DataMember(Name="profileEdit", EmitDefaultValue=false)]
        public bool? ProfileEdit { get; set; }

        /// <summary>
        /// Active the operation to insert in folder a principal document
        /// </summary>
        /// <value>Active the operation to insert in folder a principal document</value>
        [DataMember(Name="folderInsert", EmitDefaultValue=false)]
        public bool? FolderInsert { get; set; }

        /// <summary>
        /// Possible values:  0: Standard  1: Medium  2: High 
        /// </summary>
        /// <value>Possible values:  0: Standard  1: Medium  2: High </value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Model Identifier for operation to insert a principal document
        /// </summary>
        /// <value>Model Identifier for operation to insert a principal document</value>
        [DataMember(Name="modelId", EmitDefaultValue=false)]
        public int? ModelId { get; set; }

        /// <summary>
        /// Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono 
        /// </summary>
        /// <value>Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono </value>
        [DataMember(Name="taskType", EmitDefaultValue=false)]
        public int? TaskType { get; set; }

        /// <summary>
        /// Execution Mode
        /// </summary>
        /// <value>Execution Mode</value>
        [DataMember(Name="executionMode", EmitDefaultValue=false)]
        public int? ExecutionMode { get; set; }

        /// <summary>
        /// Smtp for mail notification
        /// </summary>
        /// <value>Smtp for mail notification</value>
        [DataMember(Name="mailNotification", EmitDefaultValue=false)]
        public bool? MailNotification { get; set; }

        /// <summary>
        /// Date of Automatic Feed
        /// </summary>
        /// <value>Date of Automatic Feed</value>
        [DataMember(Name="automaticTaskFeedDate", EmitDefaultValue=false)]
        public DateTime? AutomaticTaskFeedDate { get; set; }

        /// <summary>
        /// Password request for the conclusion of the task
        /// </summary>
        /// <value>Password request for the conclusion of the task</value>
        [DataMember(Name="passwordRequired", EmitDefaultValue=false)]
        public bool? PasswordRequired { get; set; }

        /// <summary>
        /// Creating a new memo
        /// </summary>
        /// <value>Creating a new memo</value>
        [DataMember(Name="newMemo", EmitDefaultValue=false)]
        public bool? NewMemo { get; set; }

        /// <summary>
        /// The task was read
        /// </summary>
        /// <value>The task was read</value>
        [DataMember(Name="readed", EmitDefaultValue=false)]
        public bool? Readed { get; set; }

        /// <summary>
        /// Execution mode in the case of shell operation
        /// </summary>
        /// <value>Execution mode in the case of shell operation</value>
        [DataMember(Name="asyncCommand", EmitDefaultValue=false)]
        public bool? AsyncCommand { get; set; }

        /// <summary>
        /// Copy the file in the edit buffer
        /// </summary>
        /// <value>Copy the file in the edit buffer</value>
        [DataMember(Name="editCopy", EmitDefaultValue=false)]
        public bool? EditCopy { get; set; }

        /// <summary>
        /// Taking Charge Request
        /// </summary>
        /// <value>Taking Charge Request</value>
        [DataMember(Name="takingChargeRequired", EmitDefaultValue=false)]
        public bool? TakingChargeRequired { get; set; }

        /// <summary>
        /// Date of expiration of the task
        /// </summary>
        /// <value>Date of expiration of the task</value>
        [DataMember(Name="taskDeadlineDate", EmitDefaultValue=false)]
        public DateTime? TaskDeadlineDate { get; set; }

        /// <summary>
        /// Task activation date
        /// </summary>
        /// <value>Task activation date</value>
        [DataMember(Name="taskActivationDate", EmitDefaultValue=false)]
        public DateTime? TaskActivationDate { get; set; }

        /// <summary>
        /// Description of the professionals role selection operation
        /// </summary>
        /// <value>Description of the professionals role selection operation</value>
        [DataMember(Name="professionalRoleSelectionDescription", EmitDefaultValue=false)]
        public string ProfessionalRoleSelectionDescription { get; set; }

        /// <summary>
        /// Description of the operation of process variables setting
        /// </summary>
        /// <value>Description of the operation of process variables setting</value>
        [DataMember(Name="processVariablesSetDescription", EmitDefaultValue=false)]
        public string ProcessVariablesSetDescription { get; set; }

        /// <summary>
        /// Organization Chart Identifier
        /// </summary>
        /// <value>Organization Chart Identifier</value>
        [DataMember(Name="organizationChartId", EmitDefaultValue=false)]
        public int? OrganizationChartId { get; set; }

        /// <summary>
        /// Delegation Identifier
        /// </summary>
        /// <value>Delegation Identifier</value>
        [DataMember(Name="delegationId", EmitDefaultValue=false)]
        public int? DelegationId { get; set; }

        /// <summary>
        /// Date of opening
        /// </summary>
        /// <value>Date of opening</value>
        [DataMember(Name="openedTaskDate", EmitDefaultValue=false)]
        public DateTime? OpenedTaskDate { get; set; }

        /// <summary>
        /// Exit State
        /// </summary>
        /// <value>Exit State</value>
        [DataMember(Name="exitState", EmitDefaultValue=false)]
        public string ExitState { get; set; }

        /// <summary>
        /// Group Task Identifier
        /// </summary>
        /// <value>Group Task Identifier</value>
        [DataMember(Name="groupTaskId", EmitDefaultValue=false)]
        public string GroupTaskId { get; set; }

        /// <summary>
        /// Organization Identifier associated with the original user.
        /// </summary>
        /// <value>Organization Identifier associated with the original user.</value>
        [DataMember(Name="organizationChartOriginalUserId", EmitDefaultValue=false)]
        public int? OrganizationChartOriginalUserId { get; set; }

        /// <summary>
        /// Identifier of Original User to delegation
        /// </summary>
        /// <value>Identifier of Original User to delegation</value>
        [DataMember(Name="originalUserId", EmitDefaultValue=false)]
        public int? OriginalUserId { get; set; }

        /// <summary>
        /// External Identifier
        /// </summary>
        /// <value>External Identifier</value>
        [DataMember(Name="externalTaskTypeId", EmitDefaultValue=false)]
        public string ExternalTaskTypeId { get; set; }

        /// <summary>
        /// It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process
        /// </summary>
        /// <value>It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process</value>
        [DataMember(Name="manageMaster", EmitDefaultValue=false)]
        public bool? ManageMaster { get; set; }

        /// <summary>
        /// It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities
        /// </summary>
        /// <value>It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities</value>
        [DataMember(Name="waitUserExecutionMode", EmitDefaultValue=false)]
        public int? WaitUserExecutionMode { get; set; }

        /// <summary>
        /// It allows to manage the operating instructions by means of an operation on the task
        /// </summary>
        /// <value>It allows to manage the operating instructions by means of an operation on the task</value>
        [DataMember(Name="manageInstruction", EmitDefaultValue=false)]
        public bool? ManageInstruction { get; set; }

        /// <summary>
        /// Specifies whether the task description is html
        /// </summary>
        /// <value>Specifies whether the task description is html</value>
        [DataMember(Name="htmlDescriptionEnabled", EmitDefaultValue=false)]
        public string HtmlDescriptionEnabled { get; set; }

        /// <summary>
        /// Descritpion for the dynamic mansion operation
        /// </summary>
        /// <value>Descritpion for the dynamic mansion operation</value>
        [DataMember(Name="dynamicMansionDescription", EmitDefaultValue=false)]
        public string DynamicMansionDescription { get; set; }

        /// <summary>
        /// This flags enum indicates wich part is visible in the task
        /// </summary>
        /// <value>This flags enum indicates wich part is visible in the task</value>
        [DataMember(Name="partsVisibility", EmitDefaultValue=false)]
        public int? PartsVisibility { get; set; }

        /// <summary>
        /// Default exit state for the task
        /// </summary>
        /// <value>Default exit state for the task</value>
        [DataMember(Name="defaultExitState", EmitDefaultValue=false)]
        public string DefaultExitState { get; set; }

        /// <summary>
        /// Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected 
        /// </summary>
        /// <value>Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected </value>
        [DataMember(Name="reassignMode", EmitDefaultValue=false)]
        public int? ReassignMode { get; set; }

        /// <summary>
        /// Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected 
        /// </summary>
        /// <value>Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected </value>
        [DataMember(Name="autoAssignMode", EmitDefaultValue=false)]
        public int? AutoAssignMode { get; set; }

        /// <summary>
        /// Id of the translation for the name of the task
        /// </summary>
        /// <value>Id of the translation for the name of the task</value>
        [DataMember(Name="nameTranslationId", EmitDefaultValue=false)]
        public int? NameTranslationId { get; set; }

        /// <summary>
        /// Id of the translation for the description of the task
        /// </summary>
        /// <value>Id of the translation for the description of the task</value>
        [DataMember(Name="descriptionTranslationId", EmitDefaultValue=false)]
        public int? DescriptionTranslationId { get; set; }

        /// <summary>
        /// Id of the translation for the task professional figures selection operation description
        /// </summary>
        /// <value>Id of the translation for the task professional figures selection operation description</value>
        [DataMember(Name="professionalRolesDescriptionTranslationId", EmitDefaultValue=false)]
        public int? ProfessionalRolesDescriptionTranslationId { get; set; }

        /// <summary>
        /// Id of the translation for task set variables operation description
        /// </summary>
        /// <value>Id of the translation for task set variables operation description</value>
        [DataMember(Name="variablesDescriptionTranslationId", EmitDefaultValue=false)]
        public int? VariablesDescriptionTranslationId { get; set; }

        /// <summary>
        /// Id of the translation for Html description of the task
        /// </summary>
        /// <value>Id of the translation for Html description of the task</value>
        [DataMember(Name="htmlDescriptionTranslationId", EmitDefaultValue=false)]
        public int? HtmlDescriptionTranslationId { get; set; }

        /// <summary>
        /// Id of the translation for task dynamic mansion selection operation
        /// </summary>
        /// <value>Id of the translation for task dynamic mansion selection operation</value>
        [DataMember(Name="dynamicMansionDescriptionTranslationId", EmitDefaultValue=false)]
        public int? DynamicMansionDescriptionTranslationId { get; set; }

        /// <summary>
        /// Icon for the group
        /// </summary>
        /// <value>Icon for the group</value>
        [DataMember(Name="groupIcon", EmitDefaultValue=false)]
        public bool? GroupIcon { get; set; }

        /// <summary>
        /// Executers of the task
        /// </summary>
        /// <value>Executers of the task</value>
        [DataMember(Name="executers", EmitDefaultValue=false)]
        public List<UserCompleteDTO> Executers { get; set; }

        /// <summary>
        /// Attachments part visibility
        /// </summary>
        /// <value>Attachments part visibility</value>
        [DataMember(Name="attachmentsVisible", EmitDefaultValue=false)]
        public bool? AttachmentsVisible { get; set; }

        /// <summary>
        /// Task details part visibility
        /// </summary>
        /// <value>Task details part visibility</value>
        [DataMember(Name="detailsVisible", EmitDefaultValue=false)]
        public bool? DetailsVisible { get; set; }

        /// <summary>
        /// Profiles part visibility
        /// </summary>
        /// <value>Profiles part visibility</value>
        [DataMember(Name="profilesVisible", EmitDefaultValue=false)]
        public bool? ProfilesVisible { get; set; }

        /// <summary>
        /// Notes part visibility
        /// </summary>
        /// <value>Notes part visibility</value>
        [DataMember(Name="notesVisible", EmitDefaultValue=false)]
        public bool? NotesVisible { get; set; }

        /// <summary>
        /// History part visibility
        /// </summary>
        /// <value>History part visibility</value>
        [DataMember(Name="historyVisible", EmitDefaultValue=false)]
        public bool? HistoryVisible { get; set; }

        /// <summary>
        /// Instructions part visibility
        /// </summary>
        /// <value>Instructions part visibility</value>
        [DataMember(Name="instructionVisible", EmitDefaultValue=false)]
        public bool? InstructionVisible { get; set; }

        /// <summary>
        /// Show process command part visibility
        /// </summary>
        /// <value>Show process command part visibility</value>
        [DataMember(Name="showProcessVisible", EmitDefaultValue=false)]
        public bool? ShowProcessVisible { get; set; }

        /// <summary>
        /// Variables part visibility
        /// </summary>
        /// <value>Variables part visibility</value>
        [DataMember(Name="variablesVisible", EmitDefaultValue=false)]
        public bool? VariablesVisible { get; set; }

        /// <summary>
        /// Exit state part visibility
        /// </summary>
        /// <value>Exit state part visibility</value>
        [DataMember(Name="exitStateComboVisible", EmitDefaultValue=false)]
        public bool? ExitStateComboVisible { get; set; }

        /// <summary>
        /// Operations part visibility
        /// </summary>
        /// <value>Operations part visibility</value>
        [DataMember(Name="operationsVisible", EmitDefaultValue=false)]
        public bool? OperationsVisible { get; set; }

        /// <summary>
        /// Name of the workflow
        /// </summary>
        /// <value>Name of the workflow</value>
        [DataMember(Name="workFlowName", EmitDefaultValue=false)]
        public string WorkFlowName { get; set; }

        /// <summary>
        /// Description of the workflow
        /// </summary>
        /// <value>Description of the workflow</value>
        [DataMember(Name="workFlowDescription", EmitDefaultValue=false)]
        public string WorkFlowDescription { get; set; }

        /// <summary>
        /// Details of the workflow
        /// </summary>
        /// <value>Details of the workflow</value>
        [DataMember(Name="workFlowDetails", EmitDefaultValue=false)]
        public string WorkFlowDetails { get; set; }

        /// <summary>
        /// The color of the workflow
        /// </summary>
        /// <value>The color of the workflow</value>
        [DataMember(Name="workFlowColor", EmitDefaultValue=false)]
        public int? WorkFlowColor { get; set; }

        /// <summary>
        /// Show designer command part visibility
        /// </summary>
        /// <value>Show designer command part visibility</value>
        [DataMember(Name="showDesignerVisible", EmitDefaultValue=false)]
        public bool? ShowDesignerVisible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  PrincipalProfileSecurity: ").Append(PrincipalProfileSecurity).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  UserEnumSelection: ").Append(UserEnumSelection).Append("\n");
            sb.Append("  NewProfileInput: ").Append(NewProfileInput).Append("\n");
            sb.Append("  ProfileEdit: ").Append(ProfileEdit).Append("\n");
            sb.Append("  FolderInsert: ").Append(FolderInsert).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  ExecutionMode: ").Append(ExecutionMode).Append("\n");
            sb.Append("  MailNotification: ").Append(MailNotification).Append("\n");
            sb.Append("  AutomaticTaskFeedDate: ").Append(AutomaticTaskFeedDate).Append("\n");
            sb.Append("  PasswordRequired: ").Append(PasswordRequired).Append("\n");
            sb.Append("  NewMemo: ").Append(NewMemo).Append("\n");
            sb.Append("  Readed: ").Append(Readed).Append("\n");
            sb.Append("  AsyncCommand: ").Append(AsyncCommand).Append("\n");
            sb.Append("  EditCopy: ").Append(EditCopy).Append("\n");
            sb.Append("  TakingChargeRequired: ").Append(TakingChargeRequired).Append("\n");
            sb.Append("  TaskDeadlineDate: ").Append(TaskDeadlineDate).Append("\n");
            sb.Append("  TaskActivationDate: ").Append(TaskActivationDate).Append("\n");
            sb.Append("  ProfessionalRoleSelectionDescription: ").Append(ProfessionalRoleSelectionDescription).Append("\n");
            sb.Append("  ProcessVariablesSetDescription: ").Append(ProcessVariablesSetDescription).Append("\n");
            sb.Append("  OrganizationChartId: ").Append(OrganizationChartId).Append("\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  OpenedTaskDate: ").Append(OpenedTaskDate).Append("\n");
            sb.Append("  ExitState: ").Append(ExitState).Append("\n");
            sb.Append("  GroupTaskId: ").Append(GroupTaskId).Append("\n");
            sb.Append("  OrganizationChartOriginalUserId: ").Append(OrganizationChartOriginalUserId).Append("\n");
            sb.Append("  OriginalUserId: ").Append(OriginalUserId).Append("\n");
            sb.Append("  ExternalTaskTypeId: ").Append(ExternalTaskTypeId).Append("\n");
            sb.Append("  ManageMaster: ").Append(ManageMaster).Append("\n");
            sb.Append("  WaitUserExecutionMode: ").Append(WaitUserExecutionMode).Append("\n");
            sb.Append("  ManageInstruction: ").Append(ManageInstruction).Append("\n");
            sb.Append("  HtmlDescriptionEnabled: ").Append(HtmlDescriptionEnabled).Append("\n");
            sb.Append("  DynamicMansionDescription: ").Append(DynamicMansionDescription).Append("\n");
            sb.Append("  PartsVisibility: ").Append(PartsVisibility).Append("\n");
            sb.Append("  DefaultExitState: ").Append(DefaultExitState).Append("\n");
            sb.Append("  ReassignMode: ").Append(ReassignMode).Append("\n");
            sb.Append("  AutoAssignMode: ").Append(AutoAssignMode).Append("\n");
            sb.Append("  NameTranslationId: ").Append(NameTranslationId).Append("\n");
            sb.Append("  DescriptionTranslationId: ").Append(DescriptionTranslationId).Append("\n");
            sb.Append("  ProfessionalRolesDescriptionTranslationId: ").Append(ProfessionalRolesDescriptionTranslationId).Append("\n");
            sb.Append("  VariablesDescriptionTranslationId: ").Append(VariablesDescriptionTranslationId).Append("\n");
            sb.Append("  HtmlDescriptionTranslationId: ").Append(HtmlDescriptionTranslationId).Append("\n");
            sb.Append("  DynamicMansionDescriptionTranslationId: ").Append(DynamicMansionDescriptionTranslationId).Append("\n");
            sb.Append("  GroupIcon: ").Append(GroupIcon).Append("\n");
            sb.Append("  Executers: ").Append(Executers).Append("\n");
            sb.Append("  AttachmentsVisible: ").Append(AttachmentsVisible).Append("\n");
            sb.Append("  DetailsVisible: ").Append(DetailsVisible).Append("\n");
            sb.Append("  ProfilesVisible: ").Append(ProfilesVisible).Append("\n");
            sb.Append("  NotesVisible: ").Append(NotesVisible).Append("\n");
            sb.Append("  HistoryVisible: ").Append(HistoryVisible).Append("\n");
            sb.Append("  InstructionVisible: ").Append(InstructionVisible).Append("\n");
            sb.Append("  ShowProcessVisible: ").Append(ShowProcessVisible).Append("\n");
            sb.Append("  VariablesVisible: ").Append(VariablesVisible).Append("\n");
            sb.Append("  ExitStateComboVisible: ").Append(ExitStateComboVisible).Append("\n");
            sb.Append("  OperationsVisible: ").Append(OperationsVisible).Append("\n");
            sb.Append("  WorkFlowName: ").Append(WorkFlowName).Append("\n");
            sb.Append("  WorkFlowDescription: ").Append(WorkFlowDescription).Append("\n");
            sb.Append("  WorkFlowDetails: ").Append(WorkFlowDetails).Append("\n");
            sb.Append("  WorkFlowColor: ").Append(WorkFlowColor).Append("\n");
            sb.Append("  ShowDesignerVisible: ").Append(ShowDesignerVisible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskWorkDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskWorkDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    (this.Attachments != null &&
                    this.Attachments.Equals(input.Attachments))
                ) && 
                (
                    this.Docnumber == input.Docnumber ||
                    (this.Docnumber != null &&
                    this.Docnumber.Equals(input.Docnumber))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TaskDescription == input.TaskDescription ||
                    (this.TaskDescription != null &&
                    this.TaskDescription.Equals(input.TaskDescription))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.PrincipalProfileSecurity == input.PrincipalProfileSecurity ||
                    (this.PrincipalProfileSecurity != null &&
                    this.PrincipalProfileSecurity.Equals(input.PrincipalProfileSecurity))
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.UserEnumSelection == input.UserEnumSelection ||
                    (this.UserEnumSelection != null &&
                    this.UserEnumSelection.Equals(input.UserEnumSelection))
                ) && 
                (
                    this.NewProfileInput == input.NewProfileInput ||
                    (this.NewProfileInput != null &&
                    this.NewProfileInput.Equals(input.NewProfileInput))
                ) && 
                (
                    this.ProfileEdit == input.ProfileEdit ||
                    (this.ProfileEdit != null &&
                    this.ProfileEdit.Equals(input.ProfileEdit))
                ) && 
                (
                    this.FolderInsert == input.FolderInsert ||
                    (this.FolderInsert != null &&
                    this.FolderInsert.Equals(input.FolderInsert))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.TaskType == input.TaskType ||
                    (this.TaskType != null &&
                    this.TaskType.Equals(input.TaskType))
                ) && 
                (
                    this.ExecutionMode == input.ExecutionMode ||
                    (this.ExecutionMode != null &&
                    this.ExecutionMode.Equals(input.ExecutionMode))
                ) && 
                (
                    this.MailNotification == input.MailNotification ||
                    (this.MailNotification != null &&
                    this.MailNotification.Equals(input.MailNotification))
                ) && 
                (
                    this.AutomaticTaskFeedDate == input.AutomaticTaskFeedDate ||
                    (this.AutomaticTaskFeedDate != null &&
                    this.AutomaticTaskFeedDate.Equals(input.AutomaticTaskFeedDate))
                ) && 
                (
                    this.PasswordRequired == input.PasswordRequired ||
                    (this.PasswordRequired != null &&
                    this.PasswordRequired.Equals(input.PasswordRequired))
                ) && 
                (
                    this.NewMemo == input.NewMemo ||
                    (this.NewMemo != null &&
                    this.NewMemo.Equals(input.NewMemo))
                ) && 
                (
                    this.Readed == input.Readed ||
                    (this.Readed != null &&
                    this.Readed.Equals(input.Readed))
                ) && 
                (
                    this.AsyncCommand == input.AsyncCommand ||
                    (this.AsyncCommand != null &&
                    this.AsyncCommand.Equals(input.AsyncCommand))
                ) && 
                (
                    this.EditCopy == input.EditCopy ||
                    (this.EditCopy != null &&
                    this.EditCopy.Equals(input.EditCopy))
                ) && 
                (
                    this.TakingChargeRequired == input.TakingChargeRequired ||
                    (this.TakingChargeRequired != null &&
                    this.TakingChargeRequired.Equals(input.TakingChargeRequired))
                ) && 
                (
                    this.TaskDeadlineDate == input.TaskDeadlineDate ||
                    (this.TaskDeadlineDate != null &&
                    this.TaskDeadlineDate.Equals(input.TaskDeadlineDate))
                ) && 
                (
                    this.TaskActivationDate == input.TaskActivationDate ||
                    (this.TaskActivationDate != null &&
                    this.TaskActivationDate.Equals(input.TaskActivationDate))
                ) && 
                (
                    this.ProfessionalRoleSelectionDescription == input.ProfessionalRoleSelectionDescription ||
                    (this.ProfessionalRoleSelectionDescription != null &&
                    this.ProfessionalRoleSelectionDescription.Equals(input.ProfessionalRoleSelectionDescription))
                ) && 
                (
                    this.ProcessVariablesSetDescription == input.ProcessVariablesSetDescription ||
                    (this.ProcessVariablesSetDescription != null &&
                    this.ProcessVariablesSetDescription.Equals(input.ProcessVariablesSetDescription))
                ) && 
                (
                    this.OrganizationChartId == input.OrganizationChartId ||
                    (this.OrganizationChartId != null &&
                    this.OrganizationChartId.Equals(input.OrganizationChartId))
                ) && 
                (
                    this.DelegationId == input.DelegationId ||
                    (this.DelegationId != null &&
                    this.DelegationId.Equals(input.DelegationId))
                ) && 
                (
                    this.OpenedTaskDate == input.OpenedTaskDate ||
                    (this.OpenedTaskDate != null &&
                    this.OpenedTaskDate.Equals(input.OpenedTaskDate))
                ) && 
                (
                    this.ExitState == input.ExitState ||
                    (this.ExitState != null &&
                    this.ExitState.Equals(input.ExitState))
                ) && 
                (
                    this.GroupTaskId == input.GroupTaskId ||
                    (this.GroupTaskId != null &&
                    this.GroupTaskId.Equals(input.GroupTaskId))
                ) && 
                (
                    this.OrganizationChartOriginalUserId == input.OrganizationChartOriginalUserId ||
                    (this.OrganizationChartOriginalUserId != null &&
                    this.OrganizationChartOriginalUserId.Equals(input.OrganizationChartOriginalUserId))
                ) && 
                (
                    this.OriginalUserId == input.OriginalUserId ||
                    (this.OriginalUserId != null &&
                    this.OriginalUserId.Equals(input.OriginalUserId))
                ) && 
                (
                    this.ExternalTaskTypeId == input.ExternalTaskTypeId ||
                    (this.ExternalTaskTypeId != null &&
                    this.ExternalTaskTypeId.Equals(input.ExternalTaskTypeId))
                ) && 
                (
                    this.ManageMaster == input.ManageMaster ||
                    (this.ManageMaster != null &&
                    this.ManageMaster.Equals(input.ManageMaster))
                ) && 
                (
                    this.WaitUserExecutionMode == input.WaitUserExecutionMode ||
                    (this.WaitUserExecutionMode != null &&
                    this.WaitUserExecutionMode.Equals(input.WaitUserExecutionMode))
                ) && 
                (
                    this.ManageInstruction == input.ManageInstruction ||
                    (this.ManageInstruction != null &&
                    this.ManageInstruction.Equals(input.ManageInstruction))
                ) && 
                (
                    this.HtmlDescriptionEnabled == input.HtmlDescriptionEnabled ||
                    (this.HtmlDescriptionEnabled != null &&
                    this.HtmlDescriptionEnabled.Equals(input.HtmlDescriptionEnabled))
                ) && 
                (
                    this.DynamicMansionDescription == input.DynamicMansionDescription ||
                    (this.DynamicMansionDescription != null &&
                    this.DynamicMansionDescription.Equals(input.DynamicMansionDescription))
                ) && 
                (
                    this.PartsVisibility == input.PartsVisibility ||
                    (this.PartsVisibility != null &&
                    this.PartsVisibility.Equals(input.PartsVisibility))
                ) && 
                (
                    this.DefaultExitState == input.DefaultExitState ||
                    (this.DefaultExitState != null &&
                    this.DefaultExitState.Equals(input.DefaultExitState))
                ) && 
                (
                    this.ReassignMode == input.ReassignMode ||
                    (this.ReassignMode != null &&
                    this.ReassignMode.Equals(input.ReassignMode))
                ) && 
                (
                    this.AutoAssignMode == input.AutoAssignMode ||
                    (this.AutoAssignMode != null &&
                    this.AutoAssignMode.Equals(input.AutoAssignMode))
                ) && 
                (
                    this.NameTranslationId == input.NameTranslationId ||
                    (this.NameTranslationId != null &&
                    this.NameTranslationId.Equals(input.NameTranslationId))
                ) && 
                (
                    this.DescriptionTranslationId == input.DescriptionTranslationId ||
                    (this.DescriptionTranslationId != null &&
                    this.DescriptionTranslationId.Equals(input.DescriptionTranslationId))
                ) && 
                (
                    this.ProfessionalRolesDescriptionTranslationId == input.ProfessionalRolesDescriptionTranslationId ||
                    (this.ProfessionalRolesDescriptionTranslationId != null &&
                    this.ProfessionalRolesDescriptionTranslationId.Equals(input.ProfessionalRolesDescriptionTranslationId))
                ) && 
                (
                    this.VariablesDescriptionTranslationId == input.VariablesDescriptionTranslationId ||
                    (this.VariablesDescriptionTranslationId != null &&
                    this.VariablesDescriptionTranslationId.Equals(input.VariablesDescriptionTranslationId))
                ) && 
                (
                    this.HtmlDescriptionTranslationId == input.HtmlDescriptionTranslationId ||
                    (this.HtmlDescriptionTranslationId != null &&
                    this.HtmlDescriptionTranslationId.Equals(input.HtmlDescriptionTranslationId))
                ) && 
                (
                    this.DynamicMansionDescriptionTranslationId == input.DynamicMansionDescriptionTranslationId ||
                    (this.DynamicMansionDescriptionTranslationId != null &&
                    this.DynamicMansionDescriptionTranslationId.Equals(input.DynamicMansionDescriptionTranslationId))
                ) && 
                (
                    this.GroupIcon == input.GroupIcon ||
                    (this.GroupIcon != null &&
                    this.GroupIcon.Equals(input.GroupIcon))
                ) && 
                (
                    this.Executers == input.Executers ||
                    this.Executers != null &&
                    this.Executers.SequenceEqual(input.Executers)
                ) && 
                (
                    this.AttachmentsVisible == input.AttachmentsVisible ||
                    (this.AttachmentsVisible != null &&
                    this.AttachmentsVisible.Equals(input.AttachmentsVisible))
                ) && 
                (
                    this.DetailsVisible == input.DetailsVisible ||
                    (this.DetailsVisible != null &&
                    this.DetailsVisible.Equals(input.DetailsVisible))
                ) && 
                (
                    this.ProfilesVisible == input.ProfilesVisible ||
                    (this.ProfilesVisible != null &&
                    this.ProfilesVisible.Equals(input.ProfilesVisible))
                ) && 
                (
                    this.NotesVisible == input.NotesVisible ||
                    (this.NotesVisible != null &&
                    this.NotesVisible.Equals(input.NotesVisible))
                ) && 
                (
                    this.HistoryVisible == input.HistoryVisible ||
                    (this.HistoryVisible != null &&
                    this.HistoryVisible.Equals(input.HistoryVisible))
                ) && 
                (
                    this.InstructionVisible == input.InstructionVisible ||
                    (this.InstructionVisible != null &&
                    this.InstructionVisible.Equals(input.InstructionVisible))
                ) && 
                (
                    this.ShowProcessVisible == input.ShowProcessVisible ||
                    (this.ShowProcessVisible != null &&
                    this.ShowProcessVisible.Equals(input.ShowProcessVisible))
                ) && 
                (
                    this.VariablesVisible == input.VariablesVisible ||
                    (this.VariablesVisible != null &&
                    this.VariablesVisible.Equals(input.VariablesVisible))
                ) && 
                (
                    this.ExitStateComboVisible == input.ExitStateComboVisible ||
                    (this.ExitStateComboVisible != null &&
                    this.ExitStateComboVisible.Equals(input.ExitStateComboVisible))
                ) && 
                (
                    this.OperationsVisible == input.OperationsVisible ||
                    (this.OperationsVisible != null &&
                    this.OperationsVisible.Equals(input.OperationsVisible))
                ) && 
                (
                    this.WorkFlowName == input.WorkFlowName ||
                    (this.WorkFlowName != null &&
                    this.WorkFlowName.Equals(input.WorkFlowName))
                ) && 
                (
                    this.WorkFlowDescription == input.WorkFlowDescription ||
                    (this.WorkFlowDescription != null &&
                    this.WorkFlowDescription.Equals(input.WorkFlowDescription))
                ) && 
                (
                    this.WorkFlowDetails == input.WorkFlowDetails ||
                    (this.WorkFlowDetails != null &&
                    this.WorkFlowDetails.Equals(input.WorkFlowDetails))
                ) && 
                (
                    this.WorkFlowColor == input.WorkFlowColor ||
                    (this.WorkFlowColor != null &&
                    this.WorkFlowColor.Equals(input.WorkFlowColor))
                ) && 
                (
                    this.ShowDesignerVisible == input.ShowDesignerVisible ||
                    (this.ShowDesignerVisible != null &&
                    this.ShowDesignerVisible.Equals(input.ShowDesignerVisible))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.WorkflowId != null)
                    hashCode = hashCode * 59 + this.WorkflowId.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Docnumber != null)
                    hashCode = hashCode * 59 + this.Docnumber.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.TaskDescription != null)
                    hashCode = hashCode * 59 + this.TaskDescription.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.PrincipalProfileSecurity != null)
                    hashCode = hashCode * 59 + this.PrincipalProfileSecurity.GetHashCode();
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.UserEnumSelection != null)
                    hashCode = hashCode * 59 + this.UserEnumSelection.GetHashCode();
                if (this.NewProfileInput != null)
                    hashCode = hashCode * 59 + this.NewProfileInput.GetHashCode();
                if (this.ProfileEdit != null)
                    hashCode = hashCode * 59 + this.ProfileEdit.GetHashCode();
                if (this.FolderInsert != null)
                    hashCode = hashCode * 59 + this.FolderInsert.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.TaskType != null)
                    hashCode = hashCode * 59 + this.TaskType.GetHashCode();
                if (this.ExecutionMode != null)
                    hashCode = hashCode * 59 + this.ExecutionMode.GetHashCode();
                if (this.MailNotification != null)
                    hashCode = hashCode * 59 + this.MailNotification.GetHashCode();
                if (this.AutomaticTaskFeedDate != null)
                    hashCode = hashCode * 59 + this.AutomaticTaskFeedDate.GetHashCode();
                if (this.PasswordRequired != null)
                    hashCode = hashCode * 59 + this.PasswordRequired.GetHashCode();
                if (this.NewMemo != null)
                    hashCode = hashCode * 59 + this.NewMemo.GetHashCode();
                if (this.Readed != null)
                    hashCode = hashCode * 59 + this.Readed.GetHashCode();
                if (this.AsyncCommand != null)
                    hashCode = hashCode * 59 + this.AsyncCommand.GetHashCode();
                if (this.EditCopy != null)
                    hashCode = hashCode * 59 + this.EditCopy.GetHashCode();
                if (this.TakingChargeRequired != null)
                    hashCode = hashCode * 59 + this.TakingChargeRequired.GetHashCode();
                if (this.TaskDeadlineDate != null)
                    hashCode = hashCode * 59 + this.TaskDeadlineDate.GetHashCode();
                if (this.TaskActivationDate != null)
                    hashCode = hashCode * 59 + this.TaskActivationDate.GetHashCode();
                if (this.ProfessionalRoleSelectionDescription != null)
                    hashCode = hashCode * 59 + this.ProfessionalRoleSelectionDescription.GetHashCode();
                if (this.ProcessVariablesSetDescription != null)
                    hashCode = hashCode * 59 + this.ProcessVariablesSetDescription.GetHashCode();
                if (this.OrganizationChartId != null)
                    hashCode = hashCode * 59 + this.OrganizationChartId.GetHashCode();
                if (this.DelegationId != null)
                    hashCode = hashCode * 59 + this.DelegationId.GetHashCode();
                if (this.OpenedTaskDate != null)
                    hashCode = hashCode * 59 + this.OpenedTaskDate.GetHashCode();
                if (this.ExitState != null)
                    hashCode = hashCode * 59 + this.ExitState.GetHashCode();
                if (this.GroupTaskId != null)
                    hashCode = hashCode * 59 + this.GroupTaskId.GetHashCode();
                if (this.OrganizationChartOriginalUserId != null)
                    hashCode = hashCode * 59 + this.OrganizationChartOriginalUserId.GetHashCode();
                if (this.OriginalUserId != null)
                    hashCode = hashCode * 59 + this.OriginalUserId.GetHashCode();
                if (this.ExternalTaskTypeId != null)
                    hashCode = hashCode * 59 + this.ExternalTaskTypeId.GetHashCode();
                if (this.ManageMaster != null)
                    hashCode = hashCode * 59 + this.ManageMaster.GetHashCode();
                if (this.WaitUserExecutionMode != null)
                    hashCode = hashCode * 59 + this.WaitUserExecutionMode.GetHashCode();
                if (this.ManageInstruction != null)
                    hashCode = hashCode * 59 + this.ManageInstruction.GetHashCode();
                if (this.HtmlDescriptionEnabled != null)
                    hashCode = hashCode * 59 + this.HtmlDescriptionEnabled.GetHashCode();
                if (this.DynamicMansionDescription != null)
                    hashCode = hashCode * 59 + this.DynamicMansionDescription.GetHashCode();
                if (this.PartsVisibility != null)
                    hashCode = hashCode * 59 + this.PartsVisibility.GetHashCode();
                if (this.DefaultExitState != null)
                    hashCode = hashCode * 59 + this.DefaultExitState.GetHashCode();
                if (this.ReassignMode != null)
                    hashCode = hashCode * 59 + this.ReassignMode.GetHashCode();
                if (this.AutoAssignMode != null)
                    hashCode = hashCode * 59 + this.AutoAssignMode.GetHashCode();
                if (this.NameTranslationId != null)
                    hashCode = hashCode * 59 + this.NameTranslationId.GetHashCode();
                if (this.DescriptionTranslationId != null)
                    hashCode = hashCode * 59 + this.DescriptionTranslationId.GetHashCode();
                if (this.ProfessionalRolesDescriptionTranslationId != null)
                    hashCode = hashCode * 59 + this.ProfessionalRolesDescriptionTranslationId.GetHashCode();
                if (this.VariablesDescriptionTranslationId != null)
                    hashCode = hashCode * 59 + this.VariablesDescriptionTranslationId.GetHashCode();
                if (this.HtmlDescriptionTranslationId != null)
                    hashCode = hashCode * 59 + this.HtmlDescriptionTranslationId.GetHashCode();
                if (this.DynamicMansionDescriptionTranslationId != null)
                    hashCode = hashCode * 59 + this.DynamicMansionDescriptionTranslationId.GetHashCode();
                if (this.GroupIcon != null)
                    hashCode = hashCode * 59 + this.GroupIcon.GetHashCode();
                if (this.Executers != null)
                    hashCode = hashCode * 59 + this.Executers.GetHashCode();
                if (this.AttachmentsVisible != null)
                    hashCode = hashCode * 59 + this.AttachmentsVisible.GetHashCode();
                if (this.DetailsVisible != null)
                    hashCode = hashCode * 59 + this.DetailsVisible.GetHashCode();
                if (this.ProfilesVisible != null)
                    hashCode = hashCode * 59 + this.ProfilesVisible.GetHashCode();
                if (this.NotesVisible != null)
                    hashCode = hashCode * 59 + this.NotesVisible.GetHashCode();
                if (this.HistoryVisible != null)
                    hashCode = hashCode * 59 + this.HistoryVisible.GetHashCode();
                if (this.InstructionVisible != null)
                    hashCode = hashCode * 59 + this.InstructionVisible.GetHashCode();
                if (this.ShowProcessVisible != null)
                    hashCode = hashCode * 59 + this.ShowProcessVisible.GetHashCode();
                if (this.VariablesVisible != null)
                    hashCode = hashCode * 59 + this.VariablesVisible.GetHashCode();
                if (this.ExitStateComboVisible != null)
                    hashCode = hashCode * 59 + this.ExitStateComboVisible.GetHashCode();
                if (this.OperationsVisible != null)
                    hashCode = hashCode * 59 + this.OperationsVisible.GetHashCode();
                if (this.WorkFlowName != null)
                    hashCode = hashCode * 59 + this.WorkFlowName.GetHashCode();
                if (this.WorkFlowDescription != null)
                    hashCode = hashCode * 59 + this.WorkFlowDescription.GetHashCode();
                if (this.WorkFlowDetails != null)
                    hashCode = hashCode * 59 + this.WorkFlowDetails.GetHashCode();
                if (this.WorkFlowColor != null)
                    hashCode = hashCode * 59 + this.WorkFlowColor.GetHashCode();
                if (this.ShowDesignerVisible != null)
                    hashCode = hashCode * 59 + this.ShowDesignerVisible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
