/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LogDTO
    /// </summary>
    [DataContract]
    public partial class LogDTO :  IEquatable<LogDTO>
    {
        /// <summary>
        /// Livello di log.
        /// </summary>
        /// <value>Livello di log.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LogLevelEnum
        {
            
            /// <summary>
            /// Enum INFORMATION for "INFORMATION"
            /// </summary>
            [EnumMember(Value = "INFORMATION")]
            INFORMATION,
            
            /// <summary>
            /// Enum SUCCESSAUDIT for "SUCCESSAUDIT"
            /// </summary>
            [EnumMember(Value = "SUCCESSAUDIT")]
            SUCCESSAUDIT,
            
            /// <summary>
            /// Enum FAILUREAUDIT for "FAILUREAUDIT"
            /// </summary>
            [EnumMember(Value = "FAILUREAUDIT")]
            FAILUREAUDIT,
            
            /// <summary>
            /// Enum WARNING for "WARNING"
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING,
            
            /// <summary>
            /// Enum ERROR for "ERROR"
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR
        }

        /// <summary>
        /// Tipologia del messaggio di log.
        /// </summary>
        /// <value>Tipologia del messaggio di log.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InfoTypeEnum
        {
            
            /// <summary>
            /// Enum Nothing for "Nothing"
            /// </summary>
            [EnumMember(Value = "Nothing")]
            Nothing,
            
            /// <summary>
            /// Enum WcfService for "WcfService"
            /// </summary>
            [EnumMember(Value = "WcfService")]
            WcfService,
            
            /// <summary>
            /// Enum LogInClient for "LogInClient"
            /// </summary>
            [EnumMember(Value = "LogInClient")]
            LogInClient,
            
            /// <summary>
            /// Enum LogOutClient for "LogOutClient"
            /// </summary>
            [EnumMember(Value = "LogOutClient")]
            LogOutClient,
            
            /// <summary>
            /// Enum LogInServer for "LogInServer"
            /// </summary>
            [EnumMember(Value = "LogInServer")]
            LogInServer,
            
            /// <summary>
            /// Enum LogOutServer for "LogOutServer"
            /// </summary>
            [EnumMember(Value = "LogOutServer")]
            LogOutServer,
            
            /// <summary>
            /// Enum LogInSPR for "LogInSPR"
            /// </summary>
            [EnumMember(Value = "LogInSPR")]
            LogInSPR,
            
            /// <summary>
            /// Enum LogOutSPR for "LogOutSPR"
            /// </summary>
            [EnumMember(Value = "LogOutSPR")]
            LogOutSPR,
            
            /// <summary>
            /// Enum LogInWEB for "LogInWEB"
            /// </summary>
            [EnumMember(Value = "LogInWEB")]
            LogInWEB,
            
            /// <summary>
            /// Enum LogOutWEB for "LogOutWEB"
            /// </summary>
            [EnumMember(Value = "LogOutWEB")]
            LogOutWEB,
            
            /// <summary>
            /// Enum LogInGeneric for "LogInGeneric"
            /// </summary>
            [EnumMember(Value = "LogInGeneric")]
            LogInGeneric,
            
            /// <summary>
            /// Enum LogOutGeneric for "LogOutGeneric"
            /// </summary>
            [EnumMember(Value = "LogOutGeneric")]
            LogOutGeneric,
            
            /// <summary>
            /// Enum LogInOCR for "LogInOCR"
            /// </summary>
            [EnumMember(Value = "LogInOCR")]
            LogInOCR,
            
            /// <summary>
            /// Enum LogOutOCR for "LogOutOCR"
            /// </summary>
            [EnumMember(Value = "LogOutOCR")]
            LogOutOCR,
            
            /// <summary>
            /// Enum WcfServiceDmModuliDelete for "WcfServiceDmModuliDelete"
            /// </summary>
            [EnumMember(Value = "WcfServiceDmModuliDelete")]
            WcfServiceDmModuliDelete,
            
            /// <summary>
            /// Enum LogIn for "LogIn"
            /// </summary>
            [EnumMember(Value = "LogIn")]
            LogIn,
            
            /// <summary>
            /// Enum LogOut for "LogOut"
            /// </summary>
            [EnumMember(Value = "LogOut")]
            LogOut,
            
            /// <summary>
            /// Enum GetDocument for "GetDocument"
            /// </summary>
            [EnumMember(Value = "GetDocument")]
            GetDocument,
            
            /// <summary>
            /// Enum SetDocument for "SetDocument"
            /// </summary>
            [EnumMember(Value = "SetDocument")]
            SetDocument,
            
            /// <summary>
            /// Enum DmNoteUpdated for "DmNoteUpdated"
            /// </summary>
            [EnumMember(Value = "DmNoteUpdated")]
            DmNoteUpdated,
            
            /// <summary>
            /// Enum PluginQueueLogInfo for "PluginQueueLogInfo"
            /// </summary>
            [EnumMember(Value = "PluginQueueLogInfo")]
            PluginQueueLogInfo,
            
            /// <summary>
            /// Enum SdAssocDocInserted for "SdAssocDocInserted"
            /// </summary>
            [EnumMember(Value = "SdAssocDocInserted")]
            SdAssocDocInserted,
            
            /// <summary>
            /// Enum SdAssocDocDeleted for "SdAssocDocDeleted"
            /// </summary>
            [EnumMember(Value = "SdAssocDocDeleted")]
            SdAssocDocDeleted,
            
            /// <summary>
            /// Enum DmBarcodeDeleted for "DmBarcodeDeleted"
            /// </summary>
            [EnumMember(Value = "DmBarcodeDeleted")]
            DmBarcodeDeleted,
            
            /// <summary>
            /// Enum DmBarcodeUnMatchProfile for "DmBarcodeUnMatchProfile"
            /// </summary>
            [EnumMember(Value = "DmBarcodeUnMatchProfile")]
            DmBarcodeUnMatchProfile,
            
            /// <summary>
            /// Enum DmAllegatiFaxInsertDocument for "DmAllegatiFaxInsertDocument"
            /// </summary>
            [EnumMember(Value = "DmAllegatiFaxInsertDocument")]
            DmAllegatiFaxInsertDocument,
            
            /// <summary>
            /// Enum DmDocOpenCheckOut for "DmDocOpenCheckOut"
            /// </summary>
            [EnumMember(Value = "DmDocOpenCheckOut")]
            DmDocOpenCheckOut,
            
            /// <summary>
            /// Enum DocumentInsertRelationship for "DocumentInsertRelationship"
            /// </summary>
            [EnumMember(Value = "DocumentInsertRelationship")]
            DocumentInsertRelationship,
            
            /// <summary>
            /// Enum RevisioniGetDocument for "RevisioniGetDocument"
            /// </summary>
            [EnumMember(Value = "RevisioniGetDocument")]
            RevisioniGetDocument,
            
            /// <summary>
            /// Enum RevisioniDelete for "RevisioniDelete"
            /// </summary>
            [EnumMember(Value = "RevisioniDelete")]
            RevisioniDelete,
            
            /// <summary>
            /// Enum DmNpceOutInsert for "DmNpceOutInsert"
            /// </summary>
            [EnumMember(Value = "DmNpceOutInsert")]
            DmNpceOutInsert,
            
            /// <summary>
            /// Enum DmNpceOutUpdate for "DmNpceOutUpdate"
            /// </summary>
            [EnumMember(Value = "DmNpceOutUpdate")]
            DmNpceOutUpdate,
            
            /// <summary>
            /// Enum DmNpceOutDelete for "DmNpceOutDelete"
            /// </summary>
            [EnumMember(Value = "DmNpceOutDelete")]
            DmNpceOutDelete,
            
            /// <summary>
            /// Enum DmAssociazioniInsert for "DmAssociazioniInsert"
            /// </summary>
            [EnumMember(Value = "DmAssociazioniInsert")]
            DmAssociazioniInsert,
            
            /// <summary>
            /// Enum DmAllegatiWorkInsert for "DmAllegatiWorkInsert"
            /// </summary>
            [EnumMember(Value = "DmAllegatiWorkInsert")]
            DmAllegatiWorkInsert,
            
            /// <summary>
            /// Enum DmProcessDocSetDocumentInEditBuffer for "DmProcessDocSetDocumentInEditBuffer"
            /// </summary>
            [EnumMember(Value = "DmProcessDocSetDocumentInEditBuffer")]
            DmProcessDocSetDocumentInEditBuffer,
            
            /// <summary>
            /// Enum DmProcessDocSetDocumentInLine for "DmProcessDocSetDocumentInLine"
            /// </summary>
            [EnumMember(Value = "DmProcessDocSetDocumentInLine")]
            DmProcessDocSetDocumentInLine,
            
            /// <summary>
            /// Enum DmProcessDocSetDocumentForProfile for "DmProcessDocSetDocumentForProfile"
            /// </summary>
            [EnumMember(Value = "DmProcessDocSetDocumentForProfile")]
            DmProcessDocSetDocumentForProfile,
            
            /// <summary>
            /// Enum DmAllegatiDocInsert for "DmAllegatiDocInsert"
            /// </summary>
            [EnumMember(Value = "DmAllegatiDocInsert")]
            DmAllegatiDocInsert,
            
            /// <summary>
            /// Enum DmAllegatiDocUpdate for "DmAllegatiDocUpdate"
            /// </summary>
            [EnumMember(Value = "DmAllegatiDocUpdate")]
            DmAllegatiDocUpdate,
            
            /// <summary>
            /// Enum DmAllegatiDocDelete for "DmAllegatiDocDelete"
            /// </summary>
            [EnumMember(Value = "DmAllegatiDocDelete")]
            DmAllegatiDocDelete,
            
            /// <summary>
            /// Enum ProfileUpdateProtocollo for "ProfileUpdateProtocollo"
            /// </summary>
            [EnumMember(Value = "ProfileUpdateProtocollo")]
            ProfileUpdateProtocollo,
            
            /// <summary>
            /// Enum ProfileDeleted for "ProfileDeleted"
            /// </summary>
            [EnumMember(Value = "ProfileDeleted")]
            ProfileDeleted,
            
            /// <summary>
            /// Enum ExternalCall for "ExternalCall"
            /// </summary>
            [EnumMember(Value = "ExternalCall")]
            ExternalCall,
            
            /// <summary>
            /// Enum ProfileUndoCheckOut for "ProfileUndoCheckOut"
            /// </summary>
            [EnumMember(Value = "ProfileUndoCheckOut")]
            ProfileUndoCheckOut,
            
            /// <summary>
            /// Enum ProfileInserted for "ProfileInserted"
            /// </summary>
            [EnumMember(Value = "ProfileInserted")]
            ProfileInserted,
            
            /// <summary>
            /// Enum ProfileLogReaded for "ProfileLogReaded"
            /// </summary>
            [EnumMember(Value = "ProfileLogReaded")]
            ProfileLogReaded,
            
            /// <summary>
            /// Enum ProfileUpdate for "ProfileUpdate"
            /// </summary>
            [EnumMember(Value = "ProfileUpdate")]
            ProfileUpdate,
            
            /// <summary>
            /// Enum ProfileFieldDocName for "Profile_Field_DocName"
            /// </summary>
            [EnumMember(Value = "Profile_Field_DocName")]
            ProfileFieldDocName,
            
            /// <summary>
            /// Enum ProfileFieldAoo for "Profile_Field_Aoo"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Aoo")]
            ProfileFieldAoo,
            
            /// <summary>
            /// Enum ProfileFieldNumero for "Profile_Field_Numero"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Numero")]
            ProfileFieldNumero,
            
            /// <summary>
            /// Enum ProfileFieldDataDoc for "Profile_Field_DataDoc"
            /// </summary>
            [EnumMember(Value = "Profile_Field_DataDoc")]
            ProfileFieldDataDoc,
            
            /// <summary>
            /// Enum ProfileFieldMittente for "Profile_Field_Mittente"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Mittente")]
            ProfileFieldMittente,
            
            /// <summary>
            /// Enum ProfileFieldDestinatario for "Profile_Field_Destinatario"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Destinatario")]
            ProfileFieldDestinatario,
            
            /// <summary>
            /// Enum ProfileFieldCc for "Profile_Field_Cc"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Cc")]
            ProfileFieldCc,
            
            /// <summary>
            /// Enum ProfileFieldCreationDate for "Profile_Field_CreationDate"
            /// </summary>
            [EnumMember(Value = "Profile_Field_CreationDate")]
            ProfileFieldCreationDate,
            
            /// <summary>
            /// Enum ProfileFieldImpronta for "Profile_Field_Impronta"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Impronta")]
            ProfileFieldImpronta,
            
            /// <summary>
            /// Enum ProfileFieldDevice for "Profile_Field_Device"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Device")]
            ProfileFieldDevice,
            
            /// <summary>
            /// Enum ProfileFieldDataFile for "Profile_Field_DataFile"
            /// </summary>
            [EnumMember(Value = "Profile_Field_DataFile")]
            ProfileFieldDataFile,
            
            /// <summary>
            /// Enum ProfileFieldImportante for "Profile_Field_Importante"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Importante")]
            ProfileFieldImportante,
            
            /// <summary>
            /// Enum ProfileFieldRevisione for "Profile_Field_Revisione"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Revisione")]
            ProfileFieldRevisione,
            
            /// <summary>
            /// Enum ProfileFieldAutore for "Profile_Field_Autore"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Autore")]
            ProfileFieldAutore,
            
            /// <summary>
            /// Enum ProfileFieldProtocollo for "Profile_Field_Protocollo"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Protocollo")]
            ProfileFieldProtocollo,
            
            /// <summary>
            /// Enum ProfileFieldAnno for "Profile_Field_Anno"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Anno")]
            ProfileFieldAnno,
            
            /// <summary>
            /// Enum ProfileFieldBloccato for "Profile_Field_Bloccato"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Bloccato")]
            ProfileFieldBloccato,
            
            /// <summary>
            /// Enum ProfileFieldStato for "Profile_Field_Stato"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Stato")]
            ProfileFieldStato,
            
            /// <summary>
            /// Enum ProfileFieldInOut for "Profile_Field_InOut"
            /// </summary>
            [EnumMember(Value = "Profile_Field_InOut")]
            ProfileFieldInOut,
            
            /// <summary>
            /// Enum ProfileFieldScadenza for "Profile_Field_Scadenza"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Scadenza")]
            ProfileFieldScadenza,
            
            /// <summary>
            /// Enum ProfileFieldFlag for "Profile_Field_Flag"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Flag")]
            ProfileFieldFlag,
            
            /// <summary>
            /// Enum ProfileFieldWorkFlow for "Profile_Field_WorkFlow"
            /// </summary>
            [EnumMember(Value = "Profile_Field_WorkFlow")]
            ProfileFieldWorkFlow,
            
            /// <summary>
            /// Enum ProfileFieldGestRev for "Profile_Field_GestRev"
            /// </summary>
            [EnumMember(Value = "Profile_Field_GestRev")]
            ProfileFieldGestRev,
            
            /// <summary>
            /// Enum ProfileFieldEtichettaCd for "Profile_Field_EtichettaCd"
            /// </summary>
            [EnumMember(Value = "Profile_Field_EtichettaCd")]
            ProfileFieldEtichettaCd,
            
            /// <summary>
            /// Enum ProfileFieldEtichettaAos for "Profile_Field_EtichettaAos"
            /// </summary>
            [EnumMember(Value = "Profile_Field_EtichettaAos")]
            ProfileFieldEtichettaAos,
            
            /// <summary>
            /// Enum ProfileFieldAssociazioni for "Profile_Field_Associazioni"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Associazioni")]
            ProfileFieldAssociazioni,
            
            /// <summary>
            /// Enum ProfileFieldOpenDoc for "Profile_Field_OpenDoc"
            /// </summary>
            [EnumMember(Value = "Profile_Field_OpenDoc")]
            ProfileFieldOpenDoc,
            
            /// <summary>
            /// Enum ProfileFieldAllegati for "Profile_Field_Allegati"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Allegati")]
            ProfileFieldAllegati,
            
            /// <summary>
            /// Enum ProfileFieldEmergenza for "Profile_Field_Emergenza"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Emergenza")]
            ProfileFieldEmergenza,
            
            /// <summary>
            /// Enum ProfileFieldIsAos for "Profile_Field_IsAos"
            /// </summary>
            [EnumMember(Value = "Profile_Field_IsAos")]
            ProfileFieldIsAos,
            
            /// <summary>
            /// Enum ProfileFieldEtiReader for "Profile_Field_EtiReader"
            /// </summary>
            [EnumMember(Value = "Profile_Field_EtiReader")]
            ProfileFieldEtiReader,
            
            /// <summary>
            /// Enum ProfileFieldScadAos for "Profile_Field_ScadAos"
            /// </summary>
            [EnumMember(Value = "Profile_Field_ScadAos")]
            ProfileFieldScadAos,
            
            /// <summary>
            /// Enum ProfileFieldAggiuntivi for "Profile_Field_Aggiuntivi"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Aggiuntivi")]
            ProfileFieldAggiuntivi,
            
            /// <summary>
            /// Enum ProfileFieldDataProt for "Profile_Field_DataProt"
            /// </summary>
            [EnumMember(Value = "Profile_Field_DataProt")]
            ProfileFieldDataProt,
            
            /// <summary>
            /// Enum ProfileFieldCompressed for "Profile_Field_Compressed"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Compressed")]
            ProfileFieldCompressed,
            
            /// <summary>
            /// Enum ProfileLogMigrated for "ProfileLogMigrated"
            /// </summary>
            [EnumMember(Value = "ProfileLogMigrated")]
            ProfileLogMigrated,
            
            /// <summary>
            /// Enum ProfileFieldOriginale for "Profile_Field_Originale"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Originale")]
            ProfileFieldOriginale,
            
            /// <summary>
            /// Enum ProfileSigned for "ProfileSigned"
            /// </summary>
            [EnumMember(Value = "ProfileSigned")]
            ProfileSigned,
            
            /// <summary>
            /// Enum ProfileInsertedInFolder for "ProfileInsertedInFolder"
            /// </summary>
            [EnumMember(Value = "ProfileInsertedInFolder")]
            ProfileInsertedInFolder,
            
            /// <summary>
            /// Enum ProfileInsertedInFaxOut for "ProfileInsertedInFaxOut"
            /// </summary>
            [EnumMember(Value = "ProfileInsertedInFaxOut")]
            ProfileInsertedInFaxOut,
            
            /// <summary>
            /// Enum ProfileInsertedInPratica for "ProfileInsertedInPratica"
            /// </summary>
            [EnumMember(Value = "ProfileInsertedInPratica")]
            ProfileInsertedInPratica,
            
            /// <summary>
            /// Enum ProfileInsertedNote for "ProfileInsertedNote"
            /// </summary>
            [EnumMember(Value = "ProfileInsertedNote")]
            ProfileInsertedNote,
            
            /// <summary>
            /// Enum LicenseViolated for "LicenseViolated"
            /// </summary>
            [EnumMember(Value = "LicenseViolated")]
            LicenseViolated,
            
            /// <summary>
            /// Enum BarcodePrinted for "BarcodePrinted"
            /// </summary>
            [EnumMember(Value = "BarcodePrinted")]
            BarcodePrinted,
            
            /// <summary>
            /// Enum WorkflowStarted for "WorkflowStarted"
            /// </summary>
            [EnumMember(Value = "WorkflowStarted")]
            WorkflowStarted,
            
            /// <summary>
            /// Enum WorkflowEnded for "WorkflowEnded"
            /// </summary>
            [EnumMember(Value = "WorkflowEnded")]
            WorkflowEnded,
            
            /// <summary>
            /// Enum WorkflowEndedForced for "WorkflowEndedForced"
            /// </summary>
            [EnumMember(Value = "WorkflowEndedForced")]
            WorkflowEndedForced,
            
            /// <summary>
            /// Enum WorkflowDeleted for "WorkflowDeleted"
            /// </summary>
            [EnumMember(Value = "WorkflowDeleted")]
            WorkflowDeleted,
            
            /// <summary>
            /// Enum DmAllegatiDocSignOtpSent for "DmAllegatiDocSignOtpSent"
            /// </summary>
            [EnumMember(Value = "DmAllegatiDocSignOtpSent")]
            DmAllegatiDocSignOtpSent,
            
            /// <summary>
            /// Enum DmProfileSignOtpSent for "DmProfileSignOtpSent"
            /// </summary>
            [EnumMember(Value = "DmProfileSignOtpSent")]
            DmProfileSignOtpSent,
            
            /// <summary>
            /// Enum ProfileRemovedFromFolder for "ProfileRemovedFromFolder"
            /// </summary>
            [EnumMember(Value = "ProfileRemovedFromFolder")]
            ProfileRemovedFromFolder,
            
            /// <summary>
            /// Enum ProfileRemovedFromPratica for "ProfileRemovedFromPratica"
            /// </summary>
            [EnumMember(Value = "ProfileRemovedFromPratica")]
            ProfileRemovedFromPratica,
            
            /// <summary>
            /// Enum DmSharingInsert for "Dm_Sharing_Insert"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Insert")]
            DmSharingInsert,
            
            /// <summary>
            /// Enum DmSharingUpdate for "Dm_Sharing_Update"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Update")]
            DmSharingUpdate,
            
            /// <summary>
            /// Enum DmSharingExpiration for "Dm_Sharing_Expiration"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Expiration")]
            DmSharingExpiration,
            
            /// <summary>
            /// Enum DmSharingRead for "Dm_Sharing_Read"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Read")]
            DmSharingRead,
            
            /// <summary>
            /// Enum DmSharingDelete for "Dm_Sharing_Delete"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Delete")]
            DmSharingDelete,
            
            /// <summary>
            /// Enum DmSharingExpirationNpceOut for "Dm_Sharing_Expiration_NpceOut"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Expiration_NpceOut")]
            DmSharingExpirationNpceOut,
            
            /// <summary>
            /// Enum RemoveDocument for "RemoveDocument"
            /// </summary>
            [EnumMember(Value = "RemoveDocument")]
            RemoveDocument,
            
            /// <summary>
            /// Enum DmSharingAlert for "Dm_Sharing_Alert"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_Alert")]
            DmSharingAlert,
            
            /// <summary>
            /// Enum DmSharingMailOut for "Dm_Sharing_MailOut"
            /// </summary>
            [EnumMember(Value = "Dm_Sharing_MailOut")]
            DmSharingMailOut,
            
            /// <summary>
            /// Enum DocumentRemovedFromRelationship for "DocumentRemovedFromRelationship"
            /// </summary>
            [EnumMember(Value = "DocumentRemovedFromRelationship")]
            DocumentRemovedFromRelationship,
            
            /// <summary>
            /// Enum DmAssociazioniDelete for "DmAssociazioniDelete"
            /// </summary>
            [EnumMember(Value = "DmAssociazioniDelete")]
            DmAssociazioniDelete,
            
            /// <summary>
            /// Enum DmQueueStart for "Dm_Queue_Start"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Start")]
            DmQueueStart,
            
            /// <summary>
            /// Enum DmQueueChangeProgress for "Dm_Queue_Change_Progress"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Change_Progress")]
            DmQueueChangeProgress,
            
            /// <summary>
            /// Enum DmQueueScheduled for "Dm_Queue_Scheduled"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Scheduled")]
            DmQueueScheduled,
            
            /// <summary>
            /// Enum DmQueueTerminated for "Dm_Queue_Terminated"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Terminated")]
            DmQueueTerminated,
            
            /// <summary>
            /// Enum DmQueueCancelled for "Dm_Queue_Cancelled"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Cancelled")]
            DmQueueCancelled,
            
            /// <summary>
            /// Enum DmQueueWaiting for "Dm_Queue_Waiting"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Waiting")]
            DmQueueWaiting,
            
            /// <summary>
            /// Enum DmQueueWarning for "Dm_Queue_Warning"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Warning")]
            DmQueueWarning,
            
            /// <summary>
            /// Enum DmQueueInfo for "Dm_Queue_Info"
            /// </summary>
            [EnumMember(Value = "Dm_Queue_Info")]
            DmQueueInfo,
            
            /// <summary>
            /// Enum DmInstructionsInsert for "Dm_Instructions_Insert"
            /// </summary>
            [EnumMember(Value = "Dm_Instructions_Insert")]
            DmInstructionsInsert,
            
            /// <summary>
            /// Enum DmInstructionsUpdate for "Dm_Instructions_Update"
            /// </summary>
            [EnumMember(Value = "Dm_Instructions_Update")]
            DmInstructionsUpdate,
            
            /// <summary>
            /// Enum DmInstructionsDelete for "Dm_Instructions_Delete"
            /// </summary>
            [EnumMember(Value = "Dm_Instructions_Delete")]
            DmInstructionsDelete,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldId for "Dm_DatiProfilo_Field_Id"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Id")]
            DmDatiProfiloFieldId,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldValore for "Dm_DatiProfilo_Field_Valore"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Valore")]
            DmDatiProfiloFieldValore,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldContatti for "Dm_DatiProfilo_Field_Contatti"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Contatti")]
            DmDatiProfiloFieldContatti,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldFax for "Dm_DatiProfilo_Field_Fax"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Fax")]
            DmDatiProfiloFieldFax,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldTel for "Dm_DatiProfilo_Field_Tel"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Tel")]
            DmDatiProfiloFieldTel,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldIndirizzo for "Dm_DatiProfilo_Field_Indirizzo"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Indirizzo")]
            DmDatiProfiloFieldIndirizzo,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldMail for "Dm_DatiProfilo_Field_Mail"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Mail")]
            DmDatiProfiloFieldMail,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldLocalita for "Dm_DatiProfilo_Field_Localita"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Localita")]
            DmDatiProfiloFieldLocalita,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldCap for "Dm_DatiProfilo_Field_Cap"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Cap")]
            DmDatiProfiloFieldCap,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldProvincia for "Dm_DatiProfilo_Field_Provincia"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Provincia")]
            DmDatiProfiloFieldProvincia,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldNazione for "Dm_DatiProfilo_Field_Nazione"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Nazione")]
            DmDatiProfiloFieldNazione,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldContatto for "Dm_DatiProfilo_Field_Contatto"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Contatto")]
            DmDatiProfiloFieldContatto,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldMansione for "Dm_DatiProfilo_Field_Mansione"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Mansione")]
            DmDatiProfiloFieldMansione,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldTelNome for "Dm_DatiProfilo_Field_TelNome"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_TelNome")]
            DmDatiProfiloFieldTelNome,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldFaxNome for "Dm_DatiProfilo_Field_FaxNome"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_FaxNome")]
            DmDatiProfiloFieldFaxNome,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldCell for "Dm_DatiProfilo_Field_Cell"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Cell")]
            DmDatiProfiloFieldCell,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldAbitazione for "Dm_DatiProfilo_Field_Abitazione"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Abitazione")]
            DmDatiProfiloFieldAbitazione,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldReparto for "Dm_DatiProfilo_Field_Reparto"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Reparto")]
            DmDatiProfiloFieldReparto,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldUfficio for "Dm_DatiProfilo_Field_Ufficio"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Ufficio")]
            DmDatiProfiloFieldUfficio,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldEmail for "Dm_DatiProfilo_Field_Email"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Email")]
            DmDatiProfiloFieldEmail,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldRiferimento for "Dm_DatiProfilo_Field_Riferimento"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Riferimento")]
            DmDatiProfiloFieldRiferimento,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldCodFis for "Dm_DatiProfilo_Field_CodFis"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_CodFis")]
            DmDatiProfiloFieldCodFis,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldPartIva for "Dm_DatiProfilo_Field_PartIva"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_PartIva")]
            DmDatiProfiloFieldPartIva,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldPriorita for "Dm_DatiProfilo_Field_Priorita"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Priorita")]
            DmDatiProfiloFieldPriorita,
            
            /// <summary>
            /// Enum DmDatiProfiloFieldCodice for "Dm_DatiProfilo_Field_Codice"
            /// </summary>
            [EnumMember(Value = "Dm_DatiProfilo_Field_Codice")]
            DmDatiProfiloFieldCodice,
            
            /// <summary>
            /// Enum ProfileFieldSenders for "Profile_Field_Senders"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Senders")]
            ProfileFieldSenders,
            
            /// <summary>
            /// Enum DmCollaborationCreate for "Dm_Collaboration_Create"
            /// </summary>
            [EnumMember(Value = "Dm_Collaboration_Create")]
            DmCollaborationCreate,
            
            /// <summary>
            /// Enum DmCollaborationReCollaborate for "Dm_Collaboration_ReCollaborate"
            /// </summary>
            [EnumMember(Value = "Dm_Collaboration_ReCollaborate")]
            DmCollaborationReCollaborate,
            
            /// <summary>
            /// Enum DmCollaborationTakeOff for "Dm_Collaboration_TakeOff"
            /// </summary>
            [EnumMember(Value = "Dm_Collaboration_TakeOff")]
            DmCollaborationTakeOff,
            
            /// <summary>
            /// Enum DmCollaborationDelete for "Dm_Collaboration_Delete"
            /// </summary>
            [EnumMember(Value = "Dm_Collaboration_Delete")]
            DmCollaborationDelete,
            
            /// <summary>
            /// Enum ProfileFieldDocumentType for "Profile_Field_DocumentType"
            /// </summary>
            [EnumMember(Value = "Profile_Field_DocumentType")]
            ProfileFieldDocumentType,
            
            /// <summary>
            /// Enum ProfileFieldTipo2 for "Profile_Field_Tipo2"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Tipo2")]
            ProfileFieldTipo2,
            
            /// <summary>
            /// Enum ProfileFieldTipo3 for "Profile_Field_Tipo3"
            /// </summary>
            [EnumMember(Value = "Profile_Field_Tipo3")]
            ProfileFieldTipo3,
            
            /// <summary>
            /// Enum DmCollaborationTerminate for "Dm_Collaboration_Terminate"
            /// </summary>
            [EnumMember(Value = "Dm_Collaboration_Terminate")]
            DmCollaborationTerminate,
            
            /// <summary>
            /// Enum AllegatiDocSigned for "AllegatiDocSigned"
            /// </summary>
            [EnumMember(Value = "AllegatiDocSigned")]
            AllegatiDocSigned,
            
            /// <summary>
            /// Enum LogInFailed for "LogInFailed"
            /// </summary>
            [EnumMember(Value = "LogInFailed")]
            LogInFailed
        }

        /// <summary>
        /// Tematica del log.
        /// </summary>
        /// <value>Tematica del log.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LogKindEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Profile for "Profile"
            /// </summary>
            [EnumMember(Value = "Profile")]
            Profile,
            
            /// <summary>
            /// Enum Sharing for "Sharing"
            /// </summary>
            [EnumMember(Value = "Sharing")]
            Sharing,
            
            /// <summary>
            /// Enum Queue for "Queue"
            /// </summary>
            [EnumMember(Value = "Queue")]
            Queue,
            
            /// <summary>
            /// Enum Instruction for "Instruction"
            /// </summary>
            [EnumMember(Value = "Instruction")]
            Instruction,
            
            /// <summary>
            /// Enum Collaboration for "Collaboration"
            /// </summary>
            [EnumMember(Value = "Collaboration")]
            Collaboration
        }

        /// <summary>
        /// Livello di log.
        /// </summary>
        /// <value>Livello di log.</value>
        [DataMember(Name="logLevel", EmitDefaultValue=false)]
        public LogLevelEnum? LogLevel { get; set; }
        /// <summary>
        /// Tipologia del messaggio di log.
        /// </summary>
        /// <value>Tipologia del messaggio di log.</value>
        [DataMember(Name="infoType", EmitDefaultValue=false)]
        public InfoTypeEnum? InfoType { get; set; }
        /// <summary>
        /// Tematica del log.
        /// </summary>
        /// <value>Tematica del log.</value>
        [DataMember(Name="logKind", EmitDefaultValue=false)]
        public LogKindEnum? LogKind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogDTO" /> class.
        /// </summary>
        /// <param name="Id">Identificativo della riga..</param>
        /// <param name="LogLevel">Livello di log..</param>
        /// <param name="LogMessage">Messaggio..</param>
        /// <param name="LogDate">Data di creazione..</param>
        /// <param name="UserId">Identificativo dell&#39;utente creatore..</param>
        /// <param name="UserNameComplete">UserNameComplete.</param>
        /// <param name="IpLogger">Indirizzo Ip del log..</param>
        /// <param name="InfoType">Tipologia del messaggio di log..</param>
        /// <param name="InfoTypeMessage">Tipologia del messaggio di log..</param>
        /// <param name="InfoInt">Tipologia dell&#39;informaione in intero..</param>
        /// <param name="SessionId">Identificativo della sessione che ha creato il log..</param>
        /// <param name="SoftwareName">Nome dell&#39;applicativo che ha loggato..</param>
        /// <param name="SoftwareType">Nome del software \&quot;Bundle\&quot; che ha loggato..</param>
        /// <param name="InfoString">Tipologia dell&#39;informaione in stringa..</param>
        /// <param name="ParentId">Identificativo dell&#39;oggetto di riferimento.</param>
        /// <param name="LogKind">Tematica del log..</param>
        /// <param name="HistoryInt">Intero di appoggio per le regole di eliminazione.</param>
        /// <param name="HistoryString">Intero di appoggio per le regole di eliminazione.</param>
        /// <param name="Childs">Childs.</param>
        public LogDTO(string Id = null, LogLevelEnum? LogLevel = null, string LogMessage = null, DateTime? LogDate = null, int? UserId = null, string UserNameComplete = null, string IpLogger = null, InfoTypeEnum? InfoType = null, string InfoTypeMessage = null, int? InfoInt = null, string SessionId = null, string SoftwareName = null, string SoftwareType = null, string InfoString = null, string ParentId = null, LogKindEnum? LogKind = null, int? HistoryInt = null, string HistoryString = null, List<LogDTO> Childs = null)
        {
            this.Id = Id;
            this.LogLevel = LogLevel;
            this.LogMessage = LogMessage;
            this.LogDate = LogDate;
            this.UserId = UserId;
            this.UserNameComplete = UserNameComplete;
            this.IpLogger = IpLogger;
            this.InfoType = InfoType;
            this.InfoTypeMessage = InfoTypeMessage;
            this.InfoInt = InfoInt;
            this.SessionId = SessionId;
            this.SoftwareName = SoftwareName;
            this.SoftwareType = SoftwareType;
            this.InfoString = InfoString;
            this.ParentId = ParentId;
            this.LogKind = LogKind;
            this.HistoryInt = HistoryInt;
            this.HistoryString = HistoryString;
            this.Childs = Childs;
        }
        
        /// <summary>
        /// Identificativo della riga.
        /// </summary>
        /// <value>Identificativo della riga.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Messaggio.
        /// </summary>
        /// <value>Messaggio.</value>
        [DataMember(Name="logMessage", EmitDefaultValue=false)]
        public string LogMessage { get; set; }
        /// <summary>
        /// Data di creazione.
        /// </summary>
        /// <value>Data di creazione.</value>
        [DataMember(Name="logDate", EmitDefaultValue=false)]
        public DateTime? LogDate { get; set; }
        /// <summary>
        /// Identificativo dell&#39;utente creatore.
        /// </summary>
        /// <value>Identificativo dell&#39;utente creatore.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets UserNameComplete
        /// </summary>
        [DataMember(Name="userNameComplete", EmitDefaultValue=false)]
        public string UserNameComplete { get; set; }
        /// <summary>
        /// Indirizzo Ip del log.
        /// </summary>
        /// <value>Indirizzo Ip del log.</value>
        [DataMember(Name="ipLogger", EmitDefaultValue=false)]
        public string IpLogger { get; set; }
        /// <summary>
        /// Tipologia del messaggio di log.
        /// </summary>
        /// <value>Tipologia del messaggio di log.</value>
        [DataMember(Name="infoTypeMessage", EmitDefaultValue=false)]
        public string InfoTypeMessage { get; set; }
        /// <summary>
        /// Tipologia dell&#39;informaione in intero.
        /// </summary>
        /// <value>Tipologia dell&#39;informaione in intero.</value>
        [DataMember(Name="infoInt", EmitDefaultValue=false)]
        public int? InfoInt { get; set; }
        /// <summary>
        /// Identificativo della sessione che ha creato il log.
        /// </summary>
        /// <value>Identificativo della sessione che ha creato il log.</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }
        /// <summary>
        /// Nome dell&#39;applicativo che ha loggato.
        /// </summary>
        /// <value>Nome dell&#39;applicativo che ha loggato.</value>
        [DataMember(Name="softwareName", EmitDefaultValue=false)]
        public string SoftwareName { get; set; }
        /// <summary>
        /// Nome del software \&quot;Bundle\&quot; che ha loggato.
        /// </summary>
        /// <value>Nome del software \&quot;Bundle\&quot; che ha loggato.</value>
        [DataMember(Name="softwareType", EmitDefaultValue=false)]
        public string SoftwareType { get; set; }
        /// <summary>
        /// Tipologia dell&#39;informaione in stringa.
        /// </summary>
        /// <value>Tipologia dell&#39;informaione in stringa.</value>
        [DataMember(Name="infoString", EmitDefaultValue=false)]
        public string InfoString { get; set; }
        /// <summary>
        /// Identificativo dell&#39;oggetto di riferimento
        /// </summary>
        /// <value>Identificativo dell&#39;oggetto di riferimento</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }
        /// <summary>
        /// Intero di appoggio per le regole di eliminazione
        /// </summary>
        /// <value>Intero di appoggio per le regole di eliminazione</value>
        [DataMember(Name="historyInt", EmitDefaultValue=false)]
        public int? HistoryInt { get; set; }
        /// <summary>
        /// Intero di appoggio per le regole di eliminazione
        /// </summary>
        /// <value>Intero di appoggio per le regole di eliminazione</value>
        [DataMember(Name="historyString", EmitDefaultValue=false)]
        public string HistoryString { get; set; }
        /// <summary>
        /// Gets or Sets Childs
        /// </summary>
        [DataMember(Name="childs", EmitDefaultValue=false)]
        public List<LogDTO> Childs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  LogMessage: ").Append(LogMessage).Append("\n");
            sb.Append("  LogDate: ").Append(LogDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserNameComplete: ").Append(UserNameComplete).Append("\n");
            sb.Append("  IpLogger: ").Append(IpLogger).Append("\n");
            sb.Append("  InfoType: ").Append(InfoType).Append("\n");
            sb.Append("  InfoTypeMessage: ").Append(InfoTypeMessage).Append("\n");
            sb.Append("  InfoInt: ").Append(InfoInt).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SoftwareName: ").Append(SoftwareName).Append("\n");
            sb.Append("  SoftwareType: ").Append(SoftwareType).Append("\n");
            sb.Append("  InfoString: ").Append(InfoString).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  LogKind: ").Append(LogKind).Append("\n");
            sb.Append("  HistoryInt: ").Append(HistoryInt).Append("\n");
            sb.Append("  HistoryString: ").Append(HistoryString).Append("\n");
            sb.Append("  Childs: ").Append(Childs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LogDTO);
        }

        /// <summary>
        /// Returns true if LogDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LogDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LogLevel == other.LogLevel ||
                    this.LogLevel != null &&
                    this.LogLevel.Equals(other.LogLevel)
                ) && 
                (
                    this.LogMessage == other.LogMessage ||
                    this.LogMessage != null &&
                    this.LogMessage.Equals(other.LogMessage)
                ) && 
                (
                    this.LogDate == other.LogDate ||
                    this.LogDate != null &&
                    this.LogDate.Equals(other.LogDate)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.UserNameComplete == other.UserNameComplete ||
                    this.UserNameComplete != null &&
                    this.UserNameComplete.Equals(other.UserNameComplete)
                ) && 
                (
                    this.IpLogger == other.IpLogger ||
                    this.IpLogger != null &&
                    this.IpLogger.Equals(other.IpLogger)
                ) && 
                (
                    this.InfoType == other.InfoType ||
                    this.InfoType != null &&
                    this.InfoType.Equals(other.InfoType)
                ) && 
                (
                    this.InfoTypeMessage == other.InfoTypeMessage ||
                    this.InfoTypeMessage != null &&
                    this.InfoTypeMessage.Equals(other.InfoTypeMessage)
                ) && 
                (
                    this.InfoInt == other.InfoInt ||
                    this.InfoInt != null &&
                    this.InfoInt.Equals(other.InfoInt)
                ) && 
                (
                    this.SessionId == other.SessionId ||
                    this.SessionId != null &&
                    this.SessionId.Equals(other.SessionId)
                ) && 
                (
                    this.SoftwareName == other.SoftwareName ||
                    this.SoftwareName != null &&
                    this.SoftwareName.Equals(other.SoftwareName)
                ) && 
                (
                    this.SoftwareType == other.SoftwareType ||
                    this.SoftwareType != null &&
                    this.SoftwareType.Equals(other.SoftwareType)
                ) && 
                (
                    this.InfoString == other.InfoString ||
                    this.InfoString != null &&
                    this.InfoString.Equals(other.InfoString)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.LogKind == other.LogKind ||
                    this.LogKind != null &&
                    this.LogKind.Equals(other.LogKind)
                ) && 
                (
                    this.HistoryInt == other.HistoryInt ||
                    this.HistoryInt != null &&
                    this.HistoryInt.Equals(other.HistoryInt)
                ) && 
                (
                    this.HistoryString == other.HistoryString ||
                    this.HistoryString != null &&
                    this.HistoryString.Equals(other.HistoryString)
                ) && 
                (
                    this.Childs == other.Childs ||
                    this.Childs != null &&
                    this.Childs.SequenceEqual(other.Childs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LogLevel != null)
                    hash = hash * 59 + this.LogLevel.GetHashCode();
                if (this.LogMessage != null)
                    hash = hash * 59 + this.LogMessage.GetHashCode();
                if (this.LogDate != null)
                    hash = hash * 59 + this.LogDate.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserNameComplete != null)
                    hash = hash * 59 + this.UserNameComplete.GetHashCode();
                if (this.IpLogger != null)
                    hash = hash * 59 + this.IpLogger.GetHashCode();
                if (this.InfoType != null)
                    hash = hash * 59 + this.InfoType.GetHashCode();
                if (this.InfoTypeMessage != null)
                    hash = hash * 59 + this.InfoTypeMessage.GetHashCode();
                if (this.InfoInt != null)
                    hash = hash * 59 + this.InfoInt.GetHashCode();
                if (this.SessionId != null)
                    hash = hash * 59 + this.SessionId.GetHashCode();
                if (this.SoftwareName != null)
                    hash = hash * 59 + this.SoftwareName.GetHashCode();
                if (this.SoftwareType != null)
                    hash = hash * 59 + this.SoftwareType.GetHashCode();
                if (this.InfoString != null)
                    hash = hash * 59 + this.InfoString.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.LogKind != null)
                    hash = hash * 59 + this.LogKind.GetHashCode();
                if (this.HistoryInt != null)
                    hash = hash * 59 + this.HistoryInt.GetHashCode();
                if (this.HistoryString != null)
                    hash = hash * 59 + this.HistoryString.GetHashCode();
                if (this.Childs != null)
                    hash = hash * 59 + this.Childs.GetHashCode();
                return hash;
            }
        }
    }

}
