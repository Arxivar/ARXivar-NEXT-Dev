/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldInt
    /// </summary>
    [DataContract]
    public partial class FieldInt :  IEquatable<FieldInt>
    {
        /// <summary>
        /// Gets or Sets Operatore
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatoreEnum
        {
            
            /// <summary>
            /// Enum NonImpostato for "Non_Impostato"
            /// </summary>
            [EnumMember(Value = "Non_Impostato")]
            NonImpostato,
            
            /// <summary>
            /// Enum Minore for "Minore"
            /// </summary>
            [EnumMember(Value = "Minore")]
            Minore,
            
            /// <summary>
            /// Enum MinoreUguale for "Minore_Uguale"
            /// </summary>
            [EnumMember(Value = "Minore_Uguale")]
            MinoreUguale,
            
            /// <summary>
            /// Enum Uguale for "Uguale"
            /// </summary>
            [EnumMember(Value = "Uguale")]
            Uguale,
            
            /// <summary>
            /// Enum MaggioreUguale for "Maggiore_Uguale"
            /// </summary>
            [EnumMember(Value = "Maggiore_Uguale")]
            MaggioreUguale,
            
            /// <summary>
            /// Enum Maggiore for "Maggiore"
            /// </summary>
            [EnumMember(Value = "Maggiore")]
            Maggiore,
            
            /// <summary>
            /// Enum Diverso for "Diverso"
            /// </summary>
            [EnumMember(Value = "Diverso")]
            Diverso,
            
            /// <summary>
            /// Enum Compreso for "Compreso"
            /// </summary>
            [EnumMember(Value = "Compreso")]
            Compreso,
            
            /// <summary>
            /// Enum Nullo for "Nullo"
            /// </summary>
            [EnumMember(Value = "Nullo")]
            Nullo,
            
            /// <summary>
            /// Enum NonNullo for "Non_Nullo"
            /// </summary>
            [EnumMember(Value = "Non_Nullo")]
            NonNullo,
            
            /// <summary>
            /// Enum NullooZero for "Nullo_o_Zero"
            /// </summary>
            [EnumMember(Value = "Nullo_o_Zero")]
            NullooZero,
            
            /// <summary>
            /// Enum NonNulloeNonZero for "Non_Nullo_e_Non_Zero"
            /// </summary>
            [EnumMember(Value = "Non_Nullo_e_Non_Zero")]
            NonNulloeNonZero,
            
            /// <summary>
            /// Enum Escluso for "Escluso"
            /// </summary>
            [EnumMember(Value = "Escluso")]
            Escluso
        }

        /// <summary>
        /// Gets or Sets Operatore
        /// </summary>
        [DataMember(Name="operatore", EmitDefaultValue=false)]
        public OperatoreEnum? Operatore { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldInt" /> class.
        /// </summary>
        /// <param name="Valore2">Valore2.</param>
        /// <param name="Valore">Valore.</param>
        /// <param name="Operatore">Operatore.</param>
        /// <param name="Nome">Nome.</param>
        /// <param name="NomeTabella">NomeTabella.</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="Multiple">Multiple.</param>
        /// <param name="Label">Label.</param>
        public FieldInt(Object Valore2 = null, Object Valore = null, OperatoreEnum? Operatore = null, string Nome = null, string NomeTabella = null, string ExternalId = null, string Multiple = null, string Label = null)
        {
            this.Valore2 = Valore2;
            this.Valore = Valore;
            this.Operatore = Operatore;
            this.Nome = Nome;
            this.NomeTabella = NomeTabella;
            this.ExternalId = ExternalId;
            this.Multiple = Multiple;
            this.Label = Label;
        }
        
        /// <summary>
        /// Gets or Sets Valore2
        /// </summary>
        [DataMember(Name="valore2", EmitDefaultValue=false)]
        public Object Valore2 { get; set; }
        /// <summary>
        /// Gets or Sets Valore
        /// </summary>
        [DataMember(Name="valore", EmitDefaultValue=false)]
        public Object Valore { get; set; }
        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [DataMember(Name="nome", EmitDefaultValue=false)]
        public string Nome { get; set; }
        /// <summary>
        /// Gets or Sets NomeTabella
        /// </summary>
        [DataMember(Name="nomeTabella", EmitDefaultValue=false)]
        public string NomeTabella { get; set; }
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets Multiple
        /// </summary>
        [DataMember(Name="multiple", EmitDefaultValue=false)]
        public string Multiple { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldInt {\n");
            sb.Append("  Valore2: ").Append(Valore2).Append("\n");
            sb.Append("  Valore: ").Append(Valore).Append("\n");
            sb.Append("  Operatore: ").Append(Operatore).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  NomeTabella: ").Append(NomeTabella).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Multiple: ").Append(Multiple).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FieldInt);
        }

        /// <summary>
        /// Returns true if FieldInt instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldInt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldInt other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Valore2 == other.Valore2 ||
                    this.Valore2 != null &&
                    this.Valore2.Equals(other.Valore2)
                ) && 
                (
                    this.Valore == other.Valore ||
                    this.Valore != null &&
                    this.Valore.Equals(other.Valore)
                ) && 
                (
                    this.Operatore == other.Operatore ||
                    this.Operatore != null &&
                    this.Operatore.Equals(other.Operatore)
                ) && 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this.NomeTabella == other.NomeTabella ||
                    this.NomeTabella != null &&
                    this.NomeTabella.Equals(other.NomeTabella)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.Multiple == other.Multiple ||
                    this.Multiple != null &&
                    this.Multiple.Equals(other.Multiple)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Valore2 != null)
                    hash = hash * 59 + this.Valore2.GetHashCode();
                if (this.Valore != null)
                    hash = hash * 59 + this.Valore.GetHashCode();
                if (this.Operatore != null)
                    hash = hash * 59 + this.Operatore.GetHashCode();
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this.NomeTabella != null)
                    hash = hash * 59 + this.NomeTabella.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.Multiple != null)
                    hash = hash * 59 + this.Multiple.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                return hash;
            }
        }
    }

}
