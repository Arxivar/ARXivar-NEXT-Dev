/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Professional Role operation.
    /// </summary>
    [DataContract]
    public partial class ProfessionalRoleOperationDTO :  IEquatable<ProfessionalRoleOperationDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfessionalRoleOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Professional role operation id..</param>
        /// <param name="ProcessId">Process Id..</param>
        /// <param name="ProfessionalRoleId">Professional Role Id.</param>
        /// <param name="UserId">User Id..</param>
        /// <param name="UserCompleteName">User complete name..</param>
        /// <param name="OrganizationChartId">Organization chart Id..</param>
        /// <param name="DelegationId">Delegation Id..</param>
        /// <param name="OriginalUserId">Original user Id ..</param>
        /// <param name="OriginalOrganizationChartId">Original user organization chart Id..</param>
        /// <param name="ProfessionalRoleName">Professional role name..</param>
        /// <param name="ExitCode">ExitCode related to this professional role in the task.</param>
        public ProfessionalRoleOperationDTO(int? Id = null, int? ProcessId = null, int? ProfessionalRoleId = null, int? UserId = null, string UserCompleteName = null, int? OrganizationChartId = null, int? DelegationId = null, int? OriginalUserId = null, int? OriginalOrganizationChartId = null, string ProfessionalRoleName = null, string ExitCode = null)
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.ProfessionalRoleId = ProfessionalRoleId;
            this.UserId = UserId;
            this.UserCompleteName = UserCompleteName;
            this.OrganizationChartId = OrganizationChartId;
            this.DelegationId = DelegationId;
            this.OriginalUserId = OriginalUserId;
            this.OriginalOrganizationChartId = OriginalOrganizationChartId;
            this.ProfessionalRoleName = ProfessionalRoleName;
            this.ExitCode = ExitCode;
        }
        
        /// <summary>
        /// Professional role operation id.
        /// </summary>
        /// <value>Professional role operation id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Process Id.
        /// </summary>
        /// <value>Process Id.</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }
        /// <summary>
        /// Professional Role Id
        /// </summary>
        /// <value>Professional Role Id</value>
        [DataMember(Name="professionalRoleId", EmitDefaultValue=false)]
        public int? ProfessionalRoleId { get; set; }
        /// <summary>
        /// User Id.
        /// </summary>
        /// <value>User Id.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// User complete name.
        /// </summary>
        /// <value>User complete name.</value>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }
        /// <summary>
        /// Organization chart Id.
        /// </summary>
        /// <value>Organization chart Id.</value>
        [DataMember(Name="organizationChartId", EmitDefaultValue=false)]
        public int? OrganizationChartId { get; set; }
        /// <summary>
        /// Delegation Id.
        /// </summary>
        /// <value>Delegation Id.</value>
        [DataMember(Name="delegationId", EmitDefaultValue=false)]
        public int? DelegationId { get; set; }
        /// <summary>
        /// Original user Id .
        /// </summary>
        /// <value>Original user Id .</value>
        [DataMember(Name="originalUserId", EmitDefaultValue=false)]
        public int? OriginalUserId { get; set; }
        /// <summary>
        /// Original user organization chart Id.
        /// </summary>
        /// <value>Original user organization chart Id.</value>
        [DataMember(Name="originalOrganizationChartId", EmitDefaultValue=false)]
        public int? OriginalOrganizationChartId { get; set; }
        /// <summary>
        /// Professional role name.
        /// </summary>
        /// <value>Professional role name.</value>
        [DataMember(Name="professionalRoleName", EmitDefaultValue=false)]
        public string ProfessionalRoleName { get; set; }
        /// <summary>
        /// ExitCode related to this professional role in the task
        /// </summary>
        /// <value>ExitCode related to this professional role in the task</value>
        [DataMember(Name="exitCode", EmitDefaultValue=false)]
        public string ExitCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfessionalRoleOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ProfessionalRoleId: ").Append(ProfessionalRoleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  OrganizationChartId: ").Append(OrganizationChartId).Append("\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  OriginalUserId: ").Append(OriginalUserId).Append("\n");
            sb.Append("  OriginalOrganizationChartId: ").Append(OriginalOrganizationChartId).Append("\n");
            sb.Append("  ProfessionalRoleName: ").Append(ProfessionalRoleName).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProfessionalRoleOperationDTO);
        }

        /// <summary>
        /// Returns true if ProfessionalRoleOperationDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ProfessionalRoleOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfessionalRoleOperationDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.ProfessionalRoleId == other.ProfessionalRoleId ||
                    this.ProfessionalRoleId != null &&
                    this.ProfessionalRoleId.Equals(other.ProfessionalRoleId)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.UserCompleteName == other.UserCompleteName ||
                    this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(other.UserCompleteName)
                ) && 
                (
                    this.OrganizationChartId == other.OrganizationChartId ||
                    this.OrganizationChartId != null &&
                    this.OrganizationChartId.Equals(other.OrganizationChartId)
                ) && 
                (
                    this.DelegationId == other.DelegationId ||
                    this.DelegationId != null &&
                    this.DelegationId.Equals(other.DelegationId)
                ) && 
                (
                    this.OriginalUserId == other.OriginalUserId ||
                    this.OriginalUserId != null &&
                    this.OriginalUserId.Equals(other.OriginalUserId)
                ) && 
                (
                    this.OriginalOrganizationChartId == other.OriginalOrganizationChartId ||
                    this.OriginalOrganizationChartId != null &&
                    this.OriginalOrganizationChartId.Equals(other.OriginalOrganizationChartId)
                ) && 
                (
                    this.ProfessionalRoleName == other.ProfessionalRoleName ||
                    this.ProfessionalRoleName != null &&
                    this.ProfessionalRoleName.Equals(other.ProfessionalRoleName)
                ) && 
                (
                    this.ExitCode == other.ExitCode ||
                    this.ExitCode != null &&
                    this.ExitCode.Equals(other.ExitCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.ProfessionalRoleId != null)
                    hash = hash * 59 + this.ProfessionalRoleId.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserCompleteName != null)
                    hash = hash * 59 + this.UserCompleteName.GetHashCode();
                if (this.OrganizationChartId != null)
                    hash = hash * 59 + this.OrganizationChartId.GetHashCode();
                if (this.DelegationId != null)
                    hash = hash * 59 + this.DelegationId.GetHashCode();
                if (this.OriginalUserId != null)
                    hash = hash * 59 + this.OriginalUserId.GetHashCode();
                if (this.OriginalOrganizationChartId != null)
                    hash = hash * 59 + this.OriginalOrganizationChartId.GetHashCode();
                if (this.ProfessionalRoleName != null)
                    hash = hash * 59 + this.ProfessionalRoleName.GetHashCode();
                if (this.ExitCode != null)
                    hash = hash * 59 + this.ExitCode.GetHashCode();
                return hash;
            }
        }
    }

}
