/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Professional Role operation.
    /// </summary>
    [DataContract]
    public partial class ProfessionalRoleOperationDTO :  IEquatable<ProfessionalRoleOperationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfessionalRoleOperationDTO" /> class.
        /// </summary>
        /// <param name="Id">Professional role operation id..</param>
        /// <param name="ProcessId">Process Id..</param>
        /// <param name="ProfessionalRoleId">Professional Role Id.</param>
        /// <param name="UserId">User Id..</param>
        /// <param name="UserCompleteName">User complete name..</param>
        /// <param name="OrganizationChartId">Organization chart Id..</param>
        /// <param name="DelegationId">Delegation Id..</param>
        /// <param name="OriginalUserId">Original user Id ..</param>
        /// <param name="OriginalOrganizationChartId">Original user organization chart Id..</param>
        /// <param name="ProfessionalRoleName">Professional role name..</param>
        /// <param name="ExitCode">ExitCode related to this professional role in the task.</param>
        public ProfessionalRoleOperationDTO(int? Id = default(int?), int? ProcessId = default(int?), int? ProfessionalRoleId = default(int?), int? UserId = default(int?), string UserCompleteName = default(string), int? OrganizationChartId = default(int?), int? DelegationId = default(int?), int? OriginalUserId = default(int?), int? OriginalOrganizationChartId = default(int?), string ProfessionalRoleName = default(string), string ExitCode = default(string))
        {
            this.Id = Id;
            this.ProcessId = ProcessId;
            this.ProfessionalRoleId = ProfessionalRoleId;
            this.UserId = UserId;
            this.UserCompleteName = UserCompleteName;
            this.OrganizationChartId = OrganizationChartId;
            this.DelegationId = DelegationId;
            this.OriginalUserId = OriginalUserId;
            this.OriginalOrganizationChartId = OriginalOrganizationChartId;
            this.ProfessionalRoleName = ProfessionalRoleName;
            this.ExitCode = ExitCode;
        }
        
        /// <summary>
        /// Professional role operation id.
        /// </summary>
        /// <value>Professional role operation id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Process Id.
        /// </summary>
        /// <value>Process Id.</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// Professional Role Id
        /// </summary>
        /// <value>Professional Role Id</value>
        [DataMember(Name="professionalRoleId", EmitDefaultValue=false)]
        public int? ProfessionalRoleId { get; set; }

        /// <summary>
        /// User Id.
        /// </summary>
        /// <value>User Id.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// User complete name.
        /// </summary>
        /// <value>User complete name.</value>
        [DataMember(Name="userCompleteName", EmitDefaultValue=false)]
        public string UserCompleteName { get; set; }

        /// <summary>
        /// Organization chart Id.
        /// </summary>
        /// <value>Organization chart Id.</value>
        [DataMember(Name="organizationChartId", EmitDefaultValue=false)]
        public int? OrganizationChartId { get; set; }

        /// <summary>
        /// Delegation Id.
        /// </summary>
        /// <value>Delegation Id.</value>
        [DataMember(Name="delegationId", EmitDefaultValue=false)]
        public int? DelegationId { get; set; }

        /// <summary>
        /// Original user Id .
        /// </summary>
        /// <value>Original user Id .</value>
        [DataMember(Name="originalUserId", EmitDefaultValue=false)]
        public int? OriginalUserId { get; set; }

        /// <summary>
        /// Original user organization chart Id.
        /// </summary>
        /// <value>Original user organization chart Id.</value>
        [DataMember(Name="originalOrganizationChartId", EmitDefaultValue=false)]
        public int? OriginalOrganizationChartId { get; set; }

        /// <summary>
        /// Professional role name.
        /// </summary>
        /// <value>Professional role name.</value>
        [DataMember(Name="professionalRoleName", EmitDefaultValue=false)]
        public string ProfessionalRoleName { get; set; }

        /// <summary>
        /// ExitCode related to this professional role in the task
        /// </summary>
        /// <value>ExitCode related to this professional role in the task</value>
        [DataMember(Name="exitCode", EmitDefaultValue=false)]
        public string ExitCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfessionalRoleOperationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ProfessionalRoleId: ").Append(ProfessionalRoleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserCompleteName: ").Append(UserCompleteName).Append("\n");
            sb.Append("  OrganizationChartId: ").Append(OrganizationChartId).Append("\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  OriginalUserId: ").Append(OriginalUserId).Append("\n");
            sb.Append("  OriginalOrganizationChartId: ").Append(OriginalOrganizationChartId).Append("\n");
            sb.Append("  ProfessionalRoleName: ").Append(ProfessionalRoleName).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfessionalRoleOperationDTO);
        }

        /// <summary>
        /// Returns true if ProfessionalRoleOperationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfessionalRoleOperationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfessionalRoleOperationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.ProfessionalRoleId == input.ProfessionalRoleId ||
                    (this.ProfessionalRoleId != null &&
                    this.ProfessionalRoleId.Equals(input.ProfessionalRoleId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserCompleteName == input.UserCompleteName ||
                    (this.UserCompleteName != null &&
                    this.UserCompleteName.Equals(input.UserCompleteName))
                ) && 
                (
                    this.OrganizationChartId == input.OrganizationChartId ||
                    (this.OrganizationChartId != null &&
                    this.OrganizationChartId.Equals(input.OrganizationChartId))
                ) && 
                (
                    this.DelegationId == input.DelegationId ||
                    (this.DelegationId != null &&
                    this.DelegationId.Equals(input.DelegationId))
                ) && 
                (
                    this.OriginalUserId == input.OriginalUserId ||
                    (this.OriginalUserId != null &&
                    this.OriginalUserId.Equals(input.OriginalUserId))
                ) && 
                (
                    this.OriginalOrganizationChartId == input.OriginalOrganizationChartId ||
                    (this.OriginalOrganizationChartId != null &&
                    this.OriginalOrganizationChartId.Equals(input.OriginalOrganizationChartId))
                ) && 
                (
                    this.ProfessionalRoleName == input.ProfessionalRoleName ||
                    (this.ProfessionalRoleName != null &&
                    this.ProfessionalRoleName.Equals(input.ProfessionalRoleName))
                ) && 
                (
                    this.ExitCode == input.ExitCode ||
                    (this.ExitCode != null &&
                    this.ExitCode.Equals(input.ExitCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.ProfessionalRoleId != null)
                    hashCode = hashCode * 59 + this.ProfessionalRoleId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserCompleteName != null)
                    hashCode = hashCode * 59 + this.UserCompleteName.GetHashCode();
                if (this.OrganizationChartId != null)
                    hashCode = hashCode * 59 + this.OrganizationChartId.GetHashCode();
                if (this.DelegationId != null)
                    hashCode = hashCode * 59 + this.DelegationId.GetHashCode();
                if (this.OriginalUserId != null)
                    hashCode = hashCode * 59 + this.OriginalUserId.GetHashCode();
                if (this.OriginalOrganizationChartId != null)
                    hashCode = hashCode * 59 + this.OriginalOrganizationChartId.GetHashCode();
                if (this.ProfessionalRoleName != null)
                    hashCode = hashCode * 59 + this.ProfessionalRoleName.GetHashCode();
                if (this.ExitCode != null)
                    hashCode = hashCode * 59 + this.ExitCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
