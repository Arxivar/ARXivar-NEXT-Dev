/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProfileMaskBehaviourDTO
    /// </summary>
    [DataContract]
    public partial class ProfileMaskBehaviourDTO :  IEquatable<ProfileMaskBehaviourDTO>
    {
        /// <summary>
        /// Gets or Sets PaMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaModeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum OnlyNever for "OnlyNever"
            /// </summary>
            [EnumMember(Value = "OnlyNever")]
            OnlyNever,
            
            /// <summary>
            /// Enum OnlyOptionally for "OnlyOptionally"
            /// </summary>
            [EnumMember(Value = "OnlyOptionally")]
            OnlyOptionally,
            
            /// <summary>
            /// Enum NeverOrOptionally for "NeverOrOptionally"
            /// </summary>
            [EnumMember(Value = "NeverOrOptionally")]
            NeverOrOptionally,
            
            /// <summary>
            /// Enum OnlyAlways for "OnlyAlways"
            /// </summary>
            [EnumMember(Value = "OnlyAlways")]
            OnlyAlways,
            
            /// <summary>
            /// Enum AlwaysOrNever for "AlwaysOrNever"
            /// </summary>
            [EnumMember(Value = "AlwaysOrNever")]
            AlwaysOrNever,
            
            /// <summary>
            /// Enum AlwaysOrOptionally for "AlwaysOrOptionally"
            /// </summary>
            [EnumMember(Value = "AlwaysOrOptionally")]
            AlwaysOrOptionally,
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All
        }

        /// <summary>
        /// Gets or Sets PaMode
        /// </summary>
        [DataMember(Name="paMode", EmitDefaultValue=false)]
        public PaModeEnum? PaMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMaskBehaviourDTO" /> class.
        /// </summary>
        /// <param name="LoadAdditional">LoadAdditional.</param>
        /// <param name="ShowGroups">ShowGroups.</param>
        /// <param name="PaMode">PaMode.</param>
        public ProfileMaskBehaviourDTO(bool? LoadAdditional = null, bool? ShowGroups = null, PaModeEnum? PaMode = null)
        {
            this.LoadAdditional = LoadAdditional;
            this.ShowGroups = ShowGroups;
            this.PaMode = PaMode;
        }
        
        /// <summary>
        /// Gets or Sets LoadAdditional
        /// </summary>
        [DataMember(Name="loadAdditional", EmitDefaultValue=false)]
        public bool? LoadAdditional { get; set; }
        /// <summary>
        /// Gets or Sets ShowGroups
        /// </summary>
        [DataMember(Name="showGroups", EmitDefaultValue=false)]
        public bool? ShowGroups { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileMaskBehaviourDTO {\n");
            sb.Append("  LoadAdditional: ").Append(LoadAdditional).Append("\n");
            sb.Append("  ShowGroups: ").Append(ShowGroups).Append("\n");
            sb.Append("  PaMode: ").Append(PaMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProfileMaskBehaviourDTO);
        }

        /// <summary>
        /// Returns true if ProfileMaskBehaviourDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ProfileMaskBehaviourDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileMaskBehaviourDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LoadAdditional == other.LoadAdditional ||
                    this.LoadAdditional != null &&
                    this.LoadAdditional.Equals(other.LoadAdditional)
                ) && 
                (
                    this.ShowGroups == other.ShowGroups ||
                    this.ShowGroups != null &&
                    this.ShowGroups.Equals(other.ShowGroups)
                ) && 
                (
                    this.PaMode == other.PaMode ||
                    this.PaMode != null &&
                    this.PaMode.Equals(other.PaMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LoadAdditional != null)
                    hash = hash * 59 + this.LoadAdditional.GetHashCode();
                if (this.ShowGroups != null)
                    hash = hash * 59 + this.ShowGroups.GetHashCode();
                if (this.PaMode != null)
                    hash = hash * 59 + this.PaMode.GetHashCode();
                return hash;
            }
        }
    }

}
