/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IMAP Settings
    /// </summary>
    [DataContract]
    public partial class MailAccountReceiveSettingsImapDTO :  IEquatable<MailAccountReceiveSettingsImapDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailAccountReceiveSettingsImapDTO" /> class.
        /// </summary>
        /// <param name="server">Source folder.</param>
        /// <param name="username">Source folder.</param>
        /// <param name="password">Source folder.</param>
        /// <param name="port">Source folder.</param>
        /// <param name="connectionTimeout">Source folder.</param>
        /// <param name="securityProtocol">Possible values:  0: None  1: TLS  2: SSL .</param>
        /// <param name="foldersConfiguration">Source folder.</param>
        public MailAccountReceiveSettingsImapDTO(string server = default(string), string username = default(string), string password = default(string), int? port = default(int?), int? connectionTimeout = default(int?), int? securityProtocol = default(int?), List<MailAccountImapFolderDTO> foldersConfiguration = default(List<MailAccountImapFolderDTO>))
        {
            this.Server = server;
            this.Username = username;
            this.Password = password;
            this.Port = port;
            this.ConnectionTimeout = connectionTimeout;
            this.SecurityProtocol = securityProtocol;
            this.FoldersConfiguration = foldersConfiguration;
        }
        
        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="server", EmitDefaultValue=false)]
        public string Server { get; set; }

        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="connectionTimeout", EmitDefaultValue=false)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: TLS  2: SSL 
        /// </summary>
        /// <value>Possible values:  0: None  1: TLS  2: SSL </value>
        [DataMember(Name="securityProtocol", EmitDefaultValue=false)]
        public int? SecurityProtocol { get; set; }

        /// <summary>
        /// Source folder
        /// </summary>
        /// <value>Source folder</value>
        [DataMember(Name="foldersConfiguration", EmitDefaultValue=false)]
        public List<MailAccountImapFolderDTO> FoldersConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailAccountReceiveSettingsImapDTO {\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ConnectionTimeout: ").Append(ConnectionTimeout).Append("\n");
            sb.Append("  SecurityProtocol: ").Append(SecurityProtocol).Append("\n");
            sb.Append("  FoldersConfiguration: ").Append(FoldersConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailAccountReceiveSettingsImapDTO);
        }

        /// <summary>
        /// Returns true if MailAccountReceiveSettingsImapDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailAccountReceiveSettingsImapDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailAccountReceiveSettingsImapDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ConnectionTimeout == input.ConnectionTimeout ||
                    (this.ConnectionTimeout != null &&
                    this.ConnectionTimeout.Equals(input.ConnectionTimeout))
                ) && 
                (
                    this.SecurityProtocol == input.SecurityProtocol ||
                    (this.SecurityProtocol != null &&
                    this.SecurityProtocol.Equals(input.SecurityProtocol))
                ) && 
                (
                    this.FoldersConfiguration == input.FoldersConfiguration ||
                    this.FoldersConfiguration != null &&
                    this.FoldersConfiguration.SequenceEqual(input.FoldersConfiguration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ConnectionTimeout != null)
                    hashCode = hashCode * 59 + this.ConnectionTimeout.GetHashCode();
                if (this.SecurityProtocol != null)
                    hashCode = hashCode * 59 + this.SecurityProtocol.GetHashCode();
                if (this.FoldersConfiguration != null)
                    hashCode = hashCode * 59 + this.FoldersConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
