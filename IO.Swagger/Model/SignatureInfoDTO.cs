/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SignatureInfoDTO
    /// </summary>
    [DataContract]
    public partial class SignatureInfoDTO :  IEquatable<SignatureInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureInfoDTO" /> class.
        /// </summary>
        /// <param name="SignatureStandard">SignatureStandard.</param>
        /// <param name="CertificateInfo">CertificateInfo.</param>
        /// <param name="TimestampInfo">TimestampInfo.</param>
        /// <param name="CounterSignatures">CounterSignatures.</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="DigestAlgorithm">DigestAlgorithm.</param>
        /// <param name="SignAlgorithm">SignAlgorithm.</param>
        /// <param name="SignatureHex">SignatureHex.</param>
        /// <param name="IsValid">IsValid.</param>
        /// <param name="SignatureIntegrity">SignatureIntegrity.</param>
        /// <param name="IsCounterSign">IsCounterSign.</param>
        /// <param name="SignatureValidationMessageList">SignatureValidationMessageList.</param>
        /// <param name="SignatureTimeUtc">SignatureTimeUtc.</param>
        /// <param name="SignedAttributeList">SignedAttributeList.</param>
        /// <param name="UnsignedAttributeList">UnsignedAttributeList.</param>
        public SignatureInfoDTO(string SignatureStandard = default(string), CertificateInfoDTO CertificateInfo = default(CertificateInfoDTO), TimestampInfoDTO TimestampInfo = default(TimestampInfoDTO), List<SignatureInfoDTO> CounterSignatures = default(List<SignatureInfoDTO>), IdValuePairDTO ContentType = default(IdValuePairDTO), IdValuePairDTO DigestAlgorithm = default(IdValuePairDTO), IdValuePairDTO SignAlgorithm = default(IdValuePairDTO), string SignatureHex = default(string), bool? IsValid = default(bool?), bool? SignatureIntegrity = default(bool?), bool? IsCounterSign = default(bool?), List<ValidationMessageDTO> SignatureValidationMessageList = default(List<ValidationMessageDTO>), DateTime? SignatureTimeUtc = default(DateTime?), List<SignatureAttributeDTO> SignedAttributeList = default(List<SignatureAttributeDTO>), List<SignatureAttributeDTO> UnsignedAttributeList = default(List<SignatureAttributeDTO>))
        {
            this.SignatureStandard = SignatureStandard;
            this.CertificateInfo = CertificateInfo;
            this.TimestampInfo = TimestampInfo;
            this.CounterSignatures = CounterSignatures;
            this.ContentType = ContentType;
            this.DigestAlgorithm = DigestAlgorithm;
            this.SignAlgorithm = SignAlgorithm;
            this.SignatureHex = SignatureHex;
            this.IsValid = IsValid;
            this.SignatureIntegrity = SignatureIntegrity;
            this.IsCounterSign = IsCounterSign;
            this.SignatureValidationMessageList = SignatureValidationMessageList;
            this.SignatureTimeUtc = SignatureTimeUtc;
            this.SignedAttributeList = SignedAttributeList;
            this.UnsignedAttributeList = UnsignedAttributeList;
        }
        
        /// <summary>
        /// Gets or Sets SignatureStandard
        /// </summary>
        [DataMember(Name="signatureStandard", EmitDefaultValue=false)]
        public string SignatureStandard { get; set; }

        /// <summary>
        /// Gets or Sets CertificateInfo
        /// </summary>
        [DataMember(Name="certificateInfo", EmitDefaultValue=false)]
        public CertificateInfoDTO CertificateInfo { get; set; }

        /// <summary>
        /// Gets or Sets TimestampInfo
        /// </summary>
        [DataMember(Name="timestampInfo", EmitDefaultValue=false)]
        public TimestampInfoDTO TimestampInfo { get; set; }

        /// <summary>
        /// Gets or Sets CounterSignatures
        /// </summary>
        [DataMember(Name="counterSignatures", EmitDefaultValue=false)]
        public List<SignatureInfoDTO> CounterSignatures { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public IdValuePairDTO ContentType { get; set; }

        /// <summary>
        /// Gets or Sets DigestAlgorithm
        /// </summary>
        [DataMember(Name="digestAlgorithm", EmitDefaultValue=false)]
        public IdValuePairDTO DigestAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets SignAlgorithm
        /// </summary>
        [DataMember(Name="signAlgorithm", EmitDefaultValue=false)]
        public IdValuePairDTO SignAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets SignatureHex
        /// </summary>
        [DataMember(Name="signatureHex", EmitDefaultValue=false)]
        public string SignatureHex { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets SignatureIntegrity
        /// </summary>
        [DataMember(Name="signatureIntegrity", EmitDefaultValue=false)]
        public bool? SignatureIntegrity { get; set; }

        /// <summary>
        /// Gets or Sets IsCounterSign
        /// </summary>
        [DataMember(Name="isCounterSign", EmitDefaultValue=false)]
        public bool? IsCounterSign { get; set; }

        /// <summary>
        /// Gets or Sets SignatureValidationMessageList
        /// </summary>
        [DataMember(Name="signatureValidationMessageList", EmitDefaultValue=false)]
        public List<ValidationMessageDTO> SignatureValidationMessageList { get; set; }

        /// <summary>
        /// Gets or Sets SignatureTimeUtc
        /// </summary>
        [DataMember(Name="signatureTimeUtc", EmitDefaultValue=false)]
        public DateTime? SignatureTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets SignedAttributeList
        /// </summary>
        [DataMember(Name="signedAttributeList", EmitDefaultValue=false)]
        public List<SignatureAttributeDTO> SignedAttributeList { get; set; }

        /// <summary>
        /// Gets or Sets UnsignedAttributeList
        /// </summary>
        [DataMember(Name="unsignedAttributeList", EmitDefaultValue=false)]
        public List<SignatureAttributeDTO> UnsignedAttributeList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatureInfoDTO {\n");
            sb.Append("  SignatureStandard: ").Append(SignatureStandard).Append("\n");
            sb.Append("  CertificateInfo: ").Append(CertificateInfo).Append("\n");
            sb.Append("  TimestampInfo: ").Append(TimestampInfo).Append("\n");
            sb.Append("  CounterSignatures: ").Append(CounterSignatures).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DigestAlgorithm: ").Append(DigestAlgorithm).Append("\n");
            sb.Append("  SignAlgorithm: ").Append(SignAlgorithm).Append("\n");
            sb.Append("  SignatureHex: ").Append(SignatureHex).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  SignatureIntegrity: ").Append(SignatureIntegrity).Append("\n");
            sb.Append("  IsCounterSign: ").Append(IsCounterSign).Append("\n");
            sb.Append("  SignatureValidationMessageList: ").Append(SignatureValidationMessageList).Append("\n");
            sb.Append("  SignatureTimeUtc: ").Append(SignatureTimeUtc).Append("\n");
            sb.Append("  SignedAttributeList: ").Append(SignedAttributeList).Append("\n");
            sb.Append("  UnsignedAttributeList: ").Append(UnsignedAttributeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureInfoDTO);
        }

        /// <summary>
        /// Returns true if SignatureInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignatureStandard == input.SignatureStandard ||
                    (this.SignatureStandard != null &&
                    this.SignatureStandard.Equals(input.SignatureStandard))
                ) && 
                (
                    this.CertificateInfo == input.CertificateInfo ||
                    (this.CertificateInfo != null &&
                    this.CertificateInfo.Equals(input.CertificateInfo))
                ) && 
                (
                    this.TimestampInfo == input.TimestampInfo ||
                    (this.TimestampInfo != null &&
                    this.TimestampInfo.Equals(input.TimestampInfo))
                ) && 
                (
                    this.CounterSignatures == input.CounterSignatures ||
                    this.CounterSignatures != null &&
                    this.CounterSignatures.SequenceEqual(input.CounterSignatures)
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.DigestAlgorithm == input.DigestAlgorithm ||
                    (this.DigestAlgorithm != null &&
                    this.DigestAlgorithm.Equals(input.DigestAlgorithm))
                ) && 
                (
                    this.SignAlgorithm == input.SignAlgorithm ||
                    (this.SignAlgorithm != null &&
                    this.SignAlgorithm.Equals(input.SignAlgorithm))
                ) && 
                (
                    this.SignatureHex == input.SignatureHex ||
                    (this.SignatureHex != null &&
                    this.SignatureHex.Equals(input.SignatureHex))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.SignatureIntegrity == input.SignatureIntegrity ||
                    (this.SignatureIntegrity != null &&
                    this.SignatureIntegrity.Equals(input.SignatureIntegrity))
                ) && 
                (
                    this.IsCounterSign == input.IsCounterSign ||
                    (this.IsCounterSign != null &&
                    this.IsCounterSign.Equals(input.IsCounterSign))
                ) && 
                (
                    this.SignatureValidationMessageList == input.SignatureValidationMessageList ||
                    this.SignatureValidationMessageList != null &&
                    this.SignatureValidationMessageList.SequenceEqual(input.SignatureValidationMessageList)
                ) && 
                (
                    this.SignatureTimeUtc == input.SignatureTimeUtc ||
                    (this.SignatureTimeUtc != null &&
                    this.SignatureTimeUtc.Equals(input.SignatureTimeUtc))
                ) && 
                (
                    this.SignedAttributeList == input.SignedAttributeList ||
                    this.SignedAttributeList != null &&
                    this.SignedAttributeList.SequenceEqual(input.SignedAttributeList)
                ) && 
                (
                    this.UnsignedAttributeList == input.UnsignedAttributeList ||
                    this.UnsignedAttributeList != null &&
                    this.UnsignedAttributeList.SequenceEqual(input.UnsignedAttributeList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignatureStandard != null)
                    hashCode = hashCode * 59 + this.SignatureStandard.GetHashCode();
                if (this.CertificateInfo != null)
                    hashCode = hashCode * 59 + this.CertificateInfo.GetHashCode();
                if (this.TimestampInfo != null)
                    hashCode = hashCode * 59 + this.TimestampInfo.GetHashCode();
                if (this.CounterSignatures != null)
                    hashCode = hashCode * 59 + this.CounterSignatures.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.DigestAlgorithm != null)
                    hashCode = hashCode * 59 + this.DigestAlgorithm.GetHashCode();
                if (this.SignAlgorithm != null)
                    hashCode = hashCode * 59 + this.SignAlgorithm.GetHashCode();
                if (this.SignatureHex != null)
                    hashCode = hashCode * 59 + this.SignatureHex.GetHashCode();
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.SignatureIntegrity != null)
                    hashCode = hashCode * 59 + this.SignatureIntegrity.GetHashCode();
                if (this.IsCounterSign != null)
                    hashCode = hashCode * 59 + this.IsCounterSign.GetHashCode();
                if (this.SignatureValidationMessageList != null)
                    hashCode = hashCode * 59 + this.SignatureValidationMessageList.GetHashCode();
                if (this.SignatureTimeUtc != null)
                    hashCode = hashCode * 59 + this.SignatureTimeUtc.GetHashCode();
                if (this.SignedAttributeList != null)
                    hashCode = hashCode * 59 + this.SignedAttributeList.GetHashCode();
                if (this.UnsignedAttributeList != null)
                    hashCode = hashCode * 59 + this.UnsignedAttributeList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
