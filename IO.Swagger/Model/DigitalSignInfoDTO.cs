/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of digital sign information
    /// </summary>
    [DataContract]
    public partial class DigitalSignInfoDTO :  IEquatable<DigitalSignInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalSignInfoDTO" /> class.
        /// </summary>
        /// <param name="FileName">File Name.</param>
        /// <param name="SignInfoList">Listo of signiture informations.</param>
        /// <param name="TimestampInfoList">TimestampInfoList.</param>
        public DigitalSignInfoDTO(string FileName = default(string), List<SignInfoDTO> SignInfoList = default(List<SignInfoDTO>), List<TimestampInfoDTO> TimestampInfoList = default(List<TimestampInfoDTO>))
        {
            this.FileName = FileName;
            this.SignInfoList = SignInfoList;
            this.TimestampInfoList = TimestampInfoList;
        }
        
        /// <summary>
        /// File Name
        /// </summary>
        /// <value>File Name</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Listo of signiture informations
        /// </summary>
        /// <value>Listo of signiture informations</value>
        [DataMember(Name="signInfoList", EmitDefaultValue=false)]
        public List<SignInfoDTO> SignInfoList { get; set; }

        /// <summary>
        /// Gets or Sets TimestampInfoList
        /// </summary>
        [DataMember(Name="timestampInfoList", EmitDefaultValue=false)]
        public List<TimestampInfoDTO> TimestampInfoList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DigitalSignInfoDTO {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  SignInfoList: ").Append(SignInfoList).Append("\n");
            sb.Append("  TimestampInfoList: ").Append(TimestampInfoList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DigitalSignInfoDTO);
        }

        /// <summary>
        /// Returns true if DigitalSignInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DigitalSignInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DigitalSignInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.SignInfoList == input.SignInfoList ||
                    this.SignInfoList != null &&
                    this.SignInfoList.SequenceEqual(input.SignInfoList)
                ) && 
                (
                    this.TimestampInfoList == input.TimestampInfoList ||
                    this.TimestampInfoList != null &&
                    this.TimestampInfoList.SequenceEqual(input.TimestampInfoList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.SignInfoList != null)
                    hashCode = hashCode * 59 + this.SignInfoList.GetHashCode();
                if (this.TimestampInfoList != null)
                    hashCode = hashCode * 59 + this.TimestampInfoList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
