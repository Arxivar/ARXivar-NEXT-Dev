/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ArxDriveFolderModeInfo
    /// </summary>
    [DataContract]
    public partial class ArxDriveFolderModeInfo :  IEquatable<ArxDriveFolderModeInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxDriveFolderModeInfo" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Author">Author.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="CustomFolderName">CustomFolderName.</param>
        /// <param name="UseCustomFolderName">UseCustomFolderName.</param>
        /// <param name="CreationDateTime">CreationDateTime.</param>
        /// <param name="Users">Users.</param>
        public ArxDriveFolderModeInfo(int? Id = null, int? Author = null, int? FolderId = null, string CustomFolderName = null, bool? UseCustomFolderName = null, DateTime? CreationDateTime = null, List<ArxDriveFolderModeUserInfo> Users = null)
        {
            this.Id = Id;
            this.Author = Author;
            this.FolderId = FolderId;
            this.CustomFolderName = CustomFolderName;
            this.UseCustomFolderName = UseCustomFolderName;
            this.CreationDateTime = CreationDateTime;
            this.Users = Users;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public int? Author { get; set; }
        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }
        /// <summary>
        /// Gets or Sets CustomFolderName
        /// </summary>
        [DataMember(Name="customFolderName", EmitDefaultValue=false)]
        public string CustomFolderName { get; set; }
        /// <summary>
        /// Gets or Sets UseCustomFolderName
        /// </summary>
        [DataMember(Name="useCustomFolderName", EmitDefaultValue=false)]
        public bool? UseCustomFolderName { get; set; }
        /// <summary>
        /// Gets or Sets CreationDateTime
        /// </summary>
        [DataMember(Name="creationDateTime", EmitDefaultValue=false)]
        public DateTime? CreationDateTime { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<ArxDriveFolderModeUserInfo> Users { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxDriveFolderModeInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  CustomFolderName: ").Append(CustomFolderName).Append("\n");
            sb.Append("  UseCustomFolderName: ").Append(UseCustomFolderName).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArxDriveFolderModeInfo);
        }

        /// <summary>
        /// Returns true if ArxDriveFolderModeInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ArxDriveFolderModeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxDriveFolderModeInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.FolderId == other.FolderId ||
                    this.FolderId != null &&
                    this.FolderId.Equals(other.FolderId)
                ) && 
                (
                    this.CustomFolderName == other.CustomFolderName ||
                    this.CustomFolderName != null &&
                    this.CustomFolderName.Equals(other.CustomFolderName)
                ) && 
                (
                    this.UseCustomFolderName == other.UseCustomFolderName ||
                    this.UseCustomFolderName != null &&
                    this.UseCustomFolderName.Equals(other.UseCustomFolderName)
                ) && 
                (
                    this.CreationDateTime == other.CreationDateTime ||
                    this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(other.CreationDateTime)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.FolderId != null)
                    hash = hash * 59 + this.FolderId.GetHashCode();
                if (this.CustomFolderName != null)
                    hash = hash * 59 + this.CustomFolderName.GetHashCode();
                if (this.UseCustomFolderName != null)
                    hash = hash * 59 + this.UseCustomFolderName.GetHashCode();
                if (this.CreationDateTime != null)
                    hash = hash * 59 + this.CreationDateTime.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                return hash;
            }
        }
    }

}
