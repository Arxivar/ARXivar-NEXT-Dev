/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of information folder for ARXDrive
    /// </summary>
    [DataContract]
    public partial class ArxDriveFolderModeInfo :  IEquatable<ArxDriveFolderModeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxDriveFolderModeInfo" /> class.
        /// </summary>
        /// <param name="Id">Identifier.</param>
        /// <param name="Author">Author.</param>
        /// <param name="FolderId">Folder Identifier.</param>
        /// <param name="CustomFolderName">Custom Folder Name.</param>
        /// <param name="UseCustomFolderName">Use Custom Name.</param>
        /// <param name="CreationDateTime">Creation Date.</param>
        /// <param name="Users">Users.</param>
        public ArxDriveFolderModeInfo(int? Id = default(int?), int? Author = default(int?), int? FolderId = default(int?), string CustomFolderName = default(string), bool? UseCustomFolderName = default(bool?), DateTime? CreationDateTime = default(DateTime?), List<ArxDriveFolderModeUserInfo> Users = default(List<ArxDriveFolderModeUserInfo>))
        {
            this.Id = Id;
            this.Author = Author;
            this.FolderId = FolderId;
            this.CustomFolderName = CustomFolderName;
            this.UseCustomFolderName = UseCustomFolderName;
            this.CreationDateTime = CreationDateTime;
            this.Users = Users;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Author
        /// </summary>
        /// <value>Author</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public int? Author { get; set; }

        /// <summary>
        /// Folder Identifier
        /// </summary>
        /// <value>Folder Identifier</value>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }

        /// <summary>
        /// Custom Folder Name
        /// </summary>
        /// <value>Custom Folder Name</value>
        [DataMember(Name="customFolderName", EmitDefaultValue=false)]
        public string CustomFolderName { get; set; }

        /// <summary>
        /// Use Custom Name
        /// </summary>
        /// <value>Use Custom Name</value>
        [DataMember(Name="useCustomFolderName", EmitDefaultValue=false)]
        public bool? UseCustomFolderName { get; set; }

        /// <summary>
        /// Creation Date
        /// </summary>
        /// <value>Creation Date</value>
        [DataMember(Name="creationDateTime", EmitDefaultValue=false)]
        public DateTime? CreationDateTime { get; set; }

        /// <summary>
        /// Users
        /// </summary>
        /// <value>Users</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<ArxDriveFolderModeUserInfo> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxDriveFolderModeInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  CustomFolderName: ").Append(CustomFolderName).Append("\n");
            sb.Append("  UseCustomFolderName: ").Append(UseCustomFolderName).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxDriveFolderModeInfo);
        }

        /// <summary>
        /// Returns true if ArxDriveFolderModeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxDriveFolderModeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxDriveFolderModeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.CustomFolderName == input.CustomFolderName ||
                    (this.CustomFolderName != null &&
                    this.CustomFolderName.Equals(input.CustomFolderName))
                ) && 
                (
                    this.UseCustomFolderName == input.UseCustomFolderName ||
                    (this.UseCustomFolderName != null &&
                    this.UseCustomFolderName.Equals(input.UseCustomFolderName))
                ) && 
                (
                    this.CreationDateTime == input.CreationDateTime ||
                    (this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(input.CreationDateTime))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.CustomFolderName != null)
                    hashCode = hashCode * 59 + this.CustomFolderName.GetHashCode();
                if (this.UseCustomFolderName != null)
                    hashCode = hashCode * 59 + this.UseCustomFolderName.GetHashCode();
                if (this.CreationDateTime != null)
                    hashCode = hashCode * 59 + this.CreationDateTime.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
