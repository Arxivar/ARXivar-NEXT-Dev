/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Dto for a workflow item
    /// </summary>
    [DataContract]
    public partial class WorkflowDTO :  IEquatable<WorkflowDTO>
    {
        /// <summary>
        /// Workflow state
        /// </summary>
        /// <value>Workflow state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Deleted for "Deleted"
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted,
            
            /// <summary>
            /// Enum Online for "Online"
            /// </summary>
            [EnumMember(Value = "Online")]
            Online,
            
            /// <summary>
            /// Enum InEdit for "InEdit"
            /// </summary>
            [EnumMember(Value = "InEdit")]
            InEdit,
            
            /// <summary>
            /// Enum Approving for "Approving"
            /// </summary>
            [EnumMember(Value = "Approving")]
            Approving
        }

        /// <summary>
        /// Workflow state
        /// </summary>
        /// <value>Workflow state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDTO" /> class.
        /// </summary>
        /// <param name="Id">Id of workflow..</param>
        /// <param name="Detail">Detail associated to Workflow..</param>
        /// <param name="Name">Workflow name..</param>
        /// <param name="Description">Workflow description..</param>
        /// <param name="State">Workflow state.</param>
        /// <param name="OrganizationChart">Organization chart Id..</param>
        /// <param name="BusinessUnit">Business unit Id..</param>
        /// <param name="Color">Color code for the Workflow..</param>
        /// <param name="Revision">Workflow revision number.</param>
        /// <param name="WorkflowParentId">Parent id.</param>
        /// <param name="ApprovalDate">Date of approval.</param>
        /// <param name="CreationDate">Creation date.</param>
        /// <param name="EditDate">Last edit date.</param>
        /// <param name="Reason">Reason for the revision.</param>
        public WorkflowDTO(int? Id = null, string Detail = null, string Name = null, string Description = null, StateEnum? State = null, int? OrganizationChart = null, string BusinessUnit = null, int? Color = null, int? Revision = null, int? WorkflowParentId = null, DateTime? ApprovalDate = null, DateTime? CreationDate = null, DateTime? EditDate = null, string Reason = null)
        {
            this.Id = Id;
            this.Detail = Detail;
            this.Name = Name;
            this.Description = Description;
            this.State = State;
            this.OrganizationChart = OrganizationChart;
            this.BusinessUnit = BusinessUnit;
            this.Color = Color;
            this.Revision = Revision;
            this.WorkflowParentId = WorkflowParentId;
            this.ApprovalDate = ApprovalDate;
            this.CreationDate = CreationDate;
            this.EditDate = EditDate;
            this.Reason = Reason;
        }
        
        /// <summary>
        /// Id of workflow.
        /// </summary>
        /// <value>Id of workflow.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Detail associated to Workflow.
        /// </summary>
        /// <value>Detail associated to Workflow.</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }
        /// <summary>
        /// Workflow name.
        /// </summary>
        /// <value>Workflow name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Workflow description.
        /// </summary>
        /// <value>Workflow description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Organization chart Id.
        /// </summary>
        /// <value>Organization chart Id.</value>
        [DataMember(Name="organizationChart", EmitDefaultValue=false)]
        public int? OrganizationChart { get; set; }
        /// <summary>
        /// Business unit Id.
        /// </summary>
        /// <value>Business unit Id.</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }
        /// <summary>
        /// Color code for the Workflow.
        /// </summary>
        /// <value>Color code for the Workflow.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public int? Color { get; set; }
        /// <summary>
        /// Workflow revision number
        /// </summary>
        /// <value>Workflow revision number</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }
        /// <summary>
        /// Parent id
        /// </summary>
        /// <value>Parent id</value>
        [DataMember(Name="workflowParentId", EmitDefaultValue=false)]
        public int? WorkflowParentId { get; set; }
        /// <summary>
        /// Date of approval
        /// </summary>
        /// <value>Date of approval</value>
        [DataMember(Name="approvalDate", EmitDefaultValue=false)]
        public DateTime? ApprovalDate { get; set; }
        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Last edit date
        /// </summary>
        /// <value>Last edit date</value>
        [DataMember(Name="editDate", EmitDefaultValue=false)]
        public DateTime? EditDate { get; set; }
        /// <summary>
        /// Reason for the revision
        /// </summary>
        /// <value>Reason for the revision</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  OrganizationChart: ").Append(OrganizationChart).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  WorkflowParentId: ").Append(WorkflowParentId).Append("\n");
            sb.Append("  ApprovalDate: ").Append(ApprovalDate).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  EditDate: ").Append(EditDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowDTO);
        }

        /// <summary>
        /// Returns true if WorkflowDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Detail == other.Detail ||
                    this.Detail != null &&
                    this.Detail.Equals(other.Detail)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.OrganizationChart == other.OrganizationChart ||
                    this.OrganizationChart != null &&
                    this.OrganizationChart.Equals(other.OrganizationChart)
                ) && 
                (
                    this.BusinessUnit == other.BusinessUnit ||
                    this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(other.BusinessUnit)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.WorkflowParentId == other.WorkflowParentId ||
                    this.WorkflowParentId != null &&
                    this.WorkflowParentId.Equals(other.WorkflowParentId)
                ) && 
                (
                    this.ApprovalDate == other.ApprovalDate ||
                    this.ApprovalDate != null &&
                    this.ApprovalDate.Equals(other.ApprovalDate)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.EditDate == other.EditDate ||
                    this.EditDate != null &&
                    this.EditDate.Equals(other.EditDate)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Detail != null)
                    hash = hash * 59 + this.Detail.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.OrganizationChart != null)
                    hash = hash * 59 + this.OrganizationChart.GetHashCode();
                if (this.BusinessUnit != null)
                    hash = hash * 59 + this.BusinessUnit.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.WorkflowParentId != null)
                    hash = hash * 59 + this.WorkflowParentId.GetHashCode();
                if (this.ApprovalDate != null)
                    hash = hash * 59 + this.ApprovalDate.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.EditDate != null)
                    hash = hash * 59 + this.EditDate.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }
    }

}
