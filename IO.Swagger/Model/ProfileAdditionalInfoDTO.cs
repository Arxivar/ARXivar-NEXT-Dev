/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of additional data for editing profile
    /// </summary>
    [DataContract]
    public partial class ProfileAdditionalInfoDTO :  IEquatable<ProfileAdditionalInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileAdditionalInfoDTO" /> class.
        /// </summary>
        /// <param name="IsProtocolEnabled">Enabled Protocol.</param>
        /// <param name="ProtocolNumber">Protocol.</param>
        /// <param name="FileName">File name.</param>
        /// <param name="DocNumber">Document Identifier.</param>
        /// <param name="Revision">File Revision.</param>
        /// <param name="CreationDate">Creation Date.</param>
        /// <param name="ProtocolDate">Protocol Date.</param>
        /// <param name="Author">User to create the profile.</param>
        public ProfileAdditionalInfoDTO(bool? IsProtocolEnabled = default(bool?), string ProtocolNumber = default(string), string FileName = default(string), int? DocNumber = default(int?), int? Revision = default(int?), DateTime? CreationDate = default(DateTime?), DateTime? ProtocolDate = default(DateTime?), string Author = default(string))
        {
            this.IsProtocolEnabled = IsProtocolEnabled;
            this.ProtocolNumber = ProtocolNumber;
            this.FileName = FileName;
            this.DocNumber = DocNumber;
            this.Revision = Revision;
            this.CreationDate = CreationDate;
            this.ProtocolDate = ProtocolDate;
            this.Author = Author;
        }
        
        /// <summary>
        /// Enabled Protocol
        /// </summary>
        /// <value>Enabled Protocol</value>
        [DataMember(Name="isProtocolEnabled", EmitDefaultValue=false)]
        public bool? IsProtocolEnabled { get; set; }

        /// <summary>
        /// Protocol
        /// </summary>
        /// <value>Protocol</value>
        [DataMember(Name="protocolNumber", EmitDefaultValue=false)]
        public string ProtocolNumber { get; set; }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Document Identifier
        /// </summary>
        /// <value>Document Identifier</value>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }

        /// <summary>
        /// File Revision
        /// </summary>
        /// <value>File Revision</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }

        /// <summary>
        /// Creation Date
        /// </summary>
        /// <value>Creation Date</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Protocol Date
        /// </summary>
        /// <value>Protocol Date</value>
        [DataMember(Name="protocolDate", EmitDefaultValue=false)]
        public DateTime? ProtocolDate { get; set; }

        /// <summary>
        /// User to create the profile
        /// </summary>
        /// <value>User to create the profile</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileAdditionalInfoDTO {\n");
            sb.Append("  IsProtocolEnabled: ").Append(IsProtocolEnabled).Append("\n");
            sb.Append("  ProtocolNumber: ").Append(ProtocolNumber).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ProtocolDate: ").Append(ProtocolDate).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileAdditionalInfoDTO);
        }

        /// <summary>
        /// Returns true if ProfileAdditionalInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileAdditionalInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileAdditionalInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsProtocolEnabled == input.IsProtocolEnabled ||
                    (this.IsProtocolEnabled != null &&
                    this.IsProtocolEnabled.Equals(input.IsProtocolEnabled))
                ) && 
                (
                    this.ProtocolNumber == input.ProtocolNumber ||
                    (this.ProtocolNumber != null &&
                    this.ProtocolNumber.Equals(input.ProtocolNumber))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ProtocolDate == input.ProtocolDate ||
                    (this.ProtocolDate != null &&
                    this.ProtocolDate.Equals(input.ProtocolDate))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsProtocolEnabled != null)
                    hashCode = hashCode * 59 + this.IsProtocolEnabled.GetHashCode();
                if (this.ProtocolNumber != null)
                    hashCode = hashCode * 59 + this.ProtocolNumber.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ProtocolDate != null)
                    hashCode = hashCode * 59 + this.ProtocolDate.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
