/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of the adress book item category
    /// </summary>
    [DataContract]
    public partial class AddressBookCategoryDTO :  IEquatable<AddressBookCategoryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookCategoryDTO" /> class.
        /// </summary>
        /// <param name="Id">Identifier.</param>
        /// <param name="AddressBook">Name.</param>
        /// <param name="Type">Possible values:  0: Public  1: Private .</param>
        /// <param name="_Default">Set as default category.</param>
        public AddressBookCategoryDTO(int? Id = default(int?), string AddressBook = default(string), int? Type = default(int?), bool? _Default = default(bool?))
        {
            this.Id = Id;
            this.AddressBook = AddressBook;
            this.Type = Type;
            this._Default = _Default;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="addressBook", EmitDefaultValue=false)]
        public string AddressBook { get; set; }

        /// <summary>
        /// Possible values:  0: Public  1: Private 
        /// </summary>
        /// <value>Possible values:  0: Public  1: Private </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Set as default category
        /// </summary>
        /// <value>Set as default category</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressBookCategoryDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressBook: ").Append(AddressBook).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressBookCategoryDTO);
        }

        /// <summary>
        /// Returns true if AddressBookCategoryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressBookCategoryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressBookCategoryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AddressBook == input.AddressBook ||
                    (this.AddressBook != null &&
                    this.AddressBook.Equals(input.AddressBook))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AddressBook != null)
                    hashCode = hashCode * 59 + this.AddressBook.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
