/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LayoutDTO
    /// </summary>
    [DataContract]
    public partial class LayoutDTO :  IEquatable<LayoutDTO>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum DesktopMenu for "DesktopMenu"
            /// </summary>
            [EnumMember(Value = "DesktopMenu")]
            DesktopMenu,
            
            /// <summary>
            /// Enum CommandsPanel for "CommandsPanel"
            /// </summary>
            [EnumMember(Value = "CommandsPanel")]
            CommandsPanel
        }

        /// <summary>
        /// Gets or Sets UsingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsingTypeEnum
        {
            
            /// <summary>
            /// Enum Computer for "Computer"
            /// </summary>
            [EnumMember(Value = "Computer")]
            Computer,
            
            /// <summary>
            /// Enum Tablet for "Tablet"
            /// </summary>
            [EnumMember(Value = "Tablet")]
            Tablet,
            
            /// <summary>
            /// Enum Smartphone for "Smartphone"
            /// </summary>
            [EnumMember(Value = "Smartphone")]
            Smartphone
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets UsingType
        /// </summary>
        [DataMember(Name="usingType", EmitDefaultValue=false)]
        public UsingTypeEnum? UsingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Author">Author.</param>
        /// <param name="AuthorCompleteName">AuthorCompleteName.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="Details">Details.</param>
        /// <param name="UsingType">UsingType.</param>
        /// <param name="Users">Users.</param>
        /// <param name="IsSystem">IsSystem.</param>
        public LayoutDTO(int? Id = null, TypeEnum? Type = null, string Name = null, int? Author = null, string AuthorCompleteName = null, DateTime? CreationDate = null, int? Priority = null, List<LayoutDetailDTO> Details = null, UsingTypeEnum? UsingType = null, List<LayoutUsersDto> Users = null, bool? IsSystem = null)
        {
            this.Id = Id;
            this.Type = Type;
            this.Name = Name;
            this.Author = Author;
            this.AuthorCompleteName = AuthorCompleteName;
            this.CreationDate = CreationDate;
            this.Priority = Priority;
            this.Details = Details;
            this.UsingType = UsingType;
            this.Users = Users;
            this.IsSystem = IsSystem;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public int? Author { get; set; }
        /// <summary>
        /// Gets or Sets AuthorCompleteName
        /// </summary>
        [DataMember(Name="authorCompleteName", EmitDefaultValue=false)]
        public string AuthorCompleteName { get; set; }
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<LayoutDetailDTO> Details { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<LayoutUsersDto> Users { get; set; }
        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public bool? IsSystem { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  AuthorCompleteName: ").Append(AuthorCompleteName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  UsingType: ").Append(UsingType).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LayoutDTO);
        }

        /// <summary>
        /// Returns true if LayoutDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LayoutDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.AuthorCompleteName == other.AuthorCompleteName ||
                    this.AuthorCompleteName != null &&
                    this.AuthorCompleteName.Equals(other.AuthorCompleteName)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(other.Details)
                ) && 
                (
                    this.UsingType == other.UsingType ||
                    this.UsingType != null &&
                    this.UsingType.Equals(other.UsingType)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.IsSystem == other.IsSystem ||
                    this.IsSystem != null &&
                    this.IsSystem.Equals(other.IsSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.AuthorCompleteName != null)
                    hash = hash * 59 + this.AuthorCompleteName.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                if (this.UsingType != null)
                    hash = hash * 59 + this.UsingType.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.IsSystem != null)
                    hash = hash * 59 + this.IsSystem.GetHashCode();
                return hash;
            }
        }
    }

}
