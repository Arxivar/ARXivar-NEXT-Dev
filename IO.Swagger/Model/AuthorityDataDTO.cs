/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This DTO defines the properties available for the data of an institution
    /// </summary>
    [DataContract]
    public partial class AuthorityDataDTO :  IEquatable<AuthorityDataDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorityDataDTO" /> class.
        /// </summary>
        /// <param name="Id">Authority Id..</param>
        /// <param name="DocNumber">DocNumber..</param>
        /// <param name="Protocol">Number logging..</param>
        /// <param name="ProtocolDate">Protocol Date and time..</param>
        /// <param name="Office">Office..</param>
        /// <param name="Person">Reference person..</param>
        /// <param name="Shipping">Shipping address..</param>
        /// <param name="YourReferent">Referent.</param>
        public AuthorityDataDTO(int? Id = null, int? DocNumber = null, string Protocol = null, DateTime? ProtocolDate = null, string Office = null, string Person = null, string Shipping = null, string YourReferent = null)
        {
            this.Id = Id;
            this.DocNumber = DocNumber;
            this.Protocol = Protocol;
            this.ProtocolDate = ProtocolDate;
            this.Office = Office;
            this.Person = Person;
            this.Shipping = Shipping;
            this.YourReferent = YourReferent;
        }
        
        /// <summary>
        /// Authority Id.
        /// </summary>
        /// <value>Authority Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// DocNumber.
        /// </summary>
        /// <value>DocNumber.</value>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }
        /// <summary>
        /// Number logging.
        /// </summary>
        /// <value>Number logging.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }
        /// <summary>
        /// Protocol Date and time.
        /// </summary>
        /// <value>Protocol Date and time.</value>
        [DataMember(Name="protocolDate", EmitDefaultValue=false)]
        public DateTime? ProtocolDate { get; set; }
        /// <summary>
        /// Office.
        /// </summary>
        /// <value>Office.</value>
        [DataMember(Name="office", EmitDefaultValue=false)]
        public string Office { get; set; }
        /// <summary>
        /// Reference person.
        /// </summary>
        /// <value>Reference person.</value>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public string Person { get; set; }
        /// <summary>
        /// Shipping address.
        /// </summary>
        /// <value>Shipping address.</value>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public string Shipping { get; set; }
        /// <summary>
        /// Referent
        /// </summary>
        /// <value>Referent</value>
        [DataMember(Name="yourReferent", EmitDefaultValue=false)]
        public string YourReferent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorityDataDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  ProtocolDate: ").Append(ProtocolDate).Append("\n");
            sb.Append("  Office: ").Append(Office).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  YourReferent: ").Append(YourReferent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthorityDataDTO);
        }

        /// <summary>
        /// Returns true if AuthorityDataDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthorityDataDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorityDataDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.DocNumber == other.DocNumber ||
                    this.DocNumber != null &&
                    this.DocNumber.Equals(other.DocNumber)
                ) && 
                (
                    this.Protocol == other.Protocol ||
                    this.Protocol != null &&
                    this.Protocol.Equals(other.Protocol)
                ) && 
                (
                    this.ProtocolDate == other.ProtocolDate ||
                    this.ProtocolDate != null &&
                    this.ProtocolDate.Equals(other.ProtocolDate)
                ) && 
                (
                    this.Office == other.Office ||
                    this.Office != null &&
                    this.Office.Equals(other.Office)
                ) && 
                (
                    this.Person == other.Person ||
                    this.Person != null &&
                    this.Person.Equals(other.Person)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.YourReferent == other.YourReferent ||
                    this.YourReferent != null &&
                    this.YourReferent.Equals(other.YourReferent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DocNumber != null)
                    hash = hash * 59 + this.DocNumber.GetHashCode();
                if (this.Protocol != null)
                    hash = hash * 59 + this.Protocol.GetHashCode();
                if (this.ProtocolDate != null)
                    hash = hash * 59 + this.ProtocolDate.GetHashCode();
                if (this.Office != null)
                    hash = hash * 59 + this.Office.GetHashCode();
                if (this.Person != null)
                    hash = hash * 59 + this.Person.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.YourReferent != null)
                    hash = hash * 59 + this.YourReferent.GetHashCode();
                return hash;
            }
        }
    }

}
