/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of result to profiling
    /// </summary>
    [DataContract]
    public partial class ProfileResultDTO :  IEquatable<ProfileResultDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResultDTO" /> class.
        /// </summary>
        /// <param name="DocNumber">Document Identifier.</param>
        /// <param name="InternalProtocolNumber">Internal Protocol.</param>
        /// <param name="Year">Protocol Year.</param>
        /// <param name="ProtocolNumber">Protocol.</param>
        /// <param name="ShowMessage">Defines if show the messages of the result..</param>
        public ProfileResultDTO(int? DocNumber = default(int?), string InternalProtocolNumber = default(string), string Year = default(string), string ProtocolNumber = default(string), bool? ShowMessage = default(bool?))
        {
            this.DocNumber = DocNumber;
            this.InternalProtocolNumber = InternalProtocolNumber;
            this.Year = Year;
            this.ProtocolNumber = ProtocolNumber;
            this.ShowMessage = ShowMessage;
        }
        
        /// <summary>
        /// Document Identifier
        /// </summary>
        /// <value>Document Identifier</value>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }

        /// <summary>
        /// Internal Protocol
        /// </summary>
        /// <value>Internal Protocol</value>
        [DataMember(Name="internalProtocolNumber", EmitDefaultValue=false)]
        public string InternalProtocolNumber { get; set; }

        /// <summary>
        /// Protocol Year
        /// </summary>
        /// <value>Protocol Year</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Protocol
        /// </summary>
        /// <value>Protocol</value>
        [DataMember(Name="protocolNumber", EmitDefaultValue=false)]
        public string ProtocolNumber { get; set; }

        /// <summary>
        /// Defines if show the messages of the result.
        /// </summary>
        /// <value>Defines if show the messages of the result.</value>
        [DataMember(Name="showMessage", EmitDefaultValue=false)]
        public bool? ShowMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileResultDTO {\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  InternalProtocolNumber: ").Append(InternalProtocolNumber).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  ProtocolNumber: ").Append(ProtocolNumber).Append("\n");
            sb.Append("  ShowMessage: ").Append(ShowMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileResultDTO);
        }

        /// <summary>
        /// Returns true if ProfileResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.InternalProtocolNumber == input.InternalProtocolNumber ||
                    (this.InternalProtocolNumber != null &&
                    this.InternalProtocolNumber.Equals(input.InternalProtocolNumber))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.ProtocolNumber == input.ProtocolNumber ||
                    (this.ProtocolNumber != null &&
                    this.ProtocolNumber.Equals(input.ProtocolNumber))
                ) && 
                (
                    this.ShowMessage == input.ShowMessage ||
                    (this.ShowMessage != null &&
                    this.ShowMessage.Equals(input.ShowMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.InternalProtocolNumber != null)
                    hashCode = hashCode * 59 + this.InternalProtocolNumber.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.ProtocolNumber != null)
                    hashCode = hashCode * 59 + this.ProtocolNumber.GetHashCode();
                if (this.ShowMessage != null)
                    hashCode = hashCode * 59 + this.ShowMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
