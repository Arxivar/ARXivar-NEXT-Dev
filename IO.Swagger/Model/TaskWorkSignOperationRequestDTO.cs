/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaskWorkSignOperationRequestDTO
    /// </summary>
    [DataContract]
    public partial class TaskWorkSignOperationRequestDTO :  IEquatable<TaskWorkSignOperationRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkSignOperationRequestDTO" /> class.
        /// </summary>
        /// <param name="DmWfSignId">DmWfSignId.</param>
        /// <param name="DmTaskWorkId">DmTaskWorkId.</param>
        /// <param name="CertId">CertId.</param>
        /// <param name="CertExtraId">CertExtraId.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Otp">Otp.</param>
        /// <param name="SignElementList">SignElementList.</param>
        public TaskWorkSignOperationRequestDTO(int? DmWfSignId = default(int?), int? DmTaskWorkId = default(int?), string CertId = default(string), string CertExtraId = default(string), string Password = default(string), string Otp = default(string), List<SignOperationElementDTO> SignElementList = default(List<SignOperationElementDTO>))
        {
            this.DmWfSignId = DmWfSignId;
            this.DmTaskWorkId = DmTaskWorkId;
            this.CertId = CertId;
            this.CertExtraId = CertExtraId;
            this.Password = Password;
            this.Otp = Otp;
            this.SignElementList = SignElementList;
        }
        
        /// <summary>
        /// Gets or Sets DmWfSignId
        /// </summary>
        [DataMember(Name="dmWfSignId", EmitDefaultValue=false)]
        public int? DmWfSignId { get; set; }

        /// <summary>
        /// Gets or Sets DmTaskWorkId
        /// </summary>
        [DataMember(Name="dmTaskWorkId", EmitDefaultValue=false)]
        public int? DmTaskWorkId { get; set; }

        /// <summary>
        /// Gets or Sets CertId
        /// </summary>
        [DataMember(Name="certId", EmitDefaultValue=false)]
        public string CertId { get; set; }

        /// <summary>
        /// Gets or Sets CertExtraId
        /// </summary>
        [DataMember(Name="certExtraId", EmitDefaultValue=false)]
        public string CertExtraId { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Otp
        /// </summary>
        [DataMember(Name="otp", EmitDefaultValue=false)]
        public string Otp { get; set; }

        /// <summary>
        /// Gets or Sets SignElementList
        /// </summary>
        [DataMember(Name="signElementList", EmitDefaultValue=false)]
        public List<SignOperationElementDTO> SignElementList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskWorkSignOperationRequestDTO {\n");
            sb.Append("  DmWfSignId: ").Append(DmWfSignId).Append("\n");
            sb.Append("  DmTaskWorkId: ").Append(DmTaskWorkId).Append("\n");
            sb.Append("  CertId: ").Append(CertId).Append("\n");
            sb.Append("  CertExtraId: ").Append(CertExtraId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("  SignElementList: ").Append(SignElementList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskWorkSignOperationRequestDTO);
        }

        /// <summary>
        /// Returns true if TaskWorkSignOperationRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskWorkSignOperationRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskWorkSignOperationRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DmWfSignId == input.DmWfSignId ||
                    (this.DmWfSignId != null &&
                    this.DmWfSignId.Equals(input.DmWfSignId))
                ) && 
                (
                    this.DmTaskWorkId == input.DmTaskWorkId ||
                    (this.DmTaskWorkId != null &&
                    this.DmTaskWorkId.Equals(input.DmTaskWorkId))
                ) && 
                (
                    this.CertId == input.CertId ||
                    (this.CertId != null &&
                    this.CertId.Equals(input.CertId))
                ) && 
                (
                    this.CertExtraId == input.CertExtraId ||
                    (this.CertExtraId != null &&
                    this.CertExtraId.Equals(input.CertExtraId))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Otp == input.Otp ||
                    (this.Otp != null &&
                    this.Otp.Equals(input.Otp))
                ) && 
                (
                    this.SignElementList == input.SignElementList ||
                    this.SignElementList != null &&
                    this.SignElementList.SequenceEqual(input.SignElementList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DmWfSignId != null)
                    hashCode = hashCode * 59 + this.DmWfSignId.GetHashCode();
                if (this.DmTaskWorkId != null)
                    hashCode = hashCode * 59 + this.DmTaskWorkId.GetHashCode();
                if (this.CertId != null)
                    hashCode = hashCode * 59 + this.CertId.GetHashCode();
                if (this.CertExtraId != null)
                    hashCode = hashCode * 59 + this.CertExtraId.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Otp != null)
                    hashCode = hashCode * 59 + this.Otp.GetHashCode();
                if (this.SignElementList != null)
                    hashCode = hashCode * 59 + this.SignElementList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
