/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class for stamp instance object
    /// </summary>
    [DataContract]
    public partial class StampsInstanceDTO :  IEquatable<StampsInstanceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampsInstanceDTO" /> class.
        /// </summary>
        /// <param name="id">Id for stamp..</param>
        /// <param name="x">Horizontal position (X) of the stamp.</param>
        /// <param name="y">Vertical position (Y) for stamp.</param>
        /// <param name="width">Horizontal dimension for stamp..</param>
        /// <param name="height">Vertical dimension for stamp.</param>
        /// <param name="pageIndex">Page index for stamp..</param>
        /// <param name="masterDefinitionId">Stamp definition Id..</param>
        /// <param name="bindings">List of possibile binding value..</param>
        /// <param name="xaml">Xaml of the stamp..</param>
        /// <param name="isResizable">Is resizable..</param>
        /// <param name="removeAfterApplied">Stamp must be removed after apply..</param>
        /// <param name="stampName">Stamp name..</param>
        /// <param name="stampDescription">Stamp description..</param>
        /// <param name="applied">Stamp is applied.</param>
        public StampsInstanceDTO(string id = default(string), double? x = default(double?), double? y = default(double?), double? width = default(double?), double? height = default(double?), int? pageIndex = default(int?), string masterDefinitionId = default(string), List<StampsInstanceValueDTO> bindings = default(List<StampsInstanceValueDTO>), string xaml = default(string), bool? isResizable = default(bool?), bool? removeAfterApplied = default(bool?), string stampName = default(string), string stampDescription = default(string), bool? applied = default(bool?))
        {
            this.Id = id;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
            this.PageIndex = pageIndex;
            this.MasterDefinitionId = masterDefinitionId;
            this.Bindings = bindings;
            this.Xaml = xaml;
            this.IsResizable = isResizable;
            this.RemoveAfterApplied = removeAfterApplied;
            this.StampName = stampName;
            this.StampDescription = stampDescription;
            this.Applied = applied;
        }
        
        /// <summary>
        /// Id for stamp.
        /// </summary>
        /// <value>Id for stamp.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Horizontal position (X) of the stamp
        /// </summary>
        /// <value>Horizontal position (X) of the stamp</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public double? X { get; set; }

        /// <summary>
        /// Vertical position (Y) for stamp
        /// </summary>
        /// <value>Vertical position (Y) for stamp</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public double? Y { get; set; }

        /// <summary>
        /// Horizontal dimension for stamp.
        /// </summary>
        /// <value>Horizontal dimension for stamp.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// Vertical dimension for stamp
        /// </summary>
        /// <value>Vertical dimension for stamp</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// Page index for stamp.
        /// </summary>
        /// <value>Page index for stamp.</value>
        [DataMember(Name="pageIndex", EmitDefaultValue=false)]
        public int? PageIndex { get; set; }

        /// <summary>
        /// Stamp definition Id.
        /// </summary>
        /// <value>Stamp definition Id.</value>
        [DataMember(Name="masterDefinitionId", EmitDefaultValue=false)]
        public string MasterDefinitionId { get; set; }

        /// <summary>
        /// List of possibile binding value.
        /// </summary>
        /// <value>List of possibile binding value.</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<StampsInstanceValueDTO> Bindings { get; set; }

        /// <summary>
        /// Xaml of the stamp.
        /// </summary>
        /// <value>Xaml of the stamp.</value>
        [DataMember(Name="xaml", EmitDefaultValue=false)]
        public string Xaml { get; set; }

        /// <summary>
        /// Is resizable.
        /// </summary>
        /// <value>Is resizable.</value>
        [DataMember(Name="isResizable", EmitDefaultValue=false)]
        public bool? IsResizable { get; set; }

        /// <summary>
        /// Stamp must be removed after apply.
        /// </summary>
        /// <value>Stamp must be removed after apply.</value>
        [DataMember(Name="removeAfterApplied", EmitDefaultValue=false)]
        public bool? RemoveAfterApplied { get; set; }

        /// <summary>
        /// Stamp name.
        /// </summary>
        /// <value>Stamp name.</value>
        [DataMember(Name="stampName", EmitDefaultValue=false)]
        public string StampName { get; set; }

        /// <summary>
        /// Stamp description.
        /// </summary>
        /// <value>Stamp description.</value>
        [DataMember(Name="stampDescription", EmitDefaultValue=false)]
        public string StampDescription { get; set; }

        /// <summary>
        /// Stamp is applied
        /// </summary>
        /// <value>Stamp is applied</value>
        [DataMember(Name="applied", EmitDefaultValue=false)]
        public bool? Applied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StampsInstanceDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  MasterDefinitionId: ").Append(MasterDefinitionId).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  Xaml: ").Append(Xaml).Append("\n");
            sb.Append("  IsResizable: ").Append(IsResizable).Append("\n");
            sb.Append("  RemoveAfterApplied: ").Append(RemoveAfterApplied).Append("\n");
            sb.Append("  StampName: ").Append(StampName).Append("\n");
            sb.Append("  StampDescription: ").Append(StampDescription).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StampsInstanceDTO);
        }

        /// <summary>
        /// Returns true if StampsInstanceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of StampsInstanceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StampsInstanceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    (this.PageIndex != null &&
                    this.PageIndex.Equals(input.PageIndex))
                ) && 
                (
                    this.MasterDefinitionId == input.MasterDefinitionId ||
                    (this.MasterDefinitionId != null &&
                    this.MasterDefinitionId.Equals(input.MasterDefinitionId))
                ) && 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                ) && 
                (
                    this.Xaml == input.Xaml ||
                    (this.Xaml != null &&
                    this.Xaml.Equals(input.Xaml))
                ) && 
                (
                    this.IsResizable == input.IsResizable ||
                    (this.IsResizable != null &&
                    this.IsResizable.Equals(input.IsResizable))
                ) && 
                (
                    this.RemoveAfterApplied == input.RemoveAfterApplied ||
                    (this.RemoveAfterApplied != null &&
                    this.RemoveAfterApplied.Equals(input.RemoveAfterApplied))
                ) && 
                (
                    this.StampName == input.StampName ||
                    (this.StampName != null &&
                    this.StampName.Equals(input.StampName))
                ) && 
                (
                    this.StampDescription == input.StampDescription ||
                    (this.StampDescription != null &&
                    this.StampDescription.Equals(input.StampDescription))
                ) && 
                (
                    this.Applied == input.Applied ||
                    (this.Applied != null &&
                    this.Applied.Equals(input.Applied))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.PageIndex != null)
                    hashCode = hashCode * 59 + this.PageIndex.GetHashCode();
                if (this.MasterDefinitionId != null)
                    hashCode = hashCode * 59 + this.MasterDefinitionId.GetHashCode();
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.Xaml != null)
                    hashCode = hashCode * 59 + this.Xaml.GetHashCode();
                if (this.IsResizable != null)
                    hashCode = hashCode * 59 + this.IsResizable.GetHashCode();
                if (this.RemoveAfterApplied != null)
                    hashCode = hashCode * 59 + this.RemoveAfterApplied.GetHashCode();
                if (this.StampName != null)
                    hashCode = hashCode * 59 + this.StampName.GetHashCode();
                if (this.StampDescription != null)
                    hashCode = hashCode * 59 + this.StampDescription.GetHashCode();
                if (this.Applied != null)
                    hashCode = hashCode * 59 + this.Applied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
