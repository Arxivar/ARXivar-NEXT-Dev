/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of preview schema
    /// </summary>
    [DataContract]
    public partial class PreviewSchemaDTO :  IEquatable<PreviewSchemaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviewSchemaDTO" /> class.
        /// </summary>
        /// <param name="CountPages">Number of pages.</param>
        /// <param name="Status">Possible values:  0: Ok  1: Error  2: Pending .</param>
        /// <param name="ErrorMessage">ErrorMessage.</param>
        public PreviewSchemaDTO(int? CountPages = default(int?), int? Status = default(int?), string ErrorMessage = default(string))
        {
            this.CountPages = CountPages;
            this.Status = Status;
            this.ErrorMessage = ErrorMessage;
        }
        
        /// <summary>
        /// Number of pages
        /// </summary>
        /// <value>Number of pages</value>
        [DataMember(Name="countPages", EmitDefaultValue=false)]
        public int? CountPages { get; set; }

        /// <summary>
        /// Possible values:  0: Ok  1: Error  2: Pending 
        /// </summary>
        /// <value>Possible values:  0: Ok  1: Error  2: Pending </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreviewSchemaDTO {\n");
            sb.Append("  CountPages: ").Append(CountPages).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreviewSchemaDTO);
        }

        /// <summary>
        /// Returns true if PreviewSchemaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PreviewSchemaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviewSchemaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountPages == input.CountPages ||
                    (this.CountPages != null &&
                    this.CountPages.Equals(input.CountPages))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountPages != null)
                    hashCode = hashCode * 59 + this.CountPages.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
