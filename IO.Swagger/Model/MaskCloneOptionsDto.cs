/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of options used to clone a mask
    /// </summary>
    [DataContract]
    public partial class MaskCloneOptionsDto :  IEquatable<MaskCloneOptionsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaskCloneOptionsDto" /> class.
        /// </summary>
        /// <param name="ClonePredefinedProfile">Clone the Predefined Profile.</param>
        /// <param name="PredefinedProfileName">Predefined Profile Name.</param>
        /// <param name="MaskName">Name.</param>
        /// <param name="OriginalMaskId">Parent Identifier.</param>
        public MaskCloneOptionsDto(bool? ClonePredefinedProfile = default(bool?), string PredefinedProfileName = default(string), string MaskName = default(string), string OriginalMaskId = default(string))
        {
            this.ClonePredefinedProfile = ClonePredefinedProfile;
            this.PredefinedProfileName = PredefinedProfileName;
            this.MaskName = MaskName;
            this.OriginalMaskId = OriginalMaskId;
        }
        
        /// <summary>
        /// Clone the Predefined Profile
        /// </summary>
        /// <value>Clone the Predefined Profile</value>
        [DataMember(Name="clonePredefinedProfile", EmitDefaultValue=false)]
        public bool? ClonePredefinedProfile { get; set; }

        /// <summary>
        /// Predefined Profile Name
        /// </summary>
        /// <value>Predefined Profile Name</value>
        [DataMember(Name="predefinedProfileName", EmitDefaultValue=false)]
        public string PredefinedProfileName { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="maskName", EmitDefaultValue=false)]
        public string MaskName { get; set; }

        /// <summary>
        /// Parent Identifier
        /// </summary>
        /// <value>Parent Identifier</value>
        [DataMember(Name="originalMaskId", EmitDefaultValue=false)]
        public string OriginalMaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaskCloneOptionsDto {\n");
            sb.Append("  ClonePredefinedProfile: ").Append(ClonePredefinedProfile).Append("\n");
            sb.Append("  PredefinedProfileName: ").Append(PredefinedProfileName).Append("\n");
            sb.Append("  MaskName: ").Append(MaskName).Append("\n");
            sb.Append("  OriginalMaskId: ").Append(OriginalMaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaskCloneOptionsDto);
        }

        /// <summary>
        /// Returns true if MaskCloneOptionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MaskCloneOptionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaskCloneOptionsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClonePredefinedProfile == input.ClonePredefinedProfile ||
                    (this.ClonePredefinedProfile != null &&
                    this.ClonePredefinedProfile.Equals(input.ClonePredefinedProfile))
                ) && 
                (
                    this.PredefinedProfileName == input.PredefinedProfileName ||
                    (this.PredefinedProfileName != null &&
                    this.PredefinedProfileName.Equals(input.PredefinedProfileName))
                ) && 
                (
                    this.MaskName == input.MaskName ||
                    (this.MaskName != null &&
                    this.MaskName.Equals(input.MaskName))
                ) && 
                (
                    this.OriginalMaskId == input.OriginalMaskId ||
                    (this.OriginalMaskId != null &&
                    this.OriginalMaskId.Equals(input.OriginalMaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClonePredefinedProfile != null)
                    hashCode = hashCode * 59 + this.ClonePredefinedProfile.GetHashCode();
                if (this.PredefinedProfileName != null)
                    hashCode = hashCode * 59 + this.PredefinedProfileName.GetHashCode();
                if (this.MaskName != null)
                    hashCode = hashCode * 59 + this.MaskName.GetHashCode();
                if (this.OriginalMaskId != null)
                    hashCode = hashCode * 59 + this.OriginalMaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
