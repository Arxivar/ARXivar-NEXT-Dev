/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of signature certificate use for edit
    /// </summary>
    [DataContract]
    public partial class SignCertUseSetDTO :  IEquatable<SignCertUseSetDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCertUseSetDTO" /> class.
        /// </summary>
        /// <param name="SavePassword">Password is saved.</param>
        /// <param name="Password">Password.</param>
        /// <param name="CertUseInsertList">List of certificate use.</param>
        public SignCertUseSetDTO(bool? SavePassword = default(bool?), string Password = default(string), List<SignCertUseInsertDTO> CertUseInsertList = default(List<SignCertUseInsertDTO>))
        {
            this.SavePassword = SavePassword;
            this.Password = Password;
            this.CertUseInsertList = CertUseInsertList;
        }
        
        /// <summary>
        /// Password is saved
        /// </summary>
        /// <value>Password is saved</value>
        [DataMember(Name="savePassword", EmitDefaultValue=false)]
        public bool? SavePassword { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// List of certificate use
        /// </summary>
        /// <value>List of certificate use</value>
        [DataMember(Name="certUseInsertList", EmitDefaultValue=false)]
        public List<SignCertUseInsertDTO> CertUseInsertList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignCertUseSetDTO {\n");
            sb.Append("  SavePassword: ").Append(SavePassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  CertUseInsertList: ").Append(CertUseInsertList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignCertUseSetDTO);
        }

        /// <summary>
        /// Returns true if SignCertUseSetDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignCertUseSetDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignCertUseSetDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SavePassword == input.SavePassword ||
                    (this.SavePassword != null &&
                    this.SavePassword.Equals(input.SavePassword))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.CertUseInsertList == input.CertUseInsertList ||
                    this.CertUseInsertList != null &&
                    this.CertUseInsertList.SequenceEqual(input.CertUseInsertList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SavePassword != null)
                    hashCode = hashCode * 59 + this.SavePassword.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.CertUseInsertList != null)
                    hashCode = hashCode * 59 + this.CertUseInsertList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
