/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserDTO
    /// </summary>
    [DataContract]
    public partial class UserDTO :  IEquatable<UserDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDTO" /> class.
        /// </summary>
        /// <param name="User">User.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Email">Email.</param>
        /// <param name="BusinessUnit">BusinessUnit.</param>
        /// <param name="Lang">Lang.</param>
        /// <param name="RespAos">RespAos.</param>
        /// <param name="CompleteName">CompleteName.</param>
        /// <param name="BusinessUnitLocked">BusinessUnitLocked.</param>
        /// <param name="WorkingBusinessUnit">WorkingBusinessUnit.</param>
        public UserDTO(int? User = null, string Description = null, string Email = null, string BusinessUnit = null, string Lang = null, bool? RespAos = null, string CompleteName = null, bool? BusinessUnitLocked = null, string WorkingBusinessUnit = null)
        {
            this.User = User;
            this.Description = Description;
            this.Email = Email;
            this.BusinessUnit = BusinessUnit;
            this.Lang = Lang;
            this.RespAos = RespAos;
            this.CompleteName = CompleteName;
            this.BusinessUnitLocked = BusinessUnitLocked;
            this.WorkingBusinessUnit = WorkingBusinessUnit;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }
        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }
        /// <summary>
        /// Gets or Sets RespAos
        /// </summary>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public bool? RespAos { get; set; }
        /// <summary>
        /// Gets or Sets CompleteName
        /// </summary>
        [DataMember(Name="completeName", EmitDefaultValue=false)]
        public string CompleteName { get; set; }
        /// <summary>
        /// Gets or Sets BusinessUnitLocked
        /// </summary>
        [DataMember(Name="businessUnitLocked", EmitDefaultValue=false)]
        public bool? BusinessUnitLocked { get; set; }
        /// <summary>
        /// Gets or Sets WorkingBusinessUnit
        /// </summary>
        [DataMember(Name="workingBusinessUnit", EmitDefaultValue=false)]
        public string WorkingBusinessUnit { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  CompleteName: ").Append(CompleteName).Append("\n");
            sb.Append("  BusinessUnitLocked: ").Append(BusinessUnitLocked).Append("\n");
            sb.Append("  WorkingBusinessUnit: ").Append(WorkingBusinessUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserDTO);
        }

        /// <summary>
        /// Returns true if UserDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.BusinessUnit == other.BusinessUnit ||
                    this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(other.BusinessUnit)
                ) && 
                (
                    this.Lang == other.Lang ||
                    this.Lang != null &&
                    this.Lang.Equals(other.Lang)
                ) && 
                (
                    this.RespAos == other.RespAos ||
                    this.RespAos != null &&
                    this.RespAos.Equals(other.RespAos)
                ) && 
                (
                    this.CompleteName == other.CompleteName ||
                    this.CompleteName != null &&
                    this.CompleteName.Equals(other.CompleteName)
                ) && 
                (
                    this.BusinessUnitLocked == other.BusinessUnitLocked ||
                    this.BusinessUnitLocked != null &&
                    this.BusinessUnitLocked.Equals(other.BusinessUnitLocked)
                ) && 
                (
                    this.WorkingBusinessUnit == other.WorkingBusinessUnit ||
                    this.WorkingBusinessUnit != null &&
                    this.WorkingBusinessUnit.Equals(other.WorkingBusinessUnit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.BusinessUnit != null)
                    hash = hash * 59 + this.BusinessUnit.GetHashCode();
                if (this.Lang != null)
                    hash = hash * 59 + this.Lang.GetHashCode();
                if (this.RespAos != null)
                    hash = hash * 59 + this.RespAos.GetHashCode();
                if (this.CompleteName != null)
                    hash = hash * 59 + this.CompleteName.GetHashCode();
                if (this.BusinessUnitLocked != null)
                    hash = hash * 59 + this.BusinessUnitLocked.GetHashCode();
                if (this.WorkingBusinessUnit != null)
                    hash = hash * 59 + this.WorkingBusinessUnit.GetHashCode();
                return hash;
            }
        }
    }

}
