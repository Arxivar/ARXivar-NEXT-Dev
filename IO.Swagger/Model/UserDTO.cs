/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of the user
    /// </summary>
    [DataContract]
    public partial class UserDTO :  IEquatable<UserDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDTO" /> class.
        /// </summary>
        /// <param name="User">Identifier.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Email">Email.</param>
        /// <param name="BusinessUnit">Business Unit.</param>
        /// <param name="Lang">Language.</param>
        /// <param name="RespAos">Person in charge about Aos.</param>
        /// <param name="CompleteName">Full name.</param>
        /// <param name="BusinessUnitLocked">Work on single business unit.</param>
        /// <param name="WorkingBusinessUnit">Business unit code of work.</param>
        public UserDTO(int? User = default(int?), string Description = default(string), string Email = default(string), string BusinessUnit = default(string), string Lang = default(string), bool? RespAos = default(bool?), string CompleteName = default(string), bool? BusinessUnitLocked = default(bool?), string WorkingBusinessUnit = default(string))
        {
            this.User = User;
            this.Description = Description;
            this.Email = Email;
            this.BusinessUnit = BusinessUnit;
            this.Lang = Lang;
            this.RespAos = RespAos;
            this.CompleteName = CompleteName;
            this.BusinessUnitLocked = BusinessUnitLocked;
            this.WorkingBusinessUnit = WorkingBusinessUnit;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Business Unit
        /// </summary>
        /// <value>Business Unit</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Person in charge about Aos
        /// </summary>
        /// <value>Person in charge about Aos</value>
        [DataMember(Name="respAos", EmitDefaultValue=false)]
        public bool? RespAos { get; set; }

        /// <summary>
        /// Full name
        /// </summary>
        /// <value>Full name</value>
        [DataMember(Name="completeName", EmitDefaultValue=false)]
        public string CompleteName { get; set; }

        /// <summary>
        /// Work on single business unit
        /// </summary>
        /// <value>Work on single business unit</value>
        [DataMember(Name="businessUnitLocked", EmitDefaultValue=false)]
        public bool? BusinessUnitLocked { get; set; }

        /// <summary>
        /// Business unit code of work
        /// </summary>
        /// <value>Business unit code of work</value>
        [DataMember(Name="workingBusinessUnit", EmitDefaultValue=false)]
        public string WorkingBusinessUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  RespAos: ").Append(RespAos).Append("\n");
            sb.Append("  CompleteName: ").Append(CompleteName).Append("\n");
            sb.Append("  BusinessUnitLocked: ").Append(BusinessUnitLocked).Append("\n");
            sb.Append("  WorkingBusinessUnit: ").Append(WorkingBusinessUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDTO);
        }

        /// <summary>
        /// Returns true if UserDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.RespAos == input.RespAos ||
                    (this.RespAos != null &&
                    this.RespAos.Equals(input.RespAos))
                ) && 
                (
                    this.CompleteName == input.CompleteName ||
                    (this.CompleteName != null &&
                    this.CompleteName.Equals(input.CompleteName))
                ) && 
                (
                    this.BusinessUnitLocked == input.BusinessUnitLocked ||
                    (this.BusinessUnitLocked != null &&
                    this.BusinessUnitLocked.Equals(input.BusinessUnitLocked))
                ) && 
                (
                    this.WorkingBusinessUnit == input.WorkingBusinessUnit ||
                    (this.WorkingBusinessUnit != null &&
                    this.WorkingBusinessUnit.Equals(input.WorkingBusinessUnit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.RespAos != null)
                    hashCode = hashCode * 59 + this.RespAos.GetHashCode();
                if (this.CompleteName != null)
                    hashCode = hashCode * 59 + this.CompleteName.GetHashCode();
                if (this.BusinessUnitLocked != null)
                    hashCode = hashCode * 59 + this.BusinessUnitLocked.GetHashCode();
                if (this.WorkingBusinessUnit != null)
                    hashCode = hashCode * 59 + this.WorkingBusinessUnit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
