/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginSettings (string pluginId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginSettingsWithHttpInfo (string pluginId);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginUserSettings (PluginSettingRequest pluginRequest);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginUserSettingsWithHttpInfo (PluginSettingRequest pluginRequest);
        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ClientSettingsGetSettings ();

        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ClientSettingsGetSystemSettings ();

        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetSystemSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetWidgetSettings (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetWidgetSettingsWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetWidgetUserSettings (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetWidgetUserSettingsWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginSetting (string pluginId, Object setting);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginSettingWithHttpInfo (string pluginId, Object setting);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginUserSetting (PluginSettingRequest pluginRequest);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (PluginSettingRequest pluginRequest);
        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns></returns>
        void ClientSettingsUpdateUserSetting (Object setting);

        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateUserSettingWithHttpInfo (Object setting);
        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns></returns>
        void ClientSettingsUpdateWidgetSetting (string id, string instanceId, int? desktopId, Object userSettings);

        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateWidgetSettingWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings);
        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns></returns>
        void ClientSettingsUpdateWidgetUserSetting (string id, string instanceId, int? desktopId, Object userSettings);

        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateWidgetUserSettingWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettingsAsync (string pluginId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettingsAsyncWithHttpInfo (string pluginId);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (PluginSettingRequest pluginRequest);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (PluginSettingRequest pluginRequest);
        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetSettingsAsync ();

        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetSystemSettingsAsync ();

        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSystemSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetSettingsAsync (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetUserSettingsAsync (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginSettingAsync (string pluginId, Object setting);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSettingAsyncWithHttpInfo (string pluginId, Object setting);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (PluginSettingRequest pluginRequest);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (PluginSettingRequest pluginRequest);
        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateUserSettingAsync (Object setting);

        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateUserSettingAsyncWithHttpInfo (Object setting);
        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateWidgetSettingAsync (string id, string instanceId, int? desktopId, Object userSettings);

        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings);
        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateWidgetUserSettingAsync (string id, string instanceId, int? desktopId, Object userSettings);

        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientSettingsApi : IClientSettingsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientSettingsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientSettingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginSettings (string pluginId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginSettingsWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginSettingsWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettingsAsync (string pluginId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginSettingsAsyncWithHttpInfo(pluginId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettingsAsyncWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginUserSettings (PluginSettingRequest pluginRequest)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginUserSettingsWithHttpInfo(pluginRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginUserSettingsWithHttpInfo (PluginSettingRequest pluginRequest)
        {
            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new ApiException(400, "Missing required parameter 'pluginRequest' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginRequest != null && pluginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pluginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pluginRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (PluginSettingRequest pluginRequest)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo(pluginRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (PluginSettingRequest pluginRequest)
        {
            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new ApiException(400, "Missing required parameter 'pluginRequest' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginRequest != null && pluginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pluginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pluginRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ClientSettingsGetSettings ()
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetSettingsAsync ()
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ClientSettingsGetSystemSettings ()
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetSystemSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetSystemSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSystemSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetSystemSettingsAsync ()
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetSystemSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSystemSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSystemSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetWidgetSettings (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetWidgetSettingsWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetWidgetSettingsWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetSettingsAsync (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetWidgetSettingsAsyncWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetWidgetUserSettings (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetWidgetUserSettingsWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetWidgetUserSettingsWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetUserSettingsAsync (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginSetting (string pluginId, Object setting)
        {
             ClientSettingsUpdatePluginSettingWithHttpInfo(pluginId, setting);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginSettingWithHttpInfo (string pluginId, Object setting)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (setting != null && setting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setting; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginSettingAsync (string pluginId, Object setting)
        {
             await ClientSettingsUpdatePluginSettingAsyncWithHttpInfo(pluginId, setting);

        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Identifier of plugin</param>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSettingAsyncWithHttpInfo (string pluginId, Object setting)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (setting != null && setting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setting; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginUserSetting (PluginSettingRequest pluginRequest)
        {
             ClientSettingsUpdatePluginUserSettingWithHttpInfo(pluginRequest);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (PluginSettingRequest pluginRequest)
        {
            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new ApiException(400, "Missing required parameter 'pluginRequest' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginRequest != null && pluginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pluginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pluginRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (PluginSettingRequest pluginRequest)
        {
             await ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo(pluginRequest);

        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginRequest">Request of plugin settings</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (PluginSettingRequest pluginRequest)
        {
            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new ApiException(400, "Missing required parameter 'pluginRequest' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginRequest != null && pluginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pluginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pluginRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns></returns>
        public void ClientSettingsUpdateUserSetting (Object setting)
        {
             ClientSettingsUpdateUserSettingWithHttpInfo(setting);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateUserSettingWithHttpInfo (Object setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling ClientSettingsApi->ClientSettingsUpdateUserSetting");

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setting != null && setting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setting; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateUserSettingAsync (Object setting)
        {
             await ClientSettingsUpdateUserSettingAsyncWithHttpInfo(setting);

        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setting">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateUserSettingAsyncWithHttpInfo (Object setting)
        {
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling ClientSettingsApi->ClientSettingsUpdateUserSetting");

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setting != null && setting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setting; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns></returns>
        public void ClientSettingsUpdateWidgetSetting (string id, string instanceId, int? desktopId, Object userSettings)
        {
             ClientSettingsUpdateWidgetSettingWithHttpInfo(id, instanceId, desktopId, userSettings);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateWidgetSettingWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'userSettings' is set
            if (userSettings == null)
                throw new ApiException(400, "Missing required parameter 'userSettings' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (userSettings != null && userSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateWidgetSettingAsync (string id, string instanceId, int? desktopId, Object userSettings)
        {
             await ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo(id, instanceId, desktopId, userSettings);

        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'userSettings' is set
            if (userSettings == null)
                throw new ApiException(400, "Missing required parameter 'userSettings' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (userSettings != null && userSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns></returns>
        public void ClientSettingsUpdateWidgetUserSetting (string id, string instanceId, int? desktopId, Object userSettings)
        {
             ClientSettingsUpdateWidgetUserSettingWithHttpInfo(id, instanceId, desktopId, userSettings);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateWidgetUserSettingWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'userSettings' is set
            if (userSettings == null)
                throw new ApiException(400, "Missing required parameter 'userSettings' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (userSettings != null && userSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateWidgetUserSettingAsync (string id, string instanceId, int? desktopId, Object userSettings)
        {
             await ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo(id, instanceId, desktopId, userSettings);

        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <param name="userSettings">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo (string id, string instanceId, int? desktopId, Object userSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'userSettings' is set
            if (userSettings == null)
                throw new ApiException(400, "Missing required parameter 'userSettings' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (userSettings != null && userSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
