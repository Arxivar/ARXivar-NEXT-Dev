/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewsBuilderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call updates &#39;show field&#39; in view execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns></returns>
        void ViewsBuilderChangeShowFields (string viewId, bool? showFields);

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ViewsBuilderChangeShowFieldsWithHttpInfo (string viewId, bool? showFields);
        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ViewEditDTO</returns>
        ViewEditDTO ViewsBuilderEditView (ViewEditDTO viewedit = null);

        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        ApiResponse<ViewEditDTO> ViewsBuilderEditViewWithHttpInfo (ViewEditDTO viewedit = null);
        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ViewEditDTO</returns>
        ViewEditDTO ViewsBuilderEditView_0 (ViewEditDTO viewedit = null);

        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        ApiResponse<ViewEditDTO> ViewsBuilderEditView_0WithHttpInfo (ViewEditDTO viewedit = null);
        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>SearchDTO</returns>
        SearchDTO ViewsBuilderGetSearch (int? documentType);

        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> ViewsBuilderGetSearchWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>SearchDTO</returns>
        SearchDTO ViewsBuilderGetSearch_0 (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> ViewsBuilderGetSearch_0WithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>SelectDTO</returns>
        SelectDTO ViewsBuilderGetSelect (int? documentType);

        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> ViewsBuilderGetSelectWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>SelectDTO</returns>
        SelectDTO ViewsBuilderGetSelect_0 (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> ViewsBuilderGetSelect_0WithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call returns a view for edit purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>ViewEditDTO</returns>
        ViewEditDTO ViewsBuilderGetViewForEdit (string viewId);

        /// <summary>
        /// This call returns a view for edit purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        ApiResponse<ViewEditDTO> ViewsBuilderGetViewForEditWithHttpInfo (string viewId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call updates &#39;show field&#39; in view execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ViewsBuilderChangeShowFieldsAsync (string viewId, bool? showFields);

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ViewsBuilderChangeShowFieldsAsyncWithHttpInfo (string viewId, bool? showFields);
        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ViewEditDTO</returns>
        System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderEditViewAsync (ViewEditDTO viewedit = null);

        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderEditViewAsyncWithHttpInfo (ViewEditDTO viewedit = null);
        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ViewEditDTO</returns>
        System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderEditView_0Async (ViewEditDTO viewedit = null);

        /// <summary>
        /// This call updates a view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderEditView_0AsyncWithHttpInfo (ViewEditDTO viewedit = null);
        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> ViewsBuilderGetSearchAsync (int? documentType);

        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> ViewsBuilderGetSearchAsyncWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> ViewsBuilderGetSearch_0Async (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new search by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> ViewsBuilderGetSearch_0AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> ViewsBuilderGetSelectAsync (int? documentType);

        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> ViewsBuilderGetSelectAsyncWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> ViewsBuilderGetSelect_0Async (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> ViewsBuilderGetSelect_0AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call returns a view for edit purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>Task of ViewEditDTO</returns>
        System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderGetViewForEditAsync (string viewId);

        /// <summary>
        /// This call returns a view for edit purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderGetViewForEditAsyncWithHttpInfo (string viewId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewsBuilderApi : IViewsBuilderApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsBuilderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewsBuilderApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsBuilderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewsBuilderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns></returns>
        public void ViewsBuilderChangeShowFields (string viewId, bool? showFields)
        {
             ViewsBuilderChangeShowFieldsWithHttpInfo(viewId, showFields);
        }

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ViewsBuilderChangeShowFieldsWithHttpInfo (string viewId, bool? showFields)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewsBuilderApi->ViewsBuilderChangeShowFields");
            // verify the required parameter 'showFields' is set
            if (showFields == null)
                throw new ApiException(400, "Missing required parameter 'showFields' when calling ViewsBuilderApi->ViewsBuilderChangeShowFields");

            var localVarPath = "/api/ViewsBuilder/showFields/{viewId}/{showFields}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (showFields != null) localVarPathParams.Add("showFields", Configuration.ApiClient.ParameterToString(showFields)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderChangeShowFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ViewsBuilderChangeShowFieldsAsync (string viewId, bool? showFields)
        {
             await ViewsBuilderChangeShowFieldsAsyncWithHttpInfo(viewId, showFields);

        }

        /// <summary>
        /// This call updates &#39;show field&#39; in view execution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ViewsBuilderChangeShowFieldsAsyncWithHttpInfo (string viewId, bool? showFields)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewsBuilderApi->ViewsBuilderChangeShowFields");
            // verify the required parameter 'showFields' is set
            if (showFields == null)
                throw new ApiException(400, "Missing required parameter 'showFields' when calling ViewsBuilderApi->ViewsBuilderChangeShowFields");

            var localVarPath = "/api/ViewsBuilder/showFields/{viewId}/{showFields}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (showFields != null) localVarPathParams.Add("showFields", Configuration.ApiClient.ParameterToString(showFields)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderChangeShowFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ViewEditDTO</returns>
        public ViewEditDTO ViewsBuilderEditView (ViewEditDTO viewedit = null)
        {
             ApiResponse<ViewEditDTO> localVarResponse = ViewsBuilderEditViewWithHttpInfo(viewedit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        public ApiResponse< ViewEditDTO > ViewsBuilderEditViewWithHttpInfo (ViewEditDTO viewedit = null)
        {

            var localVarPath = "/api/ViewsBuilder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewedit != null && viewedit.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(viewedit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = viewedit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ViewEditDTO</returns>
        public async System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderEditViewAsync (ViewEditDTO viewedit = null)
        {
             ApiResponse<ViewEditDTO> localVarResponse = await ViewsBuilderEditViewAsyncWithHttpInfo(viewedit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderEditViewAsyncWithHttpInfo (ViewEditDTO viewedit = null)
        {

            var localVarPath = "/api/ViewsBuilder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewedit != null && viewedit.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(viewedit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = viewedit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ViewEditDTO</returns>
        public ViewEditDTO ViewsBuilderEditView_0 (ViewEditDTO viewedit = null)
        {
             ApiResponse<ViewEditDTO> localVarResponse = ViewsBuilderEditView_0WithHttpInfo(viewedit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        public ApiResponse< ViewEditDTO > ViewsBuilderEditView_0WithHttpInfo (ViewEditDTO viewedit = null)
        {

            var localVarPath = "/api/ViewsBuilder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewedit != null && viewedit.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(viewedit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = viewedit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderEditView_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ViewEditDTO</returns>
        public async System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderEditView_0Async (ViewEditDTO viewedit = null)
        {
             ApiResponse<ViewEditDTO> localVarResponse = await ViewsBuilderEditView_0AsyncWithHttpInfo(viewedit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a view 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewedit"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderEditView_0AsyncWithHttpInfo (ViewEditDTO viewedit = null)
        {

            var localVarPath = "/api/ViewsBuilder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewedit != null && viewedit.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(viewedit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = viewedit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderEditView_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>SearchDTO</returns>
        public SearchDTO ViewsBuilderGetSearch (int? documentType)
        {
             ApiResponse<SearchDTO> localVarResponse = ViewsBuilderGetSearchWithHttpInfo(documentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > ViewsBuilderGetSearchWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSearch");

            var localVarPath = "/api/ViewsBuilder/search/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> ViewsBuilderGetSearchAsync (int? documentType)
        {
             ApiResponse<SearchDTO> localVarResponse = await ViewsBuilderGetSearchAsyncWithHttpInfo(documentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifer</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> ViewsBuilderGetSearchAsyncWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSearch");

            var localVarPath = "/api/ViewsBuilder/search/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>SearchDTO</returns>
        public SearchDTO ViewsBuilderGetSearch_0 (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SearchDTO> localVarResponse = ViewsBuilderGetSearch_0WithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > ViewsBuilderGetSearch_0WithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");

            var localVarPath = "/api/ViewsBuilder/search/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSearch_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> ViewsBuilderGetSearch_0Async (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SearchDTO> localVarResponse = await ViewsBuilderGetSearch_0AsyncWithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new search by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> ViewsBuilderGetSearch_0AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ViewsBuilderApi->ViewsBuilderGetSearch_0");

            var localVarPath = "/api/ViewsBuilder/search/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSearch_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO ViewsBuilderGetSelect (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = ViewsBuilderGetSelectWithHttpInfo(documentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > ViewsBuilderGetSelectWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSelect");

            var localVarPath = "/api/ViewsBuilder/select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> ViewsBuilderGetSelectAsync (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = await ViewsBuilderGetSelectAsyncWithHttpInfo(documentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> ViewsBuilderGetSelectAsyncWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSelect");

            var localVarPath = "/api/ViewsBuilder/select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO ViewsBuilderGetSelect_0 (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = ViewsBuilderGetSelect_0WithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > ViewsBuilderGetSelect_0WithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");

            var localVarPath = "/api/ViewsBuilder/select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> ViewsBuilderGetSelect_0Async (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = await ViewsBuilderGetSelect_0AsyncWithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Identifier of first level document type</param>
        /// <param name="tipo2">Identifier of secodn level document type</param>
        /// <param name="tipo3">Identifier of third level document type</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> ViewsBuilderGetSelect_0AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ViewsBuilderApi->ViewsBuilderGetSelect_0");

            var localVarPath = "/api/ViewsBuilder/select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a view for edit purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>ViewEditDTO</returns>
        public ViewEditDTO ViewsBuilderGetViewForEdit (string viewId)
        {
             ApiResponse<ViewEditDTO> localVarResponse = ViewsBuilderGetViewForEditWithHttpInfo(viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a view for edit purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>ApiResponse of ViewEditDTO</returns>
        public ApiResponse< ViewEditDTO > ViewsBuilderGetViewForEditWithHttpInfo (string viewId)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewsBuilderApi->ViewsBuilderGetViewForEdit");

            var localVarPath = "/api/ViewsBuilder/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetViewForEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

        /// <summary>
        /// This call returns a view for edit purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>Task of ViewEditDTO</returns>
        public async System.Threading.Tasks.Task<ViewEditDTO> ViewsBuilderGetViewForEditAsync (string viewId)
        {
             ApiResponse<ViewEditDTO> localVarResponse = await ViewsBuilderGetViewForEditAsyncWithHttpInfo(viewId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a view for edit purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">View identifier</param>
        /// <returns>Task of ApiResponse (ViewEditDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewEditDTO>> ViewsBuilderGetViewForEditAsyncWithHttpInfo (string viewId)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewsBuilderApi->ViewsBuilderGetViewForEdit");

            var localVarPath = "/api/ViewsBuilder/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsBuilderGetViewForEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewEditDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewEditDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewEditDTO)));
        }

    }
}
