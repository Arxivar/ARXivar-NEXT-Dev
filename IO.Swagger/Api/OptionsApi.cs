/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserOptionsDto</returns>
        UserOptionsDto OptionsGet ();

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserOptionsDto</returns>
        ApiResponse<UserOptionsDto> OptionsGetWithHttpInfo ();
        /// <summary>
        /// This call retrieve options by the given argument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>List&lt;OptionsDTO&gt;</returns>
        List<OptionsDTO> OptionsGetByArgomento (string argomento);

        /// <summary>
        /// This call retrieve options by the given argument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>ApiResponse of List&lt;OptionsDTO&gt;</returns>
        ApiResponse<List<OptionsDTO>> OptionsGetByArgomentoWithHttpInfo (string argomento);
        /// <summary>
        /// This call retrieve options by the given argument and given field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>List&lt;OptionsDTO&gt;</returns>
        List<OptionsDTO> OptionsGetByArgomentoCampo (string argomento, string campo);

        /// <summary>
        /// This call retrieve options by the given argument and given field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>ApiResponse of List&lt;OptionsDTO&gt;</returns>
        ApiResponse<List<OptionsDTO>> OptionsGetByArgomentoCampoWithHttpInfo (string argomento, string campo);
        /// <summary>
        /// This call returns the option for display Document Type by code or By Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string OptionsGetDocumentTypeViewMode ();

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OptionsGetDocumentTypeViewModeWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserOptionsDto</returns>
        System.Threading.Tasks.Task<UserOptionsDto> OptionsGetAsync ();

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserOptionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserOptionsDto>> OptionsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call retrieve options by the given argument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>Task of List&lt;OptionsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<OptionsDTO>> OptionsGetByArgomentoAsync (string argomento);

        /// <summary>
        /// This call retrieve options by the given argument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OptionsDTO>>> OptionsGetByArgomentoAsyncWithHttpInfo (string argomento);
        /// <summary>
        /// This call retrieve options by the given argument and given field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>Task of List&lt;OptionsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<OptionsDTO>> OptionsGetByArgomentoCampoAsync (string argomento, string campo);

        /// <summary>
        /// This call retrieve options by the given argument and given field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OptionsDTO>>> OptionsGetByArgomentoCampoAsyncWithHttpInfo (string argomento, string campo);
        /// <summary>
        /// This call returns the option for display Document Type by code or By Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OptionsGetDocumentTypeViewModeAsync ();

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OptionsGetDocumentTypeViewModeAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptionsApi : IOptionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserOptionsDto</returns>
        public UserOptionsDto OptionsGet ()
        {
             ApiResponse<UserOptionsDto> localVarResponse = OptionsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserOptionsDto</returns>
        public ApiResponse< UserOptionsDto > OptionsGetWithHttpInfo ()
        {

            var localVarPath = "/api/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserOptionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserOptionsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserOptionsDto)));
            
        }

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserOptionsDto</returns>
        public async System.Threading.Tasks.Task<UserOptionsDto> OptionsGetAsync ()
        {
             ApiResponse<UserOptionsDto> localVarResponse = await OptionsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the options for the connected user (aka: Configura-Generale) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserOptionsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserOptionsDto>> OptionsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserOptionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserOptionsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserOptionsDto)));
            
        }

        /// <summary>
        /// This call retrieve options by the given argument 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>List&lt;OptionsDTO&gt;</returns>
        public List<OptionsDTO> OptionsGetByArgomento (string argomento)
        {
             ApiResponse<List<OptionsDTO>> localVarResponse = OptionsGetByArgomentoWithHttpInfo(argomento);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve options by the given argument 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>ApiResponse of List&lt;OptionsDTO&gt;</returns>
        public ApiResponse< List<OptionsDTO> > OptionsGetByArgomentoWithHttpInfo (string argomento)
        {
            // verify the required parameter 'argomento' is set
            if (argomento == null)
                throw new ApiException(400, "Missing required parameter 'argomento' when calling OptionsApi->OptionsGetByArgomento");

            var localVarPath = "/api/options/topic/{argomento}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (argomento != null) localVarPathParams.Add("argomento", Configuration.ApiClient.ParameterToString(argomento)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetByArgomento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OptionsDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OptionsDTO>)));
            
        }

        /// <summary>
        /// This call retrieve options by the given argument 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>Task of List&lt;OptionsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<OptionsDTO>> OptionsGetByArgomentoAsync (string argomento)
        {
             ApiResponse<List<OptionsDTO>> localVarResponse = await OptionsGetByArgomentoAsyncWithHttpInfo(argomento);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve options by the given argument 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OptionsDTO>>> OptionsGetByArgomentoAsyncWithHttpInfo (string argomento)
        {
            // verify the required parameter 'argomento' is set
            if (argomento == null)
                throw new ApiException(400, "Missing required parameter 'argomento' when calling OptionsApi->OptionsGetByArgomento");

            var localVarPath = "/api/options/topic/{argomento}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (argomento != null) localVarPathParams.Add("argomento", Configuration.ApiClient.ParameterToString(argomento)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetByArgomento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OptionsDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OptionsDTO>)));
            
        }

        /// <summary>
        /// This call retrieve options by the given argument and given field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>List&lt;OptionsDTO&gt;</returns>
        public List<OptionsDTO> OptionsGetByArgomentoCampo (string argomento, string campo)
        {
             ApiResponse<List<OptionsDTO>> localVarResponse = OptionsGetByArgomentoCampoWithHttpInfo(argomento, campo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve options by the given argument and given field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>ApiResponse of List&lt;OptionsDTO&gt;</returns>
        public ApiResponse< List<OptionsDTO> > OptionsGetByArgomentoCampoWithHttpInfo (string argomento, string campo)
        {
            // verify the required parameter 'argomento' is set
            if (argomento == null)
                throw new ApiException(400, "Missing required parameter 'argomento' when calling OptionsApi->OptionsGetByArgomentoCampo");
            // verify the required parameter 'campo' is set
            if (campo == null)
                throw new ApiException(400, "Missing required parameter 'campo' when calling OptionsApi->OptionsGetByArgomentoCampo");

            var localVarPath = "/api/options/topicField/{argomento}/{campo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (argomento != null) localVarPathParams.Add("argomento", Configuration.ApiClient.ParameterToString(argomento)); // path parameter
            if (campo != null) localVarPathParams.Add("campo", Configuration.ApiClient.ParameterToString(campo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetByArgomentoCampo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OptionsDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OptionsDTO>)));
            
        }

        /// <summary>
        /// This call retrieve options by the given argument and given field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>Task of List&lt;OptionsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<OptionsDTO>> OptionsGetByArgomentoCampoAsync (string argomento, string campo)
        {
             ApiResponse<List<OptionsDTO>> localVarResponse = await OptionsGetByArgomentoCampoAsyncWithHttpInfo(argomento, campo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve options by the given argument and given field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="argomento">Argument filter</param>
        /// <param name="campo">Field filter</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OptionsDTO>>> OptionsGetByArgomentoCampoAsyncWithHttpInfo (string argomento, string campo)
        {
            // verify the required parameter 'argomento' is set
            if (argomento == null)
                throw new ApiException(400, "Missing required parameter 'argomento' when calling OptionsApi->OptionsGetByArgomentoCampo");
            // verify the required parameter 'campo' is set
            if (campo == null)
                throw new ApiException(400, "Missing required parameter 'campo' when calling OptionsApi->OptionsGetByArgomentoCampo");

            var localVarPath = "/api/options/topicField/{argomento}/{campo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (argomento != null) localVarPathParams.Add("argomento", Configuration.ApiClient.ParameterToString(argomento)); // path parameter
            if (campo != null) localVarPathParams.Add("campo", Configuration.ApiClient.ParameterToString(campo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetByArgomentoCampo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OptionsDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OptionsDTO>)));
            
        }

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string OptionsGetDocumentTypeViewMode ()
        {
             ApiResponse<string> localVarResponse = OptionsGetDocumentTypeViewModeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OptionsGetDocumentTypeViewModeWithHttpInfo ()
        {

            var localVarPath = "/api/options/documenttypeviewmode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetDocumentTypeViewMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OptionsGetDocumentTypeViewModeAsync ()
        {
             ApiResponse<string> localVarResponse = await OptionsGetDocumentTypeViewModeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the option for display Document Type by code or By Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OptionsGetDocumentTypeViewModeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/options/documenttypeviewmode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptionsGetDocumentTypeViewMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
