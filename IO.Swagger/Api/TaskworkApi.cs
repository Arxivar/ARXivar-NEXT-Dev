/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskWorkApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        TaskWorkDTO TaskWorkActivateTaskwork (int? taskWorkId);

        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        ApiResponse<TaskWorkDTO> TaskWorkActivateTaskworkWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkAutoAssign (int? taskworkId);

        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkAutoAssignWithHttpInfo (int? taskworkId);
        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        List<CloseEligibleResult> TaskWorkCanFinalizeTaskByIds (List<int?> taskworkids);

        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        ApiResponse<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsWithHttpInfo (List<int?> taskworkids);
        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        List<CloseEligibleResult> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        ApiResponse<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkDeleteTaskWorkById (int? taskWorkId);

        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkDeleteTaskWorkByIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns></returns>
        void TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> TaskWorkGetActiveTaskWork (SelectDTO select, int? docnumber);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> TaskWorkGetActiveTaskWorkWithHttpInfo (SelectDTO select, int? docnumber);
        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        SelectDTO TaskWorkGetDefaultSelect ();

        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> TaskWorkGetDefaultSelectWithHttpInfo ();
        /// <summary>
        /// This call returns the task documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> TaskWorkGetDocumentsByProcessId (int? processId, SelectDTO select);

        /// <summary>
        /// This call returns the task documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> TaskWorkGetDocumentsByProcessIdWithHttpInfo (int? processId, SelectDTO select);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>List&lt;KeyValueElementDto&gt;</returns>
        List<KeyValueElementDto> TaskWorkGetDocumentsFilenameByProcessId (int? processId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>ApiResponse of List&lt;KeyValueElementDto&gt;</returns>
        ApiResponse<List<KeyValueElementDto>> TaskWorkGetDocumentsFilenameByProcessIdWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>List&lt;TaskExitCodeDTO&gt;</returns>
        List<TaskExitCodeDTO> TaskWorkGetExitCodesByTaskWorkIds (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;TaskExitCodeDTO&gt;</returns>
        ApiResponse<List<TaskExitCodeDTO>> TaskWorkGetExitCodesByTaskWorkIdsWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ModelProfileSchemaDTO</returns>
        ModelProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of ModelProfileSchemaDTO</returns>
        ApiResponse<ModelProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        TaskWorkDTO TaskWorkGetTaskWorkById (int? taskWorkId);

        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        ApiResponse<TaskWorkDTO> TaskWorkGetTaskWorkByIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;TaskWorkDTO&gt;</returns>
        List<TaskWorkDTO> TaskWorkGetTaskWorkForAutoAssign (int? docnumber);

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDTO&gt;</returns>
        ApiResponse<List<TaskWorkDTO>> TaskWorkGetTaskWorkForAutoAssignWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> TaskWorkGetTasks (TaskWorkRequestDTO request);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> TaskWorkGetTasksWithHttpInfo (TaskWorkRequestDTO request);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns></returns>
        void TaskWorkReassignTaskById (int? taskworkid, TaskWorkReassignRequest reassignRequest);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkReassignTaskByIdWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkReassignUsersTaskById (int? taskworkid);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkReassignUsersTaskByIdWithHttpInfo (int? taskworkid);
        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns></returns>
        void TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);
        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkSetProfileForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkSetProfileForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkSetProfileForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkSetProfileForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkSetProfileForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkSetProfileForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>int?</returns>
        int? TaskWorkSetTaskPriority (List<int?> taskIds, int? priority);

        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkSetTaskPriorityWithHttpInfo (List<int?> taskIds, int? priority);
        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>int?</returns>
        int? TaskWorkSetTaskRead (List<int?> taskid);

        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkSetTaskReadWithHttpInfo (List<int?> taskid);
        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>int?</returns>
        int? TaskWorkSetTaskUnRead (List<int?> taskIds);

        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkSetTaskUnReadWithHttpInfo (List<int?> taskIds);
        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkTaskWorkTakeCharge (int? taskWorkId);

        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkTaskWorkTakeChargeWithHttpInfo (int? taskWorkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkActivateTaskworkAsync (int? taskWorkId);

        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkActivateTaskworkAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkAutoAssignAsync (int? taskworkId);

        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAutoAssignAsyncWithHttpInfo (int? taskworkId);
        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsAsync (List<int?> taskworkids);

        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkCanFinalizeTaskByIdsAsyncWithHttpInfo (List<int?> taskworkids);
        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkDeleteTaskWorkByIdAsync (int? taskWorkId);

        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkDeleteTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetActiveTaskWorkAsync (SelectDTO select, int? docnumber);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetActiveTaskWorkAsyncWithHttpInfo (SelectDTO select, int? docnumber);
        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> TaskWorkGetDefaultSelectAsync ();

        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> TaskWorkGetDefaultSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the task documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetDocumentsByProcessIdAsync (int? processId, SelectDTO select);

        /// <summary>
        /// This call returns the task documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetDocumentsByProcessIdAsyncWithHttpInfo (int? processId, SelectDTO select);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of List&lt;KeyValueElementDto&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueElementDto>> TaskWorkGetDocumentsFilenameByProcessIdAsync (int? processId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueElementDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueElementDto>>> TaskWorkGetDocumentsFilenameByProcessIdAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of List&lt;TaskExitCodeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskExitCodeDTO>> TaskWorkGetExitCodesByTaskWorkIdsAsync (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExitCodeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskExitCodeDTO>>> TaskWorkGetExitCodesByTaskWorkIdsAsyncWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ModelProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<ModelProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (ModelProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkGetTaskWorkByIdAsync (int? taskWorkId);

        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkGetTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;TaskWorkDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkDTO>> TaskWorkGetTaskWorkForAutoAssignAsync (int? docnumber);

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDTO>>> TaskWorkGetTaskWorkForAutoAssignAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetTasksAsync (TaskWorkRequestDTO request);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetTasksAsyncWithHttpInfo (TaskWorkRequestDTO request);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkReassignTaskByIdAsync (int? taskworkid, TaskWorkReassignRequest reassignRequest);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkReassignTaskByIdAsyncWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkReassignUsersTaskByIdAsync (int? taskworkid);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkReassignUsersTaskByIdAsyncWithHttpInfo (int? taskworkid);
        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);
        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkSetTaskPriorityAsync (List<int?> taskIds, int? priority);

        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskPriorityAsyncWithHttpInfo (List<int?> taskIds, int? priority);
        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkSetTaskReadAsync (List<int?> taskid);

        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskReadAsyncWithHttpInfo (List<int?> taskid);
        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkSetTaskUnReadAsync (List<int?> taskIds);

        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskUnReadAsyncWithHttpInfo (List<int?> taskIds);
        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkTaskWorkTakeChargeAsync (int? taskWorkId);

        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkTaskWorkTakeChargeAsyncWithHttpInfo (int? taskWorkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskWorkApi : ITaskWorkApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        public TaskWorkDTO TaskWorkActivateTaskwork (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = TaskWorkActivateTaskworkWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        public ApiResponse< TaskWorkDTO > TaskWorkActivateTaskworkWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkActivateTaskwork");

            var localVarPath = "/api/TaskWork/{taskWorkId}/Activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkActivateTaskwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkActivateTaskworkAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = await TaskWorkActivateTaskworkAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkActivateTaskworkAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkActivateTaskwork");

            var localVarPath = "/api/TaskWork/{taskWorkId}/Activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkActivateTaskwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkAutoAssign (int? taskworkId)
        {
             TaskWorkAutoAssignWithHttpInfo(taskworkId);
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkAutoAssignWithHttpInfo (int? taskworkId)
        {
            // verify the required parameter 'taskworkId' is set
            if (taskworkId == null)
                throw new ApiException(400, "Missing required parameter 'taskworkId' when calling TaskWorkApi->TaskWorkAutoAssign");

            var localVarPath = "/api/TaskWork/autoassign/{taskworkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkId != null) localVarPathParams.Add("taskworkId", Configuration.ApiClient.ParameterToString(taskworkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkAutoAssignAsync (int? taskworkId)
        {
             await TaskWorkAutoAssignAsyncWithHttpInfo(taskworkId);

        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAutoAssignAsyncWithHttpInfo (int? taskworkId)
        {
            // verify the required parameter 'taskworkId' is set
            if (taskworkId == null)
                throw new ApiException(400, "Missing required parameter 'taskworkId' when calling TaskWorkApi->TaskWorkAutoAssign");

            var localVarPath = "/api/TaskWork/autoassign/{taskworkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkId != null) localVarPathParams.Add("taskworkId", Configuration.ApiClient.ParameterToString(taskworkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        public List<CloseEligibleResult> TaskWorkCanFinalizeTaskByIds (List<int?> taskworkids)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = TaskWorkCanFinalizeTaskByIdsWithHttpInfo(taskworkids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        public ApiResponse< List<CloseEligibleResult> > TaskWorkCanFinalizeTaskByIdsWithHttpInfo (List<int?> taskworkids)
        {
            // verify the required parameter 'taskworkids' is set
            if (taskworkids == null)
                throw new ApiException(400, "Missing required parameter 'taskworkids' when calling TaskWorkApi->TaskWorkCanFinalizeTaskByIds");

            var localVarPath = "/api/TaskWork/canfinalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkids != null && taskworkids.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskworkids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskworkids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkCanFinalizeTaskByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsAsync (List<int?> taskworkids)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = await TaskWorkCanFinalizeTaskByIdsAsyncWithHttpInfo(taskworkids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkCanFinalizeTaskByIdsAsyncWithHttpInfo (List<int?> taskworkids)
        {
            // verify the required parameter 'taskworkids' is set
            if (taskworkids == null)
                throw new ApiException(400, "Missing required parameter 'taskworkids' when calling TaskWorkApi->TaskWorkCanFinalizeTaskByIds");

            var localVarPath = "/api/TaskWork/canfinalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkids != null && taskworkids.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskworkids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskworkids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkCanFinalizeTaskByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        public List<CloseEligibleResult> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        public ApiResponse< List<CloseEligibleResult> > TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkApi->TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/TaskWork/canfinalizebyexitcodeandpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = await TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo(closeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkApi->TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/TaskWork/canfinalizebyexitcodeandpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkDeleteTaskWorkById (int? taskWorkId)
        {
             TaskWorkDeleteTaskWorkByIdWithHttpInfo(taskWorkId);
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkDeleteTaskWorkByIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkDeleteTaskWorkById");

            var localVarPath = "/api/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkDeleteTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkDeleteTaskWorkByIdAsync (int? taskWorkId)
        {
             await TaskWorkDeleteTaskWorkByIdAsyncWithHttpInfo(taskWorkId);

        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkDeleteTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkDeleteTaskWorkById");

            var localVarPath = "/api/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkDeleteTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns></returns>
        public void TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest)
        {
             TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkApi->TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/TaskWork/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest)
        {
             await TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo(closeRequest);

        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkApi->TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/TaskWork/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> TaskWorkGetActiveTaskWork (SelectDTO select, int? docnumber)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = TaskWorkGetActiveTaskWorkWithHttpInfo(select, docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > TaskWorkGetActiveTaskWorkWithHttpInfo (SelectDTO select, int? docnumber)
        {
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkApi->TaskWorkGetActiveTaskWork");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkApi->TaskWorkGetActiveTaskWork");

            var localVarPath = "/api/TaskWork/actives/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetActiveTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetActiveTaskWorkAsync (SelectDTO select, int? docnumber)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await TaskWorkGetActiveTaskWorkAsyncWithHttpInfo(select, docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetActiveTaskWorkAsyncWithHttpInfo (SelectDTO select, int? docnumber)
        {
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkApi->TaskWorkGetActiveTaskWork");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkApi->TaskWorkGetActiveTaskWork");

            var localVarPath = "/api/TaskWork/actives/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetActiveTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        public SelectDTO TaskWorkGetDefaultSelect ()
        {
             ApiResponse<SelectDTO> localVarResponse = TaskWorkGetDefaultSelectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > TaskWorkGetDefaultSelectWithHttpInfo ()
        {

            var localVarPath = "/api/TaskWork/defaultselect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDefaultSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> TaskWorkGetDefaultSelectAsync ()
        {
             ApiResponse<SelectDTO> localVarResponse = await TaskWorkGetDefaultSelectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> TaskWorkGetDefaultSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TaskWork/defaultselect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDefaultSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns the task documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> TaskWorkGetDocumentsByProcessId (int? processId, SelectDTO select)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = TaskWorkGetDocumentsByProcessIdWithHttpInfo(processId, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > TaskWorkGetDocumentsByProcessIdWithHttpInfo (int? processId, SelectDTO select)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkApi->TaskWorkGetDocumentsByProcessId");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkApi->TaskWorkGetDocumentsByProcessId");

            var localVarPath = "/api/TaskWork/documents/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDocumentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call returns the task documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetDocumentsByProcessIdAsync (int? processId, SelectDTO select)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await TaskWorkGetDocumentsByProcessIdAsyncWithHttpInfo(processId, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetDocumentsByProcessIdAsyncWithHttpInfo (int? processId, SelectDTO select)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkApi->TaskWorkGetDocumentsByProcessId");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkApi->TaskWorkGetDocumentsByProcessId");

            var localVarPath = "/api/TaskWork/documents/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDocumentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>List&lt;KeyValueElementDto&gt;</returns>
        public List<KeyValueElementDto> TaskWorkGetDocumentsFilenameByProcessId (int? processId)
        {
             ApiResponse<List<KeyValueElementDto>> localVarResponse = TaskWorkGetDocumentsFilenameByProcessIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>ApiResponse of List&lt;KeyValueElementDto&gt;</returns>
        public ApiResponse< List<KeyValueElementDto> > TaskWorkGetDocumentsFilenameByProcessIdWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkApi->TaskWorkGetDocumentsFilenameByProcessId");

            var localVarPath = "/api/TaskWork/documents/filenames/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDocumentsFilenameByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueElementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueElementDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueElementDto>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of List&lt;KeyValueElementDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueElementDto>> TaskWorkGetDocumentsFilenameByProcessIdAsync (int? processId)
        {
             ApiResponse<List<KeyValueElementDto>> localVarResponse = await TaskWorkGetDocumentsFilenameByProcessIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueElementDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueElementDto>>> TaskWorkGetDocumentsFilenameByProcessIdAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkApi->TaskWorkGetDocumentsFilenameByProcessId");

            var localVarPath = "/api/TaskWork/documents/filenames/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetDocumentsFilenameByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueElementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueElementDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueElementDto>)));
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>List&lt;TaskExitCodeDTO&gt;</returns>
        public List<TaskExitCodeDTO> TaskWorkGetExitCodesByTaskWorkIds (List<int?> taskWorkIds)
        {
             ApiResponse<List<TaskExitCodeDTO>> localVarResponse = TaskWorkGetExitCodesByTaskWorkIdsWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;TaskExitCodeDTO&gt;</returns>
        public ApiResponse< List<TaskExitCodeDTO> > TaskWorkGetExitCodesByTaskWorkIdsWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkApi->TaskWorkGetExitCodesByTaskWorkIds");

            var localVarPath = "/api/TaskWork/exitcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetExitCodesByTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskExitCodeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskExitCodeDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskExitCodeDTO>)));
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of List&lt;TaskExitCodeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskExitCodeDTO>> TaskWorkGetExitCodesByTaskWorkIdsAsync (List<int?> taskWorkIds)
        {
             ApiResponse<List<TaskExitCodeDTO>> localVarResponse = await TaskWorkGetExitCodesByTaskWorkIdsAsyncWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExitCodeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskExitCodeDTO>>> TaskWorkGetExitCodesByTaskWorkIdsAsyncWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkApi->TaskWorkGetExitCodesByTaskWorkIds");

            var localVarPath = "/api/TaskWork/exitcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetExitCodesByTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskExitCodeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskExitCodeDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskExitCodeDTO>)));
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/maskprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/maskprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ModelProfileSchemaDTO</returns>
        public ModelProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<ModelProfileSchemaDTO> localVarResponse = TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of ModelProfileSchemaDTO</returns>
        public ApiResponse< ModelProfileSchemaDTO > TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/modelprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ModelProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<ModelProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<ModelProfileSchemaDTO> localVarResponse = await TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (ModelProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/modelprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/standardprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/standardprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        public TaskWorkDTO TaskWorkGetTaskWorkById (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = TaskWorkGetTaskWorkByIdWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        public ApiResponse< TaskWorkDTO > TaskWorkGetTaskWorkByIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetTaskWorkById");

            var localVarPath = "/api/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkGetTaskWorkByIdAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = await TaskWorkGetTaskWorkByIdAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkGetTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkGetTaskWorkById");

            var localVarPath = "/api/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;TaskWorkDTO&gt;</returns>
        public List<TaskWorkDTO> TaskWorkGetTaskWorkForAutoAssign (int? docnumber)
        {
             ApiResponse<List<TaskWorkDTO>> localVarResponse = TaskWorkGetTaskWorkForAutoAssignWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDTO&gt;</returns>
        public ApiResponse< List<TaskWorkDTO> > TaskWorkGetTaskWorkForAutoAssignWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkApi->TaskWorkGetTaskWorkForAutoAssign");

            var localVarPath = "/api/TaskWork/autoassignlist/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTaskWorkForAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDTO>)));
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;TaskWorkDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkDTO>> TaskWorkGetTaskWorkForAutoAssignAsync (int? docnumber)
        {
             ApiResponse<List<TaskWorkDTO>> localVarResponse = await TaskWorkGetTaskWorkForAutoAssignAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDTO>>> TaskWorkGetTaskWorkForAutoAssignAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkApi->TaskWorkGetTaskWorkForAutoAssign");

            var localVarPath = "/api/TaskWork/autoassignlist/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTaskWorkForAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDTO>)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> TaskWorkGetTasks (TaskWorkRequestDTO request)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = TaskWorkGetTasksWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > TaskWorkGetTasksWithHttpInfo (TaskWorkRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkApi->TaskWorkGetTasks");

            var localVarPath = "/api/TaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkGetTasksAsync (TaskWorkRequestDTO request)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await TaskWorkGetTasksAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkGetTasksAsyncWithHttpInfo (TaskWorkRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkApi->TaskWorkGetTasks");

            var localVarPath = "/api/TaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkGetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns></returns>
        public void TaskWorkReassignTaskById (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
             TaskWorkReassignTaskByIdWithHttpInfo(taskworkid, reassignRequest);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkReassignTaskByIdWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkApi->TaskWorkReassignTaskById");
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
                throw new ApiException(400, "Missing required parameter 'reassignRequest' when calling TaskWorkApi->TaskWorkReassignTaskById");

            var localVarPath = "/api/TaskWork/reassign/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter
            if (reassignRequest != null && reassignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reassignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reassignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkReassignTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkReassignTaskByIdAsync (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
             await TaskWorkReassignTaskByIdAsyncWithHttpInfo(taskworkid, reassignRequest);

        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkReassignTaskByIdAsyncWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkApi->TaskWorkReassignTaskById");
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
                throw new ApiException(400, "Missing required parameter 'reassignRequest' when calling TaskWorkApi->TaskWorkReassignTaskById");

            var localVarPath = "/api/TaskWork/reassign/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter
            if (reassignRequest != null && reassignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reassignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reassignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkReassignTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkReassignUsersTaskById (int? taskworkid)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkReassignUsersTaskByIdWithHttpInfo(taskworkid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkReassignUsersTaskByIdWithHttpInfo (int? taskworkid)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkApi->TaskWorkReassignUsersTaskById");

            var localVarPath = "/api/TaskWork/reassignusers/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkReassignUsersTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkReassignUsersTaskByIdAsync (int? taskworkid)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkReassignUsersTaskByIdAsyncWithHttpInfo(taskworkid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkReassignUsersTaskByIdAsyncWithHttpInfo (int? taskworkid)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkApi->TaskWorkReassignUsersTaskById");

            var localVarPath = "/api/TaskWork/reassignusers/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkReassignUsersTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns></returns>
        public void TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
             TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, docnumbers);
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/byselection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
             await TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, docnumbers);

        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/byselection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkBySelectionDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkSetProfileForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkSetProfileForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkSetProfileForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkSetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkSetProfileForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkSetProfileForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkSetProfileForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkSetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkSetProfileForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkSetProfileForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkSetProfileForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bystandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkSetProfileForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkSetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkSetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkApi->TaskWorkSetProfileForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bystandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetProfileForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>int?</returns>
        public int? TaskWorkSetTaskPriority (List<int?> taskIds, int? priority)
        {
             ApiResponse<int?> localVarResponse = TaskWorkSetTaskPriorityWithHttpInfo(taskIds, priority);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkSetTaskPriorityWithHttpInfo (List<int?> taskIds, int? priority)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkApi->TaskWorkSetTaskPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskWorkApi->TaskWorkSetTaskPriority");

            var localVarPath = "/api/TaskWork/priority/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priority != null) localVarPathParams.Add("priority", Configuration.ApiClient.ParameterToString(priority)); // path parameter
            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkSetTaskPriorityAsync (List<int?> taskIds, int? priority)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkSetTaskPriorityAsyncWithHttpInfo(taskIds, priority);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskPriorityAsyncWithHttpInfo (List<int?> taskIds, int? priority)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkApi->TaskWorkSetTaskPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskWorkApi->TaskWorkSetTaskPriority");

            var localVarPath = "/api/TaskWork/priority/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priority != null) localVarPathParams.Add("priority", Configuration.ApiClient.ParameterToString(priority)); // path parameter
            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>int?</returns>
        public int? TaskWorkSetTaskRead (List<int?> taskid)
        {
             ApiResponse<int?> localVarResponse = TaskWorkSetTaskReadWithHttpInfo(taskid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkSetTaskReadWithHttpInfo (List<int?> taskid)
        {
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling TaskWorkApi->TaskWorkSetTaskRead");

            var localVarPath = "/api/TaskWork/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskid != null && taskid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskid; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkSetTaskReadAsync (List<int?> taskid)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkSetTaskReadAsyncWithHttpInfo(taskid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskReadAsyncWithHttpInfo (List<int?> taskid)
        {
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling TaskWorkApi->TaskWorkSetTaskRead");

            var localVarPath = "/api/TaskWork/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskid != null && taskid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskid; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>int?</returns>
        public int? TaskWorkSetTaskUnRead (List<int?> taskIds)
        {
             ApiResponse<int?> localVarResponse = TaskWorkSetTaskUnReadWithHttpInfo(taskIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkSetTaskUnReadWithHttpInfo (List<int?> taskIds)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkApi->TaskWorkSetTaskUnRead");

            var localVarPath = "/api/TaskWork/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskUnRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkSetTaskUnReadAsync (List<int?> taskIds)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkSetTaskUnReadAsyncWithHttpInfo(taskIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkSetTaskUnReadAsyncWithHttpInfo (List<int?> taskIds)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkApi->TaskWorkSetTaskUnRead");

            var localVarPath = "/api/TaskWork/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkSetTaskUnRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkTaskWorkTakeCharge (int? taskWorkId)
        {
             TaskWorkTaskWorkTakeChargeWithHttpInfo(taskWorkId);
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkTaskWorkTakeChargeWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkTaskWorkTakeCharge");

            var localVarPath = "/api/TaskWork/{taskWorkId}/TakeCharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkTaskWorkTakeCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkTaskWorkTakeChargeAsync (int? taskWorkId)
        {
             await TaskWorkTaskWorkTakeChargeAsyncWithHttpInfo(taskWorkId);

        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkTaskWorkTakeChargeAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkApi->TaskWorkTaskWorkTakeCharge");

            var localVarPath = "/api/TaskWork/{taskWorkId}/TakeCharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkTaskWorkTakeCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
