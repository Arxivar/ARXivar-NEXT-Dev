/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILayoutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns></returns>
        void LayoutDelete (int? layoutId);

        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LayoutDeleteWithHttpInfo (int? layoutId);
        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>LayoutDTO</returns>
        LayoutDTO LayoutGetById (int? id);

        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        ApiResponse<LayoutDTO> LayoutGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>LayoutDTO</returns>
        LayoutDTO LayoutGetByTask (int? taskWorkId, int? usingtype);

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        ApiResponse<LayoutDTO> LayoutGetByTaskWithHttpInfo (int? taskWorkId, int? usingtype);
        /// <summary>
        /// This call returns all layout of the specified type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>List&lt;LayoutDTO&gt;</returns>
        List<LayoutDTO> LayoutGetByType (int? type);

        /// <summary>
        /// This call returns all layout of the specified type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>ApiResponse of List&lt;LayoutDTO&gt;</returns>
        ApiResponse<List<LayoutDTO>> LayoutGetByTypeWithHttpInfo (int? type);
        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>LayoutDTO</returns>
        LayoutDTO LayoutGetByUser (int? userId, int? usingtype, int? layouttype);

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        ApiResponse<LayoutDTO> LayoutGetByUserWithHttpInfo (int? userId, int? usingtype, int? layouttype);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>LayoutDTO</returns>
        LayoutDTO LayoutPost (LayoutDTO layout);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        ApiResponse<LayoutDTO> LayoutPostWithHttpInfo (LayoutDTO layout);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns></returns>
        void LayoutPut (int? id, LayoutDTO layout);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LayoutPutWithHttpInfo (int? id, LayoutDTO layout);
        /// <summary>
        /// This call changes the layout order for a given layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns></returns>
        void LayoutPutChangeOrder (int? layoutId, int? order);

        /// <summary>
        /// This call changes the layout order for a given layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LayoutPutChangeOrderWithHttpInfo (int? layoutId, int? order);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LayoutDeleteAsync (int? layoutId);

        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LayoutDeleteAsyncWithHttpInfo (int? layoutId);
        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>Task of LayoutDTO</returns>
        System.Threading.Tasks.Task<LayoutDTO> LayoutGetByIdAsync (int? id);

        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>Task of LayoutDTO</returns>
        System.Threading.Tasks.Task<LayoutDTO> LayoutGetByTaskAsync (int? taskWorkId, int? usingtype);

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByTaskAsyncWithHttpInfo (int? taskWorkId, int? usingtype);
        /// <summary>
        /// This call returns all layout of the specified type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of List&lt;LayoutDTO&gt;</returns>
        System.Threading.Tasks.Task<List<LayoutDTO>> LayoutGetByTypeAsync (int? type);

        /// <summary>
        /// This call returns all layout of the specified type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of ApiResponse (List&lt;LayoutDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LayoutDTO>>> LayoutGetByTypeAsyncWithHttpInfo (int? type);
        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of LayoutDTO</returns>
        System.Threading.Tasks.Task<LayoutDTO> LayoutGetByUserAsync (int? userId, int? usingtype, int? layouttype);

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByUserAsyncWithHttpInfo (int? userId, int? usingtype, int? layouttype);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>Task of LayoutDTO</returns>
        System.Threading.Tasks.Task<LayoutDTO> LayoutPostAsync (LayoutDTO layout);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutPostAsyncWithHttpInfo (LayoutDTO layout);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LayoutPutAsync (int? id, LayoutDTO layout);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LayoutPutAsyncWithHttpInfo (int? id, LayoutDTO layout);
        /// <summary>
        /// This call changes the layout order for a given layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LayoutPutChangeOrderAsync (int? layoutId, int? order);

        /// <summary>
        /// This call changes the layout order for a given layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LayoutPutChangeOrderAsyncWithHttpInfo (int? layoutId, int? order);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LayoutApi : ILayoutApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LayoutApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LayoutApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns></returns>
        public void LayoutDelete (int? layoutId)
        {
             LayoutDeleteWithHttpInfo(layoutId);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LayoutDeleteWithHttpInfo (int? layoutId)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutApi->LayoutDelete");

            var localVarPath = "/api/Layout/{layoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", Configuration.ApiClient.ParameterToString(layoutId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LayoutDeleteAsync (int? layoutId)
        {
             await LayoutDeleteAsyncWithHttpInfo(layoutId);

        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LayoutDeleteAsyncWithHttpInfo (int? layoutId)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutApi->LayoutDelete");

            var localVarPath = "/api/Layout/{layoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", Configuration.ApiClient.ParameterToString(layoutId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>LayoutDTO</returns>
        public LayoutDTO LayoutGetById (int? id)
        {
             ApiResponse<LayoutDTO> localVarResponse = LayoutGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        public ApiResponse< LayoutDTO > LayoutGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LayoutApi->LayoutGetById");

            var localVarPath = "/api/Layout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>Task of LayoutDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDTO> LayoutGetByIdAsync (int? id)
        {
             ApiResponse<LayoutDTO> localVarResponse = await LayoutGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the wanted layout</param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LayoutApi->LayoutGetById");

            var localVarPath = "/api/Layout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>LayoutDTO</returns>
        public LayoutDTO LayoutGetByTask (int? taskWorkId, int? usingtype)
        {
             ApiResponse<LayoutDTO> localVarResponse = LayoutGetByTaskWithHttpInfo(taskWorkId, usingtype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        public ApiResponse< LayoutDTO > LayoutGetByTaskWithHttpInfo (int? taskWorkId, int? usingtype)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling LayoutApi->LayoutGetByTask");
            // verify the required parameter 'usingtype' is set
            if (usingtype == null)
                throw new ApiException(400, "Missing required parameter 'usingtype' when calling LayoutApi->LayoutGetByTask");

            var localVarPath = "/api/Layout/Task/{taskWorkId}/{usingtype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (usingtype != null) localVarPathParams.Add("usingtype", Configuration.ApiClient.ParameterToString(usingtype)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>Task of LayoutDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDTO> LayoutGetByTaskAsync (int? taskWorkId, int? usingtype)
        {
             ApiResponse<LayoutDTO> localVarResponse = await LayoutGetByTaskAsyncWithHttpInfo(taskWorkId, usingtype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">TaskWorkId</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByTaskAsyncWithHttpInfo (int? taskWorkId, int? usingtype)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling LayoutApi->LayoutGetByTask");
            // verify the required parameter 'usingtype' is set
            if (usingtype == null)
                throw new ApiException(400, "Missing required parameter 'usingtype' when calling LayoutApi->LayoutGetByTask");

            var localVarPath = "/api/Layout/Task/{taskWorkId}/{usingtype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (usingtype != null) localVarPathParams.Add("usingtype", Configuration.ApiClient.ParameterToString(usingtype)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call returns all layout of the specified type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>List&lt;LayoutDTO&gt;</returns>
        public List<LayoutDTO> LayoutGetByType (int? type)
        {
             ApiResponse<List<LayoutDTO>> localVarResponse = LayoutGetByTypeWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all layout of the specified type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>ApiResponse of List&lt;LayoutDTO&gt;</returns>
        public ApiResponse< List<LayoutDTO> > LayoutGetByTypeWithHttpInfo (int? type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling LayoutApi->LayoutGetByType");

            var localVarPath = "/api/Layout/Type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LayoutDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutDTO>)));
        }

        /// <summary>
        /// This call returns all layout of the specified type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of List&lt;LayoutDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<LayoutDTO>> LayoutGetByTypeAsync (int? type)
        {
             ApiResponse<List<LayoutDTO>> localVarResponse = await LayoutGetByTypeAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all layout of the specified type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of ApiResponse (List&lt;LayoutDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LayoutDTO>>> LayoutGetByTypeAsyncWithHttpInfo (int? type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling LayoutApi->LayoutGetByType");

            var localVarPath = "/api/Layout/Type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LayoutDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutDTO>)));
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>LayoutDTO</returns>
        public LayoutDTO LayoutGetByUser (int? userId, int? usingtype, int? layouttype)
        {
             ApiResponse<LayoutDTO> localVarResponse = LayoutGetByUserWithHttpInfo(userId, usingtype, layouttype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        public ApiResponse< LayoutDTO > LayoutGetByUserWithHttpInfo (int? userId, int? usingtype, int? layouttype)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LayoutApi->LayoutGetByUser");
            // verify the required parameter 'usingtype' is set
            if (usingtype == null)
                throw new ApiException(400, "Missing required parameter 'usingtype' when calling LayoutApi->LayoutGetByUser");
            // verify the required parameter 'layouttype' is set
            if (layouttype == null)
                throw new ApiException(400, "Missing required parameter 'layouttype' when calling LayoutApi->LayoutGetByUser");

            var localVarPath = "/api/Layout/User/{userId}/{usingtype}/{layouttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (usingtype != null) localVarPathParams.Add("usingtype", Configuration.ApiClient.ParameterToString(usingtype)); // path parameter
            if (layouttype != null) localVarPathParams.Add("layouttype", Configuration.ApiClient.ParameterToString(layouttype)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of LayoutDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDTO> LayoutGetByUserAsync (int? userId, int? usingtype, int? layouttype)
        {
             ApiResponse<LayoutDTO> localVarResponse = await LayoutGetByUserAsyncWithHttpInfo(userId, usingtype, layouttype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the layout for the given user, the given type and the given utilization 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id</param>
        /// <param name="usingtype">Possible values:  2: Computer  4: Tablet  8: Smartphone </param>
        /// <param name="layouttype">Possible values:  1: DesktopMenu  2: CommandsPanel </param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutGetByUserAsyncWithHttpInfo (int? userId, int? usingtype, int? layouttype)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LayoutApi->LayoutGetByUser");
            // verify the required parameter 'usingtype' is set
            if (usingtype == null)
                throw new ApiException(400, "Missing required parameter 'usingtype' when calling LayoutApi->LayoutGetByUser");
            // verify the required parameter 'layouttype' is set
            if (layouttype == null)
                throw new ApiException(400, "Missing required parameter 'layouttype' when calling LayoutApi->LayoutGetByUser");

            var localVarPath = "/api/Layout/User/{userId}/{usingtype}/{layouttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (usingtype != null) localVarPathParams.Add("usingtype", Configuration.ApiClient.ParameterToString(usingtype)); // path parameter
            if (layouttype != null) localVarPathParams.Add("layouttype", Configuration.ApiClient.ParameterToString(layouttype)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutGetByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>LayoutDTO</returns>
        public LayoutDTO LayoutPost (LayoutDTO layout)
        {
             ApiResponse<LayoutDTO> localVarResponse = LayoutPostWithHttpInfo(layout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>ApiResponse of LayoutDTO</returns>
        public ApiResponse< LayoutDTO > LayoutPostWithHttpInfo (LayoutDTO layout)
        {
            // verify the required parameter 'layout' is set
            if (layout == null)
                throw new ApiException(400, "Missing required parameter 'layout' when calling LayoutApi->LayoutPost");

            var localVarPath = "/api/Layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layout != null && layout.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(layout); // http body (model) parameter
            }
            else
            {
                localVarPostBody = layout; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>Task of LayoutDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDTO> LayoutPostAsync (LayoutDTO layout)
        {
             ApiResponse<LayoutDTO> localVarResponse = await LayoutPostAsyncWithHttpInfo(layout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layout">Layout to be saved</param>
        /// <returns>Task of ApiResponse (LayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDTO>> LayoutPostAsyncWithHttpInfo (LayoutDTO layout)
        {
            // verify the required parameter 'layout' is set
            if (layout == null)
                throw new ApiException(400, "Missing required parameter 'layout' when calling LayoutApi->LayoutPost");

            var localVarPath = "/api/Layout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layout != null && layout.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(layout); // http body (model) parameter
            }
            else
            {
                localVarPostBody = layout; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LayoutDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDTO)));
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns></returns>
        public void LayoutPut (int? id, LayoutDTO layout)
        {
             LayoutPutWithHttpInfo(id, layout);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LayoutPutWithHttpInfo (int? id, LayoutDTO layout)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LayoutApi->LayoutPut");
            // verify the required parameter 'layout' is set
            if (layout == null)
                throw new ApiException(400, "Missing required parameter 'layout' when calling LayoutApi->LayoutPut");

            var localVarPath = "/api/Layout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (layout != null && layout.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(layout); // http body (model) parameter
            }
            else
            {
                localVarPostBody = layout; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LayoutPutAsync (int? id, LayoutDTO layout)
        {
             await LayoutPutAsyncWithHttpInfo(id, layout);

        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the wanted layout</param>
        /// <param name="layout">New version of layout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LayoutPutAsyncWithHttpInfo (int? id, LayoutDTO layout)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LayoutApi->LayoutPut");
            // verify the required parameter 'layout' is set
            if (layout == null)
                throw new ApiException(400, "Missing required parameter 'layout' when calling LayoutApi->LayoutPut");

            var localVarPath = "/api/Layout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (layout != null && layout.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(layout); // http body (model) parameter
            }
            else
            {
                localVarPostBody = layout; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call changes the layout order for a given layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns></returns>
        public void LayoutPutChangeOrder (int? layoutId, int? order)
        {
             LayoutPutChangeOrderWithHttpInfo(layoutId, order);
        }

        /// <summary>
        /// This call changes the layout order for a given layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LayoutPutChangeOrderWithHttpInfo (int? layoutId, int? order)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutApi->LayoutPutChangeOrder");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling LayoutApi->LayoutPutChangeOrder");

            var localVarPath = "/api/Layout/{layoutId}/{order}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            if (order != null) localVarPathParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPutChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call changes the layout order for a given layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LayoutPutChangeOrderAsync (int? layoutId, int? order)
        {
             await LayoutPutChangeOrderAsyncWithHttpInfo(layoutId, order);

        }

        /// <summary>
        /// This call changes the layout order for a given layout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Id of the layout</param>
        /// <param name="order">new order index for the given layout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LayoutPutChangeOrderAsyncWithHttpInfo (int? layoutId, int? order)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutApi->LayoutPutChangeOrder");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling LayoutApi->LayoutPutChangeOrder");

            var localVarPath = "/api/Layout/{layoutId}/{order}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            if (order != null) localVarPathParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayoutPutChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
