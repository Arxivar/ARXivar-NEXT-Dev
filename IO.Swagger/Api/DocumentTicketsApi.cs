/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentTicketsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        string DocumentTicketsGetDocumentByRevisionId (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DocumentTicketsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        string DocumentTicketsGetForExternalAttachment (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DocumentTicketsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForProfile (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForProfileWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForTaskAttachement (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTicketsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTicketsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        string DocumentTicketsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DocumentTicketsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DocumentTicketsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DocumentTicketsGetForExternalAttachmentAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProfileAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskAttachementAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DocumentTicketsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentTicketsApi : IDocumentTicketsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTicketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentTicketsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTicketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentTicketsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        public string DocumentTicketsGetDocumentByRevisionId (int? revisionId, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = DocumentTicketsGetDocumentByRevisionIdWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DocumentTicketsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentTicketsApi->DocumentTicketsGetDocumentByRevisionId");

            var localVarPath = "/api/DocumentTickets/ticketByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DocumentTicketsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = await DocumentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentTicketsApi->DocumentTicketsGetDocumentByRevisionId");

            var localVarPath = "/api/DocumentTickets/ticketByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        public string DocumentTicketsGetForExternalAttachment (int? id, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = DocumentTicketsGetForExternalAttachmentWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DocumentTicketsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForExternalAttachment");

            var localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DocumentTicketsGetForExternalAttachmentAsync (int? id, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = await DocumentTicketsGetForExternalAttachmentAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve a ticket for downloading a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForExternalAttachment");

            var localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForProcessAttachementWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentTicketsApi->DocumentTicketsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentTicketsApi->DocumentTicketsGetForProcessAttachement");

            var localVarPath = "/api/DocumentTickets/ticketProcessattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForProcessAttachementAsyncWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentTicketsApi->DocumentTicketsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentTicketsApi->DocumentTicketsGetForProcessAttachement");

            var localVarPath = "/api/DocumentTickets/ticketProcessattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForProcessDocumentWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentTicketsApi->DocumentTicketsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentTicketsApi->DocumentTicketsGetForProcessDocument");

            var localVarPath = "/api/DocumentTickets/ticketProcessdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForProcessDocumentAsyncWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentTicketsApi->DocumentTicketsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentTicketsApi->DocumentTicketsGetForProcessDocument");

            var localVarPath = "/api/DocumentTickets/ticketProcessdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForProfile (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForProfileWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForProfileWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForProfile");

            var localVarPath = "/api/DocumentTickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForProfileAsync (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForProfileAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForProfile");

            var localVarPath = "/api/DocumentTickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForTaskWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentTicketsApi->DocumentTicketsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentTicketsApi->DocumentTicketsGetForTask");

            var localVarPath = "/api/DocumentTickets/ticketForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForTaskAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentTicketsApi->DocumentTicketsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentTicketsApi->DocumentTicketsGetForTask");

            var localVarPath = "/api/DocumentTickets/ticketForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForTaskAttachement (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForTaskAttachementWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForTaskAttachement");

            var localVarPath = "/api/DocumentTickets/ticketTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskAttachementAsync (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForTaskAttachementAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTicketsApi->DocumentTicketsGetForTaskAttachement");

            var localVarPath = "/api/DocumentTickets/ticketTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTicketsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTicketsGetForTaskReadOnlyWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTicketsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentTicketsApi->DocumentTicketsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentTicketsApi->DocumentTicketsGetForTaskReadOnly");

            var localVarPath = "/api/DocumentTickets/ticketForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTicketsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTicketsGetForTaskReadOnlyAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTicketsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentTicketsApi->DocumentTicketsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentTicketsApi->DocumentTicketsGetForTaskReadOnly");

            var localVarPath = "/api/DocumentTickets/ticketForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>string</returns>
        public string DocumentTicketsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = DocumentTicketsGetRevisionDocumentByIdWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DocumentTicketsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentTicketsApi->DocumentTicketsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentTicketsApi->DocumentTicketsGetRevisionDocumentById");

            var localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DocumentTicketsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<string> localVarResponse = await DocumentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the ticket for downloading an attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DocumentTicketsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentTicketsApi->DocumentTicketsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentTicketsApi->DocumentTicketsGetRevisionDocumentById");

            var localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTicketsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
