/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckInOutV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call set file and remove document from checkout list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns></returns>
        void CheckInOutV2CheckIn (int? docnumber, string fileId, int? option, bool? undoCheckOut);

        /// <summary>
        /// This call set file and remove document from checkout list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2CheckInWithHttpInfo (int? docnumber, string fileId, int? option, bool? undoCheckOut);
        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns></returns>
        void CheckInOutV2CheckInForTask (int? processDocId, int? taskWorkId, string fileId);

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2CheckInForTaskWithHttpInfo (int? processDocId, int? taskWorkId, string fileId);
        /// <summary>
        /// This call allows checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns></returns>
        void CheckInOutV2CheckOut (int? docNumber);

        /// <summary>
        /// This call allows checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2CheckOutWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns></returns>
        void CheckInOutV2CheckOutForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call allows checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2CheckOutForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Object</returns>
        Object CheckInOutV2GetCheckOutProfilesList (SelectDTO selectDto);

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CheckInOutV2GetCheckOutProfilesListWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call allows to know if the document is in checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>bool?</returns>
        bool? CheckInOutV2IsAlreadyInCheckOutByUserConnected (int? docnumber);

        /// <summary>
        /// This call allows to know if the document is in checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CheckInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call allows undo checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns></returns>
        void CheckInOutV2UndoCheckOut (List<int?> docNumbers);

        /// <summary>
        /// This call allows undo checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2UndoCheckOutWithHttpInfo (List<int?> docNumbers);
        /// <summary>
        /// This call allows undo checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns></returns>
        void CheckInOutV2UndoCheckOutForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call allows undo checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckInOutV2UndoCheckOutForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call set file and remove document from checkout list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2CheckInAsync (int? docnumber, string fileId, int? option, bool? undoCheckOut);

        /// <summary>
        /// This call set file and remove document from checkout list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckInAsyncWithHttpInfo (int? docnumber, string fileId, int? option, bool? undoCheckOut);
        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2CheckInForTaskAsync (int? processDocId, int? taskWorkId, string fileId);

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckInForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, string fileId);
        /// <summary>
        /// This call allows checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2CheckOutAsync (int? docNumber);

        /// <summary>
        /// This call allows checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckOutAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2CheckOutForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call allows checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckOutForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CheckInOutV2GetCheckOutProfilesListAsync (SelectDTO selectDto);

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2GetCheckOutProfilesListAsyncWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call allows to know if the document is in checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CheckInOutV2IsAlreadyInCheckOutByUserConnectedAsync (int? docnumber);

        /// <summary>
        /// This call allows to know if the document is in checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CheckInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call allows undo checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2UndoCheckOutAsync (List<int?> docNumbers);

        /// <summary>
        /// This call allows undo checkout document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2UndoCheckOutAsyncWithHttpInfo (List<int?> docNumbers);
        /// <summary>
        /// This call allows undo checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckInOutV2UndoCheckOutForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call allows undo checkout document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2UndoCheckOutForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CheckInOutV2Api : ICheckInOutV2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckInOutV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckInOutV2Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckInOutV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CheckInOutV2Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call set file and remove document from checkout list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns></returns>
        public void CheckInOutV2CheckIn (int? docnumber, string fileId, int? option, bool? undoCheckOut)
        {
             CheckInOutV2CheckInWithHttpInfo(docnumber, fileId, option, undoCheckOut);
        }

        /// <summary>
        /// This call set file and remove document from checkout list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2CheckInWithHttpInfo (int? docnumber, string fileId, int? option, bool? undoCheckOut)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'undoCheckOut' is set
            if (undoCheckOut == null)
                throw new ApiException(400, "Missing required parameter 'undoCheckOut' when calling CheckInOutV2Api->CheckInOutV2CheckIn");

            var localVarPath = "/api/v2/CheckInOut/checkIn/{docnumber}/{fileId}/{option}/{undoCheckOut}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (option != null) localVarPathParams.Add("option", this.Configuration.ApiClient.ParameterToString(option)); // path parameter
            if (undoCheckOut != null) localVarPathParams.Add("undoCheckOut", this.Configuration.ApiClient.ParameterToString(undoCheckOut)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call set file and remove document from checkout list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2CheckInAsync (int? docnumber, string fileId, int? option, bool? undoCheckOut)
        {
             await CheckInOutV2CheckInAsyncWithHttpInfo(docnumber, fileId, option, undoCheckOut);

        }

        /// <summary>
        /// This call set file and remove document from checkout list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file you want to upload</param>
        /// <param name="option">State option</param>
        /// <param name="undoCheckOut">If import fails execute undo checkout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckInAsyncWithHttpInfo (int? docnumber, string fileId, int? option, bool? undoCheckOut)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling CheckInOutV2Api->CheckInOutV2CheckIn");
            // verify the required parameter 'undoCheckOut' is set
            if (undoCheckOut == null)
                throw new ApiException(400, "Missing required parameter 'undoCheckOut' when calling CheckInOutV2Api->CheckInOutV2CheckIn");

            var localVarPath = "/api/v2/CheckInOut/checkIn/{docnumber}/{fileId}/{option}/{undoCheckOut}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (option != null) localVarPathParams.Add("option", this.Configuration.ApiClient.ParameterToString(option)); // path parameter
            if (undoCheckOut != null) localVarPathParams.Add("undoCheckOut", this.Configuration.ApiClient.ParameterToString(undoCheckOut)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns></returns>
        public void CheckInOutV2CheckInForTask (int? processDocId, int? taskWorkId, string fileId)
        {
             CheckInOutV2CheckInForTaskWithHttpInfo(processDocId, taskWorkId, fileId);
        }

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2CheckInForTaskWithHttpInfo (int? processDocId, int? taskWorkId, string fileId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");

            var localVarPath = "/api/v2/CheckInOut/checkInForTask/{processDocId}/{taskWorkId}/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckInForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2CheckInForTaskAsync (int? processDocId, int? taskWorkId, string fileId)
        {
             await CheckInOutV2CheckInForTaskAsyncWithHttpInfo(processDocId, taskWorkId, fileId);

        }

        /// <summary>
        /// This call set file and remove document from checkout list when document is used in taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of the document you want to checkin</param>
        /// <param name="taskWorkId">Identifier of the document you want to checkin</param>
        /// <param name="fileId">Identifier of file in the cache you want to upload</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckInForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, string fileId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CheckInOutV2Api->CheckInOutV2CheckInForTask");

            var localVarPath = "/api/v2/CheckInOut/checkInForTask/{processDocId}/{taskWorkId}/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckInForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns></returns>
        public void CheckInOutV2CheckOut (int? docNumber)
        {
             CheckInOutV2CheckOutWithHttpInfo(docNumber);
        }

        /// <summary>
        /// This call allows checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2CheckOutWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling CheckInOutV2Api->CheckInOutV2CheckOut");

            var localVarPath = "/api/v2/CheckInOut/checkOut/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2CheckOutAsync (int? docNumber)
        {
             await CheckInOutV2CheckOutAsyncWithHttpInfo(docNumber);

        }

        /// <summary>
        /// This call allows checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">The identifier of document to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckOutAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling CheckInOutV2Api->CheckInOutV2CheckOut");

            var localVarPath = "/api/v2/CheckInOut/checkOut/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns></returns>
        public void CheckInOutV2CheckOutForTask (int? processDocId, int? taskWorkId)
        {
             CheckInOutV2CheckOutForTaskWithHttpInfo(processDocId, taskWorkId);
        }

        /// <summary>
        /// This call allows checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2CheckOutForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2CheckOutForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2CheckOutForTask");

            var localVarPath = "/api/v2/CheckInOut/checkOutTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckOutForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2CheckOutForTaskAsync (int? processDocId, int? taskWorkId)
        {
             await CheckInOutV2CheckOutForTaskAsyncWithHttpInfo(processDocId, taskWorkId);

        }

        /// <summary>
        /// This call allows checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2CheckOutForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2CheckOutForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2CheckOutForTask");

            var localVarPath = "/api/v2/CheckInOut/checkOutTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2CheckOutForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Object</returns>
        public Object CheckInOutV2GetCheckOutProfilesList (SelectDTO selectDto)
        {
             ApiResponse<Object> localVarResponse = CheckInOutV2GetCheckOutProfilesListWithHttpInfo(selectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CheckInOutV2GetCheckOutProfilesListWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling CheckInOutV2Api->CheckInOutV2GetCheckOutProfilesList");

            var localVarPath = "/api/v2/CheckInOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2GetCheckOutProfilesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CheckInOutV2GetCheckOutProfilesListAsync (SelectDTO selectDto)
        {
             ApiResponse<Object> localVarResponse = await CheckInOutV2GetCheckOutProfilesListAsyncWithHttpInfo(selectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected.  This call could not be compatible with some programming language, in this case use the call api/CheckInOut 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Seleted data for search</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2GetCheckOutProfilesListAsyncWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling CheckInOutV2Api->CheckInOutV2GetCheckOutProfilesList");

            var localVarPath = "/api/v2/CheckInOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2GetCheckOutProfilesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call allows to know if the document is in checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>bool?</returns>
        public bool? CheckInOutV2IsAlreadyInCheckOutByUserConnected (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = CheckInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to know if the document is in checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CheckInOutV2IsAlreadyInCheckOutByUserConnectedWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling CheckInOutV2Api->CheckInOutV2IsAlreadyInCheckOutByUserConnected");

            var localVarPath = "/api/v2/CheckInOut/isInCheckOut/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2IsAlreadyInCheckOutByUserConnected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows to know if the document is in checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CheckInOutV2IsAlreadyInCheckOutByUserConnectedAsync (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = await CheckInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to know if the document is in checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CheckInOutV2IsAlreadyInCheckOutByUserConnectedAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling CheckInOutV2Api->CheckInOutV2IsAlreadyInCheckOutByUserConnected");

            var localVarPath = "/api/v2/CheckInOut/isInCheckOut/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2IsAlreadyInCheckOutByUserConnected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows undo checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns></returns>
        public void CheckInOutV2UndoCheckOut (List<int?> docNumbers)
        {
             CheckInOutV2UndoCheckOutWithHttpInfo(docNumbers);
        }

        /// <summary>
        /// This call allows undo checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2UndoCheckOutWithHttpInfo (List<int?> docNumbers)
        {
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOut");

            var localVarPath = "/api/v2/CheckInOut/undoCheckOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2UndoCheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows undo checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2UndoCheckOutAsync (List<int?> docNumbers)
        {
             await CheckInOutV2UndoCheckOutAsyncWithHttpInfo(docNumbers);

        }

        /// <summary>
        /// This call allows undo checkout document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumbers">Array of document identifiers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2UndoCheckOutAsyncWithHttpInfo (List<int?> docNumbers)
        {
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOut");

            var localVarPath = "/api/v2/CheckInOut/undoCheckOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2UndoCheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows undo checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns></returns>
        public void CheckInOutV2UndoCheckOutForTask (int? processDocId, int? taskWorkId)
        {
             CheckInOutV2UndoCheckOutForTaskWithHttpInfo(processDocId, taskWorkId);
        }

        /// <summary>
        /// This call allows undo checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckInOutV2UndoCheckOutForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOutForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOutForTask");

            var localVarPath = "/api/v2/CheckInOut/undoCheckOutForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2UndoCheckOutForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows undo checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckInOutV2UndoCheckOutForTaskAsync (int? processDocId, int? taskWorkId)
        {
             await CheckInOutV2UndoCheckOutForTaskAsyncWithHttpInfo(processDocId, taskWorkId);

        }

        /// <summary>
        /// This call allows undo checkout document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">The process document identifier of profile to checkout</param>
        /// <param name="taskWorkId">The taskWork identifier for the profile to checkout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckInOutV2UndoCheckOutForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOutForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling CheckInOutV2Api->CheckInOutV2UndoCheckOutForTask");

            var localVarPath = "/api/v2/CheckInOut/undoCheckOutForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckInOutV2UndoCheckOutForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
