/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if a new workflow can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>bool?</returns>
        bool? WorkflowCanStartByDocnumber (int? docnumber);

        /// <summary>
        /// Check if a new workflow can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> WorkflowCanStartByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call deletes instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns></returns>
        void WorkflowDeleteWorkflow (int? processId, bool? keepHistory);

        /// <summary>
        /// This call deletes instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowDeleteWorkflowWithHttpInfo (int? processId, bool? keepHistory);
        /// <summary>
        /// This call removes the user checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns></returns>
        void WorkflowFreeUserConstraint (int? processId);

        /// <summary>
        /// This call removes the user checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowFreeUserConstraintWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>List&lt;WorkFlowEventDTO&gt;</returns>
        List<WorkFlowEventDTO> WorkflowGetEventsForManualStarts (List<int?> docnumbers);

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>ApiResponse of List&lt;WorkFlowEventDTO&gt;</returns>
        ApiResponse<List<WorkFlowEventDTO>> WorkflowGetEventsForManualStartsWithHttpInfo (List<int?> docnumbers);
        /// <summary>
        /// This call retruns all external identifier of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WorkflowGetTasksExternalIds ();

        /// <summary>
        /// This call retruns all external identifier of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WorkflowGetTasksExternalIdsWithHttpInfo ();
        /// <summary>
        /// This call returns all workflow asosciated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>List&lt;WorkflowInfoDTO&gt;</returns>
        List<WorkflowInfoDTO> WorkflowGetWorkflowInfoByDocnumber (int? docnumber);

        /// <summary>
        /// This call returns all workflow asosciated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>ApiResponse of List&lt;WorkflowInfoDTO&gt;</returns>
        ApiResponse<List<WorkflowInfoDTO>> WorkflowGetWorkflowInfoByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the workflow information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>WorkflowInfoDTO</returns>
        WorkflowInfoDTO WorkflowGetWorkflowInfoByProcessId (int? processId);

        /// <summary>
        /// This call returns the workflow information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of WorkflowInfoDTO</returns>
        ApiResponse<WorkflowInfoDTO> WorkflowGetWorkflowInfoByProcessIdWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkflowDTO&gt;</returns>
        List<WorkflowDTO> WorkflowGetWorkflows ();

        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkflowDTO&gt;</returns>
        ApiResponse<List<WorkflowDTO>> WorkflowGetWorkflowsWithHttpInfo ();
        /// <summary>
        /// This call removes a document from a workflow process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns></returns>
        void WorkflowRemoveProfileFromTask (int? processDocId);

        /// <summary>
        /// This call removes a document from a workflow process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowRemoveProfileFromTaskWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call stops instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns></returns>
        void WorkflowStopWorkflow (int? processId);

        /// <summary>
        /// This call stops instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowStopWorkflowWithHttpInfo (int? processId);
        /// <summary>
        /// This call starts a new instance of workflow on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns></returns>
        void WorkflowWorkflowManualStart (int? docnumber, int? workFlowEventId);

        /// <summary>
        /// This call starts a new instance of workflow on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowWorkflowManualStartWithHttpInfo (int? docnumber, int? workFlowEventId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check if a new workflow can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> WorkflowCanStartByDocnumberAsync (int? docnumber);

        /// <summary>
        /// Check if a new workflow can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> WorkflowCanStartByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call deletes instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowDeleteWorkflowAsync (int? processId, bool? keepHistory);

        /// <summary>
        /// This call deletes instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowDeleteWorkflowAsyncWithHttpInfo (int? processId, bool? keepHistory);
        /// <summary>
        /// This call removes the user checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowFreeUserConstraintAsync (int? processId);

        /// <summary>
        /// This call removes the user checkout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowFreeUserConstraintAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>Task of List&lt;WorkFlowEventDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFlowEventDTO>> WorkflowGetEventsForManualStartsAsync (List<int?> docnumbers);

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowEventDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFlowEventDTO>>> WorkflowGetEventsForManualStartsAsyncWithHttpInfo (List<int?> docnumbers);
        /// <summary>
        /// This call retruns all external identifier of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WorkflowGetTasksExternalIdsAsync ();

        /// <summary>
        /// This call retruns all external identifier of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WorkflowGetTasksExternalIdsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all workflow asosciated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>Task of List&lt;WorkflowInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowInfoDTO>> WorkflowGetWorkflowInfoByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all workflow asosciated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowInfoDTO>>> WorkflowGetWorkflowInfoByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the workflow information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of WorkflowInfoDTO</returns>
        System.Threading.Tasks.Task<WorkflowInfoDTO> WorkflowGetWorkflowInfoByProcessIdAsync (int? processId);

        /// <summary>
        /// This call returns the workflow information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (WorkflowInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowInfoDTO>> WorkflowGetWorkflowInfoByProcessIdAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkflowDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowDTO>> WorkflowGetWorkflowsAsync ();

        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowDTO>>> WorkflowGetWorkflowsAsyncWithHttpInfo ();
        /// <summary>
        /// This call removes a document from a workflow process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowRemoveProfileFromTaskAsync (int? processDocId);

        /// <summary>
        /// This call removes a document from a workflow process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowRemoveProfileFromTaskAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call stops instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowStopWorkflowAsync (int? processId);

        /// <summary>
        /// This call stops instance of workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowStopWorkflowAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call starts a new instance of workflow on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowWorkflowManualStartAsync (int? docnumber, int? workFlowEventId);

        /// <summary>
        /// This call starts a new instance of workflow on a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowWorkflowManualStartAsyncWithHttpInfo (int? docnumber, int? workFlowEventId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check if a new workflow can start 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>bool?</returns>
        public bool? WorkflowCanStartByDocnumber (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = WorkflowCanStartByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a new workflow can start 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > WorkflowCanStartByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowCanStartByDocnumber");

            var localVarPath = "/api/Workflow/CanStartByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowCanStartByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Check if a new workflow can start 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> WorkflowCanStartByDocnumberAsync (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = await WorkflowCanStartByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a new workflow can start 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> WorkflowCanStartByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowCanStartByDocnumber");

            var localVarPath = "/api/Workflow/CanStartByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowCanStartByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns></returns>
        public void WorkflowDeleteWorkflow (int? processId, bool? keepHistory)
        {
             WorkflowDeleteWorkflowWithHttpInfo(processId, keepHistory);
        }

        /// <summary>
        /// This call deletes instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowDeleteWorkflowWithHttpInfo (int? processId, bool? keepHistory)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowDeleteWorkflow");
            // verify the required parameter 'keepHistory' is set
            if (keepHistory == null)
                throw new ApiException(400, "Missing required parameter 'keepHistory' when calling WorkflowApi->WorkflowDeleteWorkflow");

            var localVarPath = "/api/Workflow/delete/{processId}/{keepHistory}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (keepHistory != null) localVarPathParams.Add("keepHistory", Configuration.ApiClient.ParameterToString(keepHistory)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowDeleteWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowDeleteWorkflowAsync (int? processId, bool? keepHistory)
        {
             await WorkflowDeleteWorkflowAsyncWithHttpInfo(processId, keepHistory);

        }

        /// <summary>
        /// This call deletes instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="keepHistory">false if the hostiry must be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowDeleteWorkflowAsyncWithHttpInfo (int? processId, bool? keepHistory)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowDeleteWorkflow");
            // verify the required parameter 'keepHistory' is set
            if (keepHistory == null)
                throw new ApiException(400, "Missing required parameter 'keepHistory' when calling WorkflowApi->WorkflowDeleteWorkflow");

            var localVarPath = "/api/Workflow/delete/{processId}/{keepHistory}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (keepHistory != null) localVarPathParams.Add("keepHistory", Configuration.ApiClient.ParameterToString(keepHistory)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowDeleteWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes the user checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns></returns>
        public void WorkflowFreeUserConstraint (int? processId)
        {
             WorkflowFreeUserConstraintWithHttpInfo(processId);
        }

        /// <summary>
        /// This call removes the user checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowFreeUserConstraintWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowFreeUserConstraint");

            var localVarPath = "/api/Workflow/FreeUserConstraint/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowFreeUserConstraint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes the user checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowFreeUserConstraintAsync (int? processId)
        {
             await WorkflowFreeUserConstraintAsyncWithHttpInfo(processId);

        }

        /// <summary>
        /// This call removes the user checkout 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowFreeUserConstraintAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowFreeUserConstraint");

            var localVarPath = "/api/Workflow/FreeUserConstraint/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowFreeUserConstraint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>List&lt;WorkFlowEventDTO&gt;</returns>
        public List<WorkFlowEventDTO> WorkflowGetEventsForManualStarts (List<int?> docnumbers)
        {
             ApiResponse<List<WorkFlowEventDTO>> localVarResponse = WorkflowGetEventsForManualStartsWithHttpInfo(docnumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>ApiResponse of List&lt;WorkFlowEventDTO&gt;</returns>
        public ApiResponse< List<WorkFlowEventDTO> > WorkflowGetEventsForManualStartsWithHttpInfo (List<int?> docnumbers)
        {
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling WorkflowApi->WorkflowGetEventsForManualStarts");

            var localVarPath = "/api/Workflow/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetEventsForManualStarts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowEventDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkFlowEventDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowEventDTO>)));
        }

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>Task of List&lt;WorkFlowEventDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFlowEventDTO>> WorkflowGetEventsForManualStartsAsync (List<int?> docnumbers)
        {
             ApiResponse<List<WorkFlowEventDTO>> localVarResponse = await WorkflowGetEventsForManualStartsAsyncWithHttpInfo(docnumbers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all avaible events for manual start a workflow on a list of profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">List of document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowEventDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFlowEventDTO>>> WorkflowGetEventsForManualStartsAsyncWithHttpInfo (List<int?> docnumbers)
        {
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling WorkflowApi->WorkflowGetEventsForManualStarts");

            var localVarPath = "/api/Workflow/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetEventsForManualStarts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowEventDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkFlowEventDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowEventDTO>)));
        }

        /// <summary>
        /// This call retruns all external identifier of tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WorkflowGetTasksExternalIds ()
        {
             ApiResponse<List<string>> localVarResponse = WorkflowGetTasksExternalIdsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retruns all external identifier of tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > WorkflowGetTasksExternalIdsWithHttpInfo ()
        {

            var localVarPath = "/api/Workflow/externalids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetTasksExternalIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call retruns all external identifier of tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WorkflowGetTasksExternalIdsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await WorkflowGetTasksExternalIdsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retruns all external identifier of tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> WorkflowGetTasksExternalIdsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Workflow/externalids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetTasksExternalIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns all workflow asosciated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>List&lt;WorkflowInfoDTO&gt;</returns>
        public List<WorkflowInfoDTO> WorkflowGetWorkflowInfoByDocnumber (int? docnumber)
        {
             ApiResponse<List<WorkflowInfoDTO>> localVarResponse = WorkflowGetWorkflowInfoByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all workflow asosciated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>ApiResponse of List&lt;WorkflowInfoDTO&gt;</returns>
        public ApiResponse< List<WorkflowInfoDTO> > WorkflowGetWorkflowInfoByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowGetWorkflowInfoByDocnumber");

            var localVarPath = "/api/Workflow/bydocnumber/{docnumber}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflowInfoByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowInfoDTO>)));
        }

        /// <summary>
        /// This call returns all workflow asosciated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>Task of List&lt;WorkflowInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowInfoDTO>> WorkflowGetWorkflowInfoByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<WorkflowInfoDTO>> localVarResponse = await WorkflowGetWorkflowInfoByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all workflow asosciated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Idenfier</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowInfoDTO>>> WorkflowGetWorkflowInfoByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowGetWorkflowInfoByDocnumber");

            var localVarPath = "/api/Workflow/bydocnumber/{docnumber}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflowInfoByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowInfoDTO>)));
        }

        /// <summary>
        /// This call returns the workflow information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>WorkflowInfoDTO</returns>
        public WorkflowInfoDTO WorkflowGetWorkflowInfoByProcessId (int? processId)
        {
             ApiResponse<WorkflowInfoDTO> localVarResponse = WorkflowGetWorkflowInfoByProcessIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the workflow information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of WorkflowInfoDTO</returns>
        public ApiResponse< WorkflowInfoDTO > WorkflowGetWorkflowInfoByProcessIdWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowGetWorkflowInfoByProcessId");

            var localVarPath = "/api/Workflow/{processId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflowInfoByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowInfoDTO)));
        }

        /// <summary>
        /// This call returns the workflow information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of WorkflowInfoDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowInfoDTO> WorkflowGetWorkflowInfoByProcessIdAsync (int? processId)
        {
             ApiResponse<WorkflowInfoDTO> localVarResponse = await WorkflowGetWorkflowInfoByProcessIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the workflow information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (WorkflowInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowInfoDTO>> WorkflowGetWorkflowInfoByProcessIdAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowGetWorkflowInfoByProcessId");

            var localVarPath = "/api/Workflow/{processId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflowInfoByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowInfoDTO)));
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkflowDTO&gt;</returns>
        public List<WorkflowDTO> WorkflowGetWorkflows ()
        {
             ApiResponse<List<WorkflowDTO>> localVarResponse = WorkflowGetWorkflowsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkflowDTO&gt;</returns>
        public ApiResponse< List<WorkflowDTO> > WorkflowGetWorkflowsWithHttpInfo ()
        {

            var localVarPath = "/api/Workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowDTO>)));
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkflowDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowDTO>> WorkflowGetWorkflowsAsync ()
        {
             ApiResponse<List<WorkflowDTO>> localVarResponse = await WorkflowGetWorkflowsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowDTO>>> WorkflowGetWorkflowsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowGetWorkflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowDTO>)));
        }

        /// <summary>
        /// This call removes a document from a workflow process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns></returns>
        public void WorkflowRemoveProfileFromTask (int? processDocId)
        {
             WorkflowRemoveProfileFromTaskWithHttpInfo(processDocId);
        }

        /// <summary>
        /// This call removes a document from a workflow process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowRemoveProfileFromTaskWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling WorkflowApi->WorkflowRemoveProfileFromTask");

            var localVarPath = "/api/Workflow/processdoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowRemoveProfileFromTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes a document from a workflow process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowRemoveProfileFromTaskAsync (int? processDocId)
        {
             await WorkflowRemoveProfileFromTaskAsyncWithHttpInfo(processDocId);

        }

        /// <summary>
        /// This call removes a document from a workflow process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of process document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowRemoveProfileFromTaskAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling WorkflowApi->WorkflowRemoveProfileFromTask");

            var localVarPath = "/api/Workflow/processdoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowRemoveProfileFromTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call stops instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns></returns>
        public void WorkflowStopWorkflow (int? processId)
        {
             WorkflowStopWorkflowWithHttpInfo(processId);
        }

        /// <summary>
        /// This call stops instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowStopWorkflowWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowStopWorkflow");

            var localVarPath = "/api/Workflow/stop/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowStopWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call stops instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowStopWorkflowAsync (int? processId)
        {
             await WorkflowStopWorkflowAsyncWithHttpInfo(processId);

        }

        /// <summary>
        /// This call stops instance of workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowStopWorkflowAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling WorkflowApi->WorkflowStopWorkflow");

            var localVarPath = "/api/Workflow/stop/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowStopWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call starts a new instance of workflow on a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns></returns>
        public void WorkflowWorkflowManualStart (int? docnumber, int? workFlowEventId)
        {
             WorkflowWorkflowManualStartWithHttpInfo(docnumber, workFlowEventId);
        }

        /// <summary>
        /// This call starts a new instance of workflow on a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowWorkflowManualStartWithHttpInfo (int? docnumber, int? workFlowEventId)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowWorkflowManualStart");
            // verify the required parameter 'workFlowEventId' is set
            if (workFlowEventId == null)
                throw new ApiException(400, "Missing required parameter 'workFlowEventId' when calling WorkflowApi->WorkflowWorkflowManualStart");

            var localVarPath = "/api/Workflow/start/{docnumber}/{workFlowEventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (workFlowEventId != null) localVarPathParams.Add("workFlowEventId", Configuration.ApiClient.ParameterToString(workFlowEventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowWorkflowManualStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call starts a new instance of workflow on a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowWorkflowManualStartAsync (int? docnumber, int? workFlowEventId)
        {
             await WorkflowWorkflowManualStartAsyncWithHttpInfo(docnumber, workFlowEventId);

        }

        /// <summary>
        /// This call starts a new instance of workflow on a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier to apply workflow</param>
        /// <param name="workFlowEventId">Workflow event identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowWorkflowManualStartAsyncWithHttpInfo (int? docnumber, int? workFlowEventId)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling WorkflowApi->WorkflowWorkflowManualStart");
            // verify the required parameter 'workFlowEventId' is set
            if (workFlowEventId == null)
                throw new ApiException(400, "Missing required parameter 'workFlowEventId' when calling WorkflowApi->WorkflowWorkflowManualStart");

            var localVarPath = "/api/Workflow/start/{docnumber}/{workFlowEventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (workFlowEventId != null) localVarPathParams.Add("workFlowEventId", Configuration.ApiClient.ParameterToString(workFlowEventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowWorkflowManualStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
