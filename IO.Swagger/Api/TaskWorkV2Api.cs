/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskWorkV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        TaskWorkDTO TaskWorkV2ActivateTaskwork (int? taskWorkId);

        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        ApiResponse<TaskWorkDTO> TaskWorkV2ActivateTaskworkWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkV2AutoAssign (int? taskworkId);

        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2AutoAssignWithHttpInfo (int? taskworkId);
        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        List<CloseEligibleResult> TaskWorkV2CanFinalizeTaskByIds (List<int?> taskworkids);

        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        ApiResponse<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsWithHttpInfo (List<int?> taskworkids);
        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        List<CloseEligibleResult> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        ApiResponse<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkV2DeleteTaskWorkById (int? taskWorkId);

        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2DeleteTaskWorkByIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns></returns>
        void TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Object</returns>
        Object TaskWorkV2GetActiveTaskWork (SelectDTO select, int? docnumber);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TaskWorkV2GetActiveTaskWorkWithHttpInfo (SelectDTO select, int? docnumber);
        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        SelectDTO TaskWorkV2GetDefaultSelect ();

        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> TaskWorkV2GetDefaultSelectWithHttpInfo ();
        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Object</returns>
        Object TaskWorkV2GetDocumentsByProcessId (int? processId, SelectDTO select);

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TaskWorkV2GetDocumentsByProcessIdWithHttpInfo (int? processId, SelectDTO select);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>List&lt;KeyValueElementDto&gt;</returns>
        List<KeyValueElementDto> TaskWorkV2GetDocumentsFilenameByProcessId (int? processId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>ApiResponse of List&lt;KeyValueElementDto&gt;</returns>
        ApiResponse<List<KeyValueElementDto>> TaskWorkV2GetDocumentsFilenameByProcessIdWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>List&lt;TaskExitCodeDTO&gt;</returns>
        List<TaskExitCodeDTO> TaskWorkV2GetExitCodesByTaskWorkIds (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;TaskExitCodeDTO&gt;</returns>
        ApiResponse<List<TaskExitCodeDTO>> TaskWorkV2GetExitCodesByTaskWorkIdsWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ModelProfileSchemaDTO</returns>
        ModelProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of ModelProfileSchemaDTO</returns>
        ApiResponse<ModelProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        TaskWorkDTO TaskWorkV2GetTaskWorkById (int? taskWorkId);

        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        ApiResponse<TaskWorkDTO> TaskWorkV2GetTaskWorkByIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;TaskWorkDTO&gt;</returns>
        List<TaskWorkDTO> TaskWorkV2GetTaskWorkForAutoAssign (int? docnumber);

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDTO&gt;</returns>
        ApiResponse<List<TaskWorkDTO>> TaskWorkV2GetTaskWorkForAutoAssignWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Object</returns>
        Object TaskWorkV2GetTasks (TaskWorkRequestDTO request);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TaskWorkV2GetTasksWithHttpInfo (TaskWorkRequestDTO request);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns></returns>
        void TaskWorkV2ReassignTaskById (int? taskworkid, TaskWorkReassignRequest reassignRequest);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2ReassignTaskByIdWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkV2ReassignUsersTaskById (int? taskworkid);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkV2ReassignUsersTaskByIdWithHttpInfo (int? taskworkid);
        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns></returns>
        void TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);
        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkV2SetProfileForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>int?</returns>
        int? TaskWorkV2SetTaskPriority (List<int?> taskIds, int? priority);

        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkV2SetTaskPriorityWithHttpInfo (List<int?> taskIds, int? priority);
        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>int?</returns>
        int? TaskWorkV2SetTaskRead (List<int?> taskid);

        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkV2SetTaskReadWithHttpInfo (List<int?> taskid);
        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>int?</returns>
        int? TaskWorkV2SetTaskUnRead (List<int?> taskIds);

        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> TaskWorkV2SetTaskUnReadWithHttpInfo (List<int?> taskIds);
        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkV2TaskWorkTakeCharge (int? taskWorkId);

        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkV2TaskWorkTakeChargeWithHttpInfo (int? taskWorkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkV2ActivateTaskworkAsync (int? taskWorkId);

        /// <summary>
        /// This call returns a taskwork if active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkV2ActivateTaskworkAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2AutoAssignAsync (int? taskworkId);

        /// <summary>
        /// This call autoassigns the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2AutoAssignAsyncWithHttpInfo (int? taskworkId);
        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsAsync (List<int?> taskworkids);

        /// <summary>
        /// This call returns if is possible to close task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkV2CanFinalizeTaskByIdsAsyncWithHttpInfo (List<int?> taskworkids);
        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2DeleteTaskWorkByIdAsync (int? taskWorkId);

        /// <summary>
        /// This call deletes the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2DeleteTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest);

        /// <summary>
        /// This call closes a task work list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TaskWorkV2GetActiveTaskWorkAsync (SelectDTO select, int? docnumber);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetActiveTaskWorkAsyncWithHttpInfo (SelectDTO select, int? docnumber);
        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> TaskWorkV2GetDefaultSelectAsync ();

        /// <summary>
        /// This call provides default select for tasklist search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> TaskWorkV2GetDefaultSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TaskWorkV2GetDocumentsByProcessIdAsync (int? processId, SelectDTO select);

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetDocumentsByProcessIdAsyncWithHttpInfo (int? processId, SelectDTO select);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of List&lt;KeyValueElementDto&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueElementDto>> TaskWorkV2GetDocumentsFilenameByProcessIdAsync (int? processId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueElementDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueElementDto>>> TaskWorkV2GetDocumentsFilenameByProcessIdAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of List&lt;TaskExitCodeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskExitCodeDTO>> TaskWorkV2GetExitCodesByTaskWorkIdsAsync (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all possible exit code for taskWorks list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExitCodeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskExitCodeDTO>>> TaskWorkV2GetExitCodesByTaskWorkIdsAsyncWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ModelProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<ModelProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (ModelProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId);

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId);
        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkV2GetTaskWorkByIdAsync (int? taskWorkId);

        /// <summary>
        /// This call returns the task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkV2GetTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;TaskWorkDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkDTO>> TaskWorkV2GetTaskWorkForAutoAssignAsync (int? docnumber);

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDTO>>> TaskWorkV2GetTaskWorkForAutoAssignAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TaskWorkV2GetTasksAsync (TaskWorkRequestDTO request);

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetTasksAsyncWithHttpInfo (TaskWorkRequestDTO request);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2ReassignTaskByIdAsync (int? taskworkid, TaskWorkReassignRequest reassignRequest);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2ReassignTaskByIdAsyncWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest);
        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkV2ReassignUsersTaskByIdAsync (int? taskworkid);

        /// <summary>
        /// This call reassigns a task to selected users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkV2ReassignUsersTaskByIdAsyncWithHttpInfo (int? taskworkid);
        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers);
        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null);
        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskPriorityAsync (List<int?> taskIds, int? priority);

        /// <summary>
        /// This call sets the tasks priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskPriorityAsyncWithHttpInfo (List<int?> taskIds, int? priority);
        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskReadAsync (List<int?> taskid);

        /// <summary>
        /// This call sets the task as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskReadAsyncWithHttpInfo (List<int?> taskid);
        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskUnReadAsync (List<int?> taskIds);

        /// <summary>
        /// This call sets the tasks as unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskUnReadAsyncWithHttpInfo (List<int?> taskIds);
        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkV2TaskWorkTakeChargeAsync (int? taskWorkId);

        /// <summary>
        /// This call takes charge of a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2TaskWorkTakeChargeAsyncWithHttpInfo (int? taskWorkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskWorkV2Api : ITaskWorkV2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkV2Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkV2Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        public TaskWorkDTO TaskWorkV2ActivateTaskwork (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = TaskWorkV2ActivateTaskworkWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        public ApiResponse< TaskWorkDTO > TaskWorkV2ActivateTaskworkWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2ActivateTaskwork");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/Activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ActivateTaskwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkV2ActivateTaskworkAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = await TaskWorkV2ActivateTaskworkAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a taskwork if active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkV2ActivateTaskworkAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2ActivateTaskwork");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/Activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ActivateTaskwork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkV2AutoAssign (int? taskworkId)
        {
             TaskWorkV2AutoAssignWithHttpInfo(taskworkId);
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2AutoAssignWithHttpInfo (int? taskworkId)
        {
            // verify the required parameter 'taskworkId' is set
            if (taskworkId == null)
                throw new ApiException(400, "Missing required parameter 'taskworkId' when calling TaskWorkV2Api->TaskWorkV2AutoAssign");

            var localVarPath = "/api/v2/TaskWork/autoassign/{taskworkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkId != null) localVarPathParams.Add("taskworkId", this.Configuration.ApiClient.ParameterToString(taskworkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2AutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2AutoAssignAsync (int? taskworkId)
        {
             await TaskWorkV2AutoAssignAsyncWithHttpInfo(taskworkId);

        }

        /// <summary>
        /// This call autoassigns the taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2AutoAssignAsyncWithHttpInfo (int? taskworkId)
        {
            // verify the required parameter 'taskworkId' is set
            if (taskworkId == null)
                throw new ApiException(400, "Missing required parameter 'taskworkId' when calling TaskWorkV2Api->TaskWorkV2AutoAssign");

            var localVarPath = "/api/v2/TaskWork/autoassign/{taskworkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkId != null) localVarPathParams.Add("taskworkId", this.Configuration.ApiClient.ParameterToString(taskworkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2AutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        public List<CloseEligibleResult> TaskWorkV2CanFinalizeTaskByIds (List<int?> taskworkids)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = TaskWorkV2CanFinalizeTaskByIdsWithHttpInfo(taskworkids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        public ApiResponse< List<CloseEligibleResult> > TaskWorkV2CanFinalizeTaskByIdsWithHttpInfo (List<int?> taskworkids)
        {
            // verify the required parameter 'taskworkids' is set
            if (taskworkids == null)
                throw new ApiException(400, "Missing required parameter 'taskworkids' when calling TaskWorkV2Api->TaskWorkV2CanFinalizeTaskByIds");

            var localVarPath = "/api/v2/TaskWork/canfinalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkids != null && taskworkids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskworkids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskworkids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2CanFinalizeTaskByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsAsync (List<int?> taskworkids)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = await TaskWorkV2CanFinalizeTaskByIdsAsyncWithHttpInfo(taskworkids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if is possible to close task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkids">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkV2CanFinalizeTaskByIdsAsyncWithHttpInfo (List<int?> taskworkids)
        {
            // verify the required parameter 'taskworkids' is set
            if (taskworkids == null)
                throw new ApiException(400, "Missing required parameter 'taskworkids' when calling TaskWorkV2Api->TaskWorkV2CanFinalizeTaskByIds");

            var localVarPath = "/api/v2/TaskWork/canfinalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkids != null && taskworkids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskworkids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskworkids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2CanFinalizeTaskByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>List&lt;CloseEligibleResult&gt;</returns>
        public List<CloseEligibleResult> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of List&lt;CloseEligibleResult&gt;</returns>
        public ApiResponse< List<CloseEligibleResult> > TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkV2Api->TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/v2/TaskWork/canfinalizebyexitcodeandpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of List&lt;CloseEligibleResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CloseEligibleResult>> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest)
        {
             ApiResponse<List<CloseEligibleResult>> localVarResponse = await TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo(closeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if is possible to close task work list by exit code and password 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse (List&lt;CloseEligibleResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CloseEligibleResult>>> TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkV2Api->TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/v2/TaskWork/canfinalizebyexitcodeandpassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2CanFinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CloseEligibleResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CloseEligibleResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CloseEligibleResult>)));
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkV2DeleteTaskWorkById (int? taskWorkId)
        {
             TaskWorkV2DeleteTaskWorkByIdWithHttpInfo(taskWorkId);
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2DeleteTaskWorkByIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2DeleteTaskWorkById");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2DeleteTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2DeleteTaskWorkByIdAsync (int? taskWorkId)
        {
             await TaskWorkV2DeleteTaskWorkByIdAsyncWithHttpInfo(taskWorkId);

        }

        /// <summary>
        /// This call deletes the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2DeleteTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2DeleteTaskWorkById");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2DeleteTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns></returns>
        public void TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword (TaskWorkCloseRequest closeRequest)
        {
             TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkV2Api->TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/v2/TaskWork/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordAsync (TaskWorkCloseRequest closeRequest)
        {
             await TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo(closeRequest);

        }

        /// <summary>
        /// This call closes a task work list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeRequest">Taskwork information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPasswordAsyncWithHttpInfo (TaskWorkCloseRequest closeRequest)
        {
            // verify the required parameter 'closeRequest' is set
            if (closeRequest == null)
                throw new ApiException(400, "Missing required parameter 'closeRequest' when calling TaskWorkV2Api->TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword");

            var localVarPath = "/api/v2/TaskWork/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeRequest != null && closeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2FinalizeTaskByIdsAndExitCodeAndPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Object</returns>
        public Object TaskWorkV2GetActiveTaskWork (SelectDTO select, int? docnumber)
        {
             ApiResponse<Object> localVarResponse = TaskWorkV2GetActiveTaskWorkWithHttpInfo(select, docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TaskWorkV2GetActiveTaskWorkWithHttpInfo (SelectDTO select, int? docnumber)
        {
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkV2Api->TaskWorkV2GetActiveTaskWork");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkV2Api->TaskWorkV2GetActiveTaskWork");

            var localVarPath = "/api/v2/TaskWork/actives/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetActiveTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TaskWorkV2GetActiveTaskWorkAsync (SelectDTO select, int? docnumber)
        {
             ApiResponse<Object> localVarResponse = await TaskWorkV2GetActiveTaskWorkAsyncWithHttpInfo(select, docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user on a specific document.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/actives/{docnumber} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">Selection Fields</param>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetActiveTaskWorkAsyncWithHttpInfo (SelectDTO select, int? docnumber)
        {
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkV2Api->TaskWorkV2GetActiveTaskWork");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkV2Api->TaskWorkV2GetActiveTaskWork");

            var localVarPath = "/api/v2/TaskWork/actives/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetActiveTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        public SelectDTO TaskWorkV2GetDefaultSelect ()
        {
             ApiResponse<SelectDTO> localVarResponse = TaskWorkV2GetDefaultSelectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > TaskWorkV2GetDefaultSelectWithHttpInfo ()
        {

            var localVarPath = "/api/v2/TaskWork/defaultselect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDefaultSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> TaskWorkV2GetDefaultSelectAsync ()
        {
             ApiResponse<SelectDTO> localVarResponse = await TaskWorkV2GetDefaultSelectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call provides default select for tasklist search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> TaskWorkV2GetDefaultSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/TaskWork/defaultselect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDefaultSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Object</returns>
        public Object TaskWorkV2GetDocumentsByProcessId (int? processId, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = TaskWorkV2GetDocumentsByProcessIdWithHttpInfo(processId, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TaskWorkV2GetDocumentsByProcessIdWithHttpInfo (int? processId, SelectDTO select)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsByProcessId");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsByProcessId");

            var localVarPath = "/api/v2/TaskWork/documents/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDocumentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TaskWorkV2GetDocumentsByProcessIdAsync (int? processId, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = await TaskWorkV2GetDocumentsByProcessIdAsyncWithHttpInfo(processId, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task documents.  This call could not be compatible with some programming language, in this case use the call api/TaskWork/documents/{processId} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="select">Field select configuration</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetDocumentsByProcessIdAsyncWithHttpInfo (int? processId, SelectDTO select)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsByProcessId");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsByProcessId");

            var localVarPath = "/api/v2/TaskWork/documents/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDocumentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>List&lt;KeyValueElementDto&gt;</returns>
        public List<KeyValueElementDto> TaskWorkV2GetDocumentsFilenameByProcessId (int? processId)
        {
             ApiResponse<List<KeyValueElementDto>> localVarResponse = TaskWorkV2GetDocumentsFilenameByProcessIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>ApiResponse of List&lt;KeyValueElementDto&gt;</returns>
        public ApiResponse< List<KeyValueElementDto> > TaskWorkV2GetDocumentsFilenameByProcessIdWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsFilenameByProcessId");

            var localVarPath = "/api/v2/TaskWork/documents/filenames/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDocumentsFilenameByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueElementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueElementDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueElementDto>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of List&lt;KeyValueElementDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueElementDto>> TaskWorkV2GetDocumentsFilenameByProcessIdAsync (int? processId)
        {
             ApiResponse<List<KeyValueElementDto>> localVarResponse = await TaskWorkV2GetDocumentsFilenameByProcessIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueElementDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueElementDto>>> TaskWorkV2GetDocumentsFilenameByProcessIdAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkV2Api->TaskWorkV2GetDocumentsFilenameByProcessId");

            var localVarPath = "/api/v2/TaskWork/documents/filenames/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetDocumentsFilenameByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueElementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueElementDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueElementDto>)));
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>List&lt;TaskExitCodeDTO&gt;</returns>
        public List<TaskExitCodeDTO> TaskWorkV2GetExitCodesByTaskWorkIds (List<int?> taskWorkIds)
        {
             ApiResponse<List<TaskExitCodeDTO>> localVarResponse = TaskWorkV2GetExitCodesByTaskWorkIdsWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;TaskExitCodeDTO&gt;</returns>
        public ApiResponse< List<TaskExitCodeDTO> > TaskWorkV2GetExitCodesByTaskWorkIdsWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkV2Api->TaskWorkV2GetExitCodesByTaskWorkIds");

            var localVarPath = "/api/v2/TaskWork/exitcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetExitCodesByTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskExitCodeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskExitCodeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskExitCodeDTO>)));
        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of List&lt;TaskExitCodeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskExitCodeDTO>> TaskWorkV2GetExitCodesByTaskWorkIdsAsync (List<int?> taskWorkIds)
        {
             ApiResponse<List<TaskExitCodeDTO>> localVarResponse = await TaskWorkV2GetExitCodesByTaskWorkIdsAsyncWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possible exit code for taskWorks list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">List of taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExitCodeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskExitCodeDTO>>> TaskWorkV2GetExitCodesByTaskWorkIdsAsyncWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkV2Api->TaskWorkV2GetExitCodesByTaskWorkIds");

            var localVarPath = "/api/v2/TaskWork/exitcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetExitCodesByTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskExitCodeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskExitCodeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskExitCodeDTO>)));
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/maskprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a document schema for a mask insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/maskprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ModelProfileSchemaDTO</returns>
        public ModelProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<ModelProfileSchemaDTO> localVarResponse = TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of ModelProfileSchemaDTO</returns>
        public ApiResponse< ModelProfileSchemaDTO > TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/modelprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ModelProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<ModelProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<ModelProfileSchemaDTO> localVarResponse = await TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a profile schema for a model insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (ModelProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/modelprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/standardprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a profile schema for a standard insert document taskWork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/standardprofileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetProfileSchemaForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkDTO</returns>
        public TaskWorkDTO TaskWorkV2GetTaskWorkById (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = TaskWorkV2GetTaskWorkByIdWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkDTO</returns>
        public ApiResponse< TaskWorkDTO > TaskWorkV2GetTaskWorkByIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetTaskWorkById");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkDTO> TaskWorkV2GetTaskWorkByIdAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkDTO> localVarResponse = await TaskWorkV2GetTaskWorkByIdAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkDTO>> TaskWorkV2GetTaskWorkByIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2GetTaskWorkById");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTaskWorkById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkDTO)));
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;TaskWorkDTO&gt;</returns>
        public List<TaskWorkDTO> TaskWorkV2GetTaskWorkForAutoAssign (int? docnumber)
        {
             ApiResponse<List<TaskWorkDTO>> localVarResponse = TaskWorkV2GetTaskWorkForAutoAssignWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDTO&gt;</returns>
        public ApiResponse< List<TaskWorkDTO> > TaskWorkV2GetTaskWorkForAutoAssignWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkV2Api->TaskWorkV2GetTaskWorkForAutoAssign");

            var localVarPath = "/api/v2/TaskWork/autoassignlist/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTaskWorkForAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDTO>)));
        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;TaskWorkDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkDTO>> TaskWorkV2GetTaskWorkForAutoAssignAsync (int? docnumber)
        {
             ApiResponse<List<TaskWorkDTO>> localVarResponse = await TaskWorkV2GetTaskWorkForAutoAssignAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all autoassigned taskwork associated with a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDTO>>> TaskWorkV2GetTaskWorkForAutoAssignAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkV2Api->TaskWorkV2GetTaskWorkForAutoAssign");

            var localVarPath = "/api/v2/TaskWork/autoassignlist/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTaskWorkForAutoAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDTO>)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Object</returns>
        public Object TaskWorkV2GetTasks (TaskWorkRequestDTO request)
        {
             ApiResponse<Object> localVarResponse = TaskWorkV2GetTasksWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TaskWorkV2GetTasksWithHttpInfo (TaskWorkRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkV2Api->TaskWorkV2GetTasks");

            var localVarPath = "/api/v2/TaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TaskWorkV2GetTasksAsync (TaskWorkRequestDTO request)
        {
             ApiResponse<Object> localVarResponse = await TaskWorkV2GetTasksAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions).  This call could not be compatible with some programming language, in this case use the call api/TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2GetTasksAsyncWithHttpInfo (TaskWorkRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkV2Api->TaskWorkV2GetTasks");

            var localVarPath = "/api/v2/TaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns></returns>
        public void TaskWorkV2ReassignTaskById (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
             TaskWorkV2ReassignTaskByIdWithHttpInfo(taskworkid, reassignRequest);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2ReassignTaskByIdWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkV2Api->TaskWorkV2ReassignTaskById");
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
                throw new ApiException(400, "Missing required parameter 'reassignRequest' when calling TaskWorkV2Api->TaskWorkV2ReassignTaskById");

            var localVarPath = "/api/v2/TaskWork/reassign/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", this.Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter
            if (reassignRequest != null && reassignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reassignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reassignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ReassignTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2ReassignTaskByIdAsync (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
             await TaskWorkV2ReassignTaskByIdAsyncWithHttpInfo(taskworkid, reassignRequest);

        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <param name="reassignRequest">Information for re assign operation request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2ReassignTaskByIdAsyncWithHttpInfo (int? taskworkid, TaskWorkReassignRequest reassignRequest)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkV2Api->TaskWorkV2ReassignTaskById");
            // verify the required parameter 'reassignRequest' is set
            if (reassignRequest == null)
                throw new ApiException(400, "Missing required parameter 'reassignRequest' when calling TaskWorkV2Api->TaskWorkV2ReassignTaskById");

            var localVarPath = "/api/v2/TaskWork/reassign/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", this.Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter
            if (reassignRequest != null && reassignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reassignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reassignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ReassignTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkV2ReassignUsersTaskById (int? taskworkid)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkV2ReassignUsersTaskByIdWithHttpInfo(taskworkid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkV2ReassignUsersTaskByIdWithHttpInfo (int? taskworkid)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkV2Api->TaskWorkV2ReassignUsersTaskById");

            var localVarPath = "/api/v2/TaskWork/reassignusers/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", this.Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ReassignUsersTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkV2ReassignUsersTaskByIdAsync (int? taskworkid)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkV2ReassignUsersTaskByIdAsyncWithHttpInfo(taskworkid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call reassigns a task to selected users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskworkid">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkV2ReassignUsersTaskByIdAsyncWithHttpInfo (int? taskworkid)
        {
            // verify the required parameter 'taskworkid' is set
            if (taskworkid == null)
                throw new ApiException(400, "Missing required parameter 'taskworkid' when calling TaskWorkV2Api->TaskWorkV2ReassignUsersTaskById");

            var localVarPath = "/api/v2/TaskWork/reassignusers/{taskworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskworkid != null) localVarPathParams.Add("taskworkid", this.Configuration.ApiClient.ParameterToString(taskworkid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2ReassignUsersTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns></returns>
        public void TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
             TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, docnumbers);
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/byselection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
             await TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, docnumbers);

        }

        /// <summary>
        /// This call adds a profile to process for a selection document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="docnumbers">List of document identifier to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, List<int?> docnumbers)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/byselection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkBySelectionDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a mask insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkMaskDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkMaskDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkV2SetProfileForTaskWorkModelDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkV2SetProfileForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkV2SetProfileForTaskWorkModelDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkModelDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkV2SetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a model insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkModelDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkModelDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkModelDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkModelDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bystandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationAsync (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call profiles a new document for a standard insert document taskwork operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifie</param>
        /// <param name="taskWorkDocumentOperationId">Id of the operation</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> TaskWorkV2SetProfileForTaskWorkStandardDocumentOperationAsyncWithHttpInfo (int? taskWorkId, string taskWorkDocumentOperationId, ProfileDTO profile = null)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation");
            // verify the required parameter 'taskWorkDocumentOperationId' is set
            if (taskWorkDocumentOperationId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkDocumentOperationId' when calling TaskWorkV2Api->TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bystandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkDocumentOperationId != null) localVarPathParams.Add("taskWorkDocumentOperationId", this.Configuration.ApiClient.ParameterToString(taskWorkDocumentOperationId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetProfileForTaskWorkStandardDocumentOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>int?</returns>
        public int? TaskWorkV2SetTaskPriority (List<int?> taskIds, int? priority)
        {
             ApiResponse<int?> localVarResponse = TaskWorkV2SetTaskPriorityWithHttpInfo(taskIds, priority);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkV2SetTaskPriorityWithHttpInfo (List<int?> taskIds, int? priority)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkV2Api->TaskWorkV2SetTaskPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskWorkV2Api->TaskWorkV2SetTaskPriority");

            var localVarPath = "/api/v2/TaskWork/priority/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priority != null) localVarPathParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // path parameter
            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskPriorityAsync (List<int?> taskIds, int? priority)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkV2SetTaskPriorityAsyncWithHttpInfo(taskIds, priority);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the tasks priority 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <param name="priority">Priority</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskPriorityAsyncWithHttpInfo (List<int?> taskIds, int? priority)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkV2Api->TaskWorkV2SetTaskPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskWorkV2Api->TaskWorkV2SetTaskPriority");

            var localVarPath = "/api/v2/TaskWork/priority/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priority != null) localVarPathParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // path parameter
            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>int?</returns>
        public int? TaskWorkV2SetTaskRead (List<int?> taskid)
        {
             ApiResponse<int?> localVarResponse = TaskWorkV2SetTaskReadWithHttpInfo(taskid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkV2SetTaskReadWithHttpInfo (List<int?> taskid)
        {
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling TaskWorkV2Api->TaskWorkV2SetTaskRead");

            var localVarPath = "/api/v2/TaskWork/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskid != null && taskid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskid; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskReadAsync (List<int?> taskid)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkV2SetTaskReadAsyncWithHttpInfo(taskid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the task as read 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskid">Task Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskReadAsyncWithHttpInfo (List<int?> taskid)
        {
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling TaskWorkV2Api->TaskWorkV2SetTaskRead");

            var localVarPath = "/api/v2/TaskWork/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskid != null && taskid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskid; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>int?</returns>
        public int? TaskWorkV2SetTaskUnRead (List<int?> taskIds)
        {
             ApiResponse<int?> localVarResponse = TaskWorkV2SetTaskUnReadWithHttpInfo(taskIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > TaskWorkV2SetTaskUnReadWithHttpInfo (List<int?> taskIds)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkV2Api->TaskWorkV2SetTaskUnRead");

            var localVarPath = "/api/v2/TaskWork/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskUnRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> TaskWorkV2SetTaskUnReadAsync (List<int?> taskIds)
        {
             ApiResponse<int?> localVarResponse = await TaskWorkV2SetTaskUnReadAsyncWithHttpInfo(taskIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets the tasks as unread 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">List of task identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> TaskWorkV2SetTaskUnReadAsyncWithHttpInfo (List<int?> taskIds)
        {
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkV2Api->TaskWorkV2SetTaskUnRead");

            var localVarPath = "/api/v2/TaskWork/unread";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null && taskIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2SetTaskUnRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkV2TaskWorkTakeCharge (int? taskWorkId)
        {
             TaskWorkV2TaskWorkTakeChargeWithHttpInfo(taskWorkId);
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkV2TaskWorkTakeChargeWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2TaskWorkTakeCharge");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/TakeCharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2TaskWorkTakeCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkV2TaskWorkTakeChargeAsync (int? taskWorkId)
        {
             await TaskWorkV2TaskWorkTakeChargeAsyncWithHttpInfo(taskWorkId);

        }

        /// <summary>
        /// This call takes charge of a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkV2TaskWorkTakeChargeAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkV2Api->TaskWorkV2TaskWorkTakeCharge");

            var localVarPath = "/api/v2/TaskWork/{taskWorkId}/TakeCharge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkV2TaskWorkTakeCharge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
