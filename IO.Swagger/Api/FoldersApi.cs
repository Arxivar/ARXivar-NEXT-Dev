/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns></returns>
        void FoldersAutoinsertInFolderByDocnumber (int? docnumber);

        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersAutoinsertInFolderByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns></returns>
        void FoldersDelete (int? id);

        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns></returns>
        void FoldersDeleteArxDriveConfiguration (int? id);

        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersDeleteArxDriveConfigurationWithHttpInfo (int? id);
        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersFindByDocnumber (int? docnumber);

        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersFindByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersFindByName (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersFindByNameWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersFindByNameOld (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersFindByNameOldWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersFindInFolderByName (int? id, string name);

        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersFindInFolderByNameWithHttpInfo (int? id, string name);
        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderArchiveModeInfo</returns>
        FolderArchiveModeInfo FoldersGetArchiveInfo (int? id);

        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderArchiveModeInfo</returns>
        ApiResponse<FolderArchiveModeInfo> FoldersGetArchiveInfoWithHttpInfo (int? id);
        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ArxDriveFolderModeInfo</returns>
        ArxDriveFolderModeInfo FoldersGetArxDriveConfiguration (int? id);

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of ArxDriveFolderModeInfo</returns>
        ApiResponse<ArxDriveFolderModeInfo> FoldersGetArxDriveConfigurationWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersGetById (int? id);

        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersGetByParentId (int? parentId);

        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersGetByParentIdWithHttpInfo (int? parentId);
        /// <summary>
        /// This methods return the profiles contained in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> FoldersGetDocumentsById (int? id, SelectDTO select);

        /// <summary>
        /// This methods return the profiles contained in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> FoldersGetDocumentsByIdWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderPermissionsDTO</returns>
        FolderPermissionsDTO FoldersGetFolderPermission (int? id);

        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderPermissionsDTO</returns>
        ApiResponse<FolderPermissionsDTO> FoldersGetFolderPermissionWithHttpInfo (int? id);
        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns></returns>
        void FoldersInsertDocnumbers (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersInsertDocnumbersWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns></returns>
        void FoldersMove (int? id, int? parentid);

        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersMoveWithHttpInfo (int? id, int? parentid);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersNew (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersNewWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersNewFolder (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersNewFolderWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns></returns>
        void FoldersRemoveDocumentsInFolder (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersRemoveDocumentsInFolderWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        void FoldersRename (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersRenameWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        void FoldersRenameOld (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersRenameOldWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns></returns>
        void FoldersSetArchiveInfo (int? id, FolderArchiveModeInfo archiveInfo);

        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersSetArchiveInfoWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo);
        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns></returns>
        void FoldersSetArxDriveConfiguration (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersSetArxDriveConfigurationWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);
        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns></returns>
        void FoldersSetFolderPermission (int? id, FolderPermissionsDTO permissions);

        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersSetFolderPermissionWithHttpInfo (int? id, FolderPermissionsDTO permissions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersAutoinsertInFolderByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersAutoinsertInFolderByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersDeleteAsync (int? id);

        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersDeleteArxDriveConfigurationAsync (int? id);

        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersDeleteArxDriveConfigurationAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByNameAsync (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByNameAsyncWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByNameOldAsync (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByNameOldAsyncWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindInFolderByNameAsync (int? id, string name);

        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindInFolderByNameAsyncWithHttpInfo (int? id, string name);
        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderArchiveModeInfo</returns>
        System.Threading.Tasks.Task<FolderArchiveModeInfo> FoldersGetArchiveInfoAsync (int? id);

        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderArchiveModeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderArchiveModeInfo>> FoldersGetArchiveInfoAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ArxDriveFolderModeInfo</returns>
        System.Threading.Tasks.Task<ArxDriveFolderModeInfo> FoldersGetArxDriveConfigurationAsync (int? id);

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (ArxDriveFolderModeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxDriveFolderModeInfo>> FoldersGetArxDriveConfigurationAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersGetByIdAsync (int? id);

        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersGetByParentIdAsync (int? parentId);

        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersGetByParentIdAsyncWithHttpInfo (int? parentId);
        /// <summary>
        /// This methods return the profiles contained in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> FoldersGetDocumentsByIdAsync (int? id, SelectDTO select);

        /// <summary>
        /// This methods return the profiles contained in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> FoldersGetDocumentsByIdAsyncWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderPermissionsDTO</returns>
        System.Threading.Tasks.Task<FolderPermissionsDTO> FoldersGetFolderPermissionAsync (int? id);

        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderPermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderPermissionsDTO>> FoldersGetFolderPermissionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersInsertDocnumbersAsync (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersInsertDocnumbersAsyncWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersMoveAsync (int? id, int? parentid);

        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersMoveAsyncWithHttpInfo (int? id, int? parentid);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersNewAsync (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersNewAsyncWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersNewFolderAsync (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersNewFolderAsyncWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersRemoveDocumentsInFolderAsync (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRemoveDocumentsInFolderAsyncWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersRenameAsync (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRenameAsyncWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersRenameOldAsync (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRenameOldAsyncWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersSetArchiveInfoAsync (int? id, FolderArchiveModeInfo archiveInfo);

        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetArchiveInfoAsyncWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo);
        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersSetArxDriveConfigurationAsync (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetArxDriveConfigurationAsyncWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);
        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersSetFolderPermissionAsync (int? id, FolderPermissionsDTO permissions);

        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetFolderPermissionAsyncWithHttpInfo (int? id, FolderPermissionsDTO permissions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns></returns>
        public void FoldersAutoinsertInFolderByDocnumber (int? docnumber)
        {
             FoldersAutoinsertInFolderByDocnumberWithHttpInfo(docnumber);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersAutoinsertInFolderByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersApi->FoldersAutoinsertInFolderByDocnumber");

            var localVarPath = "/api/Folders/{docnumber}/autoinsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersAutoinsertInFolderByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersAutoinsertInFolderByDocnumberAsync (int? docnumber)
        {
             await FoldersAutoinsertInFolderByDocnumberAsyncWithHttpInfo(docnumber);

        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersAutoinsertInFolderByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersApi->FoldersAutoinsertInFolderByDocnumber");

            var localVarPath = "/api/Folders/{docnumber}/autoinsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersAutoinsertInFolderByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns></returns>
        public void FoldersDelete (int? id)
        {
             FoldersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersDelete");

            var localVarPath = "/api/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersDeleteAsync (int? id)
        {
             await FoldersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersDelete");

            var localVarPath = "/api/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns></returns>
        public void FoldersDeleteArxDriveConfiguration (int? id)
        {
             FoldersDeleteArxDriveConfigurationWithHttpInfo(id);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersDeleteArxDriveConfigurationWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersDeleteArxDriveConfiguration");

            var localVarPath = "/api/Folders/arxdriveinfo/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersDeleteArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersDeleteArxDriveConfigurationAsync (int? id)
        {
             await FoldersDeleteArxDriveConfigurationAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersDeleteArxDriveConfigurationAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersDeleteArxDriveConfiguration");

            var localVarPath = "/api/Folders/arxdriveinfo/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersDeleteArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersFindByDocnumber (int? docnumber)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersFindByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersFindByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersApi->FoldersFindByDocnumber");

            var localVarPath = "/api/Folders/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersFindByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersApi->FoldersFindByDocnumber");

            var localVarPath = "/api/Folders/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersFindByName (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersFindByNameWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersFindByNameWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindByName");

            var localVarPath = "/api/Folders/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByNameAsync (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersFindByNameAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByNameAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindByName");

            var localVarPath = "/api/Folders/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersFindByNameOld (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersFindByNameOldWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersFindByNameOldWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindByNameOld");

            var localVarPath = "/api/Folders/find/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByNameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindByNameOldAsync (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersFindByNameOldAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindByNameOldAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindByNameOld");

            var localVarPath = "/api/Folders/find/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindByNameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersFindInFolderByName (int? id, string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersFindInFolderByNameWithHttpInfo(id, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersFindInFolderByNameWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersFindInFolderByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindInFolderByName");

            var localVarPath = "/api/Folders/{id}/name/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindInFolderByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersFindInFolderByNameAsync (int? id, string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersFindInFolderByNameAsyncWithHttpInfo(id, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersFindInFolderByNameAsyncWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersFindInFolderByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersFindInFolderByName");

            var localVarPath = "/api/Folders/{id}/name/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersFindInFolderByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderArchiveModeInfo</returns>
        public FolderArchiveModeInfo FoldersGetArchiveInfo (int? id)
        {
             ApiResponse<FolderArchiveModeInfo> localVarResponse = FoldersGetArchiveInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderArchiveModeInfo</returns>
        public ApiResponse< FolderArchiveModeInfo > FoldersGetArchiveInfoWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetArchiveInfo");

            var localVarPath = "/api/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderArchiveModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderArchiveModeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderArchiveModeInfo)));
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderArchiveModeInfo</returns>
        public async System.Threading.Tasks.Task<FolderArchiveModeInfo> FoldersGetArchiveInfoAsync (int? id)
        {
             ApiResponse<FolderArchiveModeInfo> localVarResponse = await FoldersGetArchiveInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderArchiveModeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderArchiveModeInfo>> FoldersGetArchiveInfoAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetArchiveInfo");

            var localVarPath = "/api/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderArchiveModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderArchiveModeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderArchiveModeInfo)));
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ArxDriveFolderModeInfo</returns>
        public ArxDriveFolderModeInfo FoldersGetArxDriveConfiguration (int? id)
        {
             ApiResponse<ArxDriveFolderModeInfo> localVarResponse = FoldersGetArxDriveConfigurationWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of ArxDriveFolderModeInfo</returns>
        public ApiResponse< ArxDriveFolderModeInfo > FoldersGetArxDriveConfigurationWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetArxDriveConfiguration");

            var localVarPath = "/api/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxDriveFolderModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxDriveFolderModeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxDriveFolderModeInfo)));
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ArxDriveFolderModeInfo</returns>
        public async System.Threading.Tasks.Task<ArxDriveFolderModeInfo> FoldersGetArxDriveConfigurationAsync (int? id)
        {
             ApiResponse<ArxDriveFolderModeInfo> localVarResponse = await FoldersGetArxDriveConfigurationAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (ArxDriveFolderModeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxDriveFolderModeInfo>> FoldersGetArxDriveConfigurationAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetArxDriveConfiguration");

            var localVarPath = "/api/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxDriveFolderModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxDriveFolderModeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxDriveFolderModeInfo)));
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersGetById (int? id)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetById");

            var localVarPath = "/api/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersGetByIdAsync (int? id)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetById");

            var localVarPath = "/api/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersGetByParentId (int? parentId)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersGetByParentIdWithHttpInfo(parentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersGetByParentIdWithHttpInfo (int? parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersGetByParentId");

            var localVarPath = "/api/Folders/parent/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetByParentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersGetByParentIdAsync (int? parentId)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersGetByParentIdAsyncWithHttpInfo(parentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersGetByParentIdAsyncWithHttpInfo (int? parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersGetByParentId");

            var localVarPath = "/api/Folders/parent/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetByParentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This methods return the profiles contained in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> FoldersGetDocumentsById (int? id, SelectDTO select)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = FoldersGetDocumentsByIdWithHttpInfo(id, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This methods return the profiles contained in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > FoldersGetDocumentsByIdWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetDocumentsById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling FoldersApi->FoldersGetDocumentsById");

            var localVarPath = "/api/Folders/{id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetDocumentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This methods return the profiles contained in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> FoldersGetDocumentsByIdAsync (int? id, SelectDTO select)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await FoldersGetDocumentsByIdAsyncWithHttpInfo(id, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This methods return the profiles contained in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> FoldersGetDocumentsByIdAsyncWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetDocumentsById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling FoldersApi->FoldersGetDocumentsById");

            var localVarPath = "/api/Folders/{id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetDocumentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderPermissionsDTO</returns>
        public FolderPermissionsDTO FoldersGetFolderPermission (int? id)
        {
             ApiResponse<FolderPermissionsDTO> localVarResponse = FoldersGetFolderPermissionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderPermissionsDTO</returns>
        public ApiResponse< FolderPermissionsDTO > FoldersGetFolderPermissionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetFolderPermission");

            var localVarPath = "/api/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderPermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderPermissionsDTO)));
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderPermissionsDTO</returns>
        public async System.Threading.Tasks.Task<FolderPermissionsDTO> FoldersGetFolderPermissionAsync (int? id)
        {
             ApiResponse<FolderPermissionsDTO> localVarResponse = await FoldersGetFolderPermissionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderPermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderPermissionsDTO>> FoldersGetFolderPermissionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersGetFolderPermission");

            var localVarPath = "/api/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderPermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderPermissionsDTO)));
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns></returns>
        public void FoldersInsertDocnumbers (int? id, List<int?> docnumbers)
        {
             FoldersInsertDocnumbersWithHttpInfo(id, docnumbers);
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersInsertDocnumbersWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersInsertDocnumbers");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersApi->FoldersInsertDocnumbers");

            var localVarPath = "/api/Folders/{id}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersInsertDocnumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersInsertDocnumbersAsync (int? id, List<int?> docnumbers)
        {
             await FoldersInsertDocnumbersAsyncWithHttpInfo(id, docnumbers);

        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersInsertDocnumbersAsyncWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersInsertDocnumbers");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersApi->FoldersInsertDocnumbers");

            var localVarPath = "/api/Folders/{id}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersInsertDocnumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns></returns>
        public void FoldersMove (int? id, int? parentid)
        {
             FoldersMoveWithHttpInfo(id, parentid);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersMoveWithHttpInfo (int? id, int? parentid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersMove");
            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new ApiException(400, "Missing required parameter 'parentid' when calling FoldersApi->FoldersMove");

            var localVarPath = "/api/Folders/move/{id}/{parentid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentid != null) localVarPathParams.Add("parentid", Configuration.ApiClient.ParameterToString(parentid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersMoveAsync (int? id, int? parentid)
        {
             await FoldersMoveAsyncWithHttpInfo(id, parentid);

        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersMoveAsyncWithHttpInfo (int? id, int? parentid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersMove");
            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new ApiException(400, "Missing required parameter 'parentid' when calling FoldersApi->FoldersMove");

            var localVarPath = "/api/Folders/move/{id}/{parentid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentid != null) localVarPathParams.Add("parentid", Configuration.ApiClient.ParameterToString(parentid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersNew (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersNewWithHttpInfo(parentId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersNewWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersNew");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersNew");

            var localVarPath = "/api/Folders/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersNewAsync (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersNewAsyncWithHttpInfo(parentId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersNewAsyncWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersNew");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersNew");

            var localVarPath = "/api/Folders/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersNewFolder (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersNewFolderWithHttpInfo(parentId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersNewFolderWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersNewFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersNewFolder");

            var localVarPath = "/api/Folders/{parentId}/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersNewFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersNewFolderAsync (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersNewFolderAsyncWithHttpInfo(parentId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersNewFolderAsyncWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersApi->FoldersNewFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersNewFolder");

            var localVarPath = "/api/Folders/{parentId}/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersNewFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns></returns>
        public void FoldersRemoveDocumentsInFolder (int? id, List<int?> docnumbers)
        {
             FoldersRemoveDocumentsInFolderWithHttpInfo(id, docnumbers);
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersRemoveDocumentsInFolderWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRemoveDocumentsInFolder");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersApi->FoldersRemoveDocumentsInFolder");

            var localVarPath = "/api/Folders/{id}/documents/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRemoveDocumentsInFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersRemoveDocumentsInFolderAsync (int? id, List<int?> docnumbers)
        {
             await FoldersRemoveDocumentsInFolderAsyncWithHttpInfo(id, docnumbers);

        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRemoveDocumentsInFolderAsyncWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRemoveDocumentsInFolder");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersApi->FoldersRemoveDocumentsInFolder");

            var localVarPath = "/api/Folders/{id}/documents/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRemoveDocumentsInFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        public void FoldersRename (string name, int? id)
        {
             FoldersRenameWithHttpInfo(name, id);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersRenameWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersRename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRename");

            var localVarPath = "/api/Folders/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersRenameAsync (string name, int? id)
        {
             await FoldersRenameAsyncWithHttpInfo(name, id);

        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRenameAsyncWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersRename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRename");

            var localVarPath = "/api/Folders/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        public void FoldersRenameOld (string name, int? id)
        {
             FoldersRenameOldWithHttpInfo(name, id);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersRenameOldWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersRenameOld");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRenameOld");

            var localVarPath = "/api/Folders/rename/{id}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRenameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersRenameOldAsync (string name, int? id)
        {
             await FoldersRenameOldAsyncWithHttpInfo(name, id);

        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersRenameOldAsyncWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->FoldersRenameOld");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersRenameOld");

            var localVarPath = "/api/Folders/rename/{id}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersRenameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns></returns>
        public void FoldersSetArchiveInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
             FoldersSetArchiveInfoWithHttpInfo(id, archiveInfo);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersSetArchiveInfoWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetArchiveInfo");
            // verify the required parameter 'archiveInfo' is set
            if (archiveInfo == null)
                throw new ApiException(400, "Missing required parameter 'archiveInfo' when calling FoldersApi->FoldersSetArchiveInfo");

            var localVarPath = "/api/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (archiveInfo != null && archiveInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(archiveInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersSetArchiveInfoAsync (int? id, FolderArchiveModeInfo archiveInfo)
        {
             await FoldersSetArchiveInfoAsyncWithHttpInfo(id, archiveInfo);

        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetArchiveInfoAsyncWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetArchiveInfo");
            // verify the required parameter 'archiveInfo' is set
            if (archiveInfo == null)
                throw new ApiException(400, "Missing required parameter 'archiveInfo' when calling FoldersApi->FoldersSetArchiveInfo");

            var localVarPath = "/api/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (archiveInfo != null && archiveInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(archiveInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns></returns>
        public void FoldersSetArxDriveConfiguration (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
             FoldersSetArxDriveConfigurationWithHttpInfo(id, arxDriveFolderModeInfo);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersSetArxDriveConfigurationWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetArxDriveConfiguration");
            // verify the required parameter 'arxDriveFolderModeInfo' is set
            if (arxDriveFolderModeInfo == null)
                throw new ApiException(400, "Missing required parameter 'arxDriveFolderModeInfo' when calling FoldersApi->FoldersSetArxDriveConfiguration");

            var localVarPath = "/api/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (arxDriveFolderModeInfo != null && arxDriveFolderModeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(arxDriveFolderModeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arxDriveFolderModeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersSetArxDriveConfigurationAsync (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
             await FoldersSetArxDriveConfigurationAsyncWithHttpInfo(id, arxDriveFolderModeInfo);

        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetArxDriveConfigurationAsyncWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetArxDriveConfiguration");
            // verify the required parameter 'arxDriveFolderModeInfo' is set
            if (arxDriveFolderModeInfo == null)
                throw new ApiException(400, "Missing required parameter 'arxDriveFolderModeInfo' when calling FoldersApi->FoldersSetArxDriveConfiguration");

            var localVarPath = "/api/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (arxDriveFolderModeInfo != null && arxDriveFolderModeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(arxDriveFolderModeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arxDriveFolderModeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns></returns>
        public void FoldersSetFolderPermission (int? id, FolderPermissionsDTO permissions)
        {
             FoldersSetFolderPermissionWithHttpInfo(id, permissions);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersSetFolderPermissionWithHttpInfo (int? id, FolderPermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetFolderPermission");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling FoldersApi->FoldersSetFolderPermission");

            var localVarPath = "/api/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersSetFolderPermissionAsync (int? id, FolderPermissionsDTO permissions)
        {
             await FoldersSetFolderPermissionAsyncWithHttpInfo(id, permissions);

        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersSetFolderPermissionAsyncWithHttpInfo (int? id, FolderPermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->FoldersSetFolderPermission");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling FoldersApi->FoldersSetFolderPermission");

            var localVarPath = "/api/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersSetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
