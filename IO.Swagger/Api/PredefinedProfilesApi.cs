/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPredefinedProfilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call clones a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns></returns>
        void PredefinedProfilesClonePredefinedProfile (int? predefinedProfileId, string name);

        /// <summary>
        /// This call clones a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredefinedProfilesClonePredefinedProfileWithHttpInfo (int? predefinedProfileId, string name);
        /// <summary>
        /// This call deletes a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns></returns>
        void PredefinedProfilesDeletePredefinedProfile (int? predefinedProfileId);

        /// <summary>
        /// This call deletes a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredefinedProfilesDeletePredefinedProfileWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call returns all the predefined profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PredefinedProfileDTO&gt;</returns>
        List<PredefinedProfileDTO> PredefinedProfilesGet ();

        /// <summary>
        /// This call returns all the predefined profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PredefinedProfileDTO&gt;</returns>
        ApiResponse<List<PredefinedProfileDTO>> PredefinedProfilesGetWithHttpInfo ();
        /// <summary>
        /// This call returns a predefined profile by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>PredefinedProfileDTO</returns>
        PredefinedProfileDTO PredefinedProfilesGetById (int? predefinedProfileId);

        /// <summary>
        /// This call returns a predefined profile by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of PredefinedProfileDTO</returns>
        ApiResponse<PredefinedProfileDTO> PredefinedProfilesGetByIdWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call returns a new predefined profile template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PredefinedProfileDTO</returns>
        PredefinedProfileDTO PredefinedProfilesGetNew ();

        /// <summary>
        /// This call returns a new predefined profile template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PredefinedProfileDTO</returns>
        ApiResponse<PredefinedProfileDTO> PredefinedProfilesGetNewWithHttpInfo ();
        /// <summary>
        /// This call returns the profile schema by a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>PredefinedProfileSchemaDTO</returns>
        PredefinedProfileSchemaDTO PredefinedProfilesGetProfileSchemaByPredefinedProfileId (int? predefinedProfileId, ProfileDTO profile = null);

        /// <summary>
        /// This call returns the profile schema by a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of PredefinedProfileSchemaDTO</returns>
        ApiResponse<PredefinedProfileSchemaDTO> PredefinedProfilesGetProfileSchemaByPredefinedProfileIdWithHttpInfo (int? predefinedProfileId, ProfileDTO profile = null);
        /// <summary>
        /// This call returns the permissions for a predefiend profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO PredefinedProfilesPermissionsById (int? predefinedProfileId);

        /// <summary>
        /// This call returns the permissions for a predefiend profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> PredefinedProfilesPermissionsByIdWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call updates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns></returns>
        void PredefinedProfilesUpdatePredefinedProfile (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null);

        /// <summary>
        /// This call updates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredefinedProfilesUpdatePredefinedProfileWithHttpInfo (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null);
        /// <summary>
        /// This call updates permissions for a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns></returns>
        void PredefinedProfilesWritePermissionsById (int? predefinedProfileId, PermissionsDTO permissions);

        /// <summary>
        /// This call updates permissions for a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredefinedProfilesWritePermissionsByIdWithHttpInfo (int? predefinedProfileId, PermissionsDTO permissions);
        /// <summary>
        /// This call creates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns></returns>
        void PredefinedProfilesWritePredefinedProfile (PredefinedProfileDTO predefinedprofiledto = null);

        /// <summary>
        /// This call creates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredefinedProfilesWritePredefinedProfileWithHttpInfo (PredefinedProfileDTO predefinedprofiledto = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call clones a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredefinedProfilesClonePredefinedProfileAsync (int? predefinedProfileId, string name);

        /// <summary>
        /// This call clones a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesClonePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId, string name);
        /// <summary>
        /// This call deletes a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredefinedProfilesDeletePredefinedProfileAsync (int? predefinedProfileId);

        /// <summary>
        /// This call deletes a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesDeletePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call returns all the predefined profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PredefinedProfileDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PredefinedProfileDTO>> PredefinedProfilesGetAsync ();

        /// <summary>
        /// This call returns all the predefined profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PredefinedProfileDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PredefinedProfileDTO>>> PredefinedProfilesGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a predefined profile by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of PredefinedProfileDTO</returns>
        System.Threading.Tasks.Task<PredefinedProfileDTO> PredefinedProfilesGetByIdAsync (int? predefinedProfileId);

        /// <summary>
        /// This call returns a predefined profile by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse (PredefinedProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PredefinedProfileDTO>> PredefinedProfilesGetByIdAsyncWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call returns a new predefined profile template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PredefinedProfileDTO</returns>
        System.Threading.Tasks.Task<PredefinedProfileDTO> PredefinedProfilesGetNewAsync ();

        /// <summary>
        /// This call returns a new predefined profile template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PredefinedProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PredefinedProfileDTO>> PredefinedProfilesGetNewAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the profile schema by a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of PredefinedProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<PredefinedProfileSchemaDTO> PredefinedProfilesGetProfileSchemaByPredefinedProfileIdAsync (int? predefinedProfileId, ProfileDTO profile = null);

        /// <summary>
        /// This call returns the profile schema by a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (PredefinedProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PredefinedProfileSchemaDTO>> PredefinedProfilesGetProfileSchemaByPredefinedProfileIdAsyncWithHttpInfo (int? predefinedProfileId, ProfileDTO profile = null);
        /// <summary>
        /// This call returns the permissions for a predefiend profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> PredefinedProfilesPermissionsByIdAsync (int? predefinedProfileId);

        /// <summary>
        /// This call returns the permissions for a predefiend profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> PredefinedProfilesPermissionsByIdAsyncWithHttpInfo (int? predefinedProfileId);
        /// <summary>
        /// This call updates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredefinedProfilesUpdatePredefinedProfileAsync (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null);

        /// <summary>
        /// This call updates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesUpdatePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null);
        /// <summary>
        /// This call updates permissions for a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredefinedProfilesWritePermissionsByIdAsync (int? predefinedProfileId, PermissionsDTO permissions);

        /// <summary>
        /// This call updates permissions for a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesWritePermissionsByIdAsyncWithHttpInfo (int? predefinedProfileId, PermissionsDTO permissions);
        /// <summary>
        /// This call creates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredefinedProfilesWritePredefinedProfileAsync (PredefinedProfileDTO predefinedprofiledto = null);

        /// <summary>
        /// This call creates a predefined profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesWritePredefinedProfileAsyncWithHttpInfo (PredefinedProfileDTO predefinedprofiledto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PredefinedProfilesApi : IPredefinedProfilesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PredefinedProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PredefinedProfilesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PredefinedProfilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PredefinedProfilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call clones a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns></returns>
        public void PredefinedProfilesClonePredefinedProfile (int? predefinedProfileId, string name)
        {
             PredefinedProfilesClonePredefinedProfileWithHttpInfo(predefinedProfileId, name);
        }

        /// <summary>
        /// This call clones a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredefinedProfilesClonePredefinedProfileWithHttpInfo (int? predefinedProfileId, string name)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesClonePredefinedProfile");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PredefinedProfilesApi->PredefinedProfilesClonePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Clone/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesClonePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call clones a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredefinedProfilesClonePredefinedProfileAsync (int? predefinedProfileId, string name)
        {
             await PredefinedProfilesClonePredefinedProfileAsyncWithHttpInfo(predefinedProfileId, name);

        }

        /// <summary>
        /// This call clones a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier to clone</param>
        /// <param name="name">Name of the cloned predefined profile</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesClonePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId, string name)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesClonePredefinedProfile");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PredefinedProfilesApi->PredefinedProfilesClonePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Clone/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesClonePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns></returns>
        public void PredefinedProfilesDeletePredefinedProfile (int? predefinedProfileId)
        {
             PredefinedProfilesDeletePredefinedProfileWithHttpInfo(predefinedProfileId);
        }

        /// <summary>
        /// This call deletes a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredefinedProfilesDeletePredefinedProfileWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesDeletePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesDeletePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredefinedProfilesDeletePredefinedProfileAsync (int? predefinedProfileId)
        {
             await PredefinedProfilesDeletePredefinedProfileAsyncWithHttpInfo(predefinedProfileId);

        }

        /// <summary>
        /// This call deletes a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesDeletePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesDeletePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesDeletePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all the predefined profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PredefinedProfileDTO&gt;</returns>
        public List<PredefinedProfileDTO> PredefinedProfilesGet ()
        {
             ApiResponse<List<PredefinedProfileDTO>> localVarResponse = PredefinedProfilesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the predefined profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PredefinedProfileDTO&gt;</returns>
        public ApiResponse< List<PredefinedProfileDTO> > PredefinedProfilesGetWithHttpInfo ()
        {

            var localVarPath = "/api/PredefinedProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PredefinedProfileDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PredefinedProfileDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PredefinedProfileDTO>)));
        }

        /// <summary>
        /// This call returns all the predefined profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PredefinedProfileDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PredefinedProfileDTO>> PredefinedProfilesGetAsync ()
        {
             ApiResponse<List<PredefinedProfileDTO>> localVarResponse = await PredefinedProfilesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the predefined profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PredefinedProfileDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PredefinedProfileDTO>>> PredefinedProfilesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/PredefinedProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PredefinedProfileDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PredefinedProfileDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PredefinedProfileDTO>)));
        }

        /// <summary>
        /// This call returns a predefined profile by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>PredefinedProfileDTO</returns>
        public PredefinedProfileDTO PredefinedProfilesGetById (int? predefinedProfileId)
        {
             ApiResponse<PredefinedProfileDTO> localVarResponse = PredefinedProfilesGetByIdWithHttpInfo(predefinedProfileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a predefined profile by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of PredefinedProfileDTO</returns>
        public ApiResponse< PredefinedProfileDTO > PredefinedProfilesGetByIdWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesGetById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileDTO)));
        }

        /// <summary>
        /// This call returns a predefined profile by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of PredefinedProfileDTO</returns>
        public async System.Threading.Tasks.Task<PredefinedProfileDTO> PredefinedProfilesGetByIdAsync (int? predefinedProfileId)
        {
             ApiResponse<PredefinedProfileDTO> localVarResponse = await PredefinedProfilesGetByIdAsyncWithHttpInfo(predefinedProfileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a predefined profile by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse (PredefinedProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PredefinedProfileDTO>> PredefinedProfilesGetByIdAsyncWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesGetById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileDTO)));
        }

        /// <summary>
        /// This call returns a new predefined profile template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PredefinedProfileDTO</returns>
        public PredefinedProfileDTO PredefinedProfilesGetNew ()
        {
             ApiResponse<PredefinedProfileDTO> localVarResponse = PredefinedProfilesGetNewWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new predefined profile template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PredefinedProfileDTO</returns>
        public ApiResponse< PredefinedProfileDTO > PredefinedProfilesGetNewWithHttpInfo ()
        {

            var localVarPath = "/api/PredefinedProfiles/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileDTO)));
        }

        /// <summary>
        /// This call returns a new predefined profile template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PredefinedProfileDTO</returns>
        public async System.Threading.Tasks.Task<PredefinedProfileDTO> PredefinedProfilesGetNewAsync ()
        {
             ApiResponse<PredefinedProfileDTO> localVarResponse = await PredefinedProfilesGetNewAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new predefined profile template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PredefinedProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PredefinedProfileDTO>> PredefinedProfilesGetNewAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/PredefinedProfiles/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>PredefinedProfileSchemaDTO</returns>
        public PredefinedProfileSchemaDTO PredefinedProfilesGetProfileSchemaByPredefinedProfileId (int? predefinedProfileId, ProfileDTO profile = null)
        {
             ApiResponse<PredefinedProfileSchemaDTO> localVarResponse = PredefinedProfilesGetProfileSchemaByPredefinedProfileIdWithHttpInfo(predefinedProfileId, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile schema by a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of PredefinedProfileSchemaDTO</returns>
        public ApiResponse< PredefinedProfileSchemaDTO > PredefinedProfilesGetProfileSchemaByPredefinedProfileIdWithHttpInfo (int? predefinedProfileId, ProfileDTO profile = null)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesGetProfileSchemaByPredefinedProfileId");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetProfileSchemaByPredefinedProfileId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of PredefinedProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<PredefinedProfileSchemaDTO> PredefinedProfilesGetProfileSchemaByPredefinedProfileIdAsync (int? predefinedProfileId, ProfileDTO profile = null)
        {
             ApiResponse<PredefinedProfileSchemaDTO> localVarResponse = await PredefinedProfilesGetProfileSchemaByPredefinedProfileIdAsyncWithHttpInfo(predefinedProfileId, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile schema by a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (PredefinedProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PredefinedProfileSchemaDTO>> PredefinedProfilesGetProfileSchemaByPredefinedProfileIdAsyncWithHttpInfo (int? predefinedProfileId, ProfileDTO profile = null)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesGetProfileSchemaByPredefinedProfileId");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesGetProfileSchemaByPredefinedProfileId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PredefinedProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PredefinedProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PredefinedProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the permissions for a predefiend profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO PredefinedProfilesPermissionsById (int? predefinedProfileId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = PredefinedProfilesPermissionsByIdWithHttpInfo(predefinedProfileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the permissions for a predefiend profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > PredefinedProfilesPermissionsByIdWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesPermissionsById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the permissions for a predefiend profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> PredefinedProfilesPermissionsByIdAsync (int? predefinedProfileId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await PredefinedProfilesPermissionsByIdAsyncWithHttpInfo(predefinedProfileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the permissions for a predefiend profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> PredefinedProfilesPermissionsByIdAsyncWithHttpInfo (int? predefinedProfileId)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesPermissionsById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call updates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns></returns>
        public void PredefinedProfilesUpdatePredefinedProfile (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null)
        {
             PredefinedProfilesUpdatePredefinedProfileWithHttpInfo(predefinedProfileId, predefinedprofiledto);
        }

        /// <summary>
        /// This call updates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredefinedProfilesUpdatePredefinedProfileWithHttpInfo (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesUpdatePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (predefinedprofiledto != null && predefinedprofiledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(predefinedprofiledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predefinedprofiledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesUpdatePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredefinedProfilesUpdatePredefinedProfileAsync (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null)
        {
             await PredefinedProfilesUpdatePredefinedProfileAsyncWithHttpInfo(predefinedProfileId, predefinedprofiledto);

        }

        /// <summary>
        /// This call updates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesUpdatePredefinedProfileAsyncWithHttpInfo (int? predefinedProfileId, PredefinedProfileDTO predefinedprofiledto = null)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesUpdatePredefinedProfile");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (predefinedprofiledto != null && predefinedprofiledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(predefinedprofiledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predefinedprofiledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesUpdatePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates permissions for a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns></returns>
        public void PredefinedProfilesWritePermissionsById (int? predefinedProfileId, PermissionsDTO permissions)
        {
             PredefinedProfilesWritePermissionsByIdWithHttpInfo(predefinedProfileId, permissions);
        }

        /// <summary>
        /// This call updates permissions for a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredefinedProfilesWritePermissionsByIdWithHttpInfo (int? predefinedProfileId, PermissionsDTO permissions)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesWritePermissionsById");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling PredefinedProfilesApi->PredefinedProfilesWritePermissionsById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates permissions for a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredefinedProfilesWritePermissionsByIdAsync (int? predefinedProfileId, PermissionsDTO permissions)
        {
             await PredefinedProfilesWritePermissionsByIdAsyncWithHttpInfo(predefinedProfileId, permissions);

        }

        /// <summary>
        /// This call updates permissions for a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedProfileId">Predefined profile identifier</param>
        /// <param name="permissions">Permissions to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesWritePermissionsByIdAsyncWithHttpInfo (int? predefinedProfileId, PermissionsDTO permissions)
        {
            // verify the required parameter 'predefinedProfileId' is set
            if (predefinedProfileId == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileId' when calling PredefinedProfilesApi->PredefinedProfilesWritePermissionsById");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling PredefinedProfilesApi->PredefinedProfilesWritePermissionsById");

            var localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedProfileId != null) localVarPathParams.Add("predefinedProfileId", Configuration.ApiClient.ParameterToString(predefinedProfileId)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call creates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns></returns>
        public void PredefinedProfilesWritePredefinedProfile (PredefinedProfileDTO predefinedprofiledto = null)
        {
             PredefinedProfilesWritePredefinedProfileWithHttpInfo(predefinedprofiledto);
        }

        /// <summary>
        /// This call creates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredefinedProfilesWritePredefinedProfileWithHttpInfo (PredefinedProfileDTO predefinedprofiledto = null)
        {

            var localVarPath = "/api/PredefinedProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedprofiledto != null && predefinedprofiledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(predefinedprofiledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predefinedprofiledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesWritePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call creates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredefinedProfilesWritePredefinedProfileAsync (PredefinedProfileDTO predefinedprofiledto = null)
        {
             await PredefinedProfilesWritePredefinedProfileAsyncWithHttpInfo(predefinedprofiledto);

        }

        /// <summary>
        /// This call creates a predefined profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predefinedprofiledto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredefinedProfilesWritePredefinedProfileAsyncWithHttpInfo (PredefinedProfileDTO predefinedprofiledto = null)
        {

            var localVarPath = "/api/PredefinedProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predefinedprofiledto != null && predefinedprofiledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(predefinedprofiledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = predefinedprofiledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredefinedProfilesWritePredefinedProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
