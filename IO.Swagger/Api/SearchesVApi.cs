/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchesVApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesV2Delete ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV2DeleteWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        SearchConcreteDTO SearchesV2Get ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        ApiResponse<SearchConcreteDTO> SearchesV2GetWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>AdditionalFieldsListDTO</returns>
        AdditionalFieldsListDTO SearchesV2GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of AdditionalFieldsListDTO</returns>
        ApiResponse<AdditionalFieldsListDTO> SearchesV2GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        SearchConcreteDTO SearchesV2GetDefault ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        ApiResponse<SearchConcreteDTO> SearchesV2GetDefaultWithHttpInfo ();
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO SearchesV2GetFiltersForSearch (FieldValuesSearchConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> SearchesV2GetFiltersForSearchWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>string</returns>
        string SearchesV2GetFormulaForSearch (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchesV2GetFormulaForSearchWithHttpInfo (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        SearchConcreteDTO SearchesV2GetLastSearch ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        ApiResponse<SearchConcreteDTO> SearchesV2GetLastSearchWithHttpInfo ();
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV2GetSelect ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV2GetSelectWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV2GetSelect_0 (int? documentType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV2GetSelect_0WithHttpInfo (int? documentType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV2GetSelect_1 (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV2GetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO SearchesV2GetValuesForSearch (FieldValuesSearchConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> SearchesV2GetValuesForSearchWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call will search N profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> SearchesV2LastDocuments (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call will search N profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> SearchesV2LastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call will search profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> SearchesV2PostSearch (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call will search profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> SearchesV2PostSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        /// <summary>
        /// This call save the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns></returns>
        void SearchesV2PostSelect (SelectDTO selectDto);

        /// <summary>
        /// This call save the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV2PostSelectWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call eliminates a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesV2ResetSelect ();

        /// <summary>
        /// This call eliminates a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV2ResetSelectWithHttpInfo ();
        /// <summary>
        /// This call save the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns></returns>
        void SearchesV2SetDefaultSearch (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call save the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV2SetDefaultSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        /// <summary>
        /// This call save the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns></returns>
        void SearchesV2SetLastSearch (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call save the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV2SetLastSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV2DeleteAsync ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2DeleteAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of AdditionalFieldsListDTO</returns>
        System.Threading.Tasks.Task<AdditionalFieldsListDTO> SearchesV2GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (AdditionalFieldsListDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalFieldsListDTO>> SearchesV2GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetDefaultAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetDefaultAsyncWithHttpInfo ();
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> SearchesV2GetFiltersForSearchAsync (FieldValuesSearchConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> SearchesV2GetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchesV2GetFormulaForSearchAsync (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchesV2GetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetLastSearchAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetLastSearchAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelectAsync ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelect_0Async (int? documentType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelect_0AsyncWithHttpInfo (int? documentType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelect_1Async (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> SearchesV2GetValuesForSearchAsync (FieldValuesSearchConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesV2GetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call will search N profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> SearchesV2LastDocumentsAsync (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call will search N profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesV2LastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call will search profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> SearchesV2PostSearchAsync (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call will search profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesV2PostSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        /// <summary>
        /// This call save the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV2PostSelectAsync (SelectDTO selectDto);

        /// <summary>
        /// This call save the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2PostSelectAsyncWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call eliminates a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV2ResetSelectAsync ();

        /// <summary>
        /// This call eliminates a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2ResetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call save the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV2SetDefaultSearchAsync (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call save the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2SetDefaultSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        /// <summary>
        /// This call save the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV2SetLastSearchAsync (SearchConcreteCriteriaDto searchWebApiDto);

        /// <summary>
        /// This call save the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2SetLastSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchesVApi : ISearchesVApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesVApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchesVApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesVApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchesVApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesV2Delete ()
        {
             SearchesV2DeleteWithHttpInfo();
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV2DeleteWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV2DeleteAsync ()
        {
             await SearchesV2DeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2DeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        public SearchConcreteDTO SearchesV2Get ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = SearchesV2GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        public ApiResponse< SearchConcreteDTO > SearchesV2GetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        public async System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetAsync ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = await SearchesV2GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>AdditionalFieldsListDTO</returns>
        public AdditionalFieldsListDTO SearchesV2GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<AdditionalFieldsListDTO> localVarResponse = SearchesV2GetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of AdditionalFieldsListDTO</returns>
        public ApiResponse< AdditionalFieldsListDTO > SearchesV2GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");

            var localVarPath = "/api/v2/searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldsListDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldsListDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldsListDTO)));
            
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of AdditionalFieldsListDTO</returns>
        public async System.Threading.Tasks.Task<AdditionalFieldsListDTO> SearchesV2GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<AdditionalFieldsListDTO> localVarResponse = await SearchesV2GetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (AdditionalFieldsListDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalFieldsListDTO>> SearchesV2GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling SearchesVApi->SearchesV2GetAdditionalByClasse");

            var localVarPath = "/api/v2/searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldsListDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldsListDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldsListDTO)));
            
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        public SearchConcreteDTO SearchesV2GetDefault ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = SearchesV2GetDefaultWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        public ApiResponse< SearchConcreteDTO > SearchesV2GetDefaultWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetDefault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        public async System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetDefaultAsync ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = await SearchesV2GetDefaultAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetDefaultAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetDefault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO SearchesV2GetFiltersForSearch (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = SearchesV2GetFiltersForSearchWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > SearchesV2GetFiltersForSearchWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetFiltersForSearch");

            var localVarPath = "/api/v2/searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> SearchesV2GetFiltersForSearchAsync (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await SearchesV2GetFiltersForSearchAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> SearchesV2GetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetFiltersForSearch");

            var localVarPath = "/api/v2/searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>string</returns>
        public string SearchesV2GetFormulaForSearch (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<string> localVarResponse = SearchesV2GetFormulaForSearchWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchesV2GetFormulaForSearchWithHttpInfo (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetFormulaForSearch");

            var localVarPath = "/api/v2/searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchesV2GetFormulaForSearchAsync (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<string> localVarResponse = await SearchesV2GetFormulaForSearchAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchesV2GetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetFormulaForSearch");

            var localVarPath = "/api/v2/searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchConcreteDTO</returns>
        public SearchConcreteDTO SearchesV2GetLastSearch ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = SearchesV2GetLastSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        public ApiResponse< SearchConcreteDTO > SearchesV2GetLastSearchWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchConcreteDTO</returns>
        public async System.Threading.Tasks.Task<SearchConcreteDTO> SearchesV2GetLastSearchAsync ()
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = await SearchesV2GetLastSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> SearchesV2GetLastSearchAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV2GetSelect ()
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV2GetSelectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV2GetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelectAsync ()
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV2GetSelectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV2GetSelect_0 (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV2GetSelect_0WithHttpInfo(documentType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV2GetSelect_0WithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesVApi->SearchesV2GetSelect_0");

            var localVarPath = "/api/v2/searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelect_0Async (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV2GetSelect_0AsyncWithHttpInfo(documentType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelect_0AsyncWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesVApi->SearchesV2GetSelect_0");

            var localVarPath = "/api/v2/searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV2GetSelect_1 (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV2GetSelect_1WithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV2GetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesVApi->SearchesV2GetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesVApi->SearchesV2GetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesVApi->SearchesV2GetSelect_1");

            var localVarPath = "/api/v2/searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV2GetSelect_1Async (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV2GetSelect_1AsyncWithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType"></param>
        /// <param name="tipo2"></param>
        /// <param name="tipo3"></param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV2GetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesVApi->SearchesV2GetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesVApi->SearchesV2GetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesVApi->SearchesV2GetSelect_1");

            var localVarPath = "/api/v2/searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO SearchesV2GetValuesForSearch (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = SearchesV2GetValuesForSearchWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > SearchesV2GetValuesForSearchWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetValuesForSearch");

            var localVarPath = "/api/v2/searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> SearchesV2GetValuesForSearchAsync (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await SearchesV2GetValuesForSearchAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesV2GetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling SearchesVApi->SearchesV2GetValuesForSearch");

            var localVarPath = "/api/v2/searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2GetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This call will search N profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> SearchesV2LastDocuments (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = SearchesV2LastDocumentsWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call will search N profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > SearchesV2LastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesVApi->SearchesV2LastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesVApi->SearchesV2LastDocuments");

            var localVarPath = "/api/v2/searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (maxRows != null) localVarPathParams.Add("maxRows", Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2LastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
            
        }

        /// <summary>
        /// This call will search N profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> SearchesV2LastDocumentsAsync (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await SearchesV2LastDocumentsAsyncWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call will search N profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">int representing max rows to search</param>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesV2LastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesVApi->SearchesV2LastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesVApi->SearchesV2LastDocuments");

            var localVarPath = "/api/v2/searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (maxRows != null) localVarPathParams.Add("maxRows", Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2LastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
            
        }

        /// <summary>
        /// This call will search profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> SearchesV2PostSearch (SearchConcreteCriteriaDto searchWebApiDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = SearchesV2PostSearchWithHttpInfo(searchWebApiDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call will search profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > SearchesV2PostSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2PostSearch");

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2PostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
            
        }

        /// <summary>
        /// This call will search profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> SearchesV2PostSearchAsync (SearchConcreteCriteriaDto searchWebApiDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await SearchesV2PostSearchAsyncWithHttpInfo(searchWebApiDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call will search profiles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing the wanted search</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesV2PostSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2PostSearch");

            var localVarPath = "/api/v2/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2PostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
            
        }

        /// <summary>
        /// This call save the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns></returns>
        public void SearchesV2PostSelect (SelectDTO selectDto)
        {
             SearchesV2PostSelectWithHttpInfo(selectDto);
        }

        /// <summary>
        /// This call save the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV2PostSelectWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesVApi->SearchesV2PostSelect");

            var localVarPath = "/api/v2/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2PostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV2PostSelectAsync (SelectDTO selectDto)
        {
             await SearchesV2PostSelectAsyncWithHttpInfo(selectDto);

        }

        /// <summary>
        /// This call save the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Dto representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2PostSelectAsyncWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesVApi->SearchesV2PostSelect");

            var localVarPath = "/api/v2/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2PostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call eliminates a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesV2ResetSelect ()
        {
             SearchesV2ResetSelectWithHttpInfo();
        }

        /// <summary>
        /// This call eliminates a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV2ResetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2ResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call eliminates a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV2ResetSelectAsync ()
        {
             await SearchesV2ResetSelectAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call eliminates a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2ResetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2ResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns></returns>
        public void SearchesV2SetDefaultSearch (SearchConcreteCriteriaDto searchWebApiDto)
        {
             SearchesV2SetDefaultSearchWithHttpInfo(searchWebApiDto);
        }

        /// <summary>
        /// This call save the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV2SetDefaultSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2SetDefaultSearch");

            var localVarPath = "/api/v2/searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2SetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV2SetDefaultSearchAsync (SearchConcreteCriteriaDto searchWebApiDto)
        {
             await SearchesV2SetDefaultSearchAsyncWithHttpInfo(searchWebApiDto);

        }

        /// <summary>
        /// This call save the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2SetDefaultSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2SetDefaultSearch");

            var localVarPath = "/api/v2/searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2SetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns></returns>
        public void SearchesV2SetLastSearch (SearchConcreteCriteriaDto searchWebApiDto)
        {
             SearchesV2SetLastSearchWithHttpInfo(searchWebApiDto);
        }

        /// <summary>
        /// This call save the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV2SetLastSearchWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2SetLastSearch");

            var localVarPath = "/api/v2/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2SetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV2SetLastSearchAsync (SearchConcreteCriteriaDto searchWebApiDto)
        {
             await SearchesV2SetLastSearchAsyncWithHttpInfo(searchWebApiDto);

        }

        /// <summary>
        /// This call save the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchWebApiDto">Dto representing search and select</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV2SetLastSearchAsyncWithHttpInfo (SearchConcreteCriteriaDto searchWebApiDto)
        {
            // verify the required parameter 'searchWebApiDto' is set
            if (searchWebApiDto == null)
                throw new ApiException(400, "Missing required parameter 'searchWebApiDto' when calling SearchesVApi->SearchesV2SetLastSearch");

            var localVarPath = "/api/v2/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchWebApiDto != null && searchWebApiDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchWebApiDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchWebApiDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV2SetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
