/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        void AttachmentsAttachmentRevisionByRevision (int? attachmentId, int? revisionId);

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsAttachmentRevisionByRevisionWithHttpInfo (int? attachmentId, int? revisionId);
        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsConvertoToPrincipalDocument (int? attachmentId);

        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsConvertoToPrincipalDocumentWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsDelete (int? id);

        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        void AttachmentsDeleteRevision (int? revisionId);

        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsDeleteRevisionWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>List&lt;AttachmentDTO&gt;</returns>
        List<AttachmentDTO> AttachmentsGetByDocnumber (int? docnumber);

        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of List&lt;AttachmentDTO&gt;</returns>
        ApiResponse<List<AttachmentDTO>> AttachmentsGetByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentsDataSourceDTO</returns>
        AttachmentsDataSourceDTO AttachmentsGetByDocnumberForGrid (int? docnumber);

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentsDataSourceDTO</returns>
        ApiResponse<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsGetById (int? id);

        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>List&lt;AttachmentRevisionDTO&gt;</returns>
        List<AttachmentRevisionDTO> AttachmentsGetRevisionsByAttachmentId (int? attachmentId);

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of List&lt;AttachmentRevisionDTO&gt;</returns>
        ApiResponse<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsInsertExternal (string bufferid, int? docnumber, string comment);

        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsInsertExternalWithHttpInfo (string bufferid, int? docnumber, string comment);
        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsInsertInternal (int? attachmentDocnumber, int? docnumber);

        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsInsertInternalWithHttpInfo (int? attachmentDocnumber, int? docnumber);
        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO AttachmentsPermissionsById (int? id);

        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> AttachmentsPermissionsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns></returns>
        void AttachmentsPutAttachmentDocument (int? attachmentId, string bufferId);

        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsPutAttachmentDocumentWithHttpInfo (int? attachmentId, string bufferId);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns></returns>
        void AttachmentsUpdate (int? id, AttachmentDTO attachment);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsUpdateWithHttpInfo (int? id, AttachmentDTO attachment);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns></returns>
        void AttachmentsWritePermissionsById (int? id, PermissionsDTO permissions);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (int? id, PermissionsDTO permissions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsAttachmentRevisionByRevisionAsync (int? attachmentId, int? revisionId);

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo (int? attachmentId, int? revisionId);
        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsConvertoToPrincipalDocumentAsync (int? attachmentId);

        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsDeleteAsync (int? id);

        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsDeleteRevisionAsync (int? revisionId);

        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteRevisionAsyncWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of List&lt;AttachmentDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentDTO>> AttachmentsGetByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentDTO>>> AttachmentsGetByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentsDataSourceDTO</returns>
        System.Threading.Tasks.Task<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridAsync (int? docnumber);

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentsDataSourceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsDataSourceDTO>> AttachmentsGetByDocnumberForGridAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByIdAsync (int? id);

        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of List&lt;AttachmentRevisionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdAsync (int? attachmentId);

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentRevisionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentRevisionDTO>>> AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertExternalAsync (string bufferid, int? docnumber, string comment);

        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertExternalAsyncWithHttpInfo (string bufferid, int? docnumber, string comment);
        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertInternalAsync (int? attachmentDocnumber, int? docnumber);

        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertInternalAsyncWithHttpInfo (int? attachmentDocnumber, int? docnumber);
        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> AttachmentsPermissionsByIdAsync (int? id);

        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AttachmentsPermissionsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsPutAttachmentDocumentAsync (int? attachmentId, string bufferId);

        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsPutAttachmentDocumentAsyncWithHttpInfo (int? attachmentId, string bufferId);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsUpdateAsync (int? id, AttachmentDTO attachment);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (int? id, AttachmentDTO attachment);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (int? id, PermissionsDTO permissions);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (int? id, PermissionsDTO permissions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentsApi : IAttachmentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        public void AttachmentsAttachmentRevisionByRevision (int? attachmentId, int? revisionId)
        {
             AttachmentsAttachmentRevisionByRevisionWithHttpInfo(attachmentId, revisionId);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsAttachmentRevisionByRevisionWithHttpInfo (int? attachmentId, int? revisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsAttachmentRevisionByRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsAttachmentRevisionByRevisionAsync (int? attachmentId, int? revisionId)
        {
             await AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo(attachmentId, revisionId);

        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo (int? attachmentId, int? revisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsAttachmentRevisionByRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsConvertoToPrincipalDocument (int? attachmentId)
        {
             AttachmentsConvertoToPrincipalDocumentWithHttpInfo(attachmentId);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsConvertoToPrincipalDocumentWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsConvertoToPrincipalDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/convertToPrincipal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsConvertoToPrincipalDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsConvertoToPrincipalDocumentAsync (int? attachmentId)
        {
             await AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo(attachmentId);

        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsConvertoToPrincipalDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/convertToPrincipal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsConvertoToPrincipalDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsDelete (int? id)
        {
             AttachmentsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsDelete");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsDeleteAsync (int? id)
        {
             await AttachmentsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsDelete");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        public void AttachmentsDeleteRevision (int? revisionId)
        {
             AttachmentsDeleteRevisionWithHttpInfo(revisionId);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsDeleteRevisionWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsDeleteRevision");

            var localVarPath = "/api/Attachments/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDeleteRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsDeleteRevisionAsync (int? revisionId)
        {
             await AttachmentsDeleteRevisionAsyncWithHttpInfo(revisionId);

        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteRevisionAsyncWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsDeleteRevision");

            var localVarPath = "/api/Attachments/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDeleteRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>List&lt;AttachmentDTO&gt;</returns>
        public List<AttachmentDTO> AttachmentsGetByDocnumber (int? docnumber)
        {
             ApiResponse<List<AttachmentDTO>> localVarResponse = AttachmentsGetByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of List&lt;AttachmentDTO&gt;</returns>
        public ApiResponse< List<AttachmentDTO> > AttachmentsGetByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumber");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDTO>)));
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of List&lt;AttachmentDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentDTO>> AttachmentsGetByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<AttachmentDTO>> localVarResponse = await AttachmentsGetByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentDTO>>> AttachmentsGetByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumber");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDTO>)));
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentsDataSourceDTO</returns>
        public AttachmentsDataSourceDTO AttachmentsGetByDocnumberForGrid (int? docnumber)
        {
             ApiResponse<AttachmentsDataSourceDTO> localVarResponse = AttachmentsGetByDocnumberForGridWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentsDataSourceDTO</returns>
        public ApiResponse< AttachmentsDataSourceDTO > AttachmentsGetByDocnumberForGridWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumberForGrid");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}/grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumberForGrid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsDataSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsDataSourceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsDataSourceDTO)));
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentsDataSourceDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridAsync (int? docnumber)
        {
             ApiResponse<AttachmentsDataSourceDTO> localVarResponse = await AttachmentsGetByDocnumberForGridAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentsDataSourceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsDataSourceDTO>> AttachmentsGetByDocnumberForGridAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumberForGrid");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}/grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumberForGrid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsDataSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsDataSourceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsDataSourceDTO)));
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsGetById (int? id)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsGetById");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByIdAsync (int? id)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsGetById");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>List&lt;AttachmentRevisionDTO&gt;</returns>
        public List<AttachmentRevisionDTO> AttachmentsGetRevisionsByAttachmentId (int? attachmentId)
        {
             ApiResponse<List<AttachmentRevisionDTO>> localVarResponse = AttachmentsGetRevisionsByAttachmentIdWithHttpInfo(attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of List&lt;AttachmentRevisionDTO&gt;</returns>
        public ApiResponse< List<AttachmentRevisionDTO> > AttachmentsGetRevisionsByAttachmentIdWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsGetRevisionsByAttachmentId");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetRevisionsByAttachmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentRevisionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentRevisionDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentRevisionDTO>)));
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of List&lt;AttachmentRevisionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdAsync (int? attachmentId)
        {
             ApiResponse<List<AttachmentRevisionDTO>> localVarResponse = await AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo(attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentRevisionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentRevisionDTO>>> AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsGetRevisionsByAttachmentId");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetRevisionsByAttachmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentRevisionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentRevisionDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentRevisionDTO>)));
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsInsertExternal (string bufferid, int? docnumber, string comment)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsInsertExternalWithHttpInfo(bufferid, docnumber, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsInsertExternalWithHttpInfo (string bufferid, int? docnumber, string comment)
        {
            // verify the required parameter 'bufferid' is set
            if (bufferid == null)
                throw new ApiException(400, "Missing required parameter 'bufferid' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling AttachmentsApi->AttachmentsInsertExternal");

            var localVarPath = "/api/Attachments/InsertExternal/{bufferid}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferid != null) localVarPathParams.Add("bufferid", Configuration.ApiClient.ParameterToString(bufferid)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertExternalAsync (string bufferid, int? docnumber, string comment)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsInsertExternalAsyncWithHttpInfo(bufferid, docnumber, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <param name="comment">Comment for the new attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertExternalAsyncWithHttpInfo (string bufferid, int? docnumber, string comment)
        {
            // verify the required parameter 'bufferid' is set
            if (bufferid == null)
                throw new ApiException(400, "Missing required parameter 'bufferid' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling AttachmentsApi->AttachmentsInsertExternal");

            var localVarPath = "/api/Attachments/InsertExternal/{bufferid}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferid != null) localVarPathParams.Add("bufferid", Configuration.ApiClient.ParameterToString(bufferid)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsInsertInternal (int? attachmentDocnumber, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsInsertInternalWithHttpInfo(attachmentDocnumber, docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsInsertInternalWithHttpInfo (int? attachmentDocnumber, int? docnumber)
        {
            // verify the required parameter 'attachmentDocnumber' is set
            if (attachmentDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachmentDocnumber' when calling AttachmentsApi->AttachmentsInsertInternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertInternal");

            var localVarPath = "/api/Attachments/InsertInternal/{attachmentDocnumber}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentDocnumber != null) localVarPathParams.Add("attachmentDocnumber", Configuration.ApiClient.ParameterToString(attachmentDocnumber)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertInternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertInternalAsync (int? attachmentDocnumber, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsInsertInternalAsyncWithHttpInfo(attachmentDocnumber, docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertInternalAsyncWithHttpInfo (int? attachmentDocnumber, int? docnumber)
        {
            // verify the required parameter 'attachmentDocnumber' is set
            if (attachmentDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachmentDocnumber' when calling AttachmentsApi->AttachmentsInsertInternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertInternal");

            var localVarPath = "/api/Attachments/InsertInternal/{attachmentDocnumber}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentDocnumber != null) localVarPathParams.Add("attachmentDocnumber", Configuration.ApiClient.ParameterToString(attachmentDocnumber)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertInternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO AttachmentsPermissionsById (int? id)
        {
             ApiResponse<PermissionsDTO> localVarResponse = AttachmentsPermissionsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > AttachmentsPermissionsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsPermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> AttachmentsPermissionsByIdAsync (int? id)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await AttachmentsPermissionsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AttachmentsPermissionsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsPermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns></returns>
        public void AttachmentsPutAttachmentDocument (int? attachmentId, string bufferId)
        {
             AttachmentsPutAttachmentDocumentWithHttpInfo(attachmentId, bufferId);
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsPutAttachmentDocumentWithHttpInfo (int? attachmentId, string bufferId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/Document/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPutAttachmentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsPutAttachmentDocumentAsync (int? attachmentId, string bufferId)
        {
             await AttachmentsPutAttachmentDocumentAsyncWithHttpInfo(attachmentId, bufferId);

        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsPutAttachmentDocumentAsyncWithHttpInfo (int? attachmentId, string bufferId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/Document/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPutAttachmentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns></returns>
        public void AttachmentsUpdate (int? id, AttachmentDTO attachment)
        {
             AttachmentsUpdateWithHttpInfo(id, attachment);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsUpdateWithHttpInfo (int? id, AttachmentDTO attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsUpdateAsync (int? id, AttachmentDTO attachment)
        {
             await AttachmentsUpdateAsyncWithHttpInfo(id, attachment);

        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="attachment">Object that indicates the attachment data to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (int? id, AttachmentDTO attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns></returns>
        public void AttachmentsWritePermissionsById (int? id, PermissionsDTO permissions)
        {
             AttachmentsWritePermissionsByIdWithHttpInfo(id, permissions);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (int? id, PermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (int? id, PermissionsDTO permissions)
        {
             await AttachmentsWritePermissionsByIdAsyncWithHttpInfo(id, permissions);

        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <param name="permissions">Permission data to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (int? id, PermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
