/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIxServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method return the possibility for user to delete a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>AccumulationPackageDeleteStatus</returns>
        AccumulationPackageDeleteStatus IxServicesCanDeleteAccumulationPackage (int? accumulationPackageId);

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>ApiResponse of AccumulationPackageDeleteStatus</returns>
        ApiResponse<AccumulationPackageDeleteStatus> IxServicesCanDeleteAccumulationPackageWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>AccumulationPackageDocumentDeleteStatus</returns>
        AccumulationPackageDocumentDeleteStatus IxServicesCanDeleteAccumulationPackageDocument (int? accumulationPackageDocumentId);

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>ApiResponse of AccumulationPackageDocumentDeleteStatus</returns>
        ApiResponse<AccumulationPackageDocumentDeleteStatus> IxServicesCanDeleteAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// This method deletes a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns></returns>
        void IxServicesDeleteAccumulationPackage (int? accumulationPackageId);

        /// <summary>
        /// This method deletes a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesDeleteAccumulationPackageWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This method deletes a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns></returns>
        void IxServicesDeleteAccumulationPackageDocument (int? accumulationPackageDocumentId);

        /// <summary>
        /// This method deletes a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesDeleteAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns></returns>
        void IxServicesDetachAccumulationPackage (int? accumulationPackageId);

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesDetachAccumulationPackageWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns></returns>
        void IxServicesDetachAccumulationPackageDocument (int? accumulationPackageDocumentId);

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesDetachAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        List<AccumulationPackageDocumentValidationDTO> IxServicesGetAccumulationPackageDocumentValidationByDate (DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>ApiResponse of List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        ApiResponse<List<AccumulationPackageDocumentValidationDTO>> IxServicesGetAccumulationPackageDocumentValidationByDateWithHttpInfo (DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>List&lt;AccumulationPackageDTO&gt;</returns>
        List<AccumulationPackageDTO> IxServicesGetByAoo (string businessUnitCode);

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>ApiResponse of List&lt;AccumulationPackageDTO&gt;</returns>
        ApiResponse<List<AccumulationPackageDTO>> IxServicesGetByAooWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>List&lt;IxCeDocumentDTO&gt;</returns>
        List<IxCeDocumentDTO> IxServicesGetDocumentsByAccumulationPackageId (int? accumulationPackageId);

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>ApiResponse of List&lt;IxCeDocumentDTO&gt;</returns>
        ApiResponse<List<IxCeDocumentDTO>> IxServicesGetDocumentsByAccumulationPackageIdWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        List<IxCeDocumentCompleteDTO> IxServicesGetIxCeCompleteDetailsByDocnumber (int? docnumber);

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>ApiResponse of List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        ApiResponse<List<IxCeDocumentCompleteDTO>> IxServicesGetIxCeCompleteDetailsByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        List<IxFeDocumentCompleteDTO> IxServicesGetIxFeCompleteDetailsByDocnumber (int? docnumber);

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>ApiResponse of List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        ApiResponse<List<IxFeDocumentCompleteDTO>> IxServicesGetIxFeCompleteDetailsByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        void IxServicesSendOutcomeByDocnumber (SendOutcomeRequestDTO request);

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesSendOutcomeByDocnumberWithHttpInfo (SendOutcomeRequestDTO request);
        /// <summary>
        /// This call send docnumbers to IX-FE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>IxFeSendResponseDTO</returns>
        IxFeSendResponseDTO IxServicesSendToIx (IxFeSendRequestDTO request);

        /// <summary>
        /// This call send docnumbers to IX-FE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of IxFeSendResponseDTO</returns>
        ApiResponse<IxFeSendResponseDTO> IxServicesSendToIxWithHttpInfo (IxFeSendRequestDTO request);
        /// <summary>
        /// This call send docnumbers to IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        void IxServicesSendToIxCe (SendToIxCeRequestDTO request);

        /// <summary>
        /// This call send docnumbers to IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesSendToIxCeWithHttpInfo (SendToIxCeRequestDTO request);
        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>bool?</returns>
        bool? IxServicesSendToIxFeSignRequired (SendToIxFeSignRequiredRequestDto request);

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IxServicesSendToIxFeSignRequiredWithHttpInfo (SendToIxFeSignRequiredRequestDto request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method return the possibility for user to delete a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>Task of AccumulationPackageDeleteStatus</returns>
        System.Threading.Tasks.Task<AccumulationPackageDeleteStatus> IxServicesCanDeleteAccumulationPackageAsync (int? accumulationPackageId);

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>Task of ApiResponse (AccumulationPackageDeleteStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccumulationPackageDeleteStatus>> IxServicesCanDeleteAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of AccumulationPackageDocumentDeleteStatus</returns>
        System.Threading.Tasks.Task<AccumulationPackageDocumentDeleteStatus> IxServicesCanDeleteAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId);

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of ApiResponse (AccumulationPackageDocumentDeleteStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccumulationPackageDocumentDeleteStatus>> IxServicesCanDeleteAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// This method deletes a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesDeleteAccumulationPackageAsync (int? accumulationPackageId);

        /// <summary>
        /// This method deletes a accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDeleteAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This method deletes a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesDeleteAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId);

        /// <summary>
        /// This method deletes a document in an accumulation package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDeleteAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesDetachAccumulationPackageAsync (int? accumulationPackageId);

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDetachAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesDetachAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId);

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDetachAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId);
        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>Task of List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AccumulationPackageDocumentValidationDTO>> IxServicesGetAccumulationPackageDocumentValidationByDateAsync (DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>Task of ApiResponse (List&lt;AccumulationPackageDocumentValidationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccumulationPackageDocumentValidationDTO>>> IxServicesGetAccumulationPackageDocumentValidationByDateAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>Task of List&lt;AccumulationPackageDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AccumulationPackageDTO>> IxServicesGetByAooAsync (string businessUnitCode);

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>Task of ApiResponse (List&lt;AccumulationPackageDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccumulationPackageDTO>>> IxServicesGetByAooAsyncWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>Task of List&lt;IxCeDocumentDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeDocumentDTO>> IxServicesGetDocumentsByAccumulationPackageIdAsync (int? accumulationPackageId);

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeDocumentDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeDocumentDTO>>> IxServicesGetDocumentsByAccumulationPackageIdAsyncWithHttpInfo (int? accumulationPackageId);
        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeDocumentCompleteDTO>> IxServicesGetIxCeCompleteDetailsByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeDocumentCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeDocumentCompleteDTO>>> IxServicesGetIxCeCompleteDetailsByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeDocumentCompleteDTO>> IxServicesGetIxFeCompleteDetailsByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeDocumentCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeDocumentCompleteDTO>>> IxServicesGetIxFeCompleteDetailsByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesSendOutcomeByDocnumberAsync (SendOutcomeRequestDTO request);

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesSendOutcomeByDocnumberAsyncWithHttpInfo (SendOutcomeRequestDTO request);
        /// <summary>
        /// This call send docnumbers to IX-FE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of IxFeSendResponseDTO</returns>
        System.Threading.Tasks.Task<IxFeSendResponseDTO> IxServicesSendToIxAsync (IxFeSendRequestDTO request);

        /// <summary>
        /// This call send docnumbers to IX-FE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (IxFeSendResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeSendResponseDTO>> IxServicesSendToIxAsyncWithHttpInfo (IxFeSendRequestDTO request);
        /// <summary>
        /// This call send docnumbers to IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesSendToIxCeAsync (SendToIxCeRequestDTO request);

        /// <summary>
        /// This call send docnumbers to IX-CE services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesSendToIxCeAsyncWithHttpInfo (SendToIxCeRequestDTO request);
        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IxServicesSendToIxFeSignRequiredAsync (SendToIxFeSignRequiredRequestDto request);

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IxServicesSendToIxFeSignRequiredAsyncWithHttpInfo (SendToIxFeSignRequiredRequestDto request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IxServicesApi : IIxServicesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IxServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IxServicesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IxServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IxServicesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>AccumulationPackageDeleteStatus</returns>
        public AccumulationPackageDeleteStatus IxServicesCanDeleteAccumulationPackage (int? accumulationPackageId)
        {
             ApiResponse<AccumulationPackageDeleteStatus> localVarResponse = IxServicesCanDeleteAccumulationPackageWithHttpInfo(accumulationPackageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>ApiResponse of AccumulationPackageDeleteStatus</returns>
        public ApiResponse< AccumulationPackageDeleteStatus > IxServicesCanDeleteAccumulationPackageWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesCanDeleteAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/CanDelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesCanDeleteAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulationPackageDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccumulationPackageDeleteStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulationPackageDeleteStatus)));
        }

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>Task of AccumulationPackageDeleteStatus</returns>
        public async System.Threading.Tasks.Task<AccumulationPackageDeleteStatus> IxServicesCanDeleteAccumulationPackageAsync (int? accumulationPackageId)
        {
             ApiResponse<AccumulationPackageDeleteStatus> localVarResponse = await IxServicesCanDeleteAccumulationPackageAsyncWithHttpInfo(accumulationPackageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the possibility for user to delete a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the accumulation package</param>
        /// <returns>Task of ApiResponse (AccumulationPackageDeleteStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccumulationPackageDeleteStatus>> IxServicesCanDeleteAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesCanDeleteAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/CanDelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesCanDeleteAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulationPackageDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccumulationPackageDeleteStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulationPackageDeleteStatus)));
        }

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>AccumulationPackageDocumentDeleteStatus</returns>
        public AccumulationPackageDocumentDeleteStatus IxServicesCanDeleteAccumulationPackageDocument (int? accumulationPackageDocumentId)
        {
             ApiResponse<AccumulationPackageDocumentDeleteStatus> localVarResponse = IxServicesCanDeleteAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>ApiResponse of AccumulationPackageDocumentDeleteStatus</returns>
        public ApiResponse< AccumulationPackageDocumentDeleteStatus > IxServicesCanDeleteAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesCanDeleteAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/CanDelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesCanDeleteAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulationPackageDocumentDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccumulationPackageDocumentDeleteStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulationPackageDocumentDeleteStatus)));
        }

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of AccumulationPackageDocumentDeleteStatus</returns>
        public async System.Threading.Tasks.Task<AccumulationPackageDocumentDeleteStatus> IxServicesCanDeleteAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId)
        {
             ApiResponse<AccumulationPackageDocumentDeleteStatus> localVarResponse = await IxServicesCanDeleteAccumulationPackageDocumentAsyncWithHttpInfo(accumulationPackageDocumentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the possibility for user to delete a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of ApiResponse (AccumulationPackageDocumentDeleteStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccumulationPackageDocumentDeleteStatus>> IxServicesCanDeleteAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesCanDeleteAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/CanDelete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesCanDeleteAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulationPackageDocumentDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccumulationPackageDocumentDeleteStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulationPackageDocumentDeleteStatus)));
        }

        /// <summary>
        /// This method deletes a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns></returns>
        public void IxServicesDeleteAccumulationPackage (int? accumulationPackageId)
        {
             IxServicesDeleteAccumulationPackageWithHttpInfo(accumulationPackageId);
        }

        /// <summary>
        /// This method deletes a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesDeleteAccumulationPackageWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesDeleteAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDeleteAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesDeleteAccumulationPackageAsync (int? accumulationPackageId)
        {
             await IxServicesDeleteAccumulationPackageAsyncWithHttpInfo(accumulationPackageId);

        }

        /// <summary>
        /// This method deletes a accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The id of the package</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDeleteAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesDeleteAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDeleteAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns></returns>
        public void IxServicesDeleteAccumulationPackageDocument (int? accumulationPackageDocumentId)
        {
             IxServicesDeleteAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
        }

        /// <summary>
        /// This method deletes a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesDeleteAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesDeleteAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDeleteAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesDeleteAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId)
        {
             await IxServicesDeleteAccumulationPackageDocumentAsyncWithHttpInfo(accumulationPackageDocumentId);

        }

        /// <summary>
        /// This method deletes a document in an accumulation package 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The id of the document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDeleteAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesDeleteAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDeleteAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns></returns>
        public void IxServicesDetachAccumulationPackage (int? accumulationPackageId)
        {
             IxServicesDetachAccumulationPackageWithHttpInfo(accumulationPackageId);
        }

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesDetachAccumulationPackageWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesDetachAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/Detach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDetachAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesDetachAccumulationPackageAsync (int? accumulationPackageId)
        {
             await IxServicesDetachAccumulationPackageAsyncWithHttpInfo(accumulationPackageId);

        }

        /// <summary>
        /// Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDetachAccumulationPackageAsyncWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesDetachAccumulationPackage");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/Detach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDetachAccumulationPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns></returns>
        public void IxServicesDetachAccumulationPackageDocument (int? accumulationPackageDocumentId)
        {
             IxServicesDetachAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
        }

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesDetachAccumulationPackageDocumentWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesDetachAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/Detach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDetachAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesDetachAccumulationPackageDocumentAsync (int? accumulationPackageDocumentId)
        {
             await IxServicesDetachAccumulationPackageDocumentAsyncWithHttpInfo(accumulationPackageDocumentId);

        }

        /// <summary>
        /// Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageDocumentId">The code of the accumulation package document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesDetachAccumulationPackageDocumentAsyncWithHttpInfo (int? accumulationPackageDocumentId)
        {
            // verify the required parameter 'accumulationPackageDocumentId' is set
            if (accumulationPackageDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageDocumentId' when calling IxServicesApi->IxServicesDetachAccumulationPackageDocument");

            var localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/Detach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageDocumentId != null) localVarPathParams.Add("accumulationPackageDocumentId", Configuration.ApiClient.ParameterToString(accumulationPackageDocumentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesDetachAccumulationPackageDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        public List<AccumulationPackageDocumentValidationDTO> IxServicesGetAccumulationPackageDocumentValidationByDate (DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<List<AccumulationPackageDocumentValidationDTO>> localVarResponse = IxServicesGetAccumulationPackageDocumentValidationByDateWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>ApiResponse of List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        public ApiResponse< List<AccumulationPackageDocumentValidationDTO> > IxServicesGetAccumulationPackageDocumentValidationByDateWithHttpInfo (DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling IxServicesApi->IxServicesGetAccumulationPackageDocumentValidationByDate");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling IxServicesApi->IxServicesGetAccumulationPackageDocumentValidationByDate");

            var localVarPath = "/api/IxServices/Validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetAccumulationPackageDocumentValidationByDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccumulationPackageDocumentValidationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccumulationPackageDocumentValidationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccumulationPackageDocumentValidationDTO>)));
        }

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>Task of List&lt;AccumulationPackageDocumentValidationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccumulationPackageDocumentValidationDTO>> IxServicesGetAccumulationPackageDocumentValidationByDateAsync (DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<List<AccumulationPackageDocumentValidationDTO>> localVarResponse = await IxServicesGetAccumulationPackageDocumentValidationByDateAsyncWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the status of the validations for accumulation package documents in a range of date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <returns>Task of ApiResponse (List&lt;AccumulationPackageDocumentValidationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AccumulationPackageDocumentValidationDTO>>> IxServicesGetAccumulationPackageDocumentValidationByDateAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling IxServicesApi->IxServicesGetAccumulationPackageDocumentValidationByDate");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling IxServicesApi->IxServicesGetAccumulationPackageDocumentValidationByDate");

            var localVarPath = "/api/IxServices/Validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetAccumulationPackageDocumentValidationByDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccumulationPackageDocumentValidationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccumulationPackageDocumentValidationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccumulationPackageDocumentValidationDTO>)));
        }

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>List&lt;AccumulationPackageDTO&gt;</returns>
        public List<AccumulationPackageDTO> IxServicesGetByAoo (string businessUnitCode)
        {
             ApiResponse<List<AccumulationPackageDTO>> localVarResponse = IxServicesGetByAooWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>ApiResponse of List&lt;AccumulationPackageDTO&gt;</returns>
        public ApiResponse< List<AccumulationPackageDTO> > IxServicesGetByAooWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxServicesApi->IxServicesGetByAoo");

            var localVarPath = "/api/IxServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetByAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccumulationPackageDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccumulationPackageDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccumulationPackageDTO>)));
        }

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>Task of List&lt;AccumulationPackageDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccumulationPackageDTO>> IxServicesGetByAooAsync (string businessUnitCode)
        {
             ApiResponse<List<AccumulationPackageDTO>> localVarResponse = await IxServicesGetByAooAsyncWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the accumulation packages contained in IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">The code of the business unit</param>
        /// <returns>Task of ApiResponse (List&lt;AccumulationPackageDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AccumulationPackageDTO>>> IxServicesGetByAooAsyncWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxServicesApi->IxServicesGetByAoo");

            var localVarPath = "/api/IxServices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetByAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccumulationPackageDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccumulationPackageDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccumulationPackageDTO>)));
        }

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>List&lt;IxCeDocumentDTO&gt;</returns>
        public List<IxCeDocumentDTO> IxServicesGetDocumentsByAccumulationPackageId (int? accumulationPackageId)
        {
             ApiResponse<List<IxCeDocumentDTO>> localVarResponse = IxServicesGetDocumentsByAccumulationPackageIdWithHttpInfo(accumulationPackageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>ApiResponse of List&lt;IxCeDocumentDTO&gt;</returns>
        public ApiResponse< List<IxCeDocumentDTO> > IxServicesGetDocumentsByAccumulationPackageIdWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesGetDocumentsByAccumulationPackageId");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetDocumentsByAccumulationPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeDocumentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeDocumentDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeDocumentDTO>)));
        }

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>Task of List&lt;IxCeDocumentDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeDocumentDTO>> IxServicesGetDocumentsByAccumulationPackageIdAsync (int? accumulationPackageId)
        {
             ApiResponse<List<IxCeDocumentDTO>> localVarResponse = await IxServicesGetDocumentsByAccumulationPackageIdAsyncWithHttpInfo(accumulationPackageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the document contained in IX-CE accumulation packages 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accumulationPackageId">The code of the accumulation package</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeDocumentDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeDocumentDTO>>> IxServicesGetDocumentsByAccumulationPackageIdAsyncWithHttpInfo (int? accumulationPackageId)
        {
            // verify the required parameter 'accumulationPackageId' is set
            if (accumulationPackageId == null)
                throw new ApiException(400, "Missing required parameter 'accumulationPackageId' when calling IxServicesApi->IxServicesGetDocumentsByAccumulationPackageId");

            var localVarPath = "/api/IxServices/{accumulationPackageId}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accumulationPackageId != null) localVarPathParams.Add("accumulationPackageId", Configuration.ApiClient.ParameterToString(accumulationPackageId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetDocumentsByAccumulationPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeDocumentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeDocumentDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeDocumentDTO>)));
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        public List<IxCeDocumentCompleteDTO> IxServicesGetIxCeCompleteDetailsByDocnumber (int? docnumber)
        {
             ApiResponse<List<IxCeDocumentCompleteDTO>> localVarResponse = IxServicesGetIxCeCompleteDetailsByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>ApiResponse of List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        public ApiResponse< List<IxCeDocumentCompleteDTO> > IxServicesGetIxCeCompleteDetailsByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling IxServicesApi->IxServicesGetIxCeCompleteDetailsByDocnumber");

            var localVarPath = "/api/IxServices/Document/{docnumber}/IxCeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetIxCeCompleteDetailsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeDocumentCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeDocumentCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeDocumentCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of List&lt;IxCeDocumentCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeDocumentCompleteDTO>> IxServicesGetIxCeCompleteDetailsByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<IxCeDocumentCompleteDTO>> localVarResponse = await IxServicesGetIxCeCompleteDetailsByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-CE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeDocumentCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeDocumentCompleteDTO>>> IxServicesGetIxCeCompleteDetailsByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling IxServicesApi->IxServicesGetIxCeCompleteDetailsByDocnumber");

            var localVarPath = "/api/IxServices/Document/{docnumber}/IxCeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetIxCeCompleteDetailsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeDocumentCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeDocumentCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeDocumentCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        public List<IxFeDocumentCompleteDTO> IxServicesGetIxFeCompleteDetailsByDocnumber (int? docnumber)
        {
             ApiResponse<List<IxFeDocumentCompleteDTO>> localVarResponse = IxServicesGetIxFeCompleteDetailsByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>ApiResponse of List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        public ApiResponse< List<IxFeDocumentCompleteDTO> > IxServicesGetIxFeCompleteDetailsByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling IxServicesApi->IxServicesGetIxFeCompleteDetailsByDocnumber");

            var localVarPath = "/api/IxServices/Document/{docnumber}/IxFeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetIxFeCompleteDetailsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeDocumentCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeDocumentCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeDocumentCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of List&lt;IxFeDocumentCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeDocumentCompleteDTO>> IxServicesGetIxFeCompleteDetailsByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<IxFeDocumentCompleteDTO>> localVarResponse = await IxServicesGetIxFeCompleteDetailsByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the information about a document sent to IX-FE Service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeDocumentCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeDocumentCompleteDTO>>> IxServicesGetIxFeCompleteDetailsByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling IxServicesApi->IxServicesGetIxFeCompleteDetailsByDocnumber");

            var localVarPath = "/api/IxServices/Document/{docnumber}/IxFeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesGetIxFeCompleteDetailsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeDocumentCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeDocumentCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeDocumentCompleteDTO>)));
        }

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        public void IxServicesSendOutcomeByDocnumber (SendOutcomeRequestDTO request)
        {
             IxServicesSendOutcomeByDocnumberWithHttpInfo(request);
        }

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesSendOutcomeByDocnumberWithHttpInfo (SendOutcomeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendOutcomeByDocnumber");

            var localVarPath = "/api/IxServices/SendOutcome";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendOutcomeByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesSendOutcomeByDocnumberAsync (SendOutcomeRequestDTO request)
        {
             await IxServicesSendOutcomeByDocnumberAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// This call send an outcome value for a docnumber (for invoice from IX-CE service) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesSendOutcomeByDocnumberAsyncWithHttpInfo (SendOutcomeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendOutcomeByDocnumber");

            var localVarPath = "/api/IxServices/SendOutcome";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendOutcomeByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call send docnumbers to IX-FE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>IxFeSendResponseDTO</returns>
        public IxFeSendResponseDTO IxServicesSendToIx (IxFeSendRequestDTO request)
        {
             ApiResponse<IxFeSendResponseDTO> localVarResponse = IxServicesSendToIxWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call send docnumbers to IX-FE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of IxFeSendResponseDTO</returns>
        public ApiResponse< IxFeSendResponseDTO > IxServicesSendToIxWithHttpInfo (IxFeSendRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIx");

            var localVarPath = "/api/IxServices/SendToIxFe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendResponseDTO)));
        }

        /// <summary>
        /// This call send docnumbers to IX-FE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of IxFeSendResponseDTO</returns>
        public async System.Threading.Tasks.Task<IxFeSendResponseDTO> IxServicesSendToIxAsync (IxFeSendRequestDTO request)
        {
             ApiResponse<IxFeSendResponseDTO> localVarResponse = await IxServicesSendToIxAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call send docnumbers to IX-FE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (IxFeSendResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeSendResponseDTO>> IxServicesSendToIxAsyncWithHttpInfo (IxFeSendRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIx");

            var localVarPath = "/api/IxServices/SendToIxFe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendResponseDTO)));
        }

        /// <summary>
        /// This call send docnumbers to IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        public void IxServicesSendToIxCe (SendToIxCeRequestDTO request)
        {
             IxServicesSendToIxCeWithHttpInfo(request);
        }

        /// <summary>
        /// This call send docnumbers to IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesSendToIxCeWithHttpInfo (SendToIxCeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIxCe");

            var localVarPath = "/api/IxServices/SendToIxCe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call send docnumbers to IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesSendToIxCeAsync (SendToIxCeRequestDTO request)
        {
             await IxServicesSendToIxCeAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// This call send docnumbers to IX-CE services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesSendToIxCeAsyncWithHttpInfo (SendToIxCeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIxCe");

            var localVarPath = "/api/IxServices/SendToIxCe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>bool?</returns>
        public bool? IxServicesSendToIxFeSignRequired (SendToIxFeSignRequiredRequestDto request)
        {
             ApiResponse<bool?> localVarResponse = IxServicesSendToIxFeSignRequiredWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IxServicesSendToIxFeSignRequiredWithHttpInfo (SendToIxFeSignRequiredRequestDto request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIxFeSignRequired");

            var localVarPath = "/api/IxServices/SendToIxFeSignRequired";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIxFeSignRequired", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IxServicesSendToIxFeSignRequiredAsync (SendToIxFeSignRequiredRequestDto request)
        {
             ApiResponse<bool?> localVarResponse = await IxServicesSendToIxFeSignRequiredAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checks is the docnumber list must be signed before being sent to IX-FE 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IxServicesSendToIxFeSignRequiredAsyncWithHttpInfo (SendToIxFeSignRequiredRequestDto request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling IxServicesApi->IxServicesSendToIxFeSignRequired");

            var localVarPath = "/api/IxServices/SendToIxFeSignRequired";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesSendToIxFeSignRequired", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
