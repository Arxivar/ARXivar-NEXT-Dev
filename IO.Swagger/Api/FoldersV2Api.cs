/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns></returns>
        void FoldersV2AutoinsertInFolderByDocnumber (int? docnumber);

        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2AutoinsertInFolderByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns></returns>
        void FoldersV2Delete (int? id);

        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2DeleteWithHttpInfo (int? id);
        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns></returns>
        void FoldersV2DeleteArxDriveConfiguration (int? id);

        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2DeleteArxDriveConfigurationWithHttpInfo (int? id);
        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersV2FindByDocnumber (int? docnumber);

        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersV2FindByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersV2FindByName (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersV2FindByNameWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersV2FindByNameOld (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersV2FindByNameOldWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersV2FindInFolderByName (int? id, string name);

        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersV2FindInFolderByNameWithHttpInfo (int? id, string name);
        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderArchiveModeInfo</returns>
        FolderArchiveModeInfo FoldersV2GetArchiveInfo (int? id);

        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderArchiveModeInfo</returns>
        ApiResponse<FolderArchiveModeInfo> FoldersV2GetArchiveInfoWithHttpInfo (int? id);
        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ArxDriveFolderModeInfo</returns>
        ArxDriveFolderModeInfo FoldersV2GetArxDriveConfiguration (int? id);

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of ArxDriveFolderModeInfo</returns>
        ApiResponse<ArxDriveFolderModeInfo> FoldersV2GetArxDriveConfigurationWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersV2GetById (int? id);

        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersV2GetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        List<FolderDTO> FoldersV2GetByParentId (int? parentId);

        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        ApiResponse<List<FolderDTO>> FoldersV2GetByParentIdWithHttpInfo (int? parentId);
        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Object</returns>
        Object FoldersV2GetDocumentsById (int? id, SelectDTO select);

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FoldersV2GetDocumentsByIdWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderPermissionsDTO</returns>
        FolderPermissionsDTO FoldersV2GetFolderPermission (int? id);

        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderPermissionsDTO</returns>
        ApiResponse<FolderPermissionsDTO> FoldersV2GetFolderPermissionWithHttpInfo (int? id);
        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns></returns>
        void FoldersV2InsertDocnumbers (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2InsertDocnumbersWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns></returns>
        void FoldersV2Move (int? id, int? parentid);

        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2MoveWithHttpInfo (int? id, int? parentid);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersV2New (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersV2NewWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        FolderDTO FoldersV2NewFolder (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        ApiResponse<FolderDTO> FoldersV2NewFolderWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns></returns>
        void FoldersV2RemoveDocumentsInFolder (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2RemoveDocumentsInFolderWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        void FoldersV2Rename (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2RenameWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        void FoldersV2RenameOld (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2RenameOldWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns></returns>
        void FoldersV2SetArchiveInfo (int? id, FolderArchiveModeInfo archiveInfo);

        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2SetArchiveInfoWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo);
        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns></returns>
        void FoldersV2SetArxDriveConfiguration (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2SetArxDriveConfigurationWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);
        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns></returns>
        void FoldersV2SetFolderPermission (int? id, FolderPermissionsDTO permissions);

        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersV2SetFolderPermissionWithHttpInfo (int? id, FolderPermissionsDTO permissions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2AutoinsertInFolderByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This method recalculate folder for profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2AutoinsertInFolderByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2DeleteAsync (int? id);

        /// <summary>
        /// This method allow to delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2DeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2DeleteArxDriveConfigurationAsync (int? id);

        /// <summary>
        /// This method delete the arxdrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2DeleteArxDriveConfigurationAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This method allows to find folders that contains docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByNameAsync (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByNameAsyncWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByNameOldAsync (string name);

        /// <summary>
        /// This method allows to find folders by their name
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByNameOldAsyncWithHttpInfo (string name);
        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindInFolderByNameAsync (int? id, string name);

        /// <summary>
        /// This method allows to find folders by their parent and name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindInFolderByNameAsyncWithHttpInfo (int? id, string name);
        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderArchiveModeInfo</returns>
        System.Threading.Tasks.Task<FolderArchiveModeInfo> FoldersV2GetArchiveInfoAsync (int? id);

        /// <summary>
        /// This method returns the profile configuration for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderArchiveModeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderArchiveModeInfo>> FoldersV2GetArchiveInfoAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ArxDriveFolderModeInfo</returns>
        System.Threading.Tasks.Task<ArxDriveFolderModeInfo> FoldersV2GetArxDriveConfigurationAsync (int? id);

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (ArxDriveFolderModeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxDriveFolderModeInfo>> FoldersV2GetArxDriveConfigurationAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersV2GetByIdAsync (int? id);

        /// <summary>
        /// This method return the folders contained in specified folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2GetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2GetByParentIdAsync (int? parentId);

        /// <summary>
        /// This method return the folders contained in specified parent folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2GetByParentIdAsyncWithHttpInfo (int? parentId);
        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FoldersV2GetDocumentsByIdAsync (int? id, SelectDTO select);

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2GetDocumentsByIdAsyncWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderPermissionsDTO</returns>
        System.Threading.Tasks.Task<FolderPermissionsDTO> FoldersV2GetFolderPermissionAsync (int? id);

        /// <summary>
        /// This method returns the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderPermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderPermissionsDTO>> FoldersV2GetFolderPermissionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2InsertDocnumbersAsync (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allow to insert docnumbers in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2InsertDocnumbersAsyncWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2MoveAsync (int? id, int? parentid);

        /// <summary>
        /// This method allows to change the parent of a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2MoveAsyncWithHttpInfo (int? id, int? parentid);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersV2NewAsync (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2NewAsyncWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        System.Threading.Tasks.Task<FolderDTO> FoldersV2NewFolderAsync (int? parentId, string name);

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2NewFolderAsyncWithHttpInfo (int? parentId, string name);
        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2RemoveDocumentsInFolderAsync (int? id, List<int?> docnumbers);

        /// <summary>
        /// This method allows to remove some docnumber from a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RemoveDocumentsInFolderAsyncWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2RenameAsync (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RenameAsyncWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2RenameOldAsync (string name, int? id);

        /// <summary>
        /// This method allows to rename a folder
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RenameOldAsyncWithHttpInfo (string name, int? id);
        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2SetArchiveInfoAsync (int? id, FolderArchiveModeInfo archiveInfo);

        /// <summary>
        /// This method allows to set the profile information for a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetArchiveInfoAsyncWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo);
        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2SetArxDriveConfigurationAsync (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetArxDriveConfigurationAsyncWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo);
        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersV2SetFolderPermissionAsync (int? id, FolderPermissionsDTO permissions);

        /// <summary>
        /// This method sets the permissions for the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetFolderPermissionAsyncWithHttpInfo (int? id, FolderPermissionsDTO permissions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersV2Api : IFoldersV2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersV2Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersV2Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns></returns>
        public void FoldersV2AutoinsertInFolderByDocnumber (int? docnumber)
        {
             FoldersV2AutoinsertInFolderByDocnumberWithHttpInfo(docnumber);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2AutoinsertInFolderByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersV2Api->FoldersV2AutoinsertInFolderByDocnumber");

            var localVarPath = "/api/v2/Folders/{docnumber}/autoinsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2AutoinsertInFolderByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2AutoinsertInFolderByDocnumberAsync (int? docnumber)
        {
             await FoldersV2AutoinsertInFolderByDocnumberAsyncWithHttpInfo(docnumber);

        }

        /// <summary>
        /// This method recalculate folder for profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The identifier of the profile</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2AutoinsertInFolderByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersV2Api->FoldersV2AutoinsertInFolderByDocnumber");

            var localVarPath = "/api/v2/Folders/{docnumber}/autoinsert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2AutoinsertInFolderByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns></returns>
        public void FoldersV2Delete (int? id)
        {
             FoldersV2DeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2DeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Delete");

            var localVarPath = "/api/v2/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2DeleteAsync (int? id)
        {
             await FoldersV2DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method allow to delete a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2DeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Delete");

            var localVarPath = "/api/v2/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns></returns>
        public void FoldersV2DeleteArxDriveConfiguration (int? id)
        {
             FoldersV2DeleteArxDriveConfigurationWithHttpInfo(id);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2DeleteArxDriveConfigurationWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2DeleteArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/arxdriveinfo/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2DeleteArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2DeleteArxDriveConfigurationAsync (int? id)
        {
             await FoldersV2DeleteArxDriveConfigurationAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method delete the arxdrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2DeleteArxDriveConfigurationAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2DeleteArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/arxdriveinfo/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2DeleteArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersV2FindByDocnumber (int? docnumber)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersV2FindByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersV2FindByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersV2Api->FoldersV2FindByDocnumber");

            var localVarPath = "/api/v2/Folders/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersV2FindByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders that contains docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">The document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling FoldersV2Api->FoldersV2FindByDocnumber");

            var localVarPath = "/api/v2/Folders/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersV2FindByName (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersV2FindByNameWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersV2FindByNameWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindByName");

            var localVarPath = "/api/v2/Folders/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByNameAsync (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersV2FindByNameAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByNameAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindByName");

            var localVarPath = "/api/v2/Folders/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersV2FindByNameOld (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersV2FindByNameOldWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersV2FindByNameOldWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindByNameOld");

            var localVarPath = "/api/v2/Folders/find/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByNameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindByNameOldAsync (string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersV2FindByNameOldAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their name This method is deprecated. Use /api/v2/Folders/find?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindByNameOldAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindByNameOld");

            var localVarPath = "/api/v2/Folders/find/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindByNameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersV2FindInFolderByName (int? id, string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersV2FindInFolderByNameWithHttpInfo(id, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersV2FindInFolderByNameWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2FindInFolderByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindInFolderByName");

            var localVarPath = "/api/v2/Folders/{id}/name/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindInFolderByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2FindInFolderByNameAsync (int? id, string name)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersV2FindInFolderByNameAsyncWithHttpInfo(id, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allows to find folders by their parent and name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier for root folder</param>
        /// <param name="name">The name to search</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2FindInFolderByNameAsyncWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2FindInFolderByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2FindInFolderByName");

            var localVarPath = "/api/v2/Folders/{id}/name/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2FindInFolderByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderArchiveModeInfo</returns>
        public FolderArchiveModeInfo FoldersV2GetArchiveInfo (int? id)
        {
             ApiResponse<FolderArchiveModeInfo> localVarResponse = FoldersV2GetArchiveInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderArchiveModeInfo</returns>
        public ApiResponse< FolderArchiveModeInfo > FoldersV2GetArchiveInfoWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetArchiveInfo");

            var localVarPath = "/api/v2/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderArchiveModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderArchiveModeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderArchiveModeInfo)));
        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderArchiveModeInfo</returns>
        public async System.Threading.Tasks.Task<FolderArchiveModeInfo> FoldersV2GetArchiveInfoAsync (int? id)
        {
             ApiResponse<FolderArchiveModeInfo> localVarResponse = await FoldersV2GetArchiveInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the profile configuration for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderArchiveModeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderArchiveModeInfo>> FoldersV2GetArchiveInfoAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetArchiveInfo");

            var localVarPath = "/api/v2/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderArchiveModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderArchiveModeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderArchiveModeInfo)));
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ArxDriveFolderModeInfo</returns>
        public ArxDriveFolderModeInfo FoldersV2GetArxDriveConfiguration (int? id)
        {
             ApiResponse<ArxDriveFolderModeInfo> localVarResponse = FoldersV2GetArxDriveConfigurationWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of ArxDriveFolderModeInfo</returns>
        public ApiResponse< ArxDriveFolderModeInfo > FoldersV2GetArxDriveConfigurationWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxDriveFolderModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxDriveFolderModeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxDriveFolderModeInfo)));
        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ArxDriveFolderModeInfo</returns>
        public async System.Threading.Tasks.Task<ArxDriveFolderModeInfo> FoldersV2GetArxDriveConfigurationAsync (int? id)
        {
             ApiResponse<ArxDriveFolderModeInfo> localVarResponse = await FoldersV2GetArxDriveConfigurationAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (ArxDriveFolderModeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxDriveFolderModeInfo>> FoldersV2GetArxDriveConfigurationAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxDriveFolderModeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxDriveFolderModeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxDriveFolderModeInfo)));
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersV2GetById (int? id)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersV2GetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersV2GetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetById");

            var localVarPath = "/api/v2/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersV2GetByIdAsync (int? id)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersV2GetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the folders contained in specified folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2GetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetById");

            var localVarPath = "/api/v2/Folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>List&lt;FolderDTO&gt;</returns>
        public List<FolderDTO> FoldersV2GetByParentId (int? parentId)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = FoldersV2GetByParentIdWithHttpInfo(parentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>ApiResponse of List&lt;FolderDTO&gt;</returns>
        public ApiResponse< List<FolderDTO> > FoldersV2GetByParentIdWithHttpInfo (int? parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2GetByParentId");

            var localVarPath = "/api/v2/Folders/parent/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetByParentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of List&lt;FolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderDTO>> FoldersV2GetByParentIdAsync (int? parentId)
        {
             ApiResponse<List<FolderDTO>> localVarResponse = await FoldersV2GetByParentIdAsyncWithHttpInfo(parentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method return the folders contained in specified parent folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <returns>Task of ApiResponse (List&lt;FolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderDTO>>> FoldersV2GetByParentIdAsyncWithHttpInfo (int? parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2GetByParentId");

            var localVarPath = "/api/v2/Folders/parent/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetByParentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderDTO>)));
        }

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Object</returns>
        public Object FoldersV2GetDocumentsById (int? id, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = FoldersV2GetDocumentsByIdWithHttpInfo(id, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > FoldersV2GetDocumentsByIdWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetDocumentsById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling FoldersV2Api->FoldersV2GetDocumentsById");

            var localVarPath = "/api/v2/Folders/{id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetDocumentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FoldersV2GetDocumentsByIdAsync (int? id, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = await FoldersV2GetDocumentsByIdAsyncWithHttpInfo(id, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This methods return the profiles contained in a folder.  This call could not be compatible with some programming language, in this case use the call api/Folders/{id}/documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="select">The select object to instruct the server on which fields it must return</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2GetDocumentsByIdAsyncWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetDocumentsById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling FoldersV2Api->FoldersV2GetDocumentsById");

            var localVarPath = "/api/v2/Folders/{id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetDocumentsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>FolderPermissionsDTO</returns>
        public FolderPermissionsDTO FoldersV2GetFolderPermission (int? id)
        {
             ApiResponse<FolderPermissionsDTO> localVarResponse = FoldersV2GetFolderPermissionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>ApiResponse of FolderPermissionsDTO</returns>
        public ApiResponse< FolderPermissionsDTO > FoldersV2GetFolderPermissionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetFolderPermission");

            var localVarPath = "/api/v2/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderPermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderPermissionsDTO)));
        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of FolderPermissionsDTO</returns>
        public async System.Threading.Tasks.Task<FolderPermissionsDTO> FoldersV2GetFolderPermissionAsync (int? id)
        {
             ApiResponse<FolderPermissionsDTO> localVarResponse = await FoldersV2GetFolderPermissionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <returns>Task of ApiResponse (FolderPermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderPermissionsDTO>> FoldersV2GetFolderPermissionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2GetFolderPermission");

            var localVarPath = "/api/v2/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2GetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderPermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderPermissionsDTO)));
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns></returns>
        public void FoldersV2InsertDocnumbers (int? id, List<int?> docnumbers)
        {
             FoldersV2InsertDocnumbersWithHttpInfo(id, docnumbers);
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2InsertDocnumbersWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2InsertDocnumbers");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersV2Api->FoldersV2InsertDocnumbers");

            var localVarPath = "/api/v2/Folders/{id}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2InsertDocnumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2InsertDocnumbersAsync (int? id, List<int?> docnumbers)
        {
             await FoldersV2InsertDocnumbersAsyncWithHttpInfo(id, docnumbers);

        }

        /// <summary>
        /// This method allow to insert docnumbers in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of identifier of docnumbers to insert</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2InsertDocnumbersAsyncWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2InsertDocnumbers");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersV2Api->FoldersV2InsertDocnumbers");

            var localVarPath = "/api/v2/Folders/{id}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2InsertDocnumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns></returns>
        public void FoldersV2Move (int? id, int? parentid)
        {
             FoldersV2MoveWithHttpInfo(id, parentid);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2MoveWithHttpInfo (int? id, int? parentid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Move");
            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new ApiException(400, "Missing required parameter 'parentid' when calling FoldersV2Api->FoldersV2Move");

            var localVarPath = "/api/v2/Folders/move/{id}/{parentid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentid != null) localVarPathParams.Add("parentid", this.Configuration.ApiClient.ParameterToString(parentid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Move", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2MoveAsync (int? id, int? parentid)
        {
             await FoldersV2MoveAsyncWithHttpInfo(id, parentid);

        }

        /// <summary>
        /// This method allows to change the parent of a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="parentid">The new parent folder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2MoveAsyncWithHttpInfo (int? id, int? parentid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Move");
            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new ApiException(400, "Missing required parameter 'parentid' when calling FoldersV2Api->FoldersV2Move");

            var localVarPath = "/api/v2/Folders/move/{id}/{parentid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentid != null) localVarPathParams.Add("parentid", this.Configuration.ApiClient.ParameterToString(parentid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Move", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersV2New (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersV2NewWithHttpInfo(parentId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersV2NewWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2New");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2New");

            var localVarPath = "/api/v2/Folders/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2New", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersV2NewAsync (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersV2NewAsyncWithHttpInfo(parentId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified This method is deprecated. Use /api/v2/Folders/{parentId}/new?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2NewAsyncWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2New");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2New");

            var localVarPath = "/api/v2/Folders/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2New", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>FolderDTO</returns>
        public FolderDTO FoldersV2NewFolder (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = FoldersV2NewFolderWithHttpInfo(parentId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>ApiResponse of FolderDTO</returns>
        public ApiResponse< FolderDTO > FoldersV2NewFolderWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2NewFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2NewFolder");

            var localVarPath = "/api/v2/Folders/{parentId}/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2NewFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of FolderDTO</returns>
        public async System.Threading.Tasks.Task<FolderDTO> FoldersV2NewFolderAsync (int? parentId, string name)
        {
             ApiResponse<FolderDTO> localVarResponse = await FoldersV2NewFolderAsyncWithHttpInfo(parentId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method allow to create a new folder in the parent folder specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">The identifier of the parent folder</param>
        /// <param name="name">The name of new folder</param>
        /// <returns>Task of ApiResponse (FolderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDTO>> FoldersV2NewFolderAsyncWithHttpInfo (int? parentId, string name)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FoldersV2Api->FoldersV2NewFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2NewFolder");

            var localVarPath = "/api/v2/Folders/{parentId}/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2NewFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDTO)));
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns></returns>
        public void FoldersV2RemoveDocumentsInFolder (int? id, List<int?> docnumbers)
        {
             FoldersV2RemoveDocumentsInFolderWithHttpInfo(id, docnumbers);
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2RemoveDocumentsInFolderWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2RemoveDocumentsInFolder");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersV2Api->FoldersV2RemoveDocumentsInFolder");

            var localVarPath = "/api/v2/Folders/{id}/documents/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2RemoveDocumentsInFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2RemoveDocumentsInFolderAsync (int? id, List<int?> docnumbers)
        {
             await FoldersV2RemoveDocumentsInFolderAsyncWithHttpInfo(id, docnumbers);

        }

        /// <summary>
        /// This method allows to remove some docnumber from a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="docnumbers">Array of documents identifier to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RemoveDocumentsInFolderAsyncWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2RemoveDocumentsInFolder");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling FoldersV2Api->FoldersV2RemoveDocumentsInFolder");

            var localVarPath = "/api/v2/Folders/{id}/documents/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2RemoveDocumentsInFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        public void FoldersV2Rename (string name, int? id)
        {
             FoldersV2RenameWithHttpInfo(name, id);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2RenameWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2Rename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Rename");

            var localVarPath = "/api/v2/Folders/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2RenameAsync (string name, int? id)
        {
             await FoldersV2RenameAsyncWithHttpInfo(name, id);

        }

        /// <summary>
        /// This method allows to rename a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RenameAsyncWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2Rename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2Rename");

            var localVarPath = "/api/v2/Folders/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns></returns>
        public void FoldersV2RenameOld (string name, int? id)
        {
             FoldersV2RenameOldWithHttpInfo(name, id);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2RenameOldWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2RenameOld");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2RenameOld");

            var localVarPath = "/api/v2/Folders/rename/{id}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2RenameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2RenameOldAsync (string name, int? id)
        {
             await FoldersV2RenameOldAsyncWithHttpInfo(name, id);

        }

        /// <summary>
        /// This method allows to rename a folder This method is deprecated. Use /api/v2/Folders/rename/{id}?name&#x3D;{name}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new name of folder</param>
        /// <param name="id">The identifier of folder to rename</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2RenameOldAsyncWithHttpInfo (string name, int? id)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersV2Api->FoldersV2RenameOld");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2RenameOld");

            var localVarPath = "/api/v2/Folders/rename/{id}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2RenameOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns></returns>
        public void FoldersV2SetArchiveInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
             FoldersV2SetArchiveInfoWithHttpInfo(id, archiveInfo);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2SetArchiveInfoWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetArchiveInfo");
            // verify the required parameter 'archiveInfo' is set
            if (archiveInfo == null)
                throw new ApiException(400, "Missing required parameter 'archiveInfo' when calling FoldersV2Api->FoldersV2SetArchiveInfo");

            var localVarPath = "/api/v2/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (archiveInfo != null && archiveInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(archiveInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2SetArchiveInfoAsync (int? id, FolderArchiveModeInfo archiveInfo)
        {
             await FoldersV2SetArchiveInfoAsyncWithHttpInfo(id, archiveInfo);

        }

        /// <summary>
        /// This method allows to set the profile information for a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of folder</param>
        /// <param name="archiveInfo">The profile configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetArchiveInfoAsyncWithHttpInfo (int? id, FolderArchiveModeInfo archiveInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetArchiveInfo");
            // verify the required parameter 'archiveInfo' is set
            if (archiveInfo == null)
                throw new ApiException(400, "Missing required parameter 'archiveInfo' when calling FoldersV2Api->FoldersV2SetArchiveInfo");

            var localVarPath = "/api/v2/Folders/{id}/archiveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (archiveInfo != null && archiveInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(archiveInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetArchiveInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns></returns>
        public void FoldersV2SetArxDriveConfiguration (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
             FoldersV2SetArxDriveConfigurationWithHttpInfo(id, arxDriveFolderModeInfo);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2SetArxDriveConfigurationWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetArxDriveConfiguration");
            // verify the required parameter 'arxDriveFolderModeInfo' is set
            if (arxDriveFolderModeInfo == null)
                throw new ApiException(400, "Missing required parameter 'arxDriveFolderModeInfo' when calling FoldersV2Api->FoldersV2SetArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (arxDriveFolderModeInfo != null && arxDriveFolderModeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arxDriveFolderModeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arxDriveFolderModeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2SetArxDriveConfigurationAsync (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
             await FoldersV2SetArxDriveConfigurationAsyncWithHttpInfo(id, arxDriveFolderModeInfo);

        }

        /// <summary>
        /// This method sets the ArxDrive configuration for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="arxDriveFolderModeInfo">ArxDrive folder information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetArxDriveConfigurationAsyncWithHttpInfo (int? id, ArxDriveFolderModeInfo arxDriveFolderModeInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetArxDriveConfiguration");
            // verify the required parameter 'arxDriveFolderModeInfo' is set
            if (arxDriveFolderModeInfo == null)
                throw new ApiException(400, "Missing required parameter 'arxDriveFolderModeInfo' when calling FoldersV2Api->FoldersV2SetArxDriveConfiguration");

            var localVarPath = "/api/v2/Folders/{id}/arxdriveinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (arxDriveFolderModeInfo != null && arxDriveFolderModeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arxDriveFolderModeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arxDriveFolderModeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetArxDriveConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns></returns>
        public void FoldersV2SetFolderPermission (int? id, FolderPermissionsDTO permissions)
        {
             FoldersV2SetFolderPermissionWithHttpInfo(id, permissions);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FoldersV2SetFolderPermissionWithHttpInfo (int? id, FolderPermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetFolderPermission");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling FoldersV2Api->FoldersV2SetFolderPermission");

            var localVarPath = "/api/v2/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersV2SetFolderPermissionAsync (int? id, FolderPermissionsDTO permissions)
        {
             await FoldersV2SetFolderPermissionAsyncWithHttpInfo(id, permissions);

        }

        /// <summary>
        /// This method sets the permissions for the folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the folder</param>
        /// <param name="permissions">The folder permissions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FoldersV2SetFolderPermissionAsyncWithHttpInfo (int? id, FolderPermissionsDTO permissions)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersV2Api->FoldersV2SetFolderPermission");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling FoldersV2Api->FoldersV2SetFolderPermission");

            var localVarPath = "/api/v2/Folders/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersV2SetFolderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
