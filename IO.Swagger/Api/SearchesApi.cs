/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesDelete ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesDeleteWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        SearchDTO SearchesGet ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> SearchesGetWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        List<FieldBaseForSearchDTO> SearchesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        ApiResponse<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        List<FieldBaseForSearchDTO> SearchesGetAdditionalByClasseOld (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        ApiResponse<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseOldWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        FieldFilterDTO SearchesGetFiltersForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        ApiResponse<FieldFilterDTO> SearchesGetFiltersForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        string SearchesGetFormulaForSearch (FieldFormulaCalculateCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchesGetFormulaForSearchWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        SearchDTO SearchesGetLastSearch ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> SearchesGetLastSearchWithHttpInfo ();
        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>SearchDTO</returns>
        SearchDTO SearchesGetSearchForClasseBox (string additionalFieldName, ProfileDTO profile = null);

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> SearchesGetSearchForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO profile = null);
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesGetSelect ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesGetSelectWithHttpInfo ();
        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesGetSelect_0 (int? documentType);

        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesGetSelect_0WithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesGetSelect_1 (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesGetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO SearchesGetValuesForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> SearchesGetValuesForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> SearchesLastDocuments (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> SearchesLastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> SearchesPostSearch (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> SearchesPostSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns></returns>
        void SearchesPostSelect (SelectDTO selectDto);

        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesPostSelectWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesResetSelect ();

        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesResetSelectWithHttpInfo ();
        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        void SearchesSetDefaultSearch (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesSetDefaultSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        void SearchesSetLastSearch (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesSetLastSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesDeleteAsync ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> SearchesGetAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseOldAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesGetAdditionalByClasseOldAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        System.Threading.Tasks.Task<FieldFilterDTO> SearchesGetFiltersForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> SearchesGetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchesGetFormulaForSearchAsync (FieldFormulaCalculateCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchesGetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> SearchesGetLastSearchAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetLastSearchAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> SearchesGetSearchForClasseBoxAsync (string additionalFieldName, ProfileDTO profile = null);

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetSearchForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO profile = null);
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesGetSelectAsync ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesGetSelect_0Async (int? documentType);

        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelect_0AsyncWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesGetSelect_1Async (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> SearchesGetValuesForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesGetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> SearchesLastDocumentsAsync (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesLastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> SearchesPostSearchAsync (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call searches documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesPostSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesPostSelectAsync (SelectDTO selectDto);

        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesPostSelectAsyncWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesResetSelectAsync ();

        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesResetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesSetDefaultSearchAsync (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesSetDefaultSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesSetLastSearchAsync (SearchCriteriaDto searchwebapidto = null);

        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesSetLastSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchesApi : ISearchesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesDelete ()
        {
             SearchesDeleteWithHttpInfo();
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesDeleteWithHttpInfo ()
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesDeleteAsync ()
        {
             await SearchesDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        public SearchDTO SearchesGet ()
        {
             ApiResponse<SearchDTO> localVarResponse = SearchesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > SearchesGetWithHttpInfo ()
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> SearchesGetAsync ()
        {
             ApiResponse<SearchDTO> localVarResponse = await SearchesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        public List<FieldBaseForSearchDTO> SearchesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = SearchesGetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public ApiResponse< List<FieldBaseForSearchDTO> > SearchesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesApi->SearchesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesApi->SearchesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesApi->SearchesGetAdditionalByClasse");

            var localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = await SearchesGetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesApi->SearchesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesApi->SearchesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesApi->SearchesGetAdditionalByClasse");

            var localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        public List<FieldBaseForSearchDTO> SearchesGetAdditionalByClasseOld (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = SearchesGetAdditionalByClasseOldWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public ApiResponse< List<FieldBaseForSearchDTO> > SearchesGetAdditionalByClasseOldWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling SearchesApi->SearchesGetAdditionalByClasseOld");

            var localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetAdditionalByClasseOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesGetAdditionalByClasseOldAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = await SearchesGetAdditionalByClasseOldAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesGetAdditionalByClasseOldAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesApi->SearchesGetAdditionalByClasseOld");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling SearchesApi->SearchesGetAdditionalByClasseOld");

            var localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetAdditionalByClasseOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        public FieldFilterDTO SearchesGetFiltersForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = SearchesGetFiltersForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        public ApiResponse< FieldFilterDTO > SearchesGetFiltersForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterDTO> SearchesGetFiltersForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = await SearchesGetFiltersForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> SearchesGetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        public string SearchesGetFormulaForSearch (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = SearchesGetFormulaForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchesGetFormulaForSearchWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchesGetFormulaForSearchAsync (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = await SearchesGetFormulaForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchesGetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        public SearchDTO SearchesGetLastSearch ()
        {
             ApiResponse<SearchDTO> localVarResponse = SearchesGetLastSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > SearchesGetLastSearchWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> SearchesGetLastSearchAsync ()
        {
             ApiResponse<SearchDTO> localVarResponse = await SearchesGetLastSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetLastSearchAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>SearchDTO</returns>
        public SearchDTO SearchesGetSearchForClasseBox (string additionalFieldName, ProfileDTO profile = null)
        {
             ApiResponse<SearchDTO> localVarResponse = SearchesGetSearchForClasseBoxWithHttpInfo(additionalFieldName, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > SearchesGetSearchForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO profile = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling SearchesApi->SearchesGetSearchForClasseBox");

            var localVarPath = "/api/Searches/byclassadditionalfield/{additionalFieldName}/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSearchForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> SearchesGetSearchForClasseBoxAsync (string additionalFieldName, ProfileDTO profile = null)
        {
             ApiResponse<SearchDTO> localVarResponse = await SearchesGetSearchForClasseBoxAsyncWithHttpInfo(additionalFieldName, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesGetSearchForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO profile = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling SearchesApi->SearchesGetSearchForClasseBox");

            var localVarPath = "/api/Searches/byclassadditionalfield/{additionalFieldName}/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSearchForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesGetSelect ()
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesGetSelectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesGetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesGetSelectAsync ()
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesGetSelectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesGetSelect_0 (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesGetSelect_0WithHttpInfo(documentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesGetSelect_0WithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesApi->SearchesGetSelect_0");

            var localVarPath = "/api/Searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesGetSelect_0Async (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesGetSelect_0AsyncWithHttpInfo(documentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelect_0AsyncWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesApi->SearchesGetSelect_0");

            var localVarPath = "/api/Searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesGetSelect_1 (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesGetSelect_1WithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesGetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesApi->SearchesGetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesApi->SearchesGetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesApi->SearchesGetSelect_1");

            var localVarPath = "/api/Searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesGetSelect_1Async (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesGetSelect_1AsyncWithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesGetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesApi->SearchesGetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesApi->SearchesGetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesApi->SearchesGetSelect_1");

            var localVarPath = "/api/Searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO SearchesGetValuesForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = SearchesGetValuesForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > SearchesGetValuesForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> SearchesGetValuesForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await SearchesGetValuesForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesGetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesGetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> SearchesLastDocuments (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = SearchesLastDocumentsWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > SearchesLastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesApi->SearchesLastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesApi->SearchesLastDocuments");

            var localVarPath = "/api/Searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxRows != null) localVarPathParams.Add("maxRows", Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesLastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> SearchesLastDocumentsAsync (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await SearchesLastDocumentsAsyncWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesLastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesApi->SearchesLastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesApi->SearchesLastDocuments");

            var localVarPath = "/api/Searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxRows != null) localVarPathParams.Add("maxRows", Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesLastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> SearchesPostSearch (SearchCriteriaDto searchwebapidto = null)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = SearchesPostSearchWithHttpInfo(searchwebapidto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > SearchesPostSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> SearchesPostSearchAsync (SearchCriteriaDto searchwebapidto = null)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await SearchesPostSearchAsyncWithHttpInfo(searchwebapidto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> SearchesPostSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns></returns>
        public void SearchesPostSelect (SelectDTO selectDto)
        {
             SearchesPostSelectWithHttpInfo(selectDto);
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesPostSelectWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesApi->SearchesPostSelect");

            var localVarPath = "/api/Searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesPostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesPostSelectAsync (SelectDTO selectDto)
        {
             await SearchesPostSelectAsyncWithHttpInfo(selectDto);

        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesPostSelectAsyncWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesApi->SearchesPostSelect");

            var localVarPath = "/api/Searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesPostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesResetSelect ()
        {
             SearchesResetSelectWithHttpInfo();
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesResetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesResetSelectAsync ()
        {
             await SearchesResetSelectAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesResetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default search for the user This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        public void SearchesSetDefaultSearch (SearchCriteriaDto searchwebapidto = null)
        {
             SearchesSetDefaultSearchWithHttpInfo(searchwebapidto);
        }

        /// <summary>
        /// This call saves the default search for the user This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesSetDefaultSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesSetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default search for the user This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesSetDefaultSearchAsync (SearchCriteriaDto searchwebapidto = null)
        {
             await SearchesSetDefaultSearchAsyncWithHttpInfo(searchwebapidto);

        }

        /// <summary>
        /// This call saves the default search for the user This method is deprecated. Use /api/v2/Searches/defaultsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesSetDefaultSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesSetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the last search for the user This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        public void SearchesSetLastSearch (SearchCriteriaDto searchwebapidto = null)
        {
             SearchesSetLastSearchWithHttpInfo(searchwebapidto);
        }

        /// <summary>
        /// This call saves the last search for the user This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesSetLastSearchWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesSetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the last search for the user This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesSetLastSearchAsync (SearchCriteriaDto searchwebapidto = null)
        {
             await SearchesSetLastSearchAsyncWithHttpInfo(searchwebapidto);

        }

        /// <summary>
        /// This call saves the last search for the user This method is deprecated. Use /api/v2/Searches/lastsearch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesSetLastSearchAsyncWithHttpInfo (SearchCriteriaDto searchwebapidto = null)
        {

            var localVarPath = "/api/Searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesSetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
