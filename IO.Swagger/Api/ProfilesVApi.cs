/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesVApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns></returns>
        void ProfilesV2DeleteProfile (int? docNumber);

        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesV2DeleteProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileConcreteDTO</returns>
        ProfileConcreteDTO ProfilesV2Get ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileConcreteDTO</returns>
        ApiResponse<ProfileConcreteDTO> ProfilesV2GetWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ConcreteFields</returns>
        ConcreteFields ProfilesV2GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of ConcreteFields</returns>
        ApiResponse<ConcreteFields> ProfilesV2GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO ProfilesV2GetFiltersForArchive (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> ProfilesV2GetFiltersForArchiveWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>string</returns>
        string ProfilesV2GetFormulaForArchive (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProfilesV2GetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileConcreteSchemaDTO</returns>
        EditProfileConcreteSchemaDTO ProfilesV2GetSchema (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileConcreteSchemaDTO</returns>
        ApiResponse<EditProfileConcreteSchemaDTO> ProfilesV2GetSchemaWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO ProfilesV2GetValuesForArchive (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> ProfilesV2GetValuesForArchiveWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ProfileConcreteDTO</returns>
        ProfileConcreteDTO ProfilesV2Get_0 (int? docNumber);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ApiResponse of ProfileConcreteDTO</returns>
        ApiResponse<ProfileConcreteDTO> ProfilesV2Get_0WithHttpInfo (int? docNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        bool? ProfilesV2LockProfile (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesV2LockProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO ProfilesV2Post (ProfileConcreteDTO profile);

        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> ProfilesV2PostWithHttpInfo (ProfileConcreteDTO profile);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns></returns>
        void ProfilesV2Put (ProfileConcreteDTO profile, int? docnumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesV2PutWithHttpInfo (ProfileConcreteDTO profile, int? docnumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        bool? ProfilesV2UnLockProfile (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesV2UnLockProfileWithHttpInfo (int? docNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesV2DeleteProfileAsync (int? docNumber);

        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesV2DeleteProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileConcreteDTO</returns>
        System.Threading.Tasks.Task<ProfileConcreteDTO> ProfilesV2GetAsync ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileConcreteDTO>> ProfilesV2GetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ConcreteFields</returns>
        System.Threading.Tasks.Task<ConcreteFields> ProfilesV2GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (ConcreteFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConcreteFields>> ProfilesV2GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProfilesV2GetFiltersForArchiveAsync (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProfilesV2GetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProfilesV2GetFormulaForArchiveAsync (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProfilesV2GetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileConcreteSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileConcreteSchemaDTO> ProfilesV2GetSchemaAsync (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileConcreteSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileConcreteSchemaDTO>> ProfilesV2GetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> ProfilesV2GetValuesForArchiveAsync (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesV2GetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ProfileConcreteDTO</returns>
        System.Threading.Tasks.Task<ProfileConcreteDTO> ProfilesV2Get_0Async (int? docNumber);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ApiResponse (ProfileConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileConcreteDTO>> ProfilesV2Get_0AsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesV2LockProfileAsync (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesV2LockProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> ProfilesV2PostAsync (ProfileConcreteDTO profile);

        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesV2PostAsyncWithHttpInfo (ProfileConcreteDTO profile);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesV2PutAsync (ProfileConcreteDTO profile, int? docnumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesV2PutAsyncWithHttpInfo (ProfileConcreteDTO profile, int? docnumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesV2UnLockProfileAsync (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesV2UnLockProfileAsyncWithHttpInfo (int? docNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesVApi : IProfilesVApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesVApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfilesVApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesVApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfilesVApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns></returns>
        public void ProfilesV2DeleteProfile (int? docNumber)
        {
             ProfilesV2DeleteProfileWithHttpInfo(docNumber);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesV2DeleteProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2DeleteProfile");

            var localVarPath = "/api/v2/profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2DeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesV2DeleteProfileAsync (int? docNumber)
        {
             await ProfilesV2DeleteProfileAsyncWithHttpInfo(docNumber);

        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesV2DeleteProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2DeleteProfile");

            var localVarPath = "/api/v2/profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2DeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileConcreteDTO</returns>
        public ProfileConcreteDTO ProfilesV2Get ()
        {
             ApiResponse<ProfileConcreteDTO> localVarResponse = ProfilesV2GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileConcreteDTO</returns>
        public ApiResponse< ProfileConcreteDTO > ProfilesV2GetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileConcreteDTO)));
            
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileConcreteDTO</returns>
        public async System.Threading.Tasks.Task<ProfileConcreteDTO> ProfilesV2GetAsync ()
        {
             ApiResponse<ProfileConcreteDTO> localVarResponse = await ProfilesV2GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileConcreteDTO>> ProfilesV2GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ConcreteFields</returns>
        public ConcreteFields ProfilesV2GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<ConcreteFields> localVarResponse = ProfilesV2GetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of ConcreteFields</returns>
        public ApiResponse< ConcreteFields > ProfilesV2GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");

            var localVarPath = "/api/v2/profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConcreteFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConcreteFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConcreteFields)));
            
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ConcreteFields</returns>
        public async System.Threading.Tasks.Task<ConcreteFields> ProfilesV2GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<ConcreteFields> localVarResponse = await ProfilesV2GetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (ConcreteFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConcreteFields>> ProfilesV2GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesVApi->ProfilesV2GetAdditionalByClasse");

            var localVarPath = "/api/v2/profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConcreteFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConcreteFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConcreteFields)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO ProfilesV2GetFiltersForArchive (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = ProfilesV2GetFiltersForArchiveWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > ProfilesV2GetFiltersForArchiveWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetFiltersForArchive");

            var localVarPath = "/api/v2/profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProfilesV2GetFiltersForArchiveAsync (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await ProfilesV2GetFiltersForArchiveAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for search and retrieve the additional field filters</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProfilesV2GetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetFiltersForArchive");

            var localVarPath = "/api/v2/profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>string</returns>
        public string ProfilesV2GetFormulaForArchive (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<string> localVarResponse = ProfilesV2GetFormulaForArchiveWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ProfilesV2GetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetFormulaForArchive");

            var localVarPath = "/api/v2/profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProfilesV2GetFormulaForArchiveAsync (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<string> localVarResponse = await ProfilesV2GetFormulaForArchiveAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for the calculate of the formula</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProfilesV2GetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetFormulaForArchive");

            var localVarPath = "/api/v2/profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileConcreteSchemaDTO</returns>
        public EditProfileConcreteSchemaDTO ProfilesV2GetSchema (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileConcreteSchemaDTO> localVarResponse = ProfilesV2GetSchemaWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileConcreteSchemaDTO</returns>
        public ApiResponse< EditProfileConcreteSchemaDTO > ProfilesV2GetSchemaWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2GetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesVApi->ProfilesV2GetSchema");

            var localVarPath = "/api/v2/profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileConcreteSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileConcreteSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileConcreteSchemaDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileConcreteSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileConcreteSchemaDTO> ProfilesV2GetSchemaAsync (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileConcreteSchemaDTO> localVarResponse = await ProfilesV2GetSchemaAsyncWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileConcreteSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileConcreteSchemaDTO>> ProfilesV2GetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2GetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesVApi->ProfilesV2GetSchema");

            var localVarPath = "/api/v2/profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileConcreteSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileConcreteSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileConcreteSchemaDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO ProfilesV2GetValuesForArchive (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = ProfilesV2GetValuesForArchiveWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > ProfilesV2GetValuesForArchiveWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetValuesForArchive");

            var localVarPath = "/api/v2/profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> ProfilesV2GetValuesForArchiveAsync (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await ProfilesV2GetValuesForArchiveAsyncWithHttpInfo(fieldCriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldCriteria">The criteria for retrieve the array of value for the given additional field</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesV2GetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveConcreteCriteriaDto fieldCriteria)
        {
            // verify the required parameter 'fieldCriteria' is set
            if (fieldCriteria == null)
                throw new ApiException(400, "Missing required parameter 'fieldCriteria' when calling ProfilesVApi->ProfilesV2GetValuesForArchive");

            var localVarPath = "/api/v2/profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldCriteria != null && fieldCriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldCriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldCriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2GetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ProfileConcreteDTO</returns>
        public ProfileConcreteDTO ProfilesV2Get_0 (int? docNumber)
        {
             ApiResponse<ProfileConcreteDTO> localVarResponse = ProfilesV2Get_0WithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ApiResponse of ProfileConcreteDTO</returns>
        public ApiResponse< ProfileConcreteDTO > ProfilesV2Get_0WithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2Get_0");

            var localVarPath = "/api/v2/profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileConcreteDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ProfileConcreteDTO</returns>
        public async System.Threading.Tasks.Task<ProfileConcreteDTO> ProfilesV2Get_0Async (int? docNumber)
        {
             ApiResponse<ProfileConcreteDTO> localVarResponse = await ProfilesV2Get_0AsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ApiResponse (ProfileConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileConcreteDTO>> ProfilesV2Get_0AsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2Get_0");

            var localVarPath = "/api/v2/profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileConcreteDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        public bool? ProfilesV2LockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesV2LockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesV2LockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2LockProfile");

            var localVarPath = "/api/v2/profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2LockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesV2LockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesV2LockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesV2LockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2LockProfile");

            var localVarPath = "/api/v2/profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2LockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO ProfilesV2Post (ProfileConcreteDTO profile)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = ProfilesV2PostWithHttpInfo(profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > ProfilesV2PostWithHttpInfo (ProfileConcreteDTO profile)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ProfilesVApi->ProfilesV2Post");

            var localVarPath = "/api/v2/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
            
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> ProfilesV2PostAsync (ProfileConcreteDTO profile)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await ProfilesV2PostAsyncWithHttpInfo(profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The profile during insertion</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesV2PostAsyncWithHttpInfo (ProfileConcreteDTO profile)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ProfilesVApi->ProfilesV2Post");

            var localVarPath = "/api/v2/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns></returns>
        public void ProfilesV2Put (ProfileConcreteDTO profile, int? docnumber)
        {
             ProfilesV2PutWithHttpInfo(profile, docnumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesV2PutWithHttpInfo (ProfileConcreteDTO profile, int? docnumber)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ProfilesVApi->ProfilesV2Put");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesVApi->ProfilesV2Put");

            var localVarPath = "/api/v2/profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Put", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesV2PutAsync (ProfileConcreteDTO profile, int? docnumber)
        {
             await ProfilesV2PutAsyncWithHttpInfo(profile, docnumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"></param>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesV2PutAsyncWithHttpInfo (ProfileConcreteDTO profile, int? docnumber)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ProfilesVApi->ProfilesV2Put");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesVApi->ProfilesV2Put");

            var localVarPath = "/api/v2/profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2Put", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        public bool? ProfilesV2UnLockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesV2UnLockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesV2UnLockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2UnLockProfile");

            var localVarPath = "/api/v2/profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2UnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesV2UnLockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesV2UnLockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesV2UnLockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesVApi->ProfilesV2UnLockProfile");

            var localVarPath = "/api/v2/profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesV2UnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

    }
}
