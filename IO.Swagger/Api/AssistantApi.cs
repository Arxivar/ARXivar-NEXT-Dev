/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssistantApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns></returns>
        void AssistantBufferInsertForMonitoredFolder (string bufferId);

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssistantBufferInsertForMonitoredFolderWithHttpInfo (string bufferId);
        /// <summary>
        /// This call notifies the specified user that the assistant is active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns></returns>
        void AssistantDetected (string connectionId, string version = null);

        /// <summary>
        /// This call notifies the specified user that the assistant is active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssistantDetectedWithHttpInfo (string connectionId, string version = null);
        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void AssistantNotifyProcessDocChange (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssistantNotifyProcessDocChangeWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns></returns>
        void AssistantNotifyProfileChange (int? docNumber);

        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssistantNotifyProfileChangeWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call notifies the specified user that a document has scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns></returns>
        void AssistantScanComplete (string connectionId, ScanResultDto scanResultDto);

        /// <summary>
        /// This call notifies the specified user that a document has scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssistantScanCompleteWithHttpInfo (string connectionId, ScanResultDto scanResultDto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssistantBufferInsertForMonitoredFolderAsync (string bufferId);

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssistantBufferInsertForMonitoredFolderAsyncWithHttpInfo (string bufferId);
        /// <summary>
        /// This call notifies the specified user that the assistant is active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssistantDetectedAsync (string connectionId, string version = null);

        /// <summary>
        /// This call notifies the specified user that the assistant is active
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssistantDetectedAsyncWithHttpInfo (string connectionId, string version = null);
        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssistantNotifyProcessDocChangeAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssistantNotifyProcessDocChangeAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssistantNotifyProfileChangeAsync (int? docNumber);

        /// <summary>
        /// This call notifies the specified user that a document has changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssistantNotifyProfileChangeAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call notifies the specified user that a document has scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssistantScanCompleteAsync (string connectionId, ScanResultDto scanResultDto);

        /// <summary>
        /// This call notifies the specified user that a document has scanned
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssistantScanCompleteAsyncWithHttpInfo (string connectionId, ScanResultDto scanResultDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssistantApi : IAssistantApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssistantApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssistantApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns></returns>
        public void AssistantBufferInsertForMonitoredFolder (string bufferId)
        {
             AssistantBufferInsertForMonitoredFolderWithHttpInfo(bufferId);
        }

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssistantBufferInsertForMonitoredFolderWithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AssistantApi->AssistantBufferInsertForMonitoredFolder");

            var localVarPath = "/api/Assistant/BufferInsertForMonitoredFolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantBufferInsertForMonitoredFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssistantBufferInsertForMonitoredFolderAsync (string bufferId)
        {
             await AssistantBufferInsertForMonitoredFolderAsyncWithHttpInfo(bufferId);

        }

        /// <summary>
        /// This call notifies the specified user that a document has been added to buffer from monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Result information to scan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssistantBufferInsertForMonitoredFolderAsyncWithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AssistantApi->AssistantBufferInsertForMonitoredFolder");

            var localVarPath = "/api/Assistant/BufferInsertForMonitoredFolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantBufferInsertForMonitoredFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that the assistant is active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns></returns>
        public void AssistantDetected (string connectionId, string version = null)
        {
             AssistantDetectedWithHttpInfo(connectionId, version);
        }

        /// <summary>
        /// This call notifies the specified user that the assistant is active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssistantDetectedWithHttpInfo (string connectionId, string version = null)
        {
            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new ApiException(400, "Missing required parameter 'connectionId' when calling AssistantApi->AssistantDetected");

            var localVarPath = "/api/Assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "connectionId", connectionId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantDetected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that the assistant is active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssistantDetectedAsync (string connectionId, string version = null)
        {
             await AssistantDetectedAsyncWithHttpInfo(connectionId, version);

        }

        /// <summary>
        /// This call notifies the specified user that the assistant is active 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="version">Version (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssistantDetectedAsyncWithHttpInfo (string connectionId, string version = null)
        {
            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new ApiException(400, "Missing required parameter 'connectionId' when calling AssistantApi->AssistantDetected");

            var localVarPath = "/api/Assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "connectionId", connectionId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantDetected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void AssistantNotifyProcessDocChange (int? processDocId, int? taskWorkId)
        {
             AssistantNotifyProcessDocChangeWithHttpInfo(processDocId, taskWorkId);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssistantNotifyProcessDocChangeWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling AssistantApi->AssistantNotifyProcessDocChange");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling AssistantApi->AssistantNotifyProcessDocChange");

            var localVarPath = "/api/Assistant/UpdateProcessDoc/{processDocId}/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantNotifyProcessDocChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssistantNotifyProcessDocChangeAsync (int? processDocId, int? taskWorkId)
        {
             await AssistantNotifyProcessDocChangeAsyncWithHttpInfo(processDocId, taskWorkId);

        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssistantNotifyProcessDocChangeAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling AssistantApi->AssistantNotifyProcessDocChange");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling AssistantApi->AssistantNotifyProcessDocChange");

            var localVarPath = "/api/Assistant/UpdateProcessDoc/{processDocId}/TaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantNotifyProcessDocChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns></returns>
        public void AssistantNotifyProfileChange (int? docNumber)
        {
             AssistantNotifyProfileChangeWithHttpInfo(docNumber);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssistantNotifyProfileChangeWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling AssistantApi->AssistantNotifyProfileChange");

            var localVarPath = "/api/Assistant/UpdateProfile/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantNotifyProfileChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssistantNotifyProfileChangeAsync (int? docNumber)
        {
             await AssistantNotifyProfileChangeAsyncWithHttpInfo(docNumber);

        }

        /// <summary>
        /// This call notifies the specified user that a document has changed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssistantNotifyProfileChangeAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling AssistantApi->AssistantNotifyProfileChange");

            var localVarPath = "/api/Assistant/UpdateProfile/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantNotifyProfileChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has scanned 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns></returns>
        public void AssistantScanComplete (string connectionId, ScanResultDto scanResultDto)
        {
             AssistantScanCompleteWithHttpInfo(connectionId, scanResultDto);
        }

        /// <summary>
        /// This call notifies the specified user that a document has scanned 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssistantScanCompleteWithHttpInfo (string connectionId, ScanResultDto scanResultDto)
        {
            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new ApiException(400, "Missing required parameter 'connectionId' when calling AssistantApi->AssistantScanComplete");
            // verify the required parameter 'scanResultDto' is set
            if (scanResultDto == null)
                throw new ApiException(400, "Missing required parameter 'scanResultDto' when calling AssistantApi->AssistantScanComplete");

            var localVarPath = "/api/Assistant/ScanResult/{connectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionId != null) localVarPathParams.Add("connectionId", Configuration.ApiClient.ParameterToString(connectionId)); // path parameter
            if (scanResultDto != null && scanResultDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(scanResultDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scanResultDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantScanComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call notifies the specified user that a document has scanned 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssistantScanCompleteAsync (string connectionId, ScanResultDto scanResultDto)
        {
             await AssistantScanCompleteAsyncWithHttpInfo(connectionId, scanResultDto);

        }

        /// <summary>
        /// This call notifies the specified user that a document has scanned 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionId">Connection identifier</param>
        /// <param name="scanResultDto">Result information to scan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssistantScanCompleteAsyncWithHttpInfo (string connectionId, ScanResultDto scanResultDto)
        {
            // verify the required parameter 'connectionId' is set
            if (connectionId == null)
                throw new ApiException(400, "Missing required parameter 'connectionId' when calling AssistantApi->AssistantScanComplete");
            // verify the required parameter 'scanResultDto' is set
            if (scanResultDto == null)
                throw new ApiException(400, "Missing required parameter 'scanResultDto' when calling AssistantApi->AssistantScanComplete");

            var localVarPath = "/api/Assistant/ScanResult/{connectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionId != null) localVarPathParams.Add("connectionId", Configuration.ApiClient.ParameterToString(connectionId)); // path parameter
            if (scanResultDto != null && scanResultDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(scanResultDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scanResultDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssistantScanComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
