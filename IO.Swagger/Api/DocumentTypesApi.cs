/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentTypesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        List<DocumentTypeBaseDTO> DocumentTypesGet (int? mode, string businessUnitCode = null);

        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        ApiResponse<List<DocumentTypeBaseDTO>> DocumentTypesGetWithHttpInfo (int? mode, string businessUnitCode = null);
        /// <summary>
        /// This call returns a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>DocumentTypeBaseDTO</returns>
        DocumentTypeBaseDTO DocumentTypesGetBySystemId (int? documentTypeId);

        /// <summary>
        /// This call returns a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>ApiResponse of DocumentTypeBaseDTO</returns>
        ApiResponse<DocumentTypeBaseDTO> DocumentTypesGetBySystemIdWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        List<DocumentTypeBaseDTO> DocumentTypesGetOld (int? mode, string businessunitcode);

        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        ApiResponse<List<DocumentTypeBaseDTO>> DocumentTypesGetOldWithHttpInfo (int? mode, string businessunitcode);
        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        DocumentTypeBaseTreeDTO DocumentTypesGetTree (int? mode, string businessunitcode = null);

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        ApiResponse<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeWithHttpInfo (int? mode, string businessunitcode = null);
        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        DocumentTypeBaseTreeDTO DocumentTypesGetTreeOld (int? mode, string businessunitcode, bool? forProtocol);

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        ApiResponse<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeOldWithHttpInfo (int? mode, string businessunitcode, bool? forProtocol);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> DocumentTypesGetAsync (int? mode, string businessUnitCode = null);

        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> DocumentTypesGetAsyncWithHttpInfo (int? mode, string businessUnitCode = null);
        /// <summary>
        /// This call returns a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>Task of DocumentTypeBaseDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeBaseDTO> DocumentTypesGetBySystemIdAsync (int? documentTypeId);

        /// <summary>
        /// This call returns a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseDTO>> DocumentTypesGetBySystemIdAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> DocumentTypesGetOldAsync (int? mode, string businessunitcode);

        /// <summary>
        /// This call returns the document types that the user can access
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> DocumentTypesGetOldAsyncWithHttpInfo (int? mode, string businessunitcode);
        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeAsync (int? mode, string businessunitcode = null);

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> DocumentTypesGetTreeAsyncWithHttpInfo (int? mode, string businessunitcode = null);
        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeOldAsync (int? mode, string businessunitcode, bool? forProtocol);

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> DocumentTypesGetTreeOldAsyncWithHttpInfo (int? mode, string businessunitcode, bool? forProtocol);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentTypesApi : IDocumentTypesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentTypesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentTypesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the document types that the user can access 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        public List<DocumentTypeBaseDTO> DocumentTypesGet (int? mode, string businessUnitCode = null)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = DocumentTypesGetWithHttpInfo(mode, businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document types that the user can access 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeBaseDTO> > DocumentTypesGetWithHttpInfo (int? mode, string businessUnitCode = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGet");

            var localVarPath = "/api/DocumentTypes/{mode}/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns the document types that the user can access 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> DocumentTypesGetAsync (int? mode, string businessUnitCode = null)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = await DocumentTypesGetAsyncWithHttpInfo(mode, businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document types that the user can access 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessUnitCode">Business Unit (optional) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> DocumentTypesGetAsyncWithHttpInfo (int? mode, string businessUnitCode = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGet");

            var localVarPath = "/api/DocumentTypes/{mode}/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>DocumentTypeBaseDTO</returns>
        public DocumentTypeBaseDTO DocumentTypesGetBySystemId (int? documentTypeId)
        {
             ApiResponse<DocumentTypeBaseDTO> localVarResponse = DocumentTypesGetBySystemIdWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>ApiResponse of DocumentTypeBaseDTO</returns>
        public ApiResponse< DocumentTypeBaseDTO > DocumentTypesGetBySystemIdWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesApi->DocumentTypesGetBySystemId");

            var localVarPath = "/api/DocumentTypes/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetBySystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseDTO)));
        }

        /// <summary>
        /// This call returns a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>Task of DocumentTypeBaseDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeBaseDTO> DocumentTypesGetBySystemIdAsync (int? documentTypeId)
        {
             ApiResponse<DocumentTypeBaseDTO> localVarResponse = await DocumentTypesGetBySystemIdAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseDTO>> DocumentTypesGetBySystemIdAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesApi->DocumentTypesGetBySystemId");

            var localVarPath = "/api/DocumentTypes/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetBySystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseDTO)));
        }

        /// <summary>
        /// This call returns the document types that the user can access This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        public List<DocumentTypeBaseDTO> DocumentTypesGetOld (int? mode, string businessunitcode)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = DocumentTypesGetOldWithHttpInfo(mode, businessunitcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document types that the user can access This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeBaseDTO> > DocumentTypesGetOldWithHttpInfo (int? mode, string businessunitcode)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetOld");
            // verify the required parameter 'businessunitcode' is set
            if (businessunitcode == null)
                throw new ApiException(400, "Missing required parameter 'businessunitcode' when calling DocumentTypesApi->DocumentTypesGetOld");

            var localVarPath = "/api/DocumentTypes/{mode}/mode/{businessunitcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarPathParams.Add("businessunitcode", Configuration.ApiClient.ParameterToString(businessunitcode)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns the document types that the user can access This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> DocumentTypesGetOldAsync (int? mode, string businessunitcode)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = await DocumentTypesGetOldAsyncWithHttpInfo(mode, businessunitcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document types that the user can access This method is deprecated. Use /api/DocumentTypes/{mode}/mode?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> DocumentTypesGetOldAsyncWithHttpInfo (int? mode, string businessunitcode)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetOld");
            // verify the required parameter 'businessunitcode' is set
            if (businessunitcode == null)
                throw new ApiException(400, "Missing required parameter 'businessunitcode' when calling DocumentTypesApi->DocumentTypesGetOld");

            var localVarPath = "/api/DocumentTypes/{mode}/mode/{businessunitcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarPathParams.Add("businessunitcode", Configuration.ApiClient.ParameterToString(businessunitcode)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        public DocumentTypeBaseTreeDTO DocumentTypesGetTree (int? mode, string businessunitcode = null)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = DocumentTypesGetTreeWithHttpInfo(mode, businessunitcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        public ApiResponse< DocumentTypeBaseTreeDTO > DocumentTypesGetTreeWithHttpInfo (int? mode, string businessunitcode = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetTree");

            var localVarPath = "/api/DocumentTypes/GetTree/{mode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessunitcode", businessunitcode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseTreeDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeAsync (int? mode, string businessunitcode = null)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = await DocumentTypesGetTreeAsyncWithHttpInfo(mode, businessunitcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional) (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> DocumentTypesGetTreeAsyncWithHttpInfo (int? mode, string businessunitcode = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetTree");

            var localVarPath = "/api/DocumentTypes/GetTree/{mode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessunitcode", businessunitcode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseTreeDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        public DocumentTypeBaseTreeDTO DocumentTypesGetTreeOld (int? mode, string businessunitcode, bool? forProtocol)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = DocumentTypesGetTreeOldWithHttpInfo(mode, businessunitcode, forProtocol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        public ApiResponse< DocumentTypeBaseTreeDTO > DocumentTypesGetTreeOldWithHttpInfo (int? mode, string businessunitcode, bool? forProtocol)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetTreeOld");
            // verify the required parameter 'businessunitcode' is set
            if (businessunitcode == null)
                throw new ApiException(400, "Missing required parameter 'businessunitcode' when calling DocumentTypesApi->DocumentTypesGetTreeOld");
            // verify the required parameter 'forProtocol' is set
            if (forProtocol == null)
                throw new ApiException(400, "Missing required parameter 'forProtocol' when calling DocumentTypesApi->DocumentTypesGetTreeOld");

            var localVarPath = "/api/DocumentTypes/GetTree/{mode}/{businessunitcode}/{forProtocol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarPathParams.Add("businessunitcode", Configuration.ApiClient.ParameterToString(businessunitcode)); // path parameter
            if (forProtocol != null) localVarPathParams.Add("forProtocol", Configuration.ApiClient.ParameterToString(forProtocol)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetTreeOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseTreeDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> DocumentTypesGetTreeOldAsync (int? mode, string businessunitcode, bool? forProtocol)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = await DocumentTypesGetTreeOldAsyncWithHttpInfo(mode, businessunitcode, forProtocol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document types that the user can access but in a preformatted tree with parent/child relationship This method is deprecated. Use /api/DocumentTypes/GetTree/{mode}?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: Archive  1: Search  2: EditProfile </param>
        /// <param name="businessunitcode">Business Unit (optional)</param>
        /// <param name="forProtocol">If the type is of Protocol (PA) (default false)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> DocumentTypesGetTreeOldAsyncWithHttpInfo (int? mode, string businessunitcode, bool? forProtocol)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling DocumentTypesApi->DocumentTypesGetTreeOld");
            // verify the required parameter 'businessunitcode' is set
            if (businessunitcode == null)
                throw new ApiException(400, "Missing required parameter 'businessunitcode' when calling DocumentTypesApi->DocumentTypesGetTreeOld");
            // verify the required parameter 'forProtocol' is set
            if (forProtocol == null)
                throw new ApiException(400, "Missing required parameter 'forProtocol' when calling DocumentTypesApi->DocumentTypesGetTreeOld");

            var localVarPath = "/api/DocumentTypes/GetTree/{mode}/{businessunitcode}/{forProtocol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessunitcode != null) localVarPathParams.Add("businessunitcode", Configuration.ApiClient.ParameterToString(businessunitcode)); // path parameter
            if (forProtocol != null) localVarPathParams.Add("forProtocol", Configuration.ApiClient.ParameterToString(forProtocol)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesGetTreeOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeBaseTreeDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

    }
}
