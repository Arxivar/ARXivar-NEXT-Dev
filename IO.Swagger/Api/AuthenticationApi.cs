/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClaimInfoDTO&gt;</returns>
        List<ClaimInfoDTO> AuthenticationGetAcecssTokenClaims ();

        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClaimInfoDTO&gt;</returns>
        ApiResponse<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsWithHttpInfo ();
        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderInfoDto</returns>
        LogonProviderInfoDto AuthenticationGetLogonProviderInfo (string id);

        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderInfoDto</returns>
        ApiResponse<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoWithHttpInfo (string id);
        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderInfoDto&gt;</returns>
        List<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoList ();

        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderInfoDto&gt;</returns>
        ApiResponse<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetToken (AuthenticationTokenRequestDTO authenticationTokenRequest);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest);
        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetTokenArxAssistant ();

        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantWithHttpInfo ();
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (AuthenticationTokenRequestDTO authenticationTokenRequest);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        ApiResponse<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns></returns>
        void AuthenticationPortalLogout (PortalLogoutRequestDto portalLogoutRequest);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (PortalLogoutRequestDto portalLogoutRequest);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationRefresh (RefreshTokenRequestDTO refreshTokenRequest);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationRefreshWithHttpInfo (RefreshTokenRequestDTO refreshTokenRequest);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ClaimInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsAsync ();

        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ClaimInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClaimInfoDTO>>> AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderInfoDto</returns>
        System.Threading.Tasks.Task<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoAsync (string id);

        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListAsync ();

        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonProviderInfoDto>>> AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (AuthenticationTokenRequestDTO authenticationTokenRequest);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest);
        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantAsync ();

        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenArxAssistantAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (AuthenticationTokenRequestDTO authenticationTokenRequest);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (PortalLogoutRequestDto portalLogoutRequest);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (PortalLogoutRequestDto portalLogoutRequest);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (RefreshTokenRequestDTO refreshTokenRequest);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (RefreshTokenRequestDTO refreshTokenRequest);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClaimInfoDTO&gt;</returns>
        public List<ClaimInfoDTO> AuthenticationGetAcecssTokenClaims ()
        {
             ApiResponse<List<ClaimInfoDTO>> localVarResponse = AuthenticationGetAcecssTokenClaimsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClaimInfoDTO&gt;</returns>
        public ApiResponse< List<ClaimInfoDTO> > AuthenticationGetAcecssTokenClaimsWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/AcecssTokenClaims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetAcecssTokenClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClaimInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClaimInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClaimInfoDTO>)));
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ClaimInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsAsync ()
        {
             ApiResponse<List<ClaimInfoDTO>> localVarResponse = await AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ClaimInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ClaimInfoDTO>>> AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/AcecssTokenClaims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetAcecssTokenClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClaimInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClaimInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClaimInfoDTO>)));
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderInfoDto</returns>
        public LogonProviderInfoDto AuthenticationGetLogonProviderInfo (string id)
        {
             ApiResponse<LogonProviderInfoDto> localVarResponse = AuthenticationGetLogonProviderInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderInfoDto</returns>
        public ApiResponse< LogonProviderInfoDto > AuthenticationGetLogonProviderInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationApi->AuthenticationGetLogonProviderInfo");

            var localVarPath = "/api/Authentication/logonProvider/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderInfoDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderInfoDto)));
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderInfoDto</returns>
        public async System.Threading.Tasks.Task<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoAsync (string id)
        {
             ApiResponse<LogonProviderInfoDto> localVarResponse = await AuthenticationGetLogonProviderInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationApi->AuthenticationGetLogonProviderInfo");

            var localVarPath = "/api/Authentication/logonProvider/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderInfoDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderInfoDto)));
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderInfoDto&gt;</returns>
        public List<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoList ()
        {
             ApiResponse<List<LogonProviderInfoDto>> localVarResponse = AuthenticationGetLogonProviderInfoListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderInfoDto&gt;</returns>
        public ApiResponse< List<LogonProviderInfoDto> > AuthenticationGetLogonProviderInfoListWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonProviderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderInfoDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderInfoDto>)));
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListAsync ()
        {
             ApiResponse<List<LogonProviderInfoDto>> localVarResponse = await AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonProviderInfoDto>>> AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonProviderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderInfoDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderInfoDto>)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetToken (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenWithHttpInfo(authenticationTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
            // verify the required parameter 'authenticationTokenRequest' is set
            if (authenticationTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenRequest' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenRequest != null && authenticationTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenAsyncWithHttpInfo(authenticationTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
            // verify the required parameter 'authenticationTokenRequest' is set
            if (authenticationTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenRequest' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenRequest != null && authenticationTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetTokenArxAssistant ()
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenArxAssistantWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenArxAssistantWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/getTokenArxAssistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenArxAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantAsync ()
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenArxAssistantAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenArxAssistantAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/getTokenArxAssistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenArxAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo(authenticationTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
            // verify the required parameter 'authenticationTokenRequest' is set
            if (authenticationTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenRequest' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenRequest != null && authenticationTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo(authenticationTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenRequest">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationTokenRequestDTO authenticationTokenRequest)
        {
            // verify the required parameter 'authenticationTokenRequest' is set
            if (authenticationTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenRequest' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenRequest != null && authenticationTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        public AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = AuthenticationGetWindowsLogonRedirectUriWithHttpInfo(authenticationTokenImplicitRequestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        public ApiResponse< AuthenticationTokenResponseDTO > AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto)
        {
            // verify the required parameter 'authenticationTokenImplicitRequestDto' is set
            if (authenticationTokenImplicitRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenImplicitRequestDto' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenImplicitRequestDto != null && authenticationTokenImplicitRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenImplicitRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenImplicitRequestDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = await AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo(authenticationTokenImplicitRequestDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationTokenImplicitRequestDto">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto)
        {
            // verify the required parameter 'authenticationTokenImplicitRequestDto' is set
            if (authenticationTokenImplicitRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'authenticationTokenImplicitRequestDto' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationTokenImplicitRequestDto != null && authenticationTokenImplicitRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationTokenImplicitRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationTokenImplicitRequestDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns></returns>
        public void AuthenticationPortalLogout (PortalLogoutRequestDto portalLogoutRequest)
        {
             AuthenticationPortalLogoutWithHttpInfo(portalLogoutRequest);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (PortalLogoutRequestDto portalLogoutRequest)
        {
            // verify the required parameter 'portalLogoutRequest' is set
            if (portalLogoutRequest == null)
                throw new ApiException(400, "Missing required parameter 'portalLogoutRequest' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portalLogoutRequest != null && portalLogoutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(portalLogoutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portalLogoutRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (PortalLogoutRequestDto portalLogoutRequest)
        {
             await AuthenticationPortalLogoutAsyncWithHttpInfo(portalLogoutRequest);

        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalLogoutRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (PortalLogoutRequestDto portalLogoutRequest)
        {
            // verify the required parameter 'portalLogoutRequest' is set
            if (portalLogoutRequest == null)
                throw new ApiException(400, "Missing required parameter 'portalLogoutRequest' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portalLogoutRequest != null && portalLogoutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(portalLogoutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portalLogoutRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationRefresh (RefreshTokenRequestDTO refreshTokenRequest)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationRefreshWithHttpInfo(refreshTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationRefreshWithHttpInfo (RefreshTokenRequestDTO refreshTokenRequest)
        {
            // verify the required parameter 'refreshTokenRequest' is set
            if (refreshTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'refreshTokenRequest' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshTokenRequest != null && refreshTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refreshTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refreshTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (RefreshTokenRequestDTO refreshTokenRequest)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationRefreshAsyncWithHttpInfo(refreshTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest">Token request for authentication refresh</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (RefreshTokenRequestDTO refreshTokenRequest)
        {
            // verify the required parameter 'refreshTokenRequest' is set
            if (refreshTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'refreshTokenRequest' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshTokenRequest != null && refreshTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refreshTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refreshTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationTokenDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo(authenticationRefreshTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest)
        {
            // verify the required parameter 'authenticationRefreshTokenRequest' is set
            if (authenticationRefreshTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationRefreshTokenRequest' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationRefreshTokenRequest != null && authenticationRefreshTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationRefreshTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationRefreshTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo(authenticationRefreshTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRefreshTokenRequest">Authetication refresh token request</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest)
        {
            // verify the required parameter 'authenticationRefreshTokenRequest' is set
            if (authenticationRefreshTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationRefreshTokenRequest' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationRefreshTokenRequest != null && authenticationRefreshTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authenticationRefreshTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationRefreshTokenRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

    }
}
