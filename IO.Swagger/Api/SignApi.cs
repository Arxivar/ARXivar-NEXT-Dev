/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        void SignDeleteSignCert (int? id);

        /// <summary>
        /// This call deletes a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SignDeleteSignCertWithHttpInfo (int? id);
        /// <summary>
        /// This call returns a digital signed info of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>DigitalSignInfoDTO</returns>
        DigitalSignInfoDTO SignGetDigitalSignInfo (int? docId, int? tableType);

        /// <summary>
        /// This call returns a digital signed info of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>ApiResponse of DigitalSignInfoDTO</returns>
        ApiResponse<DigitalSignInfoDTO> SignGetDigitalSignInfoWithHttpInfo (int? docId, int? tableType);
        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>List&lt;SignCertRelatedDTO&gt;</returns>
        List<SignCertRelatedDTO> SignGetRelatedSignCertList (int? signCertId);

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>ApiResponse of List&lt;SignCertRelatedDTO&gt;</returns>
        ApiResponse<List<SignCertRelatedDTO>> SignGetRelatedSignCertListWithHttpInfo (int? signCertId);
        /// <summary>
        /// This call returs a specific signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>SignCertDTO</returns>
        SignCertDTO SignGetSignCert (int? id);

        /// <summary>
        /// This call returs a specific signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        ApiResponse<SignCertDTO> SignGetSignCertWithHttpInfo (int? id);
        /// <summary>
        /// This call returs all signature certificates of user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SignCertDTO&gt;</returns>
        List<SignCertDTO> SignGetSignCertList ();

        /// <summary>
        /// This call returs all signature certificates of user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SignCertDTO&gt;</returns>
        ApiResponse<List<SignCertDTO>> SignGetSignCertListWithHttpInfo ();
        /// <summary>
        /// This call returs all signature certificates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SignCertTypeDTO&gt;</returns>
        List<SignCertTypeDTO> SignGetSignCertTypeList ();

        /// <summary>
        /// This call returs all signature certificates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SignCertTypeDTO&gt;</returns>
        ApiResponse<List<SignCertTypeDTO>> SignGetSignCertTypeListWithHttpInfo ();
        /// <summary>
        /// This call returns the automatic use of a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>SignCertUseGetDTO</returns>
        SignCertUseGetDTO SignGetSignCertUseList (int? signCertId);

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>ApiResponse of SignCertUseGetDTO</returns>
        ApiResponse<SignCertUseGetDTO> SignGetSignCertUseListWithHttpInfo (int? signCertId);
        /// <summary>
        /// This call inserts a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>SignCertDTO</returns>
        SignCertDTO SignInsertSignCert (SignCertInsertDTO certInsert);

        /// <summary>
        /// This call inserts a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        ApiResponse<SignCertDTO> SignInsertSignCertWithHttpInfo (SignCertInsertDTO certInsert);
        /// <summary>
        /// This call executes a remote signature operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>RemoteSignResponseDTO</returns>
        RemoteSignResponseDTO SignRemoteSign (RemoteSignRequestDTO remoteSignRequest);

        /// <summary>
        /// This call executes a remote signature operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>ApiResponse of RemoteSignResponseDTO</returns>
        ApiResponse<RemoteSignResponseDTO> SignRemoteSignWithHttpInfo (RemoteSignRequestDTO remoteSignRequest);
        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>RemoteSignResponseDTO</returns>
        RemoteSignResponseDTO SignRemoteSignTaskWork (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest);

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>ApiResponse of RemoteSignResponseDTO</returns>
        ApiResponse<RemoteSignResponseDTO> SignRemoteSignTaskWorkWithHttpInfo (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest);
        /// <summary>
        /// This call tests a Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns></returns>
        void SignTestSignCert (int? signCertId, SignCertPasswordTestDTO certPasswordTest);

        /// <summary>
        /// This call tests a Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SignTestSignCertWithHttpInfo (int? signCertId, SignCertPasswordTestDTO certPasswordTest);
        /// <summary>
        /// This call updates a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>SignCertDTO</returns>
        SignCertDTO SignUpdateSignCert (int? id, SignCertUpdateDTO certUpdate);

        /// <summary>
        /// This call updates a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        ApiResponse<SignCertDTO> SignUpdateSignCertWithHttpInfo (int? id, SignCertUpdateDTO certUpdate);
        /// <summary>
        /// This call updates the automatic use for a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>SignCertUseGetDTO</returns>
        SignCertUseGetDTO SignUpdateSignCertUseList (int? signCertId, SignCertUseSetDTO certUseSet);

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>ApiResponse of SignCertUseGetDTO</returns>
        ApiResponse<SignCertUseGetDTO> SignUpdateSignCertUseListWithHttpInfo (int? signCertId, SignCertUseSetDTO certUseSet);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SignDeleteSignCertAsync (int? id);

        /// <summary>
        /// This call deletes a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SignDeleteSignCertAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns a digital signed info of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>Task of DigitalSignInfoDTO</returns>
        System.Threading.Tasks.Task<DigitalSignInfoDTO> SignGetDigitalSignInfoAsync (int? docId, int? tableType);

        /// <summary>
        /// This call returns a digital signed info of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>Task of ApiResponse (DigitalSignInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignInfoDTO>> SignGetDigitalSignInfoAsyncWithHttpInfo (int? docId, int? tableType);
        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of List&lt;SignCertRelatedDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SignCertRelatedDTO>> SignGetRelatedSignCertListAsync (int? signCertId);

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of ApiResponse (List&lt;SignCertRelatedDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignCertRelatedDTO>>> SignGetRelatedSignCertListAsyncWithHttpInfo (int? signCertId);
        /// <summary>
        /// This call returs a specific signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of SignCertDTO</returns>
        System.Threading.Tasks.Task<SignCertDTO> SignGetSignCertAsync (int? id);

        /// <summary>
        /// This call returs a specific signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignGetSignCertAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returs all signature certificates of user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SignCertDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SignCertDTO>> SignGetSignCertListAsync ();

        /// <summary>
        /// This call returs all signature certificates of user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SignCertDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignCertDTO>>> SignGetSignCertListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returs all signature certificates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SignCertTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SignCertTypeDTO>> SignGetSignCertTypeListAsync ();

        /// <summary>
        /// This call returs all signature certificates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SignCertTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignCertTypeDTO>>> SignGetSignCertTypeListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the automatic use of a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of SignCertUseGetDTO</returns>
        System.Threading.Tasks.Task<SignCertUseGetDTO> SignGetSignCertUseListAsync (int? signCertId);

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of ApiResponse (SignCertUseGetDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCertUseGetDTO>> SignGetSignCertUseListAsyncWithHttpInfo (int? signCertId);
        /// <summary>
        /// This call inserts a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>Task of SignCertDTO</returns>
        System.Threading.Tasks.Task<SignCertDTO> SignInsertSignCertAsync (SignCertInsertDTO certInsert);

        /// <summary>
        /// This call inserts a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignInsertSignCertAsyncWithHttpInfo (SignCertInsertDTO certInsert);
        /// <summary>
        /// This call executes a remote signature operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>Task of RemoteSignResponseDTO</returns>
        System.Threading.Tasks.Task<RemoteSignResponseDTO> SignRemoteSignAsync (RemoteSignRequestDTO remoteSignRequest);

        /// <summary>
        /// This call executes a remote signature operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>Task of ApiResponse (RemoteSignResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteSignResponseDTO>> SignRemoteSignAsyncWithHttpInfo (RemoteSignRequestDTO remoteSignRequest);
        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>Task of RemoteSignResponseDTO</returns>
        System.Threading.Tasks.Task<RemoteSignResponseDTO> SignRemoteSignTaskWorkAsync (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest);

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>Task of ApiResponse (RemoteSignResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteSignResponseDTO>> SignRemoteSignTaskWorkAsyncWithHttpInfo (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest);
        /// <summary>
        /// This call tests a Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SignTestSignCertAsync (int? signCertId, SignCertPasswordTestDTO certPasswordTest);

        /// <summary>
        /// This call tests a Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SignTestSignCertAsyncWithHttpInfo (int? signCertId, SignCertPasswordTestDTO certPasswordTest);
        /// <summary>
        /// This call updates a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>Task of SignCertDTO</returns>
        System.Threading.Tasks.Task<SignCertDTO> SignUpdateSignCertAsync (int? id, SignCertUpdateDTO certUpdate);

        /// <summary>
        /// This call updates a signature certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignUpdateSignCertAsyncWithHttpInfo (int? id, SignCertUpdateDTO certUpdate);
        /// <summary>
        /// This call updates the automatic use for a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>Task of SignCertUseGetDTO</returns>
        System.Threading.Tasks.Task<SignCertUseGetDTO> SignUpdateSignCertUseListAsync (int? signCertId, SignCertUseSetDTO certUseSet);

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>Task of ApiResponse (SignCertUseGetDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignCertUseGetDTO>> SignUpdateSignCertUseListAsyncWithHttpInfo (int? signCertId, SignCertUseSetDTO certUseSet);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SignApi : ISignApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SignApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SignApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        public void SignDeleteSignCert (int? id)
        {
             SignDeleteSignCertWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SignDeleteSignCertWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignDeleteSignCert");

            var localVarPath = "/api/Sign/SignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignDeleteSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SignDeleteSignCertAsync (int? id)
        {
             await SignDeleteSignCertAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SignDeleteSignCertAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignDeleteSignCert");

            var localVarPath = "/api/Sign/SignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignDeleteSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns a digital signed info of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>DigitalSignInfoDTO</returns>
        public DigitalSignInfoDTO SignGetDigitalSignInfo (int? docId, int? tableType)
        {
             ApiResponse<DigitalSignInfoDTO> localVarResponse = SignGetDigitalSignInfoWithHttpInfo(docId, tableType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a digital signed info of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>ApiResponse of DigitalSignInfoDTO</returns>
        public ApiResponse< DigitalSignInfoDTO > SignGetDigitalSignInfoWithHttpInfo (int? docId, int? tableType)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling SignApi->SignGetDigitalSignInfo");
            // verify the required parameter 'tableType' is set
            if (tableType == null)
                throw new ApiException(400, "Missing required parameter 'tableType' when calling SignApi->SignGetDigitalSignInfo");

            var localVarPath = "/api/Sign/DigitalSignInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docId", docId)); // query parameter
            if (tableType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tableType", tableType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetDigitalSignInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DigitalSignInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignInfoDTO)));
        }

        /// <summary>
        /// This call returns a digital signed info of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>Task of DigitalSignInfoDTO</returns>
        public async System.Threading.Tasks.Task<DigitalSignInfoDTO> SignGetDigitalSignInfoAsync (int? docId, int? tableType)
        {
             ApiResponse<DigitalSignInfoDTO> localVarResponse = await SignGetDigitalSignInfoAsyncWithHttpInfo(docId, tableType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a digital signed info of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">Document Identifier</param>
        /// <param name="tableType">Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc </param>
        /// <returns>Task of ApiResponse (DigitalSignInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignInfoDTO>> SignGetDigitalSignInfoAsyncWithHttpInfo (int? docId, int? tableType)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling SignApi->SignGetDigitalSignInfo");
            // verify the required parameter 'tableType' is set
            if (tableType == null)
                throw new ApiException(400, "Missing required parameter 'tableType' when calling SignApi->SignGetDigitalSignInfo");

            var localVarPath = "/api/Sign/DigitalSignInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docId", docId)); // query parameter
            if (tableType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tableType", tableType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetDigitalSignInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DigitalSignInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignInfoDTO)));
        }

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>List&lt;SignCertRelatedDTO&gt;</returns>
        public List<SignCertRelatedDTO> SignGetRelatedSignCertList (int? signCertId)
        {
             ApiResponse<List<SignCertRelatedDTO>> localVarResponse = SignGetRelatedSignCertListWithHttpInfo(signCertId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>ApiResponse of List&lt;SignCertRelatedDTO&gt;</returns>
        public ApiResponse< List<SignCertRelatedDTO> > SignGetRelatedSignCertListWithHttpInfo (int? signCertId)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignGetRelatedSignCertList");

            var localVarPath = "/api/Sign/RelatedSignCertList/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetRelatedSignCertList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertRelatedDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertRelatedDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertRelatedDTO>)));
        }

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of List&lt;SignCertRelatedDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignCertRelatedDTO>> SignGetRelatedSignCertListAsync (int? signCertId)
        {
             ApiResponse<List<SignCertRelatedDTO>> localVarResponse = await SignGetRelatedSignCertListAsyncWithHttpInfo(signCertId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of ApiResponse (List&lt;SignCertRelatedDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SignCertRelatedDTO>>> SignGetRelatedSignCertListAsyncWithHttpInfo (int? signCertId)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignGetRelatedSignCertList");

            var localVarPath = "/api/Sign/RelatedSignCertList/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetRelatedSignCertList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertRelatedDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertRelatedDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertRelatedDTO>)));
        }

        /// <summary>
        /// This call returs a specific signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>SignCertDTO</returns>
        public SignCertDTO SignGetSignCert (int? id)
        {
             ApiResponse<SignCertDTO> localVarResponse = SignGetSignCertWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returs a specific signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        public ApiResponse< SignCertDTO > SignGetSignCertWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignGetSignCert");

            var localVarPath = "/api/Sign/SignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call returs a specific signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of SignCertDTO</returns>
        public async System.Threading.Tasks.Task<SignCertDTO> SignGetSignCertAsync (int? id)
        {
             ApiResponse<SignCertDTO> localVarResponse = await SignGetSignCertAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returs a specific signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignGetSignCertAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignGetSignCert");

            var localVarPath = "/api/Sign/SignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call returs all signature certificates of user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SignCertDTO&gt;</returns>
        public List<SignCertDTO> SignGetSignCertList ()
        {
             ApiResponse<List<SignCertDTO>> localVarResponse = SignGetSignCertListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returs all signature certificates of user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SignCertDTO&gt;</returns>
        public ApiResponse< List<SignCertDTO> > SignGetSignCertListWithHttpInfo ()
        {

            var localVarPath = "/api/Sign/SignCertList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertDTO>)));
        }

        /// <summary>
        /// This call returs all signature certificates of user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SignCertDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignCertDTO>> SignGetSignCertListAsync ()
        {
             ApiResponse<List<SignCertDTO>> localVarResponse = await SignGetSignCertListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returs all signature certificates of user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SignCertDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SignCertDTO>>> SignGetSignCertListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Sign/SignCertList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertDTO>)));
        }

        /// <summary>
        /// This call returs all signature certificates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SignCertTypeDTO&gt;</returns>
        public List<SignCertTypeDTO> SignGetSignCertTypeList ()
        {
             ApiResponse<List<SignCertTypeDTO>> localVarResponse = SignGetSignCertTypeListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returs all signature certificates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SignCertTypeDTO&gt;</returns>
        public ApiResponse< List<SignCertTypeDTO> > SignGetSignCertTypeListWithHttpInfo ()
        {

            var localVarPath = "/api/Sign/SignCertTypeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertTypeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertTypeDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertTypeDTO>)));
        }

        /// <summary>
        /// This call returs all signature certificates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SignCertTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignCertTypeDTO>> SignGetSignCertTypeListAsync ()
        {
             ApiResponse<List<SignCertTypeDTO>> localVarResponse = await SignGetSignCertTypeListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returs all signature certificates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SignCertTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SignCertTypeDTO>>> SignGetSignCertTypeListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Sign/SignCertTypeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertTypeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignCertTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignCertTypeDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignCertTypeDTO>)));
        }

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>SignCertUseGetDTO</returns>
        public SignCertUseGetDTO SignGetSignCertUseList (int? signCertId)
        {
             ApiResponse<SignCertUseGetDTO> localVarResponse = SignGetSignCertUseListWithHttpInfo(signCertId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>ApiResponse of SignCertUseGetDTO</returns>
        public ApiResponse< SignCertUseGetDTO > SignGetSignCertUseListWithHttpInfo (int? signCertId)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignGetSignCertUseList");

            var localVarPath = "/api/Sign/SignCertUse/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertUseList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertUseGetDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertUseGetDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertUseGetDTO)));
        }

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of SignCertUseGetDTO</returns>
        public async System.Threading.Tasks.Task<SignCertUseGetDTO> SignGetSignCertUseListAsync (int? signCertId)
        {
             ApiResponse<SignCertUseGetDTO> localVarResponse = await SignGetSignCertUseListAsyncWithHttpInfo(signCertId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the automatic use of a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <returns>Task of ApiResponse (SignCertUseGetDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignCertUseGetDTO>> SignGetSignCertUseListAsyncWithHttpInfo (int? signCertId)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignGetSignCertUseList");

            var localVarPath = "/api/Sign/SignCertUse/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignGetSignCertUseList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertUseGetDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertUseGetDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertUseGetDTO)));
        }

        /// <summary>
        /// This call inserts a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>SignCertDTO</returns>
        public SignCertDTO SignInsertSignCert (SignCertInsertDTO certInsert)
        {
             ApiResponse<SignCertDTO> localVarResponse = SignInsertSignCertWithHttpInfo(certInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        public ApiResponse< SignCertDTO > SignInsertSignCertWithHttpInfo (SignCertInsertDTO certInsert)
        {
            // verify the required parameter 'certInsert' is set
            if (certInsert == null)
                throw new ApiException(400, "Missing required parameter 'certInsert' when calling SignApi->SignInsertSignCert");

            var localVarPath = "/api/Sign/InsertSignCert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certInsert != null && certInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignInsertSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call inserts a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>Task of SignCertDTO</returns>
        public async System.Threading.Tasks.Task<SignCertDTO> SignInsertSignCertAsync (SignCertInsertDTO certInsert)
        {
             ApiResponse<SignCertDTO> localVarResponse = await SignInsertSignCertAsyncWithHttpInfo(certInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certInsert"></param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignInsertSignCertAsyncWithHttpInfo (SignCertInsertDTO certInsert)
        {
            // verify the required parameter 'certInsert' is set
            if (certInsert == null)
                throw new ApiException(400, "Missing required parameter 'certInsert' when calling SignApi->SignInsertSignCert");

            var localVarPath = "/api/Sign/InsertSignCert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certInsert != null && certInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignInsertSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call executes a remote signature operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>RemoteSignResponseDTO</returns>
        public RemoteSignResponseDTO SignRemoteSign (RemoteSignRequestDTO remoteSignRequest)
        {
             ApiResponse<RemoteSignResponseDTO> localVarResponse = SignRemoteSignWithHttpInfo(remoteSignRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a remote signature operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>ApiResponse of RemoteSignResponseDTO</returns>
        public ApiResponse< RemoteSignResponseDTO > SignRemoteSignWithHttpInfo (RemoteSignRequestDTO remoteSignRequest)
        {
            // verify the required parameter 'remoteSignRequest' is set
            if (remoteSignRequest == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignRequest' when calling SignApi->SignRemoteSign");

            var localVarPath = "/api/Sign/RemoteSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignRequest != null && remoteSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(remoteSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignRemoteSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignResponseDTO)));
        }

        /// <summary>
        /// This call executes a remote signature operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>Task of RemoteSignResponseDTO</returns>
        public async System.Threading.Tasks.Task<RemoteSignResponseDTO> SignRemoteSignAsync (RemoteSignRequestDTO remoteSignRequest)
        {
             ApiResponse<RemoteSignResponseDTO> localVarResponse = await SignRemoteSignAsyncWithHttpInfo(remoteSignRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a remote signature operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignRequest">List of documents to sign</param>
        /// <returns>Task of ApiResponse (RemoteSignResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteSignResponseDTO>> SignRemoteSignAsyncWithHttpInfo (RemoteSignRequestDTO remoteSignRequest)
        {
            // verify the required parameter 'remoteSignRequest' is set
            if (remoteSignRequest == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignRequest' when calling SignApi->SignRemoteSign");

            var localVarPath = "/api/Sign/RemoteSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignRequest != null && remoteSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(remoteSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignRemoteSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignResponseDTO)));
        }

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>RemoteSignResponseDTO</returns>
        public RemoteSignResponseDTO SignRemoteSignTaskWork (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest)
        {
             ApiResponse<RemoteSignResponseDTO> localVarResponse = SignRemoteSignTaskWorkWithHttpInfo(remoteSignTaskWorkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>ApiResponse of RemoteSignResponseDTO</returns>
        public ApiResponse< RemoteSignResponseDTO > SignRemoteSignTaskWorkWithHttpInfo (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest)
        {
            // verify the required parameter 'remoteSignTaskWorkRequest' is set
            if (remoteSignTaskWorkRequest == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignTaskWorkRequest' when calling SignApi->SignRemoteSignTaskWork");

            var localVarPath = "/api/Sign/RemoteSignTaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignTaskWorkRequest != null && remoteSignTaskWorkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(remoteSignTaskWorkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignTaskWorkRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignRemoteSignTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignResponseDTO)));
        }

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>Task of RemoteSignResponseDTO</returns>
        public async System.Threading.Tasks.Task<RemoteSignResponseDTO> SignRemoteSignTaskWorkAsync (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest)
        {
             ApiResponse<RemoteSignResponseDTO> localVarResponse = await SignRemoteSignTaskWorkAsyncWithHttpInfo(remoteSignTaskWorkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a remote signature operation on a TaskWork list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignTaskWorkRequest">List of taskWorks to sign</param>
        /// <returns>Task of ApiResponse (RemoteSignResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteSignResponseDTO>> SignRemoteSignTaskWorkAsyncWithHttpInfo (RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest)
        {
            // verify the required parameter 'remoteSignTaskWorkRequest' is set
            if (remoteSignTaskWorkRequest == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignTaskWorkRequest' when calling SignApi->SignRemoteSignTaskWork");

            var localVarPath = "/api/Sign/RemoteSignTaskWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignTaskWorkRequest != null && remoteSignTaskWorkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(remoteSignTaskWorkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignTaskWorkRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignRemoteSignTaskWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignResponseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignResponseDTO)));
        }

        /// <summary>
        /// This call tests a Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns></returns>
        public void SignTestSignCert (int? signCertId, SignCertPasswordTestDTO certPasswordTest)
        {
             SignTestSignCertWithHttpInfo(signCertId, certPasswordTest);
        }

        /// <summary>
        /// This call tests a Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SignTestSignCertWithHttpInfo (int? signCertId, SignCertPasswordTestDTO certPasswordTest)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignTestSignCert");
            // verify the required parameter 'certPasswordTest' is set
            if (certPasswordTest == null)
                throw new ApiException(400, "Missing required parameter 'certPasswordTest' when calling SignApi->SignTestSignCert");

            var localVarPath = "/api/Sign/TestSignCert/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter
            if (certPasswordTest != null && certPasswordTest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certPasswordTest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certPasswordTest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignTestSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call tests a Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SignTestSignCertAsync (int? signCertId, SignCertPasswordTestDTO certPasswordTest)
        {
             await SignTestSignCertAsyncWithHttpInfo(signCertId, certPasswordTest);

        }

        /// <summary>
        /// This call tests a Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certPasswordTest">Information of test password</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SignTestSignCertAsyncWithHttpInfo (int? signCertId, SignCertPasswordTestDTO certPasswordTest)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignTestSignCert");
            // verify the required parameter 'certPasswordTest' is set
            if (certPasswordTest == null)
                throw new ApiException(400, "Missing required parameter 'certPasswordTest' when calling SignApi->SignTestSignCert");

            var localVarPath = "/api/Sign/TestSignCert/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter
            if (certPasswordTest != null && certPasswordTest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certPasswordTest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certPasswordTest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignTestSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>SignCertDTO</returns>
        public SignCertDTO SignUpdateSignCert (int? id, SignCertUpdateDTO certUpdate)
        {
             ApiResponse<SignCertDTO> localVarResponse = SignUpdateSignCertWithHttpInfo(id, certUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>ApiResponse of SignCertDTO</returns>
        public ApiResponse< SignCertDTO > SignUpdateSignCertWithHttpInfo (int? id, SignCertUpdateDTO certUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignUpdateSignCert");
            // verify the required parameter 'certUpdate' is set
            if (certUpdate == null)
                throw new ApiException(400, "Missing required parameter 'certUpdate' when calling SignApi->SignUpdateSignCert");

            var localVarPath = "/api/Sign/UpdateSignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (certUpdate != null && certUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpdateSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call updates a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>Task of SignCertDTO</returns>
        public async System.Threading.Tasks.Task<SignCertDTO> SignUpdateSignCertAsync (int? id, SignCertUpdateDTO certUpdate)
        {
             ApiResponse<SignCertDTO> localVarResponse = await SignUpdateSignCertAsyncWithHttpInfo(id, certUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a signature certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="certUpdate">Information to update</param>
        /// <returns>Task of ApiResponse (SignCertDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignCertDTO>> SignUpdateSignCertAsyncWithHttpInfo (int? id, SignCertUpdateDTO certUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SignApi->SignUpdateSignCert");
            // verify the required parameter 'certUpdate' is set
            if (certUpdate == null)
                throw new ApiException(400, "Missing required parameter 'certUpdate' when calling SignApi->SignUpdateSignCert");

            var localVarPath = "/api/Sign/UpdateSignCert/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (certUpdate != null && certUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpdateSignCert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertDTO)));
        }

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>SignCertUseGetDTO</returns>
        public SignCertUseGetDTO SignUpdateSignCertUseList (int? signCertId, SignCertUseSetDTO certUseSet)
        {
             ApiResponse<SignCertUseGetDTO> localVarResponse = SignUpdateSignCertUseListWithHttpInfo(signCertId, certUseSet);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>ApiResponse of SignCertUseGetDTO</returns>
        public ApiResponse< SignCertUseGetDTO > SignUpdateSignCertUseListWithHttpInfo (int? signCertId, SignCertUseSetDTO certUseSet)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignUpdateSignCertUseList");
            // verify the required parameter 'certUseSet' is set
            if (certUseSet == null)
                throw new ApiException(400, "Missing required parameter 'certUseSet' when calling SignApi->SignUpdateSignCertUseList");

            var localVarPath = "/api/Sign/UpdateSignCertUse/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter
            if (certUseSet != null && certUseSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certUseSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certUseSet; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpdateSignCertUseList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertUseGetDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertUseGetDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertUseGetDTO)));
        }

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>Task of SignCertUseGetDTO</returns>
        public async System.Threading.Tasks.Task<SignCertUseGetDTO> SignUpdateSignCertUseListAsync (int? signCertId, SignCertUseSetDTO certUseSet)
        {
             ApiResponse<SignCertUseGetDTO> localVarResponse = await SignUpdateSignCertUseListAsyncWithHttpInfo(signCertId, certUseSet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the automatic use for a given Sign certificate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertId">Identifier of certificate</param>
        /// <param name="certUseSet">Setting of certificate use</param>
        /// <returns>Task of ApiResponse (SignCertUseGetDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignCertUseGetDTO>> SignUpdateSignCertUseListAsyncWithHttpInfo (int? signCertId, SignCertUseSetDTO certUseSet)
        {
            // verify the required parameter 'signCertId' is set
            if (signCertId == null)
                throw new ApiException(400, "Missing required parameter 'signCertId' when calling SignApi->SignUpdateSignCertUseList");
            // verify the required parameter 'certUseSet' is set
            if (certUseSet == null)
                throw new ApiException(400, "Missing required parameter 'certUseSet' when calling SignApi->SignUpdateSignCertUseList");

            var localVarPath = "/api/Sign/UpdateSignCertUse/{signCertId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertId != null) localVarPathParams.Add("signCertId", Configuration.ApiClient.ParameterToString(signCertId)); // path parameter
            if (certUseSet != null && certUseSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certUseSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certUseSet; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUpdateSignCertUseList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignCertUseGetDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignCertUseGetDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignCertUseGetDTO)));
        }

    }
}
