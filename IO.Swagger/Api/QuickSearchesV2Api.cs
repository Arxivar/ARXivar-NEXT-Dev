/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickSearchesV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call changes the flag that enable show of the search fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns></returns>
        void QuickSearchesV2ChangeShowFields (string quickSearchId, bool? showFields);

        /// <summary>
        /// This call changes the flag that enable show of the search fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QuickSearchesV2ChangeShowFieldsWithHttpInfo (string quickSearchId, bool? showFields);
        /// <summary>
        /// This call deletes a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns></returns>
        void QuickSearchesV2DeleteQuickSearchById (string quickSearchId);

        /// <summary>
        /// This call deletes a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QuickSearchesV2DeleteQuickSearchByIdWithHttpInfo (string quickSearchId);
        /// <summary>
        /// This call returns all quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FindDTO&gt;</returns>
        List<FindDTO> QuickSearchesV2GetQuickSearch ();

        /// <summary>
        /// This call returns all quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FindDTO&gt;</returns>
        ApiResponse<List<FindDTO>> QuickSearchesV2GetQuickSearchWithHttpInfo ();
        /// <summary>
        /// Thi call returns a quick search by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>QuickSearchDto</returns>
        QuickSearchDto QuickSearchesV2GetQuickSearchById (string quickSearchId);

        /// <summary>
        /// Thi call returns a quick search by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>ApiResponse of QuickSearchDto</returns>
        ApiResponse<QuickSearchDto> QuickSearchesV2GetQuickSearchByIdWithHttpInfo (string quickSearchId);
        /// <summary>
        /// This call adds a new quinck search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>string</returns>
        string QuickSearchesV2Post (QuickSearchDto criteria = null);

        /// <summary>
        /// This call adds a new quinck search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> QuickSearchesV2PostWithHttpInfo (QuickSearchDto criteria = null);
        /// <summary>
        /// This call updates a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>string</returns>
        string QuickSearchesV2Put (string quickSearchId, QuickSearchDto criteria = null);

        /// <summary>
        /// This call updates a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> QuickSearchesV2PutWithHttpInfo (string quickSearchId, QuickSearchDto criteria = null);
        /// <summary>
        /// This call renames a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns></returns>
        void QuickSearchesV2Rename (RenamedQuickSearchDto quickSearchRenamed);

        /// <summary>
        /// This call renames a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QuickSearchesV2RenameWithHttpInfo (RenamedQuickSearchDto quickSearchRenamed);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call changes the flag that enable show of the search fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QuickSearchesV2ChangeShowFieldsAsync (string quickSearchId, bool? showFields);

        /// <summary>
        /// This call changes the flag that enable show of the search fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2ChangeShowFieldsAsyncWithHttpInfo (string quickSearchId, bool? showFields);
        /// <summary>
        /// This call deletes a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QuickSearchesV2DeleteQuickSearchByIdAsync (string quickSearchId);

        /// <summary>
        /// This call deletes a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2DeleteQuickSearchByIdAsyncWithHttpInfo (string quickSearchId);
        /// <summary>
        /// This call returns all quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FindDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FindDTO>> QuickSearchesV2GetQuickSearchAsync ();

        /// <summary>
        /// This call returns all quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FindDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FindDTO>>> QuickSearchesV2GetQuickSearchAsyncWithHttpInfo ();
        /// <summary>
        /// Thi call returns a quick search by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of QuickSearchDto</returns>
        System.Threading.Tasks.Task<QuickSearchDto> QuickSearchesV2GetQuickSearchByIdAsync (string quickSearchId);

        /// <summary>
        /// Thi call returns a quick search by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of ApiResponse (QuickSearchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickSearchDto>> QuickSearchesV2GetQuickSearchByIdAsyncWithHttpInfo (string quickSearchId);
        /// <summary>
        /// This call adds a new quinck search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> QuickSearchesV2PostAsync (QuickSearchDto criteria = null);

        /// <summary>
        /// This call adds a new quinck search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> QuickSearchesV2PostAsyncWithHttpInfo (QuickSearchDto criteria = null);
        /// <summary>
        /// This call updates a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> QuickSearchesV2PutAsync (string quickSearchId, QuickSearchDto criteria = null);

        /// <summary>
        /// This call updates a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> QuickSearchesV2PutAsyncWithHttpInfo (string quickSearchId, QuickSearchDto criteria = null);
        /// <summary>
        /// This call renames a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QuickSearchesV2RenameAsync (RenamedQuickSearchDto quickSearchRenamed);

        /// <summary>
        /// This call renames a quick search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2RenameAsyncWithHttpInfo (RenamedQuickSearchDto quickSearchRenamed);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuickSearchesV2Api : IQuickSearchesV2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSearchesV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public QuickSearchesV2Api(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSearchesV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuickSearchesV2Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call changes the flag that enable show of the search fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns></returns>
        public void QuickSearchesV2ChangeShowFields (string quickSearchId, bool? showFields)
        {
             QuickSearchesV2ChangeShowFieldsWithHttpInfo(quickSearchId, showFields);
        }

        /// <summary>
        /// This call changes the flag that enable show of the search fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QuickSearchesV2ChangeShowFieldsWithHttpInfo (string quickSearchId, bool? showFields)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2ChangeShowFields");
            // verify the required parameter 'showFields' is set
            if (showFields == null)
                throw new ApiException(400, "Missing required parameter 'showFields' when calling QuickSearchesV2Api->QuickSearchesV2ChangeShowFields");

            var localVarPath = "/api/v2/QuickSearches/showFields/{quickSearchId}/{showFields}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter
            if (showFields != null) localVarPathParams.Add("showFields", Configuration.ApiClient.ParameterToString(showFields)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2ChangeShowFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call changes the flag that enable show of the search fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QuickSearchesV2ChangeShowFieldsAsync (string quickSearchId, bool? showFields)
        {
             await QuickSearchesV2ChangeShowFieldsAsyncWithHttpInfo(quickSearchId, showFields);

        }

        /// <summary>
        /// This call changes the flag that enable show of the search fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="showFields">Value for the flag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2ChangeShowFieldsAsyncWithHttpInfo (string quickSearchId, bool? showFields)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2ChangeShowFields");
            // verify the required parameter 'showFields' is set
            if (showFields == null)
                throw new ApiException(400, "Missing required parameter 'showFields' when calling QuickSearchesV2Api->QuickSearchesV2ChangeShowFields");

            var localVarPath = "/api/v2/QuickSearches/showFields/{quickSearchId}/{showFields}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter
            if (showFields != null) localVarPathParams.Add("showFields", Configuration.ApiClient.ParameterToString(showFields)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2ChangeShowFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns></returns>
        public void QuickSearchesV2DeleteQuickSearchById (string quickSearchId)
        {
             QuickSearchesV2DeleteQuickSearchByIdWithHttpInfo(quickSearchId);
        }

        /// <summary>
        /// This call deletes a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QuickSearchesV2DeleteQuickSearchByIdWithHttpInfo (string quickSearchId)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2DeleteQuickSearchById");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2DeleteQuickSearchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QuickSearchesV2DeleteQuickSearchByIdAsync (string quickSearchId)
        {
             await QuickSearchesV2DeleteQuickSearchByIdAsyncWithHttpInfo(quickSearchId);

        }

        /// <summary>
        /// This call deletes a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2DeleteQuickSearchByIdAsyncWithHttpInfo (string quickSearchId)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2DeleteQuickSearchById");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2DeleteQuickSearchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FindDTO&gt;</returns>
        public List<FindDTO> QuickSearchesV2GetQuickSearch ()
        {
             ApiResponse<List<FindDTO>> localVarResponse = QuickSearchesV2GetQuickSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FindDTO&gt;</returns>
        public ApiResponse< List<FindDTO> > QuickSearchesV2GetQuickSearchWithHttpInfo ()
        {

            var localVarPath = "/api/v2/QuickSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2GetQuickSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FindDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FindDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FindDTO>)));
        }

        /// <summary>
        /// This call returns all quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FindDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FindDTO>> QuickSearchesV2GetQuickSearchAsync ()
        {
             ApiResponse<List<FindDTO>> localVarResponse = await QuickSearchesV2GetQuickSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FindDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FindDTO>>> QuickSearchesV2GetQuickSearchAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/QuickSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2GetQuickSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FindDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FindDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FindDTO>)));
        }

        /// <summary>
        /// Thi call returns a quick search by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>QuickSearchDto</returns>
        public QuickSearchDto QuickSearchesV2GetQuickSearchById (string quickSearchId)
        {
             ApiResponse<QuickSearchDto> localVarResponse = QuickSearchesV2GetQuickSearchByIdWithHttpInfo(quickSearchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Thi call returns a quick search by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>ApiResponse of QuickSearchDto</returns>
        public ApiResponse< QuickSearchDto > QuickSearchesV2GetQuickSearchByIdWithHttpInfo (string quickSearchId)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2GetQuickSearchById");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2GetQuickSearchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickSearchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickSearchDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickSearchDto)));
        }

        /// <summary>
        /// Thi call returns a quick search by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of QuickSearchDto</returns>
        public async System.Threading.Tasks.Task<QuickSearchDto> QuickSearchesV2GetQuickSearchByIdAsync (string quickSearchId)
        {
             ApiResponse<QuickSearchDto> localVarResponse = await QuickSearchesV2GetQuickSearchByIdAsyncWithHttpInfo(quickSearchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Thi call returns a quick search by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <returns>Task of ApiResponse (QuickSearchDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuickSearchDto>> QuickSearchesV2GetQuickSearchByIdAsyncWithHttpInfo (string quickSearchId)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2GetQuickSearchById");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2GetQuickSearchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickSearchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickSearchDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickSearchDto)));
        }

        /// <summary>
        /// This call adds a new quinck search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>string</returns>
        public string QuickSearchesV2Post (QuickSearchDto criteria = null)
        {
             ApiResponse<string> localVarResponse = QuickSearchesV2PostWithHttpInfo(criteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new quinck search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > QuickSearchesV2PostWithHttpInfo (QuickSearchDto criteria = null)
        {

            var localVarPath = "/api/v2/QuickSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call adds a new quinck search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> QuickSearchesV2PostAsync (QuickSearchDto criteria = null)
        {
             ApiResponse<string> localVarResponse = await QuickSearchesV2PostAsyncWithHttpInfo(criteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new quinck search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> QuickSearchesV2PostAsyncWithHttpInfo (QuickSearchDto criteria = null)
        {

            var localVarPath = "/api/v2/QuickSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call updates a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>string</returns>
        public string QuickSearchesV2Put (string quickSearchId, QuickSearchDto criteria = null)
        {
             ApiResponse<string> localVarResponse = QuickSearchesV2PutWithHttpInfo(quickSearchId, criteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > QuickSearchesV2PutWithHttpInfo (string quickSearchId, QuickSearchDto criteria = null)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2Put");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Put", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call updates a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> QuickSearchesV2PutAsync (string quickSearchId, QuickSearchDto criteria = null)
        {
             ApiResponse<string> localVarResponse = await QuickSearchesV2PutAsyncWithHttpInfo(quickSearchId, criteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchId">Quick search identifier</param>
        /// <param name="criteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> QuickSearchesV2PutAsyncWithHttpInfo (string quickSearchId, QuickSearchDto criteria = null)
        {
            // verify the required parameter 'quickSearchId' is set
            if (quickSearchId == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchId' when calling QuickSearchesV2Api->QuickSearchesV2Put");

            var localVarPath = "/api/v2/QuickSearches/{quickSearchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchId != null) localVarPathParams.Add("quickSearchId", Configuration.ApiClient.ParameterToString(quickSearchId)); // path parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Put", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call renames a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns></returns>
        public void QuickSearchesV2Rename (RenamedQuickSearchDto quickSearchRenamed)
        {
             QuickSearchesV2RenameWithHttpInfo(quickSearchRenamed);
        }

        /// <summary>
        /// This call renames a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QuickSearchesV2RenameWithHttpInfo (RenamedQuickSearchDto quickSearchRenamed)
        {
            // verify the required parameter 'quickSearchRenamed' is set
            if (quickSearchRenamed == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchRenamed' when calling QuickSearchesV2Api->QuickSearchesV2Rename");

            var localVarPath = "/api/v2/QuickSearches/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchRenamed != null && quickSearchRenamed.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(quickSearchRenamed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quickSearchRenamed; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call renames a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QuickSearchesV2RenameAsync (RenamedQuickSearchDto quickSearchRenamed)
        {
             await QuickSearchesV2RenameAsyncWithHttpInfo(quickSearchRenamed);

        }

        /// <summary>
        /// This call renames a quick search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickSearchRenamed">Information to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QuickSearchesV2RenameAsyncWithHttpInfo (RenamedQuickSearchDto quickSearchRenamed)
        {
            // verify the required parameter 'quickSearchRenamed' is set
            if (quickSearchRenamed == null)
                throw new ApiException(400, "Missing required parameter 'quickSearchRenamed' when calling QuickSearchesV2Api->QuickSearchesV2Rename");

            var localVarPath = "/api/v2/QuickSearches/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickSearchRenamed != null && quickSearchRenamed.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(quickSearchRenamed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quickSearchRenamed; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuickSearchesV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
