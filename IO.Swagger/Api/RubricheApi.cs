/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRubricheApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO RubricheGetByAddressBookId (int? addressBookId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> RubricheGetByAddressBookIdWithHttpInfo (int? addressBookId, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO RubricheGetByContactId (int? contactId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> RubricheGetByContactIdWithHttpInfo (int? contactId, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO RubricheGetByUserId (int? userId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> RubricheGetByUserIdWithHttpInfo (int? userId, string type);
        /// <summary>
        /// This call return all the possible search fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> RubricheGetSearchField ();

        /// <summary>
        /// This call return all the possible search fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> RubricheGetSearchFieldWithHttpInfo ();
        /// <summary>
        /// This call return all the possible select fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> RubricheGetSelectField ();

        /// <summary>
        /// This call return all the possible select fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> RubricheGetSelectFieldWithHttpInfo ();
        /// <summary>
        /// This call make the search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>AddressBookSearchResultDTO</returns>
        AddressBookSearchResultDTO RubrichePostSearch (AddressBookSearchCriteriaDTO searchDto);

        /// <summary>
        /// This call make the search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        ApiResponse<AddressBookSearchResultDTO> RubrichePostSearchWithHttpInfo (AddressBookSearchCriteriaDTO searchDto);
        /// <summary>
        /// This call save the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns></returns>
        void RubrichePutSelectField (List<RubricaFieldDTO> selectFields);

        /// <summary>
        /// This call save the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RubrichePutSelectFieldWithHttpInfo (List<RubricaFieldDTO> selectFields);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByAddressBookIdAsync (int? addressBookId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByAddressBookIdAsyncWithHttpInfo (int? addressBookId, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByContactIdAsync (int? contactId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByContactIdAsyncWithHttpInfo (int? contactId, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByUserIdAsync (int? userId, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByUserIdAsyncWithHttpInfo (int? userId, string type);
        /// <summary>
        /// This call return all the possible search fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> RubricheGetSearchFieldAsync ();

        /// <summary>
        /// This call return all the possible search fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> RubricheGetSearchFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call return all the possible select fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> RubricheGetSelectFieldAsync ();

        /// <summary>
        /// This call return all the possible select fileds for search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> RubricheGetSelectFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call make the search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        System.Threading.Tasks.Task<AddressBookSearchResultDTO> RubrichePostSearchAsync (AddressBookSearchCriteriaDTO searchDto);

        /// <summary>
        /// This call make the search in adress book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> RubrichePostSearchAsyncWithHttpInfo (AddressBookSearchCriteriaDTO searchDto);
        /// <summary>
        /// This call save the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RubrichePutSelectFieldAsync (List<RubricaFieldDTO> selectFields);

        /// <summary>
        /// This call save the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RubrichePutSelectFieldAsyncWithHttpInfo (List<RubricaFieldDTO> selectFields);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RubricheApi : IRubricheApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RubricheApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RubricheApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RubricheApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RubricheApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO RubricheGetByAddressBookId (int? addressBookId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = RubricheGetByAddressBookIdWithHttpInfo(addressBookId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > RubricheGetByAddressBookIdWithHttpInfo (int? addressBookId, string type)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling RubricheApi->RubricheGetByAddressBookId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByAddressBookId");

            var localVarPath = "/api/rubriche/AddressBook/{addressBookId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (addressBookId != null) localVarPathParams.Add("addressBookId", Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByAddressBookIdAsync (int? addressBookId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await RubricheGetByAddressBookIdAsyncWithHttpInfo(addressBookId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByAddressBookIdAsyncWithHttpInfo (int? addressBookId, string type)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling RubricheApi->RubricheGetByAddressBookId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByAddressBookId");

            var localVarPath = "/api/rubriche/AddressBook/{addressBookId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (addressBookId != null) localVarPathParams.Add("addressBookId", Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO RubricheGetByContactId (int? contactId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = RubricheGetByContactIdWithHttpInfo(contactId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > RubricheGetByContactIdWithHttpInfo (int? contactId, string type)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RubricheApi->RubricheGetByContactId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByContactId");

            var localVarPath = "/api/rubriche/Contact/{contactId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByContactId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByContactIdAsync (int? contactId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await RubricheGetByContactIdAsyncWithHttpInfo(contactId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByContactIdAsyncWithHttpInfo (int? contactId, string type)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RubricheApi->RubricheGetByContactId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByContactId");

            var localVarPath = "/api/rubriche/Contact/{contactId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByContactId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO RubricheGetByUserId (int? userId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = RubricheGetByUserIdWithHttpInfo(userId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > RubricheGetByUserIdWithHttpInfo (int? userId, string type)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RubricheApi->RubricheGetByUserId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByUserId");

            var localVarPath = "/api/rubriche/User/{userId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> RubricheGetByUserIdAsync (int? userId, string type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await RubricheGetByUserIdAsyncWithHttpInfo(userId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> RubricheGetByUserIdAsyncWithHttpInfo (int? userId, string type)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RubricheApi->RubricheGetByUserId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RubricheApi->RubricheGetByUserId");

            var localVarPath = "/api/rubriche/User/{userId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
            
        }

        /// <summary>
        /// This call return all the possible search fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> RubricheGetSearchField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = RubricheGetSearchFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return all the possible search fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > RubricheGetSearchFieldWithHttpInfo ()
        {

            var localVarPath = "/api/rubriche/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
            
        }

        /// <summary>
        /// This call return all the possible search fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> RubricheGetSearchFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await RubricheGetSearchFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return all the possible search fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> RubricheGetSearchFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/rubriche/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
            
        }

        /// <summary>
        /// This call return all the possible select fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> RubricheGetSelectField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = RubricheGetSelectFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return all the possible select fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > RubricheGetSelectFieldWithHttpInfo ()
        {

            var localVarPath = "/api/rubriche/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
            
        }

        /// <summary>
        /// This call return all the possible select fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> RubricheGetSelectFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await RubricheGetSelectFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return all the possible select fileds for search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> RubricheGetSelectFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/rubriche/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubricheGetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
            
        }

        /// <summary>
        /// This call make the search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>AddressBookSearchResultDTO</returns>
        public AddressBookSearchResultDTO RubrichePostSearch (AddressBookSearchCriteriaDTO searchDto)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = RubrichePostSearchWithHttpInfo(searchDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call make the search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        public ApiResponse< AddressBookSearchResultDTO > RubrichePostSearchWithHttpInfo (AddressBookSearchCriteriaDTO searchDto)
        {
            // verify the required parameter 'searchDto' is set
            if (searchDto == null)
                throw new ApiException(400, "Missing required parameter 'searchDto' when calling RubricheApi->RubrichePostSearch");

            var localVarPath = "/api/rubriche";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchDto != null && searchDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubrichePostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookSearchResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
            
        }

        /// <summary>
        /// This call make the search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookSearchResultDTO> RubrichePostSearchAsync (AddressBookSearchCriteriaDTO searchDto)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = await RubrichePostSearchAsyncWithHttpInfo(searchDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call make the search in adress book 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchDto">The Dto of the search</param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> RubrichePostSearchAsyncWithHttpInfo (AddressBookSearchCriteriaDTO searchDto)
        {
            // verify the required parameter 'searchDto' is set
            if (searchDto == null)
                throw new ApiException(400, "Missing required parameter 'searchDto' when calling RubricheApi->RubrichePostSearch");

            var localVarPath = "/api/rubriche";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchDto != null && searchDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(searchDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubrichePostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookSearchResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
            
        }

        /// <summary>
        /// This call save the select fields with the user settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns></returns>
        public void RubrichePutSelectField (List<RubricaFieldDTO> selectFields)
        {
             RubrichePutSelectFieldWithHttpInfo(selectFields);
        }

        /// <summary>
        /// This call save the select fields with the user settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RubrichePutSelectFieldWithHttpInfo (List<RubricaFieldDTO> selectFields)
        {
            // verify the required parameter 'selectFields' is set
            if (selectFields == null)
                throw new ApiException(400, "Missing required parameter 'selectFields' when calling RubricheApi->RubrichePutSelectField");

            var localVarPath = "/api/rubriche/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectFields != null && selectFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubrichePutSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call save the select fields with the user settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RubrichePutSelectFieldAsync (List<RubricaFieldDTO> selectFields)
        {
             await RubrichePutSelectFieldAsyncWithHttpInfo(selectFields);

        }

        /// <summary>
        /// This call save the select fields with the user settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectFields">Array of select fields</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RubrichePutSelectFieldAsyncWithHttpInfo (List<RubricaFieldDTO> selectFields)
        {
            // verify the required parameter 'selectFields' is set
            if (selectFields == null)
                throw new ApiException(400, "Missing required parameter 'selectFields' when calling RubricheApi->RubrichePutSelectField");

            var localVarPath = "/api/rubriche/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (selectFields != null && selectFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RubrichePutSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
