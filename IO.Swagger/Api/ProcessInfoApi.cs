/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the attachments of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;AttachmentWorkInfoDTO&gt;</returns>
        List<AttachmentWorkInfoDTO> ProcessInfoGetAttachmentInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the attachments of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;AttachmentWorkInfoDTO&gt;</returns>
        ApiResponse<List<AttachmentWorkInfoDTO>> ProcessInfoGetAttachmentInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the chrono information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ChronoInfoDTO&gt;</returns>
        List<ChronoInfoDTO> ProcessInfoGetChronoInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the chrono information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ChronoInfoDTO&gt;</returns>
        ApiResponse<List<ChronoInfoDTO>> ProcessInfoGetChronoInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the document information associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;DocumentWorkInfoDTO&gt;</returns>
        List<DocumentWorkInfoDTO> ProcessInfoGetDocumentInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the document information associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;DocumentWorkInfoDTO&gt;</returns>
        ApiResponse<List<DocumentWorkInfoDTO>> ProcessInfoGetDocumentInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the note associated with process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;NoteWorkInfoDTO&gt;</returns>
        List<NoteWorkInfoDTO> ProcessInfoGetNoteInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the note associated with process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;NoteWorkInfoDTO&gt;</returns>
        ApiResponse<List<NoteWorkInfoDTO>> ProcessInfoGetNoteInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the process information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInfoDTO</returns>
        ProcessInfoDTO ProcessInfoGetProcessInfo (int? processId);

        /// <summary>
        /// This call returns the process information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInfoDTO</returns>
        ApiResponse<ProcessInfoDTO> ProcessInfoGetProcessInfoWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the professional roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        List<ProfessionalRoleInfoDTO> ProcessInfoGetProfessionalRoleInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the professional roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleInfoDTO>> ProcessInfoGetProfessionalRoleInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all task associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;TaskInfoDTO&gt;</returns>
        List<TaskInfoDTO> ProcessInfoGetTaskInfoByProcess (int? processId);

        /// <summary>
        /// This call returns all task associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;TaskInfoDTO&gt;</returns>
        ApiResponse<List<TaskInfoDTO>> ProcessInfoGetTaskInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the process variable information of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInfoVariableDTO</returns>
        ProcessInfoVariableDTO ProcessInfoGetVariableInfoByProcess (int? processId);

        /// <summary>
        /// This call returns the process variable information of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInfoVariableDTO</returns>
        ApiResponse<ProcessInfoVariableDTO> ProcessInfoGetVariableInfoByProcessWithHttpInfo (int? processId);
        /// <summary>
        /// This call checks if the user connected is supervisor of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>bool?</returns>
        bool? ProcessInfoIsSupervisor (int? processId);

        /// <summary>
        /// This call checks if the user connected is supervisor of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProcessInfoIsSupervisorWithHttpInfo (int? processId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the attachments of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;AttachmentWorkInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentWorkInfoDTO>> ProcessInfoGetAttachmentInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the attachments of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentWorkInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentWorkInfoDTO>>> ProcessInfoGetAttachmentInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the chrono information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ChronoInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ChronoInfoDTO>> ProcessInfoGetChronoInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the chrono information of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ChronoInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChronoInfoDTO>>> ProcessInfoGetChronoInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the document information associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;DocumentWorkInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentWorkInfoDTO>> ProcessInfoGetDocumentInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the document information associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentWorkInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentWorkInfoDTO>>> ProcessInfoGetDocumentInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the note associated with process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;NoteWorkInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NoteWorkInfoDTO>> ProcessInfoGetNoteInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the note associated with process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;NoteWorkInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NoteWorkInfoDTO>>> ProcessInfoGetNoteInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the process information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInfoDTO</returns>
        System.Threading.Tasks.Task<ProcessInfoDTO> ProcessInfoGetProcessInfoAsync (int? processId);

        /// <summary>
        /// This call returns the process information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInfoDTO>> ProcessInfoGetProcessInfoAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the professional roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleInfoDTO>> ProcessInfoGetProfessionalRoleInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the professional roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleInfoDTO>>> ProcessInfoGetProfessionalRoleInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns all task associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;TaskInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfoDTO>> ProcessInfoGetTaskInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns all task associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfoDTO>>> ProcessInfoGetTaskInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call returns the process variable information of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInfoVariableDTO</returns>
        System.Threading.Tasks.Task<ProcessInfoVariableDTO> ProcessInfoGetVariableInfoByProcessAsync (int? processId);

        /// <summary>
        /// This call returns the process variable information of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInfoVariableDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInfoVariableDTO>> ProcessInfoGetVariableInfoByProcessAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call checks if the user connected is supervisor of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProcessInfoIsSupervisorAsync (int? processId);

        /// <summary>
        /// This call checks if the user connected is supervisor of process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProcessInfoIsSupervisorAsyncWithHttpInfo (int? processId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessInfoApi : IProcessInfoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessInfoApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessInfoApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the attachments of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;AttachmentWorkInfoDTO&gt;</returns>
        public List<AttachmentWorkInfoDTO> ProcessInfoGetAttachmentInfoByProcess (int? processId)
        {
             ApiResponse<List<AttachmentWorkInfoDTO>> localVarResponse = ProcessInfoGetAttachmentInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the attachments of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;AttachmentWorkInfoDTO&gt;</returns>
        public ApiResponse< List<AttachmentWorkInfoDTO> > ProcessInfoGetAttachmentInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetAttachmentInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetAttachmentInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the attachments of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;AttachmentWorkInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentWorkInfoDTO>> ProcessInfoGetAttachmentInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<AttachmentWorkInfoDTO>> localVarResponse = await ProcessInfoGetAttachmentInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the attachments of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentWorkInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentWorkInfoDTO>>> ProcessInfoGetAttachmentInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetAttachmentInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetAttachmentInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the chrono information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ChronoInfoDTO&gt;</returns>
        public List<ChronoInfoDTO> ProcessInfoGetChronoInfoByProcess (int? processId)
        {
             ApiResponse<List<ChronoInfoDTO>> localVarResponse = ProcessInfoGetChronoInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the chrono information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ChronoInfoDTO&gt;</returns>
        public ApiResponse< List<ChronoInfoDTO> > ProcessInfoGetChronoInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetChronoInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Chrono";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetChronoInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChronoInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChronoInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChronoInfoDTO>)));
        }

        /// <summary>
        /// This call returns the chrono information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ChronoInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChronoInfoDTO>> ProcessInfoGetChronoInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<ChronoInfoDTO>> localVarResponse = await ProcessInfoGetChronoInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the chrono information of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ChronoInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChronoInfoDTO>>> ProcessInfoGetChronoInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetChronoInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Chrono";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetChronoInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChronoInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChronoInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChronoInfoDTO>)));
        }

        /// <summary>
        /// This call returns the document information associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;DocumentWorkInfoDTO&gt;</returns>
        public List<DocumentWorkInfoDTO> ProcessInfoGetDocumentInfoByProcess (int? processId)
        {
             ApiResponse<List<DocumentWorkInfoDTO>> localVarResponse = ProcessInfoGetDocumentInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document information associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;DocumentWorkInfoDTO&gt;</returns>
        public ApiResponse< List<DocumentWorkInfoDTO> > ProcessInfoGetDocumentInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetDocumentInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetDocumentInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the document information associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;DocumentWorkInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentWorkInfoDTO>> ProcessInfoGetDocumentInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<DocumentWorkInfoDTO>> localVarResponse = await ProcessInfoGetDocumentInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document information associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentWorkInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentWorkInfoDTO>>> ProcessInfoGetDocumentInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetDocumentInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetDocumentInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the note associated with process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;NoteWorkInfoDTO&gt;</returns>
        public List<NoteWorkInfoDTO> ProcessInfoGetNoteInfoByProcess (int? processId)
        {
             ApiResponse<List<NoteWorkInfoDTO>> localVarResponse = ProcessInfoGetNoteInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the note associated with process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;NoteWorkInfoDTO&gt;</returns>
        public ApiResponse< List<NoteWorkInfoDTO> > ProcessInfoGetNoteInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetNoteInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetNoteInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NoteWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NoteWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NoteWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the note associated with process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;NoteWorkInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NoteWorkInfoDTO>> ProcessInfoGetNoteInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<NoteWorkInfoDTO>> localVarResponse = await ProcessInfoGetNoteInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the note associated with process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;NoteWorkInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NoteWorkInfoDTO>>> ProcessInfoGetNoteInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetNoteInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetNoteInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NoteWorkInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NoteWorkInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NoteWorkInfoDTO>)));
        }

        /// <summary>
        /// This call returns the process information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInfoDTO</returns>
        public ProcessInfoDTO ProcessInfoGetProcessInfo (int? processId)
        {
             ApiResponse<ProcessInfoDTO> localVarResponse = ProcessInfoGetProcessInfoWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInfoDTO</returns>
        public ApiResponse< ProcessInfoDTO > ProcessInfoGetProcessInfoWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetProcessInfo");

            var localVarPath = "/api/ProcessInfo/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetProcessInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInfoDTO)));
        }

        /// <summary>
        /// This call returns the process information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProcessInfoDTO> ProcessInfoGetProcessInfoAsync (int? processId)
        {
             ApiResponse<ProcessInfoDTO> localVarResponse = await ProcessInfoGetProcessInfoAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInfoDTO>> ProcessInfoGetProcessInfoAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetProcessInfo");

            var localVarPath = "/api/ProcessInfo/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetProcessInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInfoDTO)));
        }

        /// <summary>
        /// This call returns the professional roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        public List<ProfessionalRoleInfoDTO> ProcessInfoGetProfessionalRoleInfoByProcess (int? processId)
        {
             ApiResponse<List<ProfessionalRoleInfoDTO>> localVarResponse = ProcessInfoGetProfessionalRoleInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleInfoDTO> > ProcessInfoGetProfessionalRoleInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetProfessionalRoleInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/ProfessionalRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetProfessionalRoleInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleInfoDTO>)));
        }

        /// <summary>
        /// This call returns the professional roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ProfessionalRoleInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleInfoDTO>> ProcessInfoGetProfessionalRoleInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<ProfessionalRoleInfoDTO>> localVarResponse = await ProcessInfoGetProfessionalRoleInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleInfoDTO>>> ProcessInfoGetProfessionalRoleInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetProfessionalRoleInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/ProfessionalRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetProfessionalRoleInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleInfoDTO>)));
        }

        /// <summary>
        /// This call returns all task associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;TaskInfoDTO&gt;</returns>
        public List<TaskInfoDTO> ProcessInfoGetTaskInfoByProcess (int? processId)
        {
             ApiResponse<List<TaskInfoDTO>> localVarResponse = ProcessInfoGetTaskInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all task associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;TaskInfoDTO&gt;</returns>
        public ApiResponse< List<TaskInfoDTO> > ProcessInfoGetTaskInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetTaskInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetTaskInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskInfoDTO>)));
        }

        /// <summary>
        /// This call returns all task associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;TaskInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfoDTO>> ProcessInfoGetTaskInfoByProcessAsync (int? processId)
        {
             ApiResponse<List<TaskInfoDTO>> localVarResponse = await ProcessInfoGetTaskInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all task associated with the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskInfoDTO>>> ProcessInfoGetTaskInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetTaskInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetTaskInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskInfoDTO>)));
        }

        /// <summary>
        /// This call returns the process variable information of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInfoVariableDTO</returns>
        public ProcessInfoVariableDTO ProcessInfoGetVariableInfoByProcess (int? processId)
        {
             ApiResponse<ProcessInfoVariableDTO> localVarResponse = ProcessInfoGetVariableInfoByProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process variable information of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInfoVariableDTO</returns>
        public ApiResponse< ProcessInfoVariableDTO > ProcessInfoGetVariableInfoByProcessWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetVariableInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Variable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetVariableInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInfoVariableDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInfoVariableDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInfoVariableDTO)));
        }

        /// <summary>
        /// This call returns the process variable information of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInfoVariableDTO</returns>
        public async System.Threading.Tasks.Task<ProcessInfoVariableDTO> ProcessInfoGetVariableInfoByProcessAsync (int? processId)
        {
             ApiResponse<ProcessInfoVariableDTO> localVarResponse = await ProcessInfoGetVariableInfoByProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process variable information of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInfoVariableDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInfoVariableDTO>> ProcessInfoGetVariableInfoByProcessAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoGetVariableInfoByProcess");

            var localVarPath = "/api/ProcessInfo/{processId}/Variable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoGetVariableInfoByProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInfoVariableDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInfoVariableDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInfoVariableDTO)));
        }

        /// <summary>
        /// This call checks if the user connected is supervisor of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>bool?</returns>
        public bool? ProcessInfoIsSupervisor (int? processId)
        {
             ApiResponse<bool?> localVarResponse = ProcessInfoIsSupervisorWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if the user connected is supervisor of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProcessInfoIsSupervisorWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoIsSupervisor");

            var localVarPath = "/api/ProcessInfo/{processId}/IsSupervisor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoIsSupervisor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if the user connected is supervisor of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProcessInfoIsSupervisorAsync (int? processId)
        {
             ApiResponse<bool?> localVarResponse = await ProcessInfoIsSupervisorAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if the user connected is supervisor of process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProcessInfoIsSupervisorAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessInfoApi->ProcessInfoIsSupervisor");

            var localVarPath = "/api/ProcessInfo/{processId}/IsSupervisor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessInfoIsSupervisor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
