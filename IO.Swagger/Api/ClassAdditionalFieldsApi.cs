/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClassAdditionalFieldsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> ClassAdditionalFieldsAdditionalFieldClassComposeValues (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValuesWithHttpInfo (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers);
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0 (string fieldName, int? documentTypeSystemId, List<int?> docNumbers);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0WithHttpInfo (string fieldName, int? documentTypeSystemId, List<int?> docNumbers);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValuesAsync (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> ClassAdditionalFieldsAdditionalFieldClassComposeValuesAsyncWithHttpInfo (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers);
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0Async (string fieldName, int? documentTypeSystemId, List<int?> docNumbers);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0AsyncWithHttpInfo (string fieldName, int? documentTypeSystemId, List<int?> docNumbers);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClassAdditionalFieldsApi : IClassAdditionalFieldsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAdditionalFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClassAdditionalFieldsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAdditionalFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClassAdditionalFieldsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> ClassAdditionalFieldsAdditionalFieldClassComposeValues (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = ClassAdditionalFieldsAdditionalFieldClassComposeValuesWithHttpInfo(fieldName, documentType, tipo2, tipo3, docNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > ClassAdditionalFieldsAdditionalFieldClassComposeValuesWithHttpInfo (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");

            var localVarPath = "/api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter
            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsAdditionalFieldClassComposeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValuesAsync (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await ClassAdditionalFieldsAdditionalFieldClassComposeValuesAsyncWithHttpInfo(fieldName, documentType, tipo2, tipo3, docNumbers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> ClassAdditionalFieldsAdditionalFieldClassComposeValuesAsyncWithHttpInfo (string fieldName, int? documentType, int? tipo2, int? tipo3, List<int?> docNumbers)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues");

            var localVarPath = "/api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentType != null) localVarPathParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", Configuration.ApiClient.ParameterToString(tipo3)); // path parameter
            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsAdditionalFieldClassComposeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0 (string fieldName, int? documentTypeSystemId, List<int?> docNumbers)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = ClassAdditionalFieldsAdditionalFieldClassComposeValues_0WithHttpInfo(fieldName, documentTypeSystemId, docNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > ClassAdditionalFieldsAdditionalFieldClassComposeValues_0WithHttpInfo (string fieldName, int? documentTypeSystemId, List<int?> docNumbers)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");

            var localVarPath = "/api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsAdditionalFieldClassComposeValues_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0Async (string fieldName, int? documentTypeSystemId, List<int?> docNumbers)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await ClassAdditionalFieldsAdditionalFieldClassComposeValues_0AsyncWithHttpInfo(fieldName, documentTypeSystemId, docNumbers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <param name="docNumbers">Documents Identifier in the additional field</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> ClassAdditionalFieldsAdditionalFieldClassComposeValues_0AsyncWithHttpInfo (string fieldName, int? documentTypeSystemId, List<int?> docNumbers)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");
            // verify the required parameter 'docNumbers' is set
            if (docNumbers == null)
                throw new ApiException(400, "Missing required parameter 'docNumbers' when calling ClassAdditionalFieldsApi->ClassAdditionalFieldsAdditionalFieldClassComposeValues_0");

            var localVarPath = "/api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            if (docNumbers != null && docNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(docNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docNumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsAdditionalFieldClassComposeValues_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

    }
}
