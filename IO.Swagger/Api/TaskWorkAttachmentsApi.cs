/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskWorkAttachmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call adds a new external attachment to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkAttachmentsAddNewExternalAttachments (string bufferId, int? taskWorkId);

        /// <summary>
        /// This call adds a new external attachment to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo (string bufferId, int? taskWorkId);
        /// <summary>
        /// This call adds a new internal attachments to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        void TaskWorkAttachmentsAddNewInternalAttachments (int? docnumber, int? taskWorkId);

        /// <summary>
        /// This call adds a new internal attachments to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo (int? docnumber, int? taskWorkId);
        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns></returns>
        void TaskWorkAttachmentsChangeToSendForTaskAttachments (int? attachmentId, bool? tosend);

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo (int? attachmentId, bool? tosend);
        /// <summary>
        /// This call deletes a process attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns></returns>
        void TaskWorkAttachmentsDeleteTaskAttachementById (int? attachmentId);

        /// <summary>
        /// This call deletes a process attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call returns all attachments of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> TaskWorkAttachmentsGetAttachmentsByProcessId (int? processId);

        /// <summary>
        /// This call returns all attachments of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> TaskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo (int? processId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call adds a new external attachment to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkAttachmentsAddNewExternalAttachmentsAsync (string bufferId, int? taskWorkId);

        /// <summary>
        /// This call adds a new external attachment to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo (string bufferId, int? taskWorkId);
        /// <summary>
        /// This call adds a new internal attachments to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkAttachmentsAddNewInternalAttachmentsAsync (int? docnumber, int? taskWorkId);

        /// <summary>
        /// This call adds a new internal attachments to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo (int? docnumber, int? taskWorkId);
        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkAttachmentsChangeToSendForTaskAttachmentsAsync (int? attachmentId, bool? tosend);

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo (int? attachmentId, bool? tosend);
        /// <summary>
        /// This call deletes a process attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkAttachmentsDeleteTaskAttachementByIdAsync (int? attachmentId);

        /// <summary>
        /// This call deletes a process attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call returns all attachments of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkAttachmentsGetAttachmentsByProcessIdAsync (int? processId);

        /// <summary>
        /// This call returns all attachments of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo (int? processId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskWorkAttachmentsApi : ITaskWorkAttachmentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkAttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkAttachmentsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkAttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkAttachmentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call adds a new external attachment to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkAttachmentsAddNewExternalAttachments (string bufferId, int? taskWorkId)
        {
             TaskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo(bufferId, taskWorkId);
        }

        /// <summary>
        /// This call adds a new external attachment to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkAttachmentsAddNewExternalAttachmentsWithHttpInfo (string bufferId, int? taskWorkId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewExternalAttachments");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewExternalAttachments");

            var localVarPath = "/api/TaskAttachments/bytaskwork/{taskWorkId}/external/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsAddNewExternalAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a new external attachment to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkAttachmentsAddNewExternalAttachmentsAsync (string bufferId, int? taskWorkId)
        {
             await TaskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo(bufferId, taskWorkId);

        }

        /// <summary>
        /// This call adds a new external attachment to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">Identifier of the buffer file</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsAddNewExternalAttachmentsAsyncWithHttpInfo (string bufferId, int? taskWorkId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewExternalAttachments");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewExternalAttachments");

            var localVarPath = "/api/TaskAttachments/bytaskwork/{taskWorkId}/external/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", Configuration.ApiClient.ParameterToString(bufferId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsAddNewExternalAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a new internal attachments to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns></returns>
        public void TaskWorkAttachmentsAddNewInternalAttachments (int? docnumber, int? taskWorkId)
        {
             TaskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo(docnumber, taskWorkId);
        }

        /// <summary>
        /// This call adds a new internal attachments to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkAttachmentsAddNewInternalAttachmentsWithHttpInfo (int? docnumber, int? taskWorkId)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewInternalAttachments");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewInternalAttachments");

            var localVarPath = "/api/TaskAttachments/bytaskwork/{taskWorkId}/internal/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsAddNewInternalAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call adds a new internal attachments to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkAttachmentsAddNewInternalAttachmentsAsync (int? docnumber, int? taskWorkId)
        {
             await TaskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo(docnumber, taskWorkId);

        }

        /// <summary>
        /// This call adds a new internal attachments to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsAddNewInternalAttachmentsAsyncWithHttpInfo (int? docnumber, int? taskWorkId)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewInternalAttachments");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsAddNewInternalAttachments");

            var localVarPath = "/api/TaskAttachments/bytaskwork/{taskWorkId}/internal/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsAddNewInternalAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns></returns>
        public void TaskWorkAttachmentsChangeToSendForTaskAttachments (int? attachmentId, bool? tosend)
        {
             TaskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo(attachmentId, tosend);
        }

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkAttachmentsChangeToSendForTaskAttachmentsWithHttpInfo (int? attachmentId, bool? tosend)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsChangeToSendForTaskAttachments");
            // verify the required parameter 'tosend' is set
            if (tosend == null)
                throw new ApiException(400, "Missing required parameter 'tosend' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsChangeToSendForTaskAttachments");

            var localVarPath = "/api/TaskAttachments/{attachmentId}/tosend/{tosend}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (tosend != null) localVarPathParams.Add("tosend", Configuration.ApiClient.ParameterToString(tosend)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsChangeToSendForTaskAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkAttachmentsChangeToSendForTaskAttachmentsAsync (int? attachmentId, bool? tosend)
        {
             await TaskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo(attachmentId, tosend);

        }

        /// <summary>
        /// this call changes the value of the &#39;to send&#39; flag for an attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="tosend">Value of &#39;to send&#39; flag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsChangeToSendForTaskAttachmentsAsyncWithHttpInfo (int? attachmentId, bool? tosend)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsChangeToSendForTaskAttachments");
            // verify the required parameter 'tosend' is set
            if (tosend == null)
                throw new ApiException(400, "Missing required parameter 'tosend' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsChangeToSendForTaskAttachments");

            var localVarPath = "/api/TaskAttachments/{attachmentId}/tosend/{tosend}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (tosend != null) localVarPathParams.Add("tosend", Configuration.ApiClient.ParameterToString(tosend)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsChangeToSendForTaskAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a process attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns></returns>
        public void TaskWorkAttachmentsDeleteTaskAttachementById (int? attachmentId)
        {
             TaskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo(attachmentId);
        }

        /// <summary>
        /// This call deletes a process attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkAttachmentsDeleteTaskAttachementByIdWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsDeleteTaskAttachementById");

            var localVarPath = "/api/TaskAttachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsDeleteTaskAttachementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a process attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkAttachmentsDeleteTaskAttachementByIdAsync (int? attachmentId)
        {
             await TaskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo(attachmentId);

        }

        /// <summary>
        /// This call deletes a process attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkAttachmentsDeleteTaskAttachementByIdAsyncWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsDeleteTaskAttachementById");

            var localVarPath = "/api/TaskAttachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsDeleteTaskAttachementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all attachments of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> TaskWorkAttachmentsGetAttachmentsByProcessId (int? processId)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = TaskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all attachments of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > TaskWorkAttachmentsGetAttachmentsByProcessIdWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsGetAttachmentsByProcessId");

            var localVarPath = "/api/TaskAttachments/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsGetAttachmentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call returns all attachments of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> TaskWorkAttachmentsGetAttachmentsByProcessIdAsync (int? processId)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await TaskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all attachments of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> TaskWorkAttachmentsGetAttachmentsByProcessIdAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkAttachmentsApi->TaskWorkAttachmentsGetAttachmentsByProcessId");

            var localVarPath = "/api/TaskAttachments/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkAttachmentsGetAttachmentsByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RowSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

    }
}
