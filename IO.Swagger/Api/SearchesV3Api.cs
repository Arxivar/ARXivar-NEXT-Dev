/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchesV3Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesV3Delete ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV3DeleteWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SearchDTO&gt;</returns>
        List<SearchDTO> SearchesV3Get ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SearchDTO&gt;</returns>
        ApiResponse<List<SearchDTO>> SearchesV3GetWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        List<FieldBaseForSearchDTO> SearchesV3GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        ApiResponse<List<FieldBaseForSearchDTO>> SearchesV3GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        SearchDTO SearchesV3GetEmpty ();

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> SearchesV3GetEmptyWithHttpInfo ();
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        FieldFilterDTO SearchesV3GetFiltersForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        ApiResponse<FieldFilterDTO> SearchesV3GetFiltersForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        string SearchesV3GetFormulaForSearch (FieldFormulaCalculateCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchesV3GetFormulaForSearchWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SearchDTO&gt;</returns>
        List<SearchDTO> SearchesV3GetLastSearch ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SearchDTO&gt;</returns>
        ApiResponse<List<SearchDTO>> SearchesV3GetLastSearchWithHttpInfo ();
        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>SearchDTO</returns>
        SearchDTO SearchesV3GetSearchForClasseBox (string additionalFieldName, ProfileDTO profile = null);

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        ApiResponse<SearchDTO> SearchesV3GetSearchForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO profile = null);
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV3GetSelect ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV3GetSelectWithHttpInfo ();
        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV3GetSelect_0 (int? documentType);

        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV3GetSelect_0WithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>SelectDTO</returns>
        SelectDTO SearchesV3GetSelect_1 (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        ApiResponse<SelectDTO> SearchesV3GetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO SearchesV3GetValuesForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> SearchesV3GetValuesForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Object</returns>
        Object SearchesV3LastDocuments (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchesV3LastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Object</returns>
        Object SearchesV3PostSearchMultiple (SearchCriteriaMultipleDto searchwebapimultipledto = null);

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchesV3PostSearchMultipleWithHttpInfo (SearchCriteriaMultipleDto searchwebapimultipledto = null);
        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns></returns>
        void SearchesV3PostSelect (SelectDTO selectDto);

        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV3PostSelectWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SearchesV3ResetSelect ();

        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV3ResetSelectWithHttpInfo ();
        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        void SearchesV3SetDefaultSearch (SearchCriteriaMultipleDto searchwebapidto = null);

        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV3SetDefaultSearchWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null);
        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        void SearchesV3SetLastSearch (SearchCriteriaMultipleDto searchwebapidto = null);

        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SearchesV3SetLastSearchWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV3DeleteAsync ();

        /// <summary>
        /// This call delete the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3DeleteAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SearchDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SearchDTO>> SearchesV3GetAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SearchDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SearchDTO>>> SearchesV3GetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesV3GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesV3GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> SearchesV3GetEmptyAsync ();

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesV3GetEmptyAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        System.Threading.Tasks.Task<FieldFilterDTO> SearchesV3GetFiltersForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> SearchesV3GetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchesV3GetFormulaForSearchAsync (FieldFormulaCalculateCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchesV3GetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SearchDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SearchDTO>> SearchesV3GetLastSearchAsync ();

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SearchDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SearchDTO>>> SearchesV3GetLastSearchAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of SearchDTO</returns>
        System.Threading.Tasks.Task<SearchDTO> SearchesV3GetSearchForClasseBoxAsync (string additionalFieldName, ProfileDTO profile = null);

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesV3GetSearchForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO profile = null);
        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelectAsync ();

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelect_0Async (int? documentType);

        /// <summary>
        /// This call returns a new select dto by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelect_0AsyncWithHttpInfo (int? documentType);
        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of SelectDTO</returns>
        System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelect_1Async (int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call returns a new select dto by document type levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> SearchesV3GetValuesForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesV3GetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchesV3LastDocumentsAsync (int? maxRows, SelectDTO selectDto);

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3LastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto);
        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchesV3PostSearchMultipleAsync (SearchCriteriaMultipleDto searchwebapimultipledto = null);

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3PostSearchMultipleAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapimultipledto = null);
        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV3PostSelectAsync (SelectDTO selectDto);

        /// <summary>
        /// This call saves the default select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3PostSelectAsyncWithHttpInfo (SelectDTO selectDto);
        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV3ResetSelectAsync ();

        /// <summary>
        /// This call deletes a possible custom select for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3ResetSelectAsyncWithHttpInfo ();
        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV3SetDefaultSearchAsync (SearchCriteriaMultipleDto searchwebapidto = null);

        /// <summary>
        /// This call saves the default search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3SetDefaultSearchAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null);
        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SearchesV3SetLastSearchAsync (SearchCriteriaMultipleDto searchwebapidto = null);

        /// <summary>
        /// This call saves the last search for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3SetLastSearchAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchesV3Api : ISearchesV3Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchesV3Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchesV3Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchesV3Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesV3Delete ()
        {
             SearchesV3DeleteWithHttpInfo();
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV3DeleteWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV3DeleteAsync ()
        {
             await SearchesV3DeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call delete the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3DeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SearchDTO&gt;</returns>
        public List<SearchDTO> SearchesV3Get ()
        {
             ApiResponse<List<SearchDTO>> localVarResponse = SearchesV3GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SearchDTO&gt;</returns>
        public ApiResponse< List<SearchDTO> > SearchesV3GetWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SearchDTO>)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SearchDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SearchDTO>> SearchesV3GetAsync ()
        {
             ApiResponse<List<SearchDTO>> localVarResponse = await SearchesV3GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SearchDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SearchDTO>>> SearchesV3GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SearchDTO>)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseForSearchDTO&gt;</returns>
        public List<FieldBaseForSearchDTO> SearchesV3GetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = SearchesV3GetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public ApiResponse< List<FieldBaseForSearchDTO> > SearchesV3GetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");

            var localVarPath = "/api/v3/searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseForSearchDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseForSearchDTO>> SearchesV3GetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseForSearchDTO>> localVarResponse = await SearchesV3GetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the additional fields for search by the given document class and business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document type identifier of first level</param>
        /// <param name="tipoDue">Document type identifier of second level</param>
        /// <param name="tipoTre">Document type identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseForSearchDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseForSearchDTO>>> SearchesV3GetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling SearchesV3Api->SearchesV3GetAdditionalByClasse");

            var localVarPath = "/api/v3/searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseForSearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseForSearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseForSearchDTO>)));
        }

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchDTO</returns>
        public SearchDTO SearchesV3GetEmpty ()
        {
             ApiResponse<SearchDTO> localVarResponse = SearchesV3GetEmptyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > SearchesV3GetEmptyWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/empty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetEmpty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> SearchesV3GetEmptyAsync ()
        {
             ApiResponse<SearchDTO> localVarResponse = await SearchesV3GetEmptyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns an empty search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesV3GetEmptyAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/empty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetEmpty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        public FieldFilterDTO SearchesV3GetFiltersForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = SearchesV3GetFiltersForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        public ApiResponse< FieldFilterDTO > SearchesV3GetFiltersForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterDTO> SearchesV3GetFiltersForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = await SearchesV3GetFiltersForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> SearchesV3GetFiltersForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetFiltersForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        public string SearchesV3GetFormulaForSearch (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = SearchesV3GetFormulaForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchesV3GetFormulaForSearchWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchesV3GetFormulaForSearchAsync (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = await SearchesV3GetFormulaForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchesV3GetFormulaForSearchAsyncWithHttpInfo (FieldFormulaCalculateCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetFormulaForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SearchDTO&gt;</returns>
        public List<SearchDTO> SearchesV3GetLastSearch ()
        {
             ApiResponse<List<SearchDTO>> localVarResponse = SearchesV3GetLastSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SearchDTO&gt;</returns>
        public ApiResponse< List<SearchDTO> > SearchesV3GetLastSearchWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SearchDTO>)));
        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SearchDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SearchDTO>> SearchesV3GetLastSearchAsync ()
        {
             ApiResponse<List<SearchDTO>> localVarResponse = await SearchesV3GetLastSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default search according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SearchDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SearchDTO>>> SearchesV3GetLastSearchAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SearchDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SearchDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SearchDTO>)));
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>SearchDTO</returns>
        public SearchDTO SearchesV3GetSearchForClasseBox (string additionalFieldName, ProfileDTO profile = null)
        {
             ApiResponse<SearchDTO> localVarResponse = SearchesV3GetSearchForClasseBoxWithHttpInfo(additionalFieldName, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of SearchDTO</returns>
        public ApiResponse< SearchDTO > SearchesV3GetSearchForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO profile = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling SearchesV3Api->SearchesV3GetSearchForClasseBox");

            var localVarPath = "/api/v3/searches/byclassadditionalfield/{additionalFieldName}/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", this.Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSearchForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of SearchDTO</returns>
        public async System.Threading.Tasks.Task<SearchDTO> SearchesV3GetSearchForClasseBoxAsync (string additionalFieldName, ProfileDTO profile = null)
        {
             ApiResponse<SearchDTO> localVarResponse = await SearchesV3GetSearchForClasseBoxAsyncWithHttpInfo(additionalFieldName, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a complete search object for search a profile for a additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional field name</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDTO>> SearchesV3GetSearchForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO profile = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling SearchesV3Api->SearchesV3GetSearchForClasseBox");

            var localVarPath = "/api/v3/searches/byclassadditionalfield/{additionalFieldName}/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", this.Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSearchForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDTO)));
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV3GetSelect ()
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV3GetSelectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV3GetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelectAsync ()
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV3GetSelectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a default select according to the Arxivar system settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV3GetSelect_0 (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV3GetSelect_0WithHttpInfo(documentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV3GetSelect_0WithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesV3Api->SearchesV3GetSelect_0");

            var localVarPath = "/api/v3/searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelect_0Async (int? documentType)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV3GetSelect_0AsyncWithHttpInfo(documentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select dto by document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelect_0AsyncWithHttpInfo (int? documentType)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesV3Api->SearchesV3GetSelect_0");

            var localVarPath = "/api/v3/searches/Select/{documentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>SelectDTO</returns>
        public SelectDTO SearchesV3GetSelect_1 (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = SearchesV3GetSelect_1WithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>ApiResponse of SelectDTO</returns>
        public ApiResponse< SelectDTO > SearchesV3GetSelect_1WithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesV3Api->SearchesV3GetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesV3Api->SearchesV3GetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesV3Api->SearchesV3GetSelect_1");

            var localVarPath = "/api/v3/searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", this.Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", this.Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of SelectDTO</returns>
        public async System.Threading.Tasks.Task<SelectDTO> SearchesV3GetSelect_1Async (int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<SelectDTO> localVarResponse = await SearchesV3GetSelect_1AsyncWithHttpInfo(documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new select dto by document type levels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">Document type identifier of first level</param>
        /// <param name="tipo2">Document type identifier of second level</param>
        /// <param name="tipo3">Document type identifier of third level</param>
        /// <returns>Task of ApiResponse (SelectDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectDTO>> SearchesV3GetSelect_1AsyncWithHttpInfo (int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling SearchesV3Api->SearchesV3GetSelect_1");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling SearchesV3Api->SearchesV3GetSelect_1");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling SearchesV3Api->SearchesV3GetSelect_1");

            var localVarPath = "/api/v3/searches/Select/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", this.Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", this.Configuration.ApiClient.ParameterToString(tipo3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetSelect_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SelectDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectDTO)));
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO SearchesV3GetValuesForSearch (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = SearchesV3GetValuesForSearchWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > SearchesV3GetValuesForSearchWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> SearchesV3GetValuesForSearchAsync (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await SearchesV3GetValuesForSearchAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> SearchesV3GetValuesForSearchAsyncWithHttpInfo (FieldValuesSearchCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/v3/searches/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3GetValuesForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Object</returns>
        public Object SearchesV3LastDocuments (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<Object> localVarResponse = SearchesV3LastDocumentsWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SearchesV3LastDocumentsWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesV3Api->SearchesV3LastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesV3Api->SearchesV3LastDocuments");

            var localVarPath = "/api/v3/searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxRows != null) localVarPathParams.Add("maxRows", this.Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3LastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchesV3LastDocumentsAsync (int? maxRows, SelectDTO selectDto)
        {
             ApiResponse<Object> localVarResponse = await SearchesV3LastDocumentsAsyncWithHttpInfo(maxRows, selectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches/lastdocuments/{maxRows} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxRows">Maximun items to search</param>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3LastDocumentsAsyncWithHttpInfo (int? maxRows, SelectDTO selectDto)
        {
            // verify the required parameter 'maxRows' is set
            if (maxRows == null)
                throw new ApiException(400, "Missing required parameter 'maxRows' when calling SearchesV3Api->SearchesV3LastDocuments");
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesV3Api->SearchesV3LastDocuments");

            var localVarPath = "/api/v3/searches/lastdocuments/{maxRows}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxRows != null) localVarPathParams.Add("maxRows", this.Configuration.ApiClient.ParameterToString(maxRows)); // path parameter
            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3LastDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Object</returns>
        public Object SearchesV3PostSearchMultiple (SearchCriteriaMultipleDto searchwebapimultipledto = null)
        {
             ApiResponse<Object> localVarResponse = SearchesV3PostSearchMultipleWithHttpInfo(searchwebapimultipledto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SearchesV3PostSearchMultipleWithHttpInfo (SearchCriteriaMultipleDto searchwebapimultipledto = null)
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapimultipledto != null && searchwebapimultipledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapimultipledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapimultipledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3PostSearchMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchesV3PostSearchMultipleAsync (SearchCriteriaMultipleDto searchwebapimultipledto = null)
        {
             ApiResponse<Object> localVarResponse = await SearchesV3PostSearchMultipleAsyncWithHttpInfo(searchwebapimultipledto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches documents.  This call could not be compatible with some programming language, in this case use the call api/searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapimultipledto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3PostSearchMultipleAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapimultipledto = null)
        {

            var localVarPath = "/api/v3/searches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapimultipledto != null && searchwebapimultipledto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapimultipledto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapimultipledto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3PostSearchMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns></returns>
        public void SearchesV3PostSelect (SelectDTO selectDto)
        {
             SearchesV3PostSelectWithHttpInfo(selectDto);
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV3PostSelectWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesV3Api->SearchesV3PostSelect");

            var localVarPath = "/api/v3/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3PostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV3PostSelectAsync (SelectDTO selectDto)
        {
             await SearchesV3PostSelectAsyncWithHttpInfo(selectDto);

        }

        /// <summary>
        /// This call saves the default select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectDto">Object representing the select</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3PostSelectAsyncWithHttpInfo (SelectDTO selectDto)
        {
            // verify the required parameter 'selectDto' is set
            if (selectDto == null)
                throw new ApiException(400, "Missing required parameter 'selectDto' when calling SearchesV3Api->SearchesV3PostSelect");

            var localVarPath = "/api/v3/searches/Select";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectDto != null && selectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3PostSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SearchesV3ResetSelect ()
        {
             SearchesV3ResetSelectWithHttpInfo();
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV3ResetSelectWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3ResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV3ResetSelectAsync ()
        {
             await SearchesV3ResetSelectAsyncWithHttpInfo();

        }

        /// <summary>
        /// This call deletes a possible custom select for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3ResetSelectAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/searches/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3ResetSelect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        public void SearchesV3SetDefaultSearch (SearchCriteriaMultipleDto searchwebapidto = null)
        {
             SearchesV3SetDefaultSearchWithHttpInfo(searchwebapidto);
        }

        /// <summary>
        /// This call saves the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV3SetDefaultSearchWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null)
        {

            var localVarPath = "/api/v3/searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3SetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV3SetDefaultSearchAsync (SearchCriteriaMultipleDto searchwebapidto = null)
        {
             await SearchesV3SetDefaultSearchAsyncWithHttpInfo(searchwebapidto);

        }

        /// <summary>
        /// This call saves the default search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3SetDefaultSearchAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null)
        {

            var localVarPath = "/api/v3/searches/defaultsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3SetDefaultSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns></returns>
        public void SearchesV3SetLastSearch (SearchCriteriaMultipleDto searchwebapidto = null)
        {
             SearchesV3SetLastSearchWithHttpInfo(searchwebapidto);
        }

        /// <summary>
        /// This call saves the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SearchesV3SetLastSearchWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null)
        {

            var localVarPath = "/api/v3/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3SetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SearchesV3SetLastSearchAsync (SearchCriteriaMultipleDto searchwebapidto = null)
        {
             await SearchesV3SetLastSearchAsyncWithHttpInfo(searchwebapidto);

        }

        /// <summary>
        /// This call saves the last search for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchwebapidto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SearchesV3SetLastSearchAsyncWithHttpInfo (SearchCriteriaMultipleDto searchwebapidto = null)
        {

            var localVarPath = "/api/v3/searches/lastsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchwebapidto != null && searchwebapidto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchwebapidto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchwebapidto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchesV3SetLastSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
