/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharingDefinitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetNewSharingDefinition ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDefinitionDTO&gt;</returns>
        List<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitions ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDefinitionDTO&gt;</returns>
        ApiResponse<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsById (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (SharingDefinitionDTO sharingDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionWithHttpInfo (SharingDefinitionDTO sharingDefinition);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? SharingDefinitionsIsArxLinkConfigured ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SharingDefinitionsIsArxLinkConfiguredWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns></returns>
        void SharingDefinitionsSharingDefinitionDeleteById (string sharingDefinitionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo (string sharingDefinitionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (SharingDefinitionDTO sharingDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (SharingDefinitionDTO sharingDefinition);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDefinitionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDefinitionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingDefinitionDTO>>> SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (SharingDefinitionDTO sharingDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO sharingDefinition);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SharingDefinitionsIsArxLinkConfiguredAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SharingDefinitionsSharingDefinitionDeleteByIdAsync (string sharingDefinitionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo (string sharingDefinitionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (SharingDefinitionDTO sharingDefinition);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO sharingDefinition);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SharingDefinitionsApi : ISharingDefinitionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharingDefinitionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharingDefinitionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetNewSharingDefinition ()
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetNewSharingDefinitionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetNewSharingDefinitionWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetNewSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionAsync ()
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetNewSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDefinitionDTO&gt;</returns>
        public List<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitions ()
        {
             ApiResponse<List<SharingDefinitionDTO>> localVarResponse = SharingDefinitionsGetSharingDefinitionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDefinitionDTO&gt;</returns>
        public ApiResponse< List<SharingDefinitionDTO> > SharingDefinitionsGetSharingDefinitionsWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SharingDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDefinitionDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDefinitionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsAsync ()
        {
             ApiResponse<List<SharingDefinitionDTO>> localVarResponse = await SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDefinitionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SharingDefinitionDTO>>> SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SharingDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDefinitionDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsById (string sharingId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsById");

            var localVarPath = "/api/SharingDefinitions/ById/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdAsync (string sharingId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsById");

            var localVarPath = "/api/SharingDefinitions/ById/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (SharingDefinitionDTO sharingDefinition)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsInsertSharingDefinitionWithHttpInfo(sharingDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsInsertSharingDefinitionWithHttpInfo (SharingDefinitionDTO sharingDefinition)
        {
            // verify the required parameter 'sharingDefinition' is set
            if (sharingDefinition == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinition' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinition != null && sharingDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharingDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharingDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (SharingDefinitionDTO sharingDefinition)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo(sharingDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO sharingDefinition)
        {
            // verify the required parameter 'sharingDefinition' is set
            if (sharingDefinition == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinition' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinition != null && sharingDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharingDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharingDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? SharingDefinitionsIsArxLinkConfigured ()
        {
             ApiResponse<bool?> localVarResponse = SharingDefinitionsIsArxLinkConfiguredWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SharingDefinitionsIsArxLinkConfiguredWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/IsConfigured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsIsArxLinkConfigured", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SharingDefinitionsIsArxLinkConfiguredAsync ()
        {
             ApiResponse<bool?> localVarResponse = await SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/IsConfigured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsIsArxLinkConfigured", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns></returns>
        public void SharingDefinitionsSharingDefinitionDeleteById (string sharingDefinitionId)
        {
             SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo(sharingDefinitionId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo (string sharingDefinitionId)
        {
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingDefinitionsApi->SharingDefinitionsSharingDefinitionDeleteById");

            var localVarPath = "/api/SharingDefinitions/{sharingDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinitionId != null) localVarPathParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsSharingDefinitionDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SharingDefinitionsSharingDefinitionDeleteByIdAsync (string sharingDefinitionId)
        {
             await SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo(sharingDefinitionId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo (string sharingDefinitionId)
        {
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingDefinitionsApi->SharingDefinitionsSharingDefinitionDeleteById");

            var localVarPath = "/api/SharingDefinitions/{sharingDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinitionId != null) localVarPathParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsSharingDefinitionDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (SharingDefinitionDTO sharingDefinition)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsUpdateSharingDefinitionWithHttpInfo(sharingDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (SharingDefinitionDTO sharingDefinition)
        {
            // verify the required parameter 'sharingDefinition' is set
            if (sharingDefinition == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinition' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinition != null && sharingDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharingDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharingDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (SharingDefinitionDTO sharingDefinition)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo(sharingDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinition"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO sharingDefinition)
        {
            // verify the required parameter 'sharingDefinition' is set
            if (sharingDefinition == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinition' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinition != null && sharingDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharingDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharingDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

    }
}
