/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns></returns>
        void ProfilesDeleteProfile (int? docNumber);

        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileDTO</returns>
        ProfileDTO ProfilesGet ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileDTO</returns>
        ApiResponse<ProfileDTO> ProfilesGetWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> ProfilesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        FieldFilterDTO ProfilesGetFiltersForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        ApiResponse<FieldFilterDTO> ProfilesGetFiltersForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        string ProfilesGetFormulaForArchive (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProfilesGetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        EditProfileSchemaDTO ProfilesGetSchema (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        ApiResponse<EditProfileSchemaDTO> ProfilesGetSchemaWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO ProfilesGetValuesForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> ProfilesGetValuesForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ProfileDTO</returns>
        ProfileDTO ProfilesGet_0 (int? docNumber);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ApiResponse of ProfileDTO</returns>
        ApiResponse<ProfileDTO> ProfilesGet_0WithHttpInfo (int? docNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        bool? ProfilesLockProfile (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesLockProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        void ProfilesPost (ProfileDTO profile = null);

        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesPostWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        void ProfilesPut (int? docnumber, ProfileDTO profile = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesPutWithHttpInfo (int? docnumber, ProfileDTO profile = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        bool? ProfilesUnLockProfile (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesUnLockProfileWithHttpInfo (int? docNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesDeleteProfileAsync (int? docNumber);

        /// <summary>
        /// This call delete profile by docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileDTO</returns>
        System.Threading.Tasks.Task<ProfileDTO> ProfilesGetAsync ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileDTO>> ProfilesGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        System.Threading.Tasks.Task<FieldFilterDTO> ProfilesGetFiltersForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> ProfilesGetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProfilesGetFormulaForArchiveAsync (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProfilesGetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetSchemaAsync (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> ProfilesGetValuesForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesGetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ProfileDTO</returns>
        System.Threading.Tasks.Task<ProfileDTO> ProfilesGet_0Async (int? docNumber);

        /// <summary>
        /// This call returns full profile given some docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ApiResponse (ProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileDTO>> ProfilesGet_0AsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesLockProfileAsync (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesPostAsync (ProfileDTO profile = null);

        /// <summary>
        /// This call allows the insertion of new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPostAsyncWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesPutAsync (int? docnumber, ProfileDTO profile = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPutAsyncWithHttpInfo (int? docnumber, ProfileDTO profile = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesUnLockProfileAsync (int? docNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfileAsyncWithHttpInfo (int? docNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesApi : IProfilesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfilesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns></returns>
        public void ProfilesDeleteProfile (int? docNumber)
        {
             ProfilesDeleteProfileWithHttpInfo(docNumber);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesDeleteProfile");

            var localVarPath = "/api/profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesDeleteProfileAsync (int? docNumber)
        {
             await ProfilesDeleteProfileAsyncWithHttpInfo(docNumber);

        }

        /// <summary>
        /// This call delete profile by docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesDeleteProfile");

            var localVarPath = "/api/profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileDTO</returns>
        public ProfileDTO ProfilesGet ()
        {
             ApiResponse<ProfileDTO> localVarResponse = ProfilesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileDTO</returns>
        public ApiResponse< ProfileDTO > ProfilesGetWithHttpInfo ()
        {

            var localVarPath = "/api/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileDTO)));
            
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileDTO</returns>
        public async System.Threading.Tasks.Task<ProfileDTO> ProfilesGetAsync ()
        {
             ApiResponse<ProfileDTO> localVarResponse = await ProfilesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving based on user connected 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileDTO>> ProfilesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileDTO)));
            
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> ProfilesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = ProfilesGetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > ProfilesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesApi->ProfilesGetAdditionalByClasse");

            var localVarPath = "/api/profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
            
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await ProfilesGetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">DocumentType first id</param>
        /// <param name="tipoDue">DocumentType second id</param>
        /// <param name="tipoTre">DocumentType third id</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesApi->ProfilesGetAdditionalByClasse");

            var localVarPath = "/api/profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoUno != null) localVarPathParams.Add("tipoUno", Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        public FieldFilterDTO ProfilesGetFiltersForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = ProfilesGetFiltersForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        public ApiResponse< FieldFilterDTO > ProfilesGetFiltersForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
            
        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterDTO> ProfilesGetFiltersForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = await ProfilesGetFiltersForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> ProfilesGetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        public string ProfilesGetFormulaForArchive (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = ProfilesGetFormulaForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ProfilesGetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProfilesGetFormulaForArchiveAsync (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = await ProfilesGetFormulaForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method return the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProfilesGetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        public EditProfileSchemaDTO ProfilesGetSchema (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = ProfilesGetSchemaWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        public ApiResponse< EditProfileSchemaDTO > ProfilesGetSchemaWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetSchema");

            var localVarPath = "/api/profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetSchemaAsync (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = await ProfilesGetSchemaAsyncWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetSchema");

            var localVarPath = "/api/profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO ProfilesGetValuesForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = ProfilesGetValuesForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > ProfilesGetValuesForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> ProfilesGetValuesForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await ProfilesGetValuesForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesGetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ProfileDTO</returns>
        public ProfileDTO ProfilesGet_0 (int? docNumber)
        {
             ApiResponse<ProfileDTO> localVarResponse = ProfilesGet_0WithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>ApiResponse of ProfileDTO</returns>
        public ApiResponse< ProfileDTO > ProfilesGet_0WithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGet_0");

            var localVarPath = "/api/profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileDTO)));
            
        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ProfileDTO</returns>
        public async System.Threading.Tasks.Task<ProfileDTO> ProfilesGet_0Async (int? docNumber)
        {
             ApiResponse<ProfileDTO> localVarResponse = await ProfilesGet_0AsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns full profile given some docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Docnumber of the profile that you want to receive</param>
        /// <returns>Task of ApiResponse (ProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileDTO>> ProfilesGet_0AsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGet_0");

            var localVarPath = "/api/profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileDTO)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        public bool? ProfilesLockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesLockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesLockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile");

            var localVarPath = "/api/profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesLockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesLockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile");

            var localVarPath = "/api/profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        public void ProfilesPost (ProfileDTO profile = null)
        {
             ProfilesPostWithHttpInfo(profile);
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesPostWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesPostAsync (ProfileDTO profile = null)
        {
             await ProfilesPostAsyncWithHttpInfo(profile);

        }

        /// <summary>
        /// This call allows the insertion of new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPostAsyncWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        public void ProfilesPut (int? docnumber, ProfileDTO profile = null)
        {
             ProfilesPutWithHttpInfo(docnumber, profile);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesPutWithHttpInfo (int? docnumber, ProfileDTO profile = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesPut");

            var localVarPath = "/api/profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesPutAsync (int? docnumber, ProfileDTO profile = null)
        {
             await ProfilesPutAsyncWithHttpInfo(docnumber, profile);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPutAsyncWithHttpInfo (int? docnumber, ProfileDTO profile = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesPut");

            var localVarPath = "/api/profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docnumber != null) localVarPathParams.Add("docnumber", Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>bool?</returns>
        public bool? ProfilesUnLockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesUnLockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesUnLockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile");

            var localVarPath = "/api/profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesUnLockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesUnLockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile");

            var localVarPath = "/api/profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (docNumber != null) localVarPathParams.Add("docNumber", Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

    }
}
