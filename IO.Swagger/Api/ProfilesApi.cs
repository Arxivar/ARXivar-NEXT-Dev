/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call insert new profile from automatic monitored folder file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns></returns>
        void ProfilesArchiveMonitoredFolderFileFromBufferAutomatic (string bufferId);

        /// <summary>
        /// This call insert new profile from automatic monitored folder file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesArchiveMonitoredFolderFileFromBufferAutomaticWithHttpInfo (string bufferId);
        /// <summary>
        /// This call deletes association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns></returns>
        void ProfilesDeleteIdErpById (int? id);

        /// <summary>
        /// This call deletes association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesDeleteIdErpByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns></returns>
        void ProfilesDeleteProfile (int? docNumber);

        /// <summary>
        /// This call deletes a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the mask schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>EditProfileSchemaDTO</returns>
        EditProfileSchemaDTO ProfilesGet (int? docNumber);

        /// <summary>
        /// This call returns the mask schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        ApiResponse<EditProfileSchemaDTO> ProfilesGetWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> ProfilesGetAdditionalAll ();

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> ProfilesGetAdditionalAllWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> ProfilesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> ProfilesGetAdditionalByClasseOld (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseOldWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO ProfilesGetByDocumentType (GetByDocumentTypeRequestDTO documenttypecode);

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> ProfilesGetByDocumentTypeWithHttpInfo (GetByDocumentTypeRequestDTO documenttypecode);
        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// Use detail/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>List&lt;EditProfileSchemaDTO&gt;</returns>
        List<EditProfileSchemaDTO> ProfilesGetByIdErp (string iderp);

        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// Use detail/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>ApiResponse of List&lt;EditProfileSchemaDTO&gt;</returns>
        ApiResponse<List<EditProfileSchemaDTO>> ProfilesGetByIdErpWithHttpInfo (string iderp);
        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>List&lt;EditProfileSchemaDTO&gt;</returns>
        List<EditProfileSchemaDTO> ProfilesGetByIdErp_0 (ByIdErpDto idErpDto);

        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>ApiResponse of List&lt;EditProfileSchemaDTO&gt;</returns>
        ApiResponse<List<EditProfileSchemaDTO>> ProfilesGetByIdErp_0WithHttpInfo (ByIdErpDto idErpDto);
        /// <summary>
        /// this call returns all association with idErps for a specific docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByDocnumber (int? docnumber);

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        ApiResponse<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// Use iderp/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByIdErp (string idErp);

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// Use iderp/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        ApiResponse<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErpWithHttpInfo (string idErp);
        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByIdErp_0 (ByIdErpDto idErpDto);

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        ApiResponse<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErp_0WithHttpInfo (ByIdErpDto idErpDto);
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        FieldFilterDTO ProfilesGetFiltersForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        ApiResponse<FieldFilterDTO> ProfilesGetFiltersForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO ProfilesGetForBarcode ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> ProfilesGetForBarcodeWithHttpInfo ();
        /// <summary>
        /// This call clones a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO ProfilesGetForClone (int? docNumber, bool? includefile);

        /// <summary>
        /// This call clones a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> ProfilesGetForCloneWithHttpInfo (int? docNumber, bool? includefile);
        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>EditProfileSchemaDTO</returns>
        EditProfileSchemaDTO ProfilesGetForTask (int? docNumber, int? taskId);

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        ApiResponse<EditProfileSchemaDTO> ProfilesGetForTaskWithHttpInfo (int? docNumber, int? taskId);
        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        EditProfileSchemaDTO ProfilesGetForTask_0 (int? docNumber, int? taskId, bool? switched);

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        ApiResponse<EditProfileSchemaDTO> ProfilesGetForTask_0WithHttpInfo (int? docNumber, int? taskId, bool? switched);
        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        string ProfilesGetFormulaForArchive (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProfilesGetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns the edit schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        EditProfileSchemaDTO ProfilesGetSchema (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns the edit schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        ApiResponse<EditProfileSchemaDTO> ProfilesGetSchemaWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO ProfilesGetSchema_0 (string bufferId);

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> ProfilesGetSchema_0WithHttpInfo (string bufferId);
        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO ProfilesGetValuesForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> ProfilesGetValuesForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO ProfilesGet_0 ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> ProfilesGet_0WithHttpInfo ();
        /// <summary>
        /// This call insert new association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns></returns>
        void ProfilesInsertIdErp (DocnumberIdErpAssociationDTO docnumberIdErpAssociation);

        /// <summary>
        /// This call insert new association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesInsertIdErpWithHttpInfo (DocnumberIdErpAssociationDTO docnumberIdErpAssociation);
        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>bool?</returns>
        bool? ProfilesLockProfile (int? docNumber);

        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesLockProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>bool?</returns>
        bool? ProfilesLockProfile_0 (int? docNumber, int? taskId);

        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesLockProfile_0WithHttpInfo (int? docNumber, int? taskId);
        /// <summary>
        /// This call inserts a new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO ProfilesPost (ProfileDTO profile = null);

        /// <summary>
        /// This call inserts a new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> ProfilesPostWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO ProfilesPostForBarcode (ProfileDTO profile = null);

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> ProfilesPostForBarcodeWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// This call updates an existent profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        void ProfilesPut (int? docnumber, ProfileDTO profile = null);

        /// <summary>
        /// This call updates an existent profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesPutWithHttpInfo (int? docnumber, ProfileDTO profile = null);
        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>bool?</returns>
        bool? ProfilesUnLockProfile (int? docNumber);

        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesUnLockProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>bool?</returns>
        bool? ProfilesUnLockProfile_0 (int? docNumber, int? taskid);

        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ProfilesUnLockProfile_0WithHttpInfo (int? docNumber, int? taskid);
        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ValidationFieldResultDTO</returns>
        ValidationFieldResultDTO ProfilesValidateForArchive (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        ApiResponse<ValidationFieldResultDTO> ProfilesValidateForArchiveWithHttpInfo (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call insert new profile from automatic monitored folder file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesArchiveMonitoredFolderFileFromBufferAutomaticAsync (string bufferId);

        /// <summary>
        /// This call insert new profile from automatic monitored folder file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesArchiveMonitoredFolderFileFromBufferAutomaticAsyncWithHttpInfo (string bufferId);
        /// <summary>
        /// This call deletes association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesDeleteIdErpByIdAsync (int? id);

        /// <summary>
        /// This call deletes association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteIdErpByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesDeleteProfileAsync (int? docNumber);

        /// <summary>
        /// This call deletes a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the mask schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetAsync (int? docNumber);

        /// <summary>
        /// This call returns the mask schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalAllAsync ();

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalAllAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null);
        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseOldAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseOldAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetByDocumentTypeAsync (GetByDocumentTypeRequestDTO documenttypecode);

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetByDocumentTypeAsyncWithHttpInfo (GetByDocumentTypeRequestDTO documenttypecode);
        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// Use detail/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>Task of List&lt;EditProfileSchemaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EditProfileSchemaDTO>> ProfilesGetByIdErpAsync (string iderp);

        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// Use detail/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;EditProfileSchemaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EditProfileSchemaDTO>>> ProfilesGetByIdErpAsyncWithHttpInfo (string iderp);
        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of List&lt;EditProfileSchemaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EditProfileSchemaDTO>> ProfilesGetByIdErp_0Async (ByIdErpDto idErpDto);

        /// <summary>
        /// This call returns the mask schema of documents by idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of ApiResponse (List&lt;EditProfileSchemaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EditProfileSchemaDTO>>> ProfilesGetByIdErp_0AsyncWithHttpInfo (ByIdErpDto idErpDto);
        /// <summary>
        /// this call returns all association with idErps for a specific docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByDocnumberAsync (int? docnumber);

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// Use iderp/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErpAsync (string idErp);

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// Use iderp/byIdErp
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByIdErpAsyncWithHttpInfo (string idErp);
        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErp_0Async (ByIdErpDto idErpDto);

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByIdErp_0AsyncWithHttpInfo (ByIdErpDto idErpDto);
        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        System.Threading.Tasks.Task<FieldFilterDTO> ProfilesGetFiltersForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> ProfilesGetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetForBarcodeAsync ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetForBarcodeAsyncWithHttpInfo ();
        /// <summary>
        /// This call clones a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetForCloneAsync (int? docNumber, bool? includefile);

        /// <summary>
        /// This call clones a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetForCloneAsyncWithHttpInfo (int? docNumber, bool? includefile);
        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetForTaskAsync (int? docNumber, int? taskId);

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetForTaskAsyncWithHttpInfo (int? docNumber, int? taskId);
        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetForTask_0Async (int? docNumber, int? taskId, bool? switched);

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetForTask_0AsyncWithHttpInfo (int? docNumber, int? taskId, bool? switched);
        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProfilesGetFormulaForArchiveAsync (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProfilesGetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call returns the edit schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetSchemaAsync (int? docNumber, bool? switched);

        /// <summary>
        /// This call returns the edit schema of a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched);
        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetSchema_0Async (string bufferId);

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetSchema_0AsyncWithHttpInfo (string bufferId);
        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> ProfilesGetValuesForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesGetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null);
        /// <summary>
        /// This call allows the retrieval of the default profile for archiving
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGet_0Async ();

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGet_0AsyncWithHttpInfo ();
        /// <summary>
        /// This call insert new association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesInsertIdErpAsync (DocnumberIdErpAssociationDTO docnumberIdErpAssociation);

        /// <summary>
        /// This call insert new association between Docnumber and IdErp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesInsertIdErpAsyncWithHttpInfo (DocnumberIdErpAssociationDTO docnumberIdErpAssociation);
        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesLockProfileAsync (int? docNumber);

        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesLockProfile_0Async (int? docNumber, int? taskId);

        /// <summary>
        /// This call checks if a profile is lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfile_0AsyncWithHttpInfo (int? docNumber, int? taskId);
        /// <summary>
        /// This call inserts a new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> ProfilesPostAsync (ProfileDTO profile = null);

        /// <summary>
        /// This call inserts a new profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesPostAsyncWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> ProfilesPostForBarcodeAsync (ProfileDTO profile = null);

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesPostForBarcodeAsyncWithHttpInfo (ProfileDTO profile = null);
        /// <summary>
        /// This call updates an existent profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesPutAsync (int? docnumber, ProfileDTO profile = null);

        /// <summary>
        /// This call updates an existent profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPutAsyncWithHttpInfo (int? docnumber, ProfileDTO profile = null);
        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesUnLockProfileAsync (int? docNumber);

        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ProfilesUnLockProfile_0Async (int? docNumber, int? taskid);

        /// <summary>
        /// This call checks if a profile is not lock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfile_0AsyncWithHttpInfo (int? docNumber, int? taskid);
        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        System.Threading.Tasks.Task<ValidationFieldResultDTO> ProfilesValidateForArchiveAsync (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null);

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProfilesValidateForArchiveAsyncWithHttpInfo (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesApi : IProfilesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfilesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfilesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call insert new profile from automatic monitored folder file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns></returns>
        public void ProfilesArchiveMonitoredFolderFileFromBufferAutomatic (string bufferId)
        {
             ProfilesArchiveMonitoredFolderFileFromBufferAutomaticWithHttpInfo(bufferId);
        }

        /// <summary>
        /// This call insert new profile from automatic monitored folder file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesArchiveMonitoredFolderFileFromBufferAutomaticWithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling ProfilesApi->ProfilesArchiveMonitoredFolderFileFromBufferAutomatic");

            var localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesArchiveMonitoredFolderFileFromBufferAutomatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call insert new profile from automatic monitored folder file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesArchiveMonitoredFolderFileFromBufferAutomaticAsync (string bufferId)
        {
             await ProfilesArchiveMonitoredFolderFileFromBufferAutomaticAsyncWithHttpInfo(bufferId);

        }

        /// <summary>
        /// This call insert new profile from automatic monitored folder file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">File from monitored folder in buffer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesArchiveMonitoredFolderFileFromBufferAutomaticAsyncWithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling ProfilesApi->ProfilesArchiveMonitoredFolderFileFromBufferAutomatic");

            var localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesArchiveMonitoredFolderFileFromBufferAutomatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns></returns>
        public void ProfilesDeleteIdErpById (int? id)
        {
             ProfilesDeleteIdErpByIdWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesDeleteIdErpByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProfilesApi->ProfilesDeleteIdErpById");

            var localVarPath = "/api/Profiles/iderp/byId/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteIdErpById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesDeleteIdErpByIdAsync (int? id)
        {
             await ProfilesDeleteIdErpByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Association id for External Id and profile to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteIdErpByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProfilesApi->ProfilesDeleteIdErpById");

            var localVarPath = "/api/Profiles/iderp/byId/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteIdErpById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns></returns>
        public void ProfilesDeleteProfile (int? docNumber)
        {
             ProfilesDeleteProfileWithHttpInfo(docNumber);
        }

        /// <summary>
        /// This call deletes a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesDeleteProfile");

            var localVarPath = "/api/Profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesDeleteProfileAsync (int? docNumber)
        {
             await ProfilesDeleteProfileAsyncWithHttpInfo(docNumber);

        }

        /// <summary>
        /// This call deletes a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identfier to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesDeleteProfile");

            var localVarPath = "/api/Profiles/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns the mask schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>EditProfileSchemaDTO</returns>
        public EditProfileSchemaDTO ProfilesGet (int? docNumber)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = ProfilesGetWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the mask schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        public ApiResponse< EditProfileSchemaDTO > ProfilesGetWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGet");

            var localVarPath = "/api/Profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetAsync (int? docNumber)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = await ProfilesGetAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the mask schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGet");

            var localVarPath = "/api/Profiles/detail/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> ProfilesGetAdditionalAll ()
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = ProfilesGetAdditionalAllWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > ProfilesGetAdditionalAllWithHttpInfo ()
        {

            var localVarPath = "/api/Profiles/Additional/All";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalAllAsync ()
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await ProfilesGetAdditionalAllAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of the additional field for archiving cross all classes and business units 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalAllAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Profiles/Additional/All";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> ProfilesGetAdditionalByClasse (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = ProfilesGetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > ProfilesGetAdditionalByClasseWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasse");

            var localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await ProfilesGetAdditionalByClasseAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo = null)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasse");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasse");

            var localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aoo", aoo)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> ProfilesGetAdditionalByClasseOld (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = ProfilesGetAdditionalByClasseOldWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > ProfilesGetAdditionalByClasseOldWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");

            var localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", this.Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasseOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> ProfilesGetAdditionalByClasseOldAsync (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await ProfilesGetAdditionalByClasseOldAsyncWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of the additional field for archiving by the given business unit and document class (including groups) This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoUno">Document Type Identifier of first level</param>
        /// <param name="tipoDue">DocumentType Identifier of second level</param>
        /// <param name="tipoTre">DocumentType Identifier of third level</param>
        /// <param name="aoo">Business unit code</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> ProfilesGetAdditionalByClasseOldAsyncWithHttpInfo (int? tipoUno, int? tipoDue, int? tipoTre, string aoo)
        {
            // verify the required parameter 'tipoUno' is set
            if (tipoUno == null)
                throw new ApiException(400, "Missing required parameter 'tipoUno' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoDue' is set
            if (tipoDue == null)
                throw new ApiException(400, "Missing required parameter 'tipoDue' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'tipoTre' is set
            if (tipoTre == null)
                throw new ApiException(400, "Missing required parameter 'tipoTre' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling ProfilesApi->ProfilesGetAdditionalByClasseOld");

            var localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoUno != null) localVarPathParams.Add("tipoUno", this.Configuration.ApiClient.ParameterToString(tipoUno)); // path parameter
            if (tipoDue != null) localVarPathParams.Add("tipoDue", this.Configuration.ApiClient.ParameterToString(tipoDue)); // path parameter
            if (tipoTre != null) localVarPathParams.Add("tipoTre", this.Configuration.ApiClient.ParameterToString(tipoTre)); // path parameter
            if (aoo != null) localVarPathParams.Add("aoo", this.Configuration.ApiClient.ParameterToString(aoo)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetAdditionalByClasseOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO ProfilesGetByDocumentType (GetByDocumentTypeRequestDTO documenttypecode)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = ProfilesGetByDocumentTypeWithHttpInfo(documenttypecode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > ProfilesGetByDocumentTypeWithHttpInfo (GetByDocumentTypeRequestDTO documenttypecode)
        {
            // verify the required parameter 'documenttypecode' is set
            if (documenttypecode == null)
                throw new ApiException(400, "Missing required parameter 'documenttypecode' when calling ProfilesApi->ProfilesGetByDocumentType");

            var localVarPath = "/api/Profiles/bydocumenttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documenttypecode != null && documenttypecode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documenttypecode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documenttypecode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByDocumentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetByDocumentTypeAsync (GetByDocumentTypeRequestDTO documenttypecode)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await ProfilesGetByDocumentTypeAsyncWithHttpInfo(documenttypecode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving by given document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documenttypecode">Document type code</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetByDocumentTypeAsyncWithHttpInfo (GetByDocumentTypeRequestDTO documenttypecode)
        {
            // verify the required parameter 'documenttypecode' is set
            if (documenttypecode == null)
                throw new ApiException(400, "Missing required parameter 'documenttypecode' when calling ProfilesApi->ProfilesGetByDocumentType");

            var localVarPath = "/api/Profiles/bydocumenttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documenttypecode != null && documenttypecode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documenttypecode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documenttypecode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByDocumentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp Use detail/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>List&lt;EditProfileSchemaDTO&gt;</returns>
        public List<EditProfileSchemaDTO> ProfilesGetByIdErp (string iderp)
        {
             ApiResponse<List<EditProfileSchemaDTO>> localVarResponse = ProfilesGetByIdErpWithHttpInfo(iderp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp Use detail/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>ApiResponse of List&lt;EditProfileSchemaDTO&gt;</returns>
        public ApiResponse< List<EditProfileSchemaDTO> > ProfilesGetByIdErpWithHttpInfo (string iderp)
        {
            // verify the required parameter 'iderp' is set
            if (iderp == null)
                throw new ApiException(400, "Missing required parameter 'iderp' when calling ProfilesApi->ProfilesGetByIdErp");

            var localVarPath = "/api/Profiles/detail/byIdErp/{iderp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iderp != null) localVarPathParams.Add("iderp", this.Configuration.ApiClient.ParameterToString(iderp)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EditProfileSchemaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EditProfileSchemaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EditProfileSchemaDTO>)));
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp Use detail/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>Task of List&lt;EditProfileSchemaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EditProfileSchemaDTO>> ProfilesGetByIdErpAsync (string iderp)
        {
             ApiResponse<List<EditProfileSchemaDTO>> localVarResponse = await ProfilesGetByIdErpAsyncWithHttpInfo(iderp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp Use detail/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iderp">Document external Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;EditProfileSchemaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EditProfileSchemaDTO>>> ProfilesGetByIdErpAsyncWithHttpInfo (string iderp)
        {
            // verify the required parameter 'iderp' is set
            if (iderp == null)
                throw new ApiException(400, "Missing required parameter 'iderp' when calling ProfilesApi->ProfilesGetByIdErp");

            var localVarPath = "/api/Profiles/detail/byIdErp/{iderp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iderp != null) localVarPathParams.Add("iderp", this.Configuration.ApiClient.ParameterToString(iderp)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EditProfileSchemaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EditProfileSchemaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EditProfileSchemaDTO>)));
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>List&lt;EditProfileSchemaDTO&gt;</returns>
        public List<EditProfileSchemaDTO> ProfilesGetByIdErp_0 (ByIdErpDto idErpDto)
        {
             ApiResponse<List<EditProfileSchemaDTO>> localVarResponse = ProfilesGetByIdErp_0WithHttpInfo(idErpDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>ApiResponse of List&lt;EditProfileSchemaDTO&gt;</returns>
        public ApiResponse< List<EditProfileSchemaDTO> > ProfilesGetByIdErp_0WithHttpInfo (ByIdErpDto idErpDto)
        {
            // verify the required parameter 'idErpDto' is set
            if (idErpDto == null)
                throw new ApiException(400, "Missing required parameter 'idErpDto' when calling ProfilesApi->ProfilesGetByIdErp_0");

            var localVarPath = "/api/Profiles/detail/byIdErp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErpDto != null && idErpDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idErpDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idErpDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByIdErp_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EditProfileSchemaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EditProfileSchemaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EditProfileSchemaDTO>)));
        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of List&lt;EditProfileSchemaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EditProfileSchemaDTO>> ProfilesGetByIdErp_0Async (ByIdErpDto idErpDto)
        {
             ApiResponse<List<EditProfileSchemaDTO>> localVarResponse = await ProfilesGetByIdErp_0AsyncWithHttpInfo(idErpDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the mask schema of documents by idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of ApiResponse (List&lt;EditProfileSchemaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EditProfileSchemaDTO>>> ProfilesGetByIdErp_0AsyncWithHttpInfo (ByIdErpDto idErpDto)
        {
            // verify the required parameter 'idErpDto' is set
            if (idErpDto == null)
                throw new ApiException(400, "Missing required parameter 'idErpDto' when calling ProfilesApi->ProfilesGetByIdErp_0");

            var localVarPath = "/api/Profiles/detail/byIdErp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErpDto != null && idErpDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idErpDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idErpDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetByIdErp_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EditProfileSchemaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EditProfileSchemaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EditProfileSchemaDTO>)));
        }

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByDocnumber (int? docnumber)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = ProfilesGetDocnumberIdErpAssociationByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public ApiResponse< List<DocnumberIdErpAssociationDTO> > ProfilesGetDocnumberIdErpAssociationByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByDocnumber");

            var localVarPath = "/api/Profiles/iderp/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = await ProfilesGetDocnumberIdErpAssociationByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this call returns all association with idErps for a specific docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Docnumber to search</param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByDocnumber");

            var localVarPath = "/api/Profiles/iderp/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp Use iderp/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByIdErp (string idErp)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = ProfilesGetDocnumberIdErpAssociationByIdErpWithHttpInfo(idErp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp Use iderp/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public ApiResponse< List<DocnumberIdErpAssociationDTO> > ProfilesGetDocnumberIdErpAssociationByIdErpWithHttpInfo (string idErp)
        {
            // verify the required parameter 'idErp' is set
            if (idErp == null)
                throw new ApiException(400, "Missing required parameter 'idErp' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByIdErp");

            var localVarPath = "/api/Profiles/iderp/byIdErp/{idErp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErp != null) localVarPathParams.Add("idErp", this.Configuration.ApiClient.ParameterToString(idErp)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp Use iderp/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErpAsync (string idErp)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = await ProfilesGetDocnumberIdErpAssociationByIdErpAsyncWithHttpInfo(idErp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp Use iderp/byIdErp
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErp">IdErp to search</param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByIdErpAsyncWithHttpInfo (string idErp)
        {
            // verify the required parameter 'idErp' is set
            if (idErp == null)
                throw new ApiException(400, "Missing required parameter 'idErp' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByIdErp");

            var localVarPath = "/api/Profiles/iderp/byIdErp/{idErp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErp != null) localVarPathParams.Add("idErp", this.Configuration.ApiClient.ParameterToString(idErp)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public List<DocnumberIdErpAssociationDTO> ProfilesGetDocnumberIdErpAssociationByIdErp_0 (ByIdErpDto idErpDto)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = ProfilesGetDocnumberIdErpAssociationByIdErp_0WithHttpInfo(idErpDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>ApiResponse of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public ApiResponse< List<DocnumberIdErpAssociationDTO> > ProfilesGetDocnumberIdErpAssociationByIdErp_0WithHttpInfo (ByIdErpDto idErpDto)
        {
            // verify the required parameter 'idErpDto' is set
            if (idErpDto == null)
                throw new ApiException(400, "Missing required parameter 'idErpDto' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByIdErp_0");

            var localVarPath = "/api/Profiles/iderp/byIdErp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErpDto != null && idErpDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idErpDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idErpDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByIdErp_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of List&lt;DocnumberIdErpAssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocnumberIdErpAssociationDTO>> ProfilesGetDocnumberIdErpAssociationByIdErp_0Async (ByIdErpDto idErpDto)
        {
             ApiResponse<List<DocnumberIdErpAssociationDTO>> localVarResponse = await ProfilesGetDocnumberIdErpAssociationByIdErp_0AsyncWithHttpInfo(idErpDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this call returns all association with docnumbers for a specific idErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idErpDto"></param>
        /// <returns>Task of ApiResponse (List&lt;DocnumberIdErpAssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocnumberIdErpAssociationDTO>>> ProfilesGetDocnumberIdErpAssociationByIdErp_0AsyncWithHttpInfo (ByIdErpDto idErpDto)
        {
            // verify the required parameter 'idErpDto' is set
            if (idErpDto == null)
                throw new ApiException(400, "Missing required parameter 'idErpDto' when calling ProfilesApi->ProfilesGetDocnumberIdErpAssociationByIdErp_0");

            var localVarPath = "/api/Profiles/iderp/byIdErp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idErpDto != null && idErpDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idErpDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idErpDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetDocnumberIdErpAssociationByIdErp_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocnumberIdErpAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocnumberIdErpAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocnumberIdErpAssociationDTO>)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldFilterDTO</returns>
        public FieldFilterDTO ProfilesGetFiltersForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = ProfilesGetFiltersForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldFilterDTO</returns>
        public ApiResponse< FieldFilterDTO > ProfilesGetFiltersForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldFilterDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterDTO> ProfilesGetFiltersForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldFilterDTO> localVarResponse = await ProfilesGetFiltersForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the list of filter avaible for a specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterDTO>> ProfilesGetFiltersForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFiltersForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterDTO)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO ProfilesGetForBarcode ()
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = ProfilesGetForBarcodeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > ProfilesGetForBarcodeWithHttpInfo ()
        {

            var localVarPath = "/api/Profiles/forbarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetForBarcodeAsync ()
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await ProfilesGetForBarcodeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving barcode 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetForBarcodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Profiles/forbarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call clones a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO ProfilesGetForClone (int? docNumber, bool? includefile)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = ProfilesGetForCloneWithHttpInfo(docNumber, includefile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call clones a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > ProfilesGetForCloneWithHttpInfo (int? docNumber, bool? includefile)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForClone");
            // verify the required parameter 'includefile' is set
            if (includefile == null)
                throw new ApiException(400, "Missing required parameter 'includefile' when calling ProfilesApi->ProfilesGetForClone");

            var localVarPath = "/api/Profiles/clone/{docNumber}/{includefile}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (includefile != null) localVarPathParams.Add("includefile", this.Configuration.ApiClient.ParameterToString(includefile)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call clones a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetForCloneAsync (int? docNumber, bool? includefile)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await ProfilesGetForCloneAsyncWithHttpInfo(docNumber, includefile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call clones a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="includefile">Specify if the clone operation must include file</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetForCloneAsyncWithHttpInfo (int? docNumber, bool? includefile)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForClone");
            // verify the required parameter 'includefile' is set
            if (includefile == null)
                throw new ApiException(400, "Missing required parameter 'includefile' when calling ProfilesApi->ProfilesGetForClone");

            var localVarPath = "/api/Profiles/clone/{docNumber}/{includefile}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (includefile != null) localVarPathParams.Add("includefile", this.Configuration.ApiClient.ParameterToString(includefile)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>EditProfileSchemaDTO</returns>
        public EditProfileSchemaDTO ProfilesGetForTask (int? docNumber, int? taskId)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = ProfilesGetForTaskWithHttpInfo(docNumber, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        public ApiResponse< EditProfileSchemaDTO > ProfilesGetForTaskWithHttpInfo (int? docNumber, int? taskId)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesGetForTask");

            var localVarPath = "/api/Profiles/detail/{docNumber}/task/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetForTaskAsync (int? docNumber, int? taskId)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = await ProfilesGetForTaskAsyncWithHttpInfo(docNumber, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetForTaskAsyncWithHttpInfo (int? docNumber, int? taskId)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesGetForTask");

            var localVarPath = "/api/Profiles/detail/{docNumber}/task/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        public EditProfileSchemaDTO ProfilesGetForTask_0 (int? docNumber, int? taskId, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = ProfilesGetForTask_0WithHttpInfo(docNumber, taskId, switched);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        public ApiResponse< EditProfileSchemaDTO > ProfilesGetForTask_0WithHttpInfo (int? docNumber, int? taskId, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForTask_0");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesGetForTask_0");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetForTask_0");

            var localVarPath = "/api/Profiles/detail/{docNumber}/task/{taskId}/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", this.Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForTask_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetForTask_0Async (int? docNumber, int? taskId, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = await ProfilesGetForTask_0AsyncWithHttpInfo(docNumber, taskId, switched);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the mask schema of a document in a taskwork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">TaskWork Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetForTask_0AsyncWithHttpInfo (int? docNumber, int? taskId, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetForTask_0");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesGetForTask_0");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetForTask_0");

            var localVarPath = "/api/Profiles/detail/{docNumber}/task/{taskId}/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", this.Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetForTask_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>string</returns>
        public string ProfilesGetFormulaForArchive (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = ProfilesGetFormulaForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ProfilesGetFormulaForArchiveWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProfilesGetFormulaForArchiveAsync (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<string> localVarResponse = await ProfilesGetFormulaForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the result of a formula given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProfilesGetFormulaForArchiveAsyncWithHttpInfo (FieldFormulaCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Formula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetFormulaForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This call returns the edit schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>EditProfileSchemaDTO</returns>
        public EditProfileSchemaDTO ProfilesGetSchema (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = ProfilesGetSchemaWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the edit schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>ApiResponse of EditProfileSchemaDTO</returns>
        public ApiResponse< EditProfileSchemaDTO > ProfilesGetSchemaWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetSchema");

            var localVarPath = "/api/Profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", this.Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the edit schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of EditProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<EditProfileSchemaDTO> ProfilesGetSchemaAsync (int? docNumber, bool? switched)
        {
             ApiResponse<EditProfileSchemaDTO> localVarResponse = await ProfilesGetSchemaAsyncWithHttpInfo(docNumber, switched);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the edit schema of a document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="switched"></param>
        /// <returns>Task of ApiResponse (EditProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditProfileSchemaDTO>> ProfilesGetSchemaAsyncWithHttpInfo (int? docNumber, bool? switched)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesGetSchema");
            // verify the required parameter 'switched' is set
            if (switched == null)
                throw new ApiException(400, "Missing required parameter 'switched' when calling ProfilesApi->ProfilesGetSchema");

            var localVarPath = "/api/Profiles/{docNumber}/schema/{switched}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (switched != null) localVarPathParams.Add("switched", this.Configuration.ApiClient.ParameterToString(switched)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EditProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO ProfilesGetSchema_0 (string bufferId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = ProfilesGetSchema_0WithHttpInfo(bufferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > ProfilesGetSchema_0WithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling ProfilesApi->ProfilesGetSchema_0");

            var localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGetSchema_0Async (string bufferId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await ProfilesGetSchema_0AsyncWithHttpInfo(bufferId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the edit schema of a document from a file for a monitored folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bufferId">buffer Identifier</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGetSchema_0AsyncWithHttpInfo (string bufferId)
        {
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling ProfilesApi->ProfilesGetSchema_0");

            var localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetSchema_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO ProfilesGetValuesForArchive (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = ProfilesGetValuesForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > ProfilesGetValuesForArchiveWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> ProfilesGetValuesForArchiveAsync (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await ProfilesGetValuesForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProfilesGetValuesForArchiveAsyncWithHttpInfo (FieldValuesArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGetValuesForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO ProfilesGet_0 ()
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = ProfilesGet_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > ProfilesGet_0WithHttpInfo ()
        {

            var localVarPath = "/api/Profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> ProfilesGet_0Async ()
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await ProfilesGet_0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the retrieval of the default profile for archiving 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> ProfilesGet_0AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call insert new association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns></returns>
        public void ProfilesInsertIdErp (DocnumberIdErpAssociationDTO docnumberIdErpAssociation)
        {
             ProfilesInsertIdErpWithHttpInfo(docnumberIdErpAssociation);
        }

        /// <summary>
        /// This call insert new association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesInsertIdErpWithHttpInfo (DocnumberIdErpAssociationDTO docnumberIdErpAssociation)
        {
            // verify the required parameter 'docnumberIdErpAssociation' is set
            if (docnumberIdErpAssociation == null)
                throw new ApiException(400, "Missing required parameter 'docnumberIdErpAssociation' when calling ProfilesApi->ProfilesInsertIdErp");

            var localVarPath = "/api/Profiles/iderp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumberIdErpAssociation != null && docnumberIdErpAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumberIdErpAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumberIdErpAssociation; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesInsertIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call insert new association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesInsertIdErpAsync (DocnumberIdErpAssociationDTO docnumberIdErpAssociation)
        {
             await ProfilesInsertIdErpAsyncWithHttpInfo(docnumberIdErpAssociation);

        }

        /// <summary>
        /// This call insert new association between Docnumber and IdErp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumberIdErpAssociation">Association DTO between Docnumber and External Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesInsertIdErpAsyncWithHttpInfo (DocnumberIdErpAssociationDTO docnumberIdErpAssociation)
        {
            // verify the required parameter 'docnumberIdErpAssociation' is set
            if (docnumberIdErpAssociation == null)
                throw new ApiException(400, "Missing required parameter 'docnumberIdErpAssociation' when calling ProfilesApi->ProfilesInsertIdErp");

            var localVarPath = "/api/Profiles/iderp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumberIdErpAssociation != null && docnumberIdErpAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumberIdErpAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumberIdErpAssociation; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesInsertIdErp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>bool?</returns>
        public bool? ProfilesLockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesLockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesLockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile");

            var localVarPath = "/api/Profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesLockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesLockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile");

            var localVarPath = "/api/Profiles/lock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>bool?</returns>
        public bool? ProfilesLockProfile_0 (int? docNumber, int? taskId)
        {
             ApiResponse<bool?> localVarResponse = ProfilesLockProfile_0WithHttpInfo(docNumber, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesLockProfile_0WithHttpInfo (int? docNumber, int? taskId)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile_0");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesLockProfile_0");

            var localVarPath = "/api/Profiles/lock/{docNumber}/taskid/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesLockProfile_0Async (int? docNumber, int? taskId)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesLockProfile_0AsyncWithHttpInfo(docNumber, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if a profile is lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskId">Id of task work</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesLockProfile_0AsyncWithHttpInfo (int? docNumber, int? taskId)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesLockProfile_0");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProfilesApi->ProfilesLockProfile_0");

            var localVarPath = "/api/Profiles/lock/{docNumber}/taskid/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesLockProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call inserts a new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO ProfilesPost (ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = ProfilesPostWithHttpInfo(profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > ProfilesPostWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/Profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call inserts a new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> ProfilesPostAsync (ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await ProfilesPostAsyncWithHttpInfo(profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesPostAsyncWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/Profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO ProfilesPostForBarcode (ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = ProfilesPostForBarcodeWithHttpInfo(profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > ProfilesPostForBarcodeWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/Profiles/forbarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPostForBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> ProfilesPostForBarcodeAsync (ProfileDTO profile = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await ProfilesPostForBarcodeAsyncWithHttpInfo(profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows the insertion of new profile for barcode purpose 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> ProfilesPostForBarcodeAsyncWithHttpInfo (ProfileDTO profile = null)
        {

            var localVarPath = "/api/Profiles/forbarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPostForBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call updates an existent profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns></returns>
        public void ProfilesPut (int? docnumber, ProfileDTO profile = null)
        {
             ProfilesPutWithHttpInfo(docnumber, profile);
        }

        /// <summary>
        /// This call updates an existent profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesPutWithHttpInfo (int? docnumber, ProfileDTO profile = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesPut");

            var localVarPath = "/api/Profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates an existent profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesPutAsync (int? docnumber, ProfileDTO profile = null)
        {
             await ProfilesPutAsyncWithHttpInfo(docnumber, profile);

        }

        /// <summary>
        /// This call updates an existent profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier to update</param>
        /// <param name="profile"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesPutAsyncWithHttpInfo (int? docnumber, ProfileDTO profile = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ProfilesApi->ProfilesPut");

            var localVarPath = "/api/Profiles/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>bool?</returns>
        public bool? ProfilesUnLockProfile (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = ProfilesUnLockProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesUnLockProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile");

            var localVarPath = "/api/Profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesUnLockProfileAsync (int? docNumber)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesUnLockProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile");

            var localVarPath = "/api/Profiles/unlock/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>bool?</returns>
        public bool? ProfilesUnLockProfile_0 (int? docNumber, int? taskid)
        {
             ApiResponse<bool?> localVarResponse = ProfilesUnLockProfile_0WithHttpInfo(docNumber, taskid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ProfilesUnLockProfile_0WithHttpInfo (int? docNumber, int? taskid)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile_0");
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling ProfilesApi->ProfilesUnLockProfile_0");

            var localVarPath = "/api/Profiles/unlock/{docNumber}/taskid/{taskid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskid != null) localVarPathParams.Add("taskid", this.Configuration.ApiClient.ParameterToString(taskid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ProfilesUnLockProfile_0Async (int? docNumber, int? taskid)
        {
             ApiResponse<bool?> localVarResponse = await ProfilesUnLockProfile_0AsyncWithHttpInfo(docNumber, taskid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if a profile is not lock 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="taskid">Id of the task work</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ProfilesUnLockProfile_0AsyncWithHttpInfo (int? docNumber, int? taskid)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling ProfilesApi->ProfilesUnLockProfile_0");
            // verify the required parameter 'taskid' is set
            if (taskid == null)
                throw new ApiException(400, "Missing required parameter 'taskid' when calling ProfilesApi->ProfilesUnLockProfile_0");

            var localVarPath = "/api/Profiles/unlock/{docNumber}/taskid/{taskid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (taskid != null) localVarPathParams.Add("taskid", this.Configuration.ApiClient.ParameterToString(taskid)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesUnLockProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ValidationFieldResultDTO</returns>
        public ValidationFieldResultDTO ProfilesValidateForArchive (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = ProfilesValidateForArchiveWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        public ApiResponse< ValidationFieldResultDTO > ProfilesValidateForArchiveWithHttpInfo (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesValidateForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        public async System.Threading.Tasks.Task<ValidationFieldResultDTO> ProfilesValidateForArchiveAsync (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = await ProfilesValidateForArchiveAsyncWithHttpInfo(fieldcriteria);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the result of a validation given the array of fields of profile and their value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldcriteria"> (optional)</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProfilesValidateForArchiveAsyncWithHttpInfo (FieldValidationCalculateArchiveCriteriaDto fieldcriteria = null)
        {

            var localVarPath = "/api/Profiles/Validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldcriteria != null && fieldcriteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldcriteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldcriteria; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesValidateForArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

    }
}
