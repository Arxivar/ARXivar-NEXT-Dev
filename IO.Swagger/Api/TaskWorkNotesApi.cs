/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskWorkNotesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns></returns>
        void TaskWorkNotesDeleteNote (int? taskWorkNoteId);

        /// <summary>
        /// This call delete a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkNotesDeleteNoteWithHttpInfo (int? taskWorkNoteId);
        /// <summary>
        /// This call returns all notes in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;TaskWorkNoteDTO&gt;</returns>
        List<TaskWorkNoteDTO> TaskWorkNotesGetByProcessId (int? processId);

        /// <summary>
        /// This call returns all notes in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;TaskWorkNoteDTO&gt;</returns>
        ApiResponse<List<TaskWorkNoteDTO>> TaskWorkNotesGetByProcessIdWithHttpInfo (int? processId);
        /// <summary>
        /// This call add a new note to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>TaskWorkNoteDTO</returns>
        TaskWorkNoteDTO TaskWorkNotesInsertNewNote (int? taskWorkId, string note);

        /// <summary>
        /// This call add a new note to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>ApiResponse of TaskWorkNoteDTO</returns>
        ApiResponse<TaskWorkNoteDTO> TaskWorkNotesInsertNewNoteWithHttpInfo (int? taskWorkId, string note);
        /// <summary>
        /// This call update a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>TaskWorkNoteDTO</returns>
        TaskWorkNoteDTO TaskWorkNotesUpdateNote (int? taskWorkNoteId, string note);

        /// <summary>
        /// This call update a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>ApiResponse of TaskWorkNoteDTO</returns>
        ApiResponse<TaskWorkNoteDTO> TaskWorkNotesUpdateNoteWithHttpInfo (int? taskWorkNoteId, string note);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkNotesDeleteNoteAsync (int? taskWorkNoteId);

        /// <summary>
        /// This call delete a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkNotesDeleteNoteAsyncWithHttpInfo (int? taskWorkNoteId);
        /// <summary>
        /// This call returns all notes in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;TaskWorkNoteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkNoteDTO>> TaskWorkNotesGetByProcessIdAsync (int? processId);

        /// <summary>
        /// This call returns all notes in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkNoteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkNoteDTO>>> TaskWorkNotesGetByProcessIdAsyncWithHttpInfo (int? processId);
        /// <summary>
        /// This call add a new note to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>Task of TaskWorkNoteDTO</returns>
        System.Threading.Tasks.Task<TaskWorkNoteDTO> TaskWorkNotesInsertNewNoteAsync (int? taskWorkId, string note);

        /// <summary>
        /// This call add a new note to a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>Task of ApiResponse (TaskWorkNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkNoteDTO>> TaskWorkNotesInsertNewNoteAsyncWithHttpInfo (int? taskWorkId, string note);
        /// <summary>
        /// This call update a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>Task of TaskWorkNoteDTO</returns>
        System.Threading.Tasks.Task<TaskWorkNoteDTO> TaskWorkNotesUpdateNoteAsync (int? taskWorkNoteId, string note);

        /// <summary>
        /// This call update a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>Task of ApiResponse (TaskWorkNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkNoteDTO>> TaskWorkNotesUpdateNoteAsyncWithHttpInfo (int? taskWorkNoteId, string note);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskWorkNotesApi : ITaskWorkNotesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkNotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkNotesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkNotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkNotesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns></returns>
        public void TaskWorkNotesDeleteNote (int? taskWorkNoteId)
        {
             TaskWorkNotesDeleteNoteWithHttpInfo(taskWorkNoteId);
        }

        /// <summary>
        /// This call delete a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkNotesDeleteNoteWithHttpInfo (int? taskWorkNoteId)
        {
            // verify the required parameter 'taskWorkNoteId' is set
            if (taskWorkNoteId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkNoteId' when calling TaskWorkNotesApi->TaskWorkNotesDeleteNote");

            var localVarPath = "/api/TaskNotes/{taskWorkNoteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkNoteId != null) localVarPathParams.Add("taskWorkNoteId", Configuration.ApiClient.ParameterToString(taskWorkNoteId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesDeleteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkNotesDeleteNoteAsync (int? taskWorkNoteId)
        {
             await TaskWorkNotesDeleteNoteAsyncWithHttpInfo(taskWorkNoteId);

        }

        /// <summary>
        /// This call delete a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the note</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkNotesDeleteNoteAsyncWithHttpInfo (int? taskWorkNoteId)
        {
            // verify the required parameter 'taskWorkNoteId' is set
            if (taskWorkNoteId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkNoteId' when calling TaskWorkNotesApi->TaskWorkNotesDeleteNote");

            var localVarPath = "/api/TaskNotes/{taskWorkNoteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkNoteId != null) localVarPathParams.Add("taskWorkNoteId", Configuration.ApiClient.ParameterToString(taskWorkNoteId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesDeleteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all notes in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;TaskWorkNoteDTO&gt;</returns>
        public List<TaskWorkNoteDTO> TaskWorkNotesGetByProcessId (int? processId)
        {
             ApiResponse<List<TaskWorkNoteDTO>> localVarResponse = TaskWorkNotesGetByProcessIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all notes in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;TaskWorkNoteDTO&gt;</returns>
        public ApiResponse< List<TaskWorkNoteDTO> > TaskWorkNotesGetByProcessIdWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkNotesApi->TaskWorkNotesGetByProcessId");

            var localVarPath = "/api/TaskNotes/byProcessId/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesGetByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkNoteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkNoteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkNoteDTO>)));
            
        }

        /// <summary>
        /// This call returns all notes in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;TaskWorkNoteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkNoteDTO>> TaskWorkNotesGetByProcessIdAsync (int? processId)
        {
             ApiResponse<List<TaskWorkNoteDTO>> localVarResponse = await TaskWorkNotesGetByProcessIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all notes in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkNoteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkNoteDTO>>> TaskWorkNotesGetByProcessIdAsyncWithHttpInfo (int? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkNotesApi->TaskWorkNotesGetByProcessId");

            var localVarPath = "/api/TaskNotes/byProcessId/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesGetByProcessId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkNoteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkNoteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkNoteDTO>)));
            
        }

        /// <summary>
        /// This call add a new note to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>TaskWorkNoteDTO</returns>
        public TaskWorkNoteDTO TaskWorkNotesInsertNewNote (int? taskWorkId, string note)
        {
             ApiResponse<TaskWorkNoteDTO> localVarResponse = TaskWorkNotesInsertNewNoteWithHttpInfo(taskWorkId, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call add a new note to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>ApiResponse of TaskWorkNoteDTO</returns>
        public ApiResponse< TaskWorkNoteDTO > TaskWorkNotesInsertNewNoteWithHttpInfo (int? taskWorkId, string note)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkNotesApi->TaskWorkNotesInsertNewNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling TaskWorkNotesApi->TaskWorkNotesInsertNewNote");

            var localVarPath = "/api/TaskNotes/taskWorkId/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (note != null) localVarQueryParams.Add("note", Configuration.ApiClient.ParameterToString(note)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesInsertNewNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkNoteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkNoteDTO)));
            
        }

        /// <summary>
        /// This call add a new note to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>Task of TaskWorkNoteDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkNoteDTO> TaskWorkNotesInsertNewNoteAsync (int? taskWorkId, string note)
        {
             ApiResponse<TaskWorkNoteDTO> localVarResponse = await TaskWorkNotesInsertNewNoteAsyncWithHttpInfo(taskWorkId, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call add a new note to a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="note">Note to add</param>
        /// <returns>Task of ApiResponse (TaskWorkNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkNoteDTO>> TaskWorkNotesInsertNewNoteAsyncWithHttpInfo (int? taskWorkId, string note)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkNotesApi->TaskWorkNotesInsertNewNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling TaskWorkNotesApi->TaskWorkNotesInsertNewNote");

            var localVarPath = "/api/TaskNotes/taskWorkId/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (note != null) localVarQueryParams.Add("note", Configuration.ApiClient.ParameterToString(note)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesInsertNewNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkNoteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkNoteDTO)));
            
        }

        /// <summary>
        /// This call update a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>TaskWorkNoteDTO</returns>
        public TaskWorkNoteDTO TaskWorkNotesUpdateNote (int? taskWorkNoteId, string note)
        {
             ApiResponse<TaskWorkNoteDTO> localVarResponse = TaskWorkNotesUpdateNoteWithHttpInfo(taskWorkNoteId, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call update a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>ApiResponse of TaskWorkNoteDTO</returns>
        public ApiResponse< TaskWorkNoteDTO > TaskWorkNotesUpdateNoteWithHttpInfo (int? taskWorkNoteId, string note)
        {
            // verify the required parameter 'taskWorkNoteId' is set
            if (taskWorkNoteId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkNoteId' when calling TaskWorkNotesApi->TaskWorkNotesUpdateNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling TaskWorkNotesApi->TaskWorkNotesUpdateNote");

            var localVarPath = "/api/TaskNotes/{taskWorkNoteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkNoteId != null) localVarPathParams.Add("taskWorkNoteId", Configuration.ApiClient.ParameterToString(taskWorkNoteId)); // path parameter
            if (note != null) localVarQueryParams.Add("note", Configuration.ApiClient.ParameterToString(note)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesUpdateNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkNoteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkNoteDTO)));
            
        }

        /// <summary>
        /// This call update a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>Task of TaskWorkNoteDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkNoteDTO> TaskWorkNotesUpdateNoteAsync (int? taskWorkNoteId, string note)
        {
             ApiResponse<TaskWorkNoteDTO> localVarResponse = await TaskWorkNotesUpdateNoteAsyncWithHttpInfo(taskWorkNoteId, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call update a process note 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkNoteId">Id of the task work</param>
        /// <param name="note">Note updated</param>
        /// <returns>Task of ApiResponse (TaskWorkNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkNoteDTO>> TaskWorkNotesUpdateNoteAsyncWithHttpInfo (int? taskWorkNoteId, string note)
        {
            // verify the required parameter 'taskWorkNoteId' is set
            if (taskWorkNoteId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkNoteId' when calling TaskWorkNotesApi->TaskWorkNotesUpdateNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling TaskWorkNotesApi->TaskWorkNotesUpdateNote");

            var localVarPath = "/api/TaskNotes/{taskWorkNoteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskWorkNoteId != null) localVarPathParams.Add("taskWorkNoteId", Configuration.ApiClient.ParameterToString(taskWorkNoteId)); // path parameter
            if (note != null) localVarQueryParams.Add("note", Configuration.ApiClient.ParameterToString(note)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkNotesUpdateNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkNoteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkNoteDTO)));
            
        }

    }
}
