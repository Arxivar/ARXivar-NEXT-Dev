/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskWorkOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        void TaskWorkOperationsExecuteSignOperation (TaskWorkSignOperationRequestDTO request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (TaskWorkSignOperationRequestDTO request);
        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkOperationsDTO</returns>
        TaskWorkOperationsDTO TaskWorkOperationsGetByTaskWorkId (int? taskWorkId);

        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkOperationsDTO</returns>
        ApiResponse<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>List&lt;SignDocumentDataDTO&gt;</returns>
        List<SignDocumentDataDTO> TaskWorkOperationsGetDocumentForSignOperation (int? taskWorkId, int? signOperationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>ApiResponse of List&lt;SignDocumentDataDTO&gt;</returns>
        ApiResponse<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo (int? taskWorkId, int? signOperationId);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO taskExitCode);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        ApiResponse<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO taskExitCode);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (int? processVariableId, ProcessVariablesFieldsDTO processVariables);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (int? processVariableId, ProcessVariablesFieldsDTO processVariables);
        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleByTaskIds (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO taskExitCode);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO taskExitCode);
        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetSelectedUsersForDynamicJob (int? dynamicJobUser, int? processId);

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo (int? dynamicJobUser, int? processId);
        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetUsersForDynamicJob ();

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo ();
        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId);

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId);
        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns></returns>
        void TaskWorkOperationsSetDynamicJob (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users);

        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetDynamicJobWithHttpInfo (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns></returns>
        void TaskWorkOperationsSetDynamicJobMultiple (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns></returns>
        void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (int? taskWorkId, ProcessVariablesFieldsDTO processVariables);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (int? taskWorkId, ProcessVariablesFieldsDTO processVariables);
        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns></returns>
        void TaskWorkOperationsSetProfessionalRoleByTaskIds (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds);

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds);
        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns></returns>
        void TaskWorkOperationsSetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId, int? userId);

        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId);
        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns></returns>
        void TaskWorkOperationsTaskWorkCommandExecute (int? taskWorkId, int? taskWorkCommandId);

        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo (int? taskWorkId, int? taskWorkCommandId);
        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        void TaskWorkOperationsUnSetProfessionalRoleSelection (int? professionalRoleId, int? taskWorkId);

        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo (int? professionalRoleId, int? taskWorkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (TaskWorkSignOperationRequestDTO request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (TaskWorkSignOperationRequestDTO request);
        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkOperationsDTO</returns>
        System.Threading.Tasks.Task<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdAsync (int? taskWorkId);

        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkOperationsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkOperationsDTO>> TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of List&lt;SignDocumentDataDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationAsync (int? taskWorkId, int? signOperationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SignDocumentDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignDocumentDataDTO>>> TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo (int? taskWorkId, int? signOperationId);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO taskExitCode);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO taskExitCode);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (int? processVariableId, ProcessVariablesFieldsDTO processVariables);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (int? processVariableId, ProcessVariablesFieldsDTO processVariables);
        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsync (List<int?> taskWorkIds);

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> taskWorkIds);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO taskExitCode);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO taskExitCode);
        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsync (int? dynamicJobUser, int? processId);

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo (int? dynamicJobUser, int? processId);
        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobAsync ();

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId);

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId);
        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobAsync (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users);

        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (int? taskWorkId, ProcessVariablesFieldsDTO processVariables);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId, ProcessVariablesFieldsDTO processVariables);
        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetProfessionalRoleByTaskIdsAsync (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds);

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds);
        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId, int? userId);

        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId);
        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsTaskWorkCommandExecuteAsync (int? taskWorkId, int? taskWorkCommandId);

        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo (int? taskWorkId, int? taskWorkCommandId);
        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsUnSetProfessionalRoleSelectionAsync (int? professionalRoleId, int? taskWorkId);

        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo (int? professionalRoleId, int? taskWorkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskWorkOperationsApi : ITaskWorkOperationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkOperationsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkOperationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        public void TaskWorkOperationsExecuteSignOperation (TaskWorkSignOperationRequestDTO request)
        {
             TaskWorkOperationsExecuteSignOperationWithHttpInfo(request);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (TaskWorkSignOperationRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (TaskWorkSignOperationRequestDTO request)
        {
             await TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo(request);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (TaskWorkSignOperationRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkOperationsDTO</returns>
        public TaskWorkOperationsDTO TaskWorkOperationsGetByTaskWorkId (int? taskWorkId)
        {
             ApiResponse<TaskWorkOperationsDTO> localVarResponse = TaskWorkOperationsGetByTaskWorkIdWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkOperationsDTO</returns>
        public ApiResponse< TaskWorkOperationsDTO > TaskWorkOperationsGetByTaskWorkIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetByTaskWorkId");

            var localVarPath = "/api/TaskOperations/byTaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkOperationsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkOperationsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkOperationsDTO)));
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkOperationsDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkOperationsDTO> localVarResponse = await TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkOperationsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkOperationsDTO>> TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetByTaskWorkId");

            var localVarPath = "/api/TaskOperations/byTaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkOperationsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskWorkOperationsDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkOperationsDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>List&lt;SignDocumentDataDTO&gt;</returns>
        public List<SignDocumentDataDTO> TaskWorkOperationsGetDocumentForSignOperation (int? taskWorkId, int? signOperationId)
        {
             ApiResponse<List<SignDocumentDataDTO>> localVarResponse = TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo(taskWorkId, signOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>ApiResponse of List&lt;SignDocumentDataDTO&gt;</returns>
        public ApiResponse< List<SignDocumentDataDTO> > TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo (int? taskWorkId, int? signOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");
            // verify the required parameter 'signOperationId' is set
            if (signOperationId == null)
                throw new ApiException(400, "Missing required parameter 'signOperationId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (signOperationId != null) localVarPathParams.Add("signOperationId", Configuration.ApiClient.ParameterToString(signOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDocumentForSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignDocumentDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignDocumentDataDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignDocumentDataDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of List&lt;SignDocumentDataDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationAsync (int? taskWorkId, int? signOperationId)
        {
             ApiResponse<List<SignDocumentDataDTO>> localVarResponse = await TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo(taskWorkId, signOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SignDocumentDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SignDocumentDataDTO>>> TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo (int? taskWorkId, int? signOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");
            // verify the required parameter 'signOperationId' is set
            if (signOperationId == null)
                throw new ApiException(400, "Missing required parameter 'signOperationId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (signOperationId != null) localVarPathParams.Add("signOperationId", Configuration.ApiClient.ParameterToString(signOperationId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDocumentForSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignDocumentDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SignDocumentDataDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignDocumentDataDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO taskExitCode)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(taskExitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public ApiResponse< List<TaskWorkDynamicJobOperationDTO> > TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO taskExitCode)
        {
            // verify the required parameter 'taskExitCode' is set
            if (taskExitCode == null)
                throw new ApiException(400, "Missing required parameter 'taskExitCode' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskExitCode != null && taskExitCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskExitCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskExitCode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDynamicJobOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO taskExitCode)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = await TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(taskExitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO taskExitCode)
        {
            // verify the required parameter 'taskExitCode' is set
            if (taskExitCode == null)
                throw new ApiException(400, "Missing required parameter 'taskExitCode' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskExitCode != null && taskExitCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskExitCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskExitCode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskWorkDynamicJobOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo(processVariableId, taskWorkId, processVariables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables)
        {
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo(processVariableId, taskWorkId, processVariables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (int? processVariableId, int? taskWorkId, VariablesValuesCriteriaDTO processVariables)
        {
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (int? processVariableId, ProcessVariablesFieldsDTO processVariables)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo(processVariableId, processVariables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (int? processVariableId, ProcessVariablesFieldsDTO processVariables)
        {
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (int? processVariableId, ProcessVariablesFieldsDTO processVariables)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo(processVariableId, processVariables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="processVariables">Actual values of the process variables (for value dependant query)</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (int? processVariableId, ProcessVariablesFieldsDTO processVariables)
        {
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterConcreteDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleByTaskIds (List<int?> taskWorkIds)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleOperationDTO> > TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsync (List<int?> taskWorkIds)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = await TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo(taskWorkIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkIds">Ids of the TaskWorks</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> taskWorkIds)
        {
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO taskExitCode)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(taskExitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleOperationDTO> > TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO taskExitCode)
        {
            // verify the required parameter 'taskExitCode' is set
            if (taskExitCode == null)
                throw new ApiException(400, "Missing required parameter 'taskExitCode' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskExitCode != null && taskExitCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskExitCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskExitCode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO taskExitCode)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = await TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(taskExitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExitCode"></param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO taskExitCode)
        {
            // verify the required parameter 'taskExitCode' is set
            if (taskExitCode == null)
                throw new ApiException(400, "Missing required parameter 'taskExitCode' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskExitCode != null && taskExitCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskExitCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskExitCode; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProfessionalRoleOperationDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetSelectedUsersForDynamicJob (int? dynamicJobUser, int? processId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo(dynamicJobUser, processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo (int? dynamicJobUser, int? processId)
        {
            // verify the required parameter 'dynamicJobUser' is set
            if (dynamicJobUser == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUser' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUser != null) localVarPathParams.Add("dynamicJobUser", Configuration.ApiClient.ParameterToString(dynamicJobUser)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetSelectedUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsync (int? dynamicJobUser, int? processId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo(dynamicJobUser, processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo (int? dynamicJobUser, int? processId)
        {
            // verify the required parameter 'dynamicJobUser' is set
            if (dynamicJobUser == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUser' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUser != null) localVarPathParams.Add("dynamicJobUser", Configuration.ApiClient.ParameterToString(dynamicJobUser)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetSelectedUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetUsersForDynamicJob ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo ()
        {

            var localVarPath = "/api/TaskOperations/dynamicjobusers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobAsync ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TaskOperations/dynamicjobusers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo(taskWorkId, professionalRoleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetDynamicJob (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users)
        {
             TaskWorkOperationsSetDynamicJobWithHttpInfo(dynamicJobId, taskWorkId, users);
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetDynamicJobWithHttpInfo (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users)
        {
            // verify the required parameter 'dynamicJobId' is set
            if (dynamicJobId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobId != null) localVarPathParams.Add("dynamicJobId", Configuration.ApiClient.ParameterToString(dynamicJobId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobAsync (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users)
        {
             await TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo(dynamicJobId, taskWorkId, users);

        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="users">users list to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo (int? dynamicJobId, int? taskWorkId, List<UserCompleteDTO> users)
        {
            // verify the required parameter 'dynamicJobId' is set
            if (dynamicJobId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobId != null) localVarPathParams.Add("dynamicJobId", Configuration.ApiClient.ParameterToString(dynamicJobId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetDynamicJobMultiple (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest)
        {
             TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo(dynamicJobMultipleSetRequest);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest)
        {
            // verify the required parameter 'dynamicJobMultipleSetRequest' is set
            if (dynamicJobMultipleSetRequest == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobMultipleSetRequest' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobMultipleSetRequest != null && dynamicJobMultipleSetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dynamicJobMultipleSetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dynamicJobMultipleSetRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest)
        {
             await TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo(dynamicJobMultipleSetRequest);

        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobMultipleSetRequest">Request for multiple dynamic job set</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest)
        {
            // verify the required parameter 'dynamicJobMultipleSetRequest' is set
            if (dynamicJobMultipleSetRequest == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobMultipleSetRequest' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobMultipleSetRequest != null && dynamicJobMultipleSetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dynamicJobMultipleSetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dynamicJobMultipleSetRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (int? taskWorkId, ProcessVariablesFieldsDTO processVariables)
        {
             TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo(taskWorkId, processVariables);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (int? taskWorkId, ProcessVariablesFieldsDTO processVariables)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (int? taskWorkId, ProcessVariablesFieldsDTO processVariables)
        {
             await TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo(taskWorkId, processVariables);

        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="processVariables">Process variables informations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId, ProcessVariablesFieldsDTO processVariables)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'processVariables' is set
            if (processVariables == null)
                throw new ApiException(400, "Missing required parameter 'processVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariables != null && processVariables.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processVariables); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processVariables; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetProfessionalRoleByTaskIds (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds)
        {
             TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo(professionalRoleId, userToAssignId, taskWorkIds);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'userToAssignId' is set
            if (userToAssignId == null)
                throw new ApiException(400, "Missing required parameter 'userToAssignId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userToAssignId != null) localVarPathParams.Add("userToAssignId", Configuration.ApiClient.ParameterToString(userToAssignId)); // path parameter
            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetProfessionalRoleByTaskIdsAsync (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds)
        {
             await TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo(professionalRoleId, userToAssignId, taskWorkIds);

        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <param name="taskWorkIds">List of taskwork id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo (int? professionalRoleId, int? userToAssignId, List<int?> taskWorkIds)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'userToAssignId' is set
            if (userToAssignId == null)
                throw new ApiException(400, "Missing required parameter 'userToAssignId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userToAssignId != null) localVarPathParams.Add("userToAssignId", Configuration.ApiClient.ParameterToString(userToAssignId)); // path parameter
            if (taskWorkIds != null && taskWorkIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskWorkIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskWorkIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId, int? userId)
        {
             TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId, userId);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId, int? userId)
        {
             await TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo(taskWorkId, professionalRoleId, userId);

        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns></returns>
        public void TaskWorkOperationsTaskWorkCommandExecute (int? taskWorkId, int? taskWorkCommandId)
        {
             TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo(taskWorkId, taskWorkCommandId);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo (int? taskWorkId, int? taskWorkCommandId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");
            // verify the required parameter 'taskWorkCommandId' is set
            if (taskWorkCommandId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkCommandId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkCommandId != null) localVarPathParams.Add("taskWorkCommandId", Configuration.ApiClient.ParameterToString(taskWorkCommandId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsTaskWorkCommandExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsTaskWorkCommandExecuteAsync (int? taskWorkId, int? taskWorkCommandId)
        {
             await TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo(taskWorkId, taskWorkCommandId);

        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo (int? taskWorkId, int? taskWorkCommandId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");
            // verify the required parameter 'taskWorkCommandId' is set
            if (taskWorkCommandId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkCommandId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkCommandId != null) localVarPathParams.Add("taskWorkCommandId", Configuration.ApiClient.ParameterToString(taskWorkCommandId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsTaskWorkCommandExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        public void TaskWorkOperationsUnSetProfessionalRoleSelection (int? professionalRoleId, int? taskWorkId)
        {
             TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo(professionalRoleId, taskWorkId);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo (int? professionalRoleId, int? taskWorkId)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsUnSetProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsUnSetProfessionalRoleSelectionAsync (int? professionalRoleId, int? taskWorkId)
        {
             await TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo(professionalRoleId, taskWorkId);

        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo (int? professionalRoleId, int? taskWorkId)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsUnSetProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
