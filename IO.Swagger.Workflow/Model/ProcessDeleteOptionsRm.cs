/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Configuration used to keep or delete the process when it ends
    /// </summary>
    [DataContract]
        public partial class ProcessDeleteOptionsRm :  IEquatable<ProcessDeleteOptionsRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDeleteOptionsRm" /> class.
        /// </summary>
        /// <param name="deleteWorkflowWhenItEnds">If true the workflow history will be deleted after the num day specified.</param>
        /// <param name="numDayDelay">Num of days to wait before delete the workflow.</param>
        public ProcessDeleteOptionsRm(bool? deleteWorkflowWhenItEnds = default(bool?), int? numDayDelay = default(int?))
        {
            this.DeleteWorkflowWhenItEnds = deleteWorkflowWhenItEnds;
            this.NumDayDelay = numDayDelay;
        }
        
        /// <summary>
        /// If true the workflow history will be deleted after the num day specified
        /// </summary>
        /// <value>If true the workflow history will be deleted after the num day specified</value>
        [DataMember(Name="deleteWorkflowWhenItEnds", EmitDefaultValue=false)]
        public bool? DeleteWorkflowWhenItEnds { get; set; }

        /// <summary>
        /// Num of days to wait before delete the workflow
        /// </summary>
        /// <value>Num of days to wait before delete the workflow</value>
        [DataMember(Name="numDayDelay", EmitDefaultValue=false)]
        public int? NumDayDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDeleteOptionsRm {\n");
            sb.Append("  DeleteWorkflowWhenItEnds: ").Append(DeleteWorkflowWhenItEnds).Append("\n");
            sb.Append("  NumDayDelay: ").Append(NumDayDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDeleteOptionsRm);
        }

        /// <summary>
        /// Returns true if ProcessDeleteOptionsRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDeleteOptionsRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDeleteOptionsRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeleteWorkflowWhenItEnds == input.DeleteWorkflowWhenItEnds ||
                    (this.DeleteWorkflowWhenItEnds != null &&
                    this.DeleteWorkflowWhenItEnds.Equals(input.DeleteWorkflowWhenItEnds))
                ) && 
                (
                    this.NumDayDelay == input.NumDayDelay ||
                    (this.NumDayDelay != null &&
                    this.NumDayDelay.Equals(input.NumDayDelay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteWorkflowWhenItEnds != null)
                    hashCode = hashCode * 59 + this.DeleteWorkflowWhenItEnds.GetHashCode();
                if (this.NumDayDelay != null)
                    hashCode = hashCode * 59 + this.NumDayDelay.GetHashCode();
                return hashCode;
            }
        }

    }
}
