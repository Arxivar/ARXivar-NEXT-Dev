/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// ARXivar folder information
    /// </summary>
    [DataContract]
        public partial class ArxFolderInfoRm :  IEquatable<ArxFolderInfoRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxFolderInfoRm" /> class.
        /// </summary>
        /// <param name="id">ARXivar folder identifier.</param>
        /// <param name="fullPath">ARXIvar full path (required).</param>
        public ArxFolderInfoRm(int? id = default(int?), string fullPath = default(string))
        {
            // to ensure "fullPath" is required (not null)
            if (fullPath == null)
            {
                throw new InvalidDataException("fullPath is a required property for ArxFolderInfoRm and cannot be null");
            }
            else
            {
                this.FullPath = fullPath;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// ARXivar folder identifier
        /// </summary>
        /// <value>ARXivar folder identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// ARXIvar full path
        /// </summary>
        /// <value>ARXIvar full path</value>
        [DataMember(Name="fullPath", EmitDefaultValue=false)]
        public string FullPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxFolderInfoRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxFolderInfoRm);
        }

        /// <summary>
        /// Returns true if ArxFolderInfoRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxFolderInfoRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxFolderInfoRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FullPath == input.FullPath ||
                    (this.FullPath != null &&
                    this.FullPath.Equals(input.FullPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FullPath != null)
                    hashCode = hashCode * 59 + this.FullPath.GetHashCode();
                return hashCode;
            }
        }

    }
}
