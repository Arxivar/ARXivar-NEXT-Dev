/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Operation summary for dashboard model
    /// </summary>
    [DataContract]
        public partial class DiagramOperationSummaryRm :  IEquatable<DiagramOperationSummaryRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramOperationSummaryRm" /> class.
        /// </summary>
        /// <param name="id">Diagram operation identifier.</param>
        /// <param name="type">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder].</param>
        public DiagramOperationSummaryRm(Guid? id = default(Guid?), int? type = default(int?))
        {
            this.Id = id;
            this.Type = type;
        }
        
        /// <summary>
        /// Diagram operation identifier
        /// </summary>
        /// <value>Diagram operation identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]
        /// </summary>
        /// <value>Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramOperationSummaryRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramOperationSummaryRm);
        }

        /// <summary>
        /// Returns true if DiagramOperationSummaryRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramOperationSummaryRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramOperationSummaryRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

    }
}
