/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Calendar model
    /// </summary>
    [DataContract]
        public partial class CalendarRm :  IEquatable<CalendarRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarRm" /> class.
        /// </summary>
        /// <param name="isDefault">Indicates if is the default calendar.</param>
        /// <param name="info">info.</param>
        /// <param name="id">Calendar identifier.</param>
        /// <param name="name">Calendar name.</param>
        /// <param name="calendarDays">Calendar day configuration.</param>
        /// <param name="dailyWorkingInterval">dailyWorkingInterval.</param>
        /// <param name="users">Users.</param>
        public CalendarRm(bool? isDefault = default(bool?), RecordInfoRm info = default(RecordInfoRm), Guid? id = default(Guid?), string name = default(string), List<CalendarDayModelRm> calendarDays = default(List<CalendarDayModelRm>), CalendarIntervalRm dailyWorkingInterval = default(CalendarIntervalRm), List<ArxivarUserInfoRm> users = default(List<ArxivarUserInfoRm>))
        {
            this.IsDefault = isDefault;
            this.Info = info;
            this.Id = id;
            this.Name = name;
            this.CalendarDays = calendarDays;
            this.DailyWorkingInterval = dailyWorkingInterval;
            this.Users = users;
        }
        
        /// <summary>
        /// Indicates if is the default calendar
        /// </summary>
        /// <value>Indicates if is the default calendar</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public RecordInfoRm Info { get; set; }

        /// <summary>
        /// Calendar identifier
        /// </summary>
        /// <value>Calendar identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Calendar name
        /// </summary>
        /// <value>Calendar name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Calendar day configuration
        /// </summary>
        /// <value>Calendar day configuration</value>
        [DataMember(Name="calendarDays", EmitDefaultValue=false)]
        public List<CalendarDayModelRm> CalendarDays { get; set; }

        /// <summary>
        /// Gets or Sets DailyWorkingInterval
        /// </summary>
        [DataMember(Name="dailyWorkingInterval", EmitDefaultValue=false)]
        public CalendarIntervalRm DailyWorkingInterval { get; set; }

        /// <summary>
        /// Users
        /// </summary>
        /// <value>Users</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<ArxivarUserInfoRm> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalendarRm {\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CalendarDays: ").Append(CalendarDays).Append("\n");
            sb.Append("  DailyWorkingInterval: ").Append(DailyWorkingInterval).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalendarRm);
        }

        /// <summary>
        /// Returns true if CalendarRm instances are equal
        /// </summary>
        /// <param name="input">Instance of CalendarRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalendarRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CalendarDays == input.CalendarDays ||
                    this.CalendarDays != null &&
                    input.CalendarDays != null &&
                    this.CalendarDays.SequenceEqual(input.CalendarDays)
                ) && 
                (
                    this.DailyWorkingInterval == input.DailyWorkingInterval ||
                    (this.DailyWorkingInterval != null &&
                    this.DailyWorkingInterval.Equals(input.DailyWorkingInterval))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CalendarDays != null)
                    hashCode = hashCode * 59 + this.CalendarDays.GetHashCode();
                if (this.DailyWorkingInterval != null)
                    hashCode = hashCode * 59 + this.DailyWorkingInterval.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

    }
}
