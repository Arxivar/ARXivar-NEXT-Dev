/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationFolderRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationFolderRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationFolderRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationFolderRm" /> class.
        /// </summary>
        /// <param name="rootFolder">rootFolder (required).</param>
        /// <param name="dynamicFolderFormula">Dynamic formula to create folder or sub folder.</param>
        /// <param name="kind">Folder operation kind [0&#x3D;Insert, 1&#x3D;Remove].</param>
        /// <param name="primary">Add primary document.</param>
        /// <param name="secondary">Add secondary document.</param>
        /// <param name="attachment">Add attachment.</param>
        /// <param name="related">Add related documents.</param>
        /// <param name="relationMode">Relation mode [0&#x3D;Direct, 1&#x3D;DirectIndirect, 2&#x3D;Father, 3&#x3D;Son].</param>
        public OperationConfigurationFolderRm(ArxFolderInfoRm rootFolder = default(ArxFolderInfoRm), string dynamicFolderFormula = default(string), int? kind = default(int?), bool? primary = default(bool?), bool? secondary = default(bool?), bool? attachment = default(bool?), bool? related = default(bool?), int? relationMode = default(int?), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            // to ensure "rootFolder" is required (not null)
            if (rootFolder == null)
            {
                throw new InvalidDataException("rootFolder is a required property for OperationConfigurationFolderRm and cannot be null");
            }
            else
            {
                this.RootFolder = rootFolder;
            }
            this.DynamicFolderFormula = dynamicFolderFormula;
            this.Kind = kind;
            this.Primary = primary;
            this.Secondary = secondary;
            this.Attachment = attachment;
            this.Related = related;
            this.RelationMode = relationMode;
        }
        
        /// <summary>
        /// Gets or Sets RootFolder
        /// </summary>
        [DataMember(Name="rootFolder", EmitDefaultValue=false)]
        public ArxFolderInfoRm RootFolder { get; set; }

        /// <summary>
        /// Dynamic formula to create folder or sub folder
        /// </summary>
        /// <value>Dynamic formula to create folder or sub folder</value>
        [DataMember(Name="dynamicFolderFormula", EmitDefaultValue=false)]
        public string DynamicFolderFormula { get; set; }

        /// <summary>
        /// Folder operation kind [0&#x3D;Insert, 1&#x3D;Remove]
        /// </summary>
        /// <value>Folder operation kind [0&#x3D;Insert, 1&#x3D;Remove]</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public int? Kind { get; set; }

        /// <summary>
        /// Add primary document
        /// </summary>
        /// <value>Add primary document</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Add secondary document
        /// </summary>
        /// <value>Add secondary document</value>
        [DataMember(Name="secondary", EmitDefaultValue=false)]
        public bool? Secondary { get; set; }

        /// <summary>
        /// Add attachment
        /// </summary>
        /// <value>Add attachment</value>
        [DataMember(Name="attachment", EmitDefaultValue=false)]
        public bool? Attachment { get; set; }

        /// <summary>
        /// Add related documents
        /// </summary>
        /// <value>Add related documents</value>
        [DataMember(Name="related", EmitDefaultValue=false)]
        public bool? Related { get; set; }

        /// <summary>
        /// Relation mode [0&#x3D;Direct, 1&#x3D;DirectIndirect, 2&#x3D;Father, 3&#x3D;Son]
        /// </summary>
        /// <value>Relation mode [0&#x3D;Direct, 1&#x3D;DirectIndirect, 2&#x3D;Father, 3&#x3D;Son]</value>
        [DataMember(Name="relationMode", EmitDefaultValue=false)]
        public int? RelationMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationFolderRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RootFolder: ").Append(RootFolder).Append("\n");
            sb.Append("  DynamicFolderFormula: ").Append(DynamicFolderFormula).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  RelationMode: ").Append(RelationMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationFolderRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationFolderRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationFolderRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationFolderRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.RootFolder == input.RootFolder ||
                    (this.RootFolder != null &&
                    this.RootFolder.Equals(input.RootFolder))
                ) && base.Equals(input) && 
                (
                    this.DynamicFolderFormula == input.DynamicFolderFormula ||
                    (this.DynamicFolderFormula != null &&
                    this.DynamicFolderFormula.Equals(input.DynamicFolderFormula))
                ) && base.Equals(input) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && base.Equals(input) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && base.Equals(input) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && base.Equals(input) && 
                (
                    this.Attachment == input.Attachment ||
                    (this.Attachment != null &&
                    this.Attachment.Equals(input.Attachment))
                ) && base.Equals(input) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && base.Equals(input) && 
                (
                    this.RelationMode == input.RelationMode ||
                    (this.RelationMode != null &&
                    this.RelationMode.Equals(input.RelationMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.RootFolder != null)
                    hashCode = hashCode * 59 + this.RootFolder.GetHashCode();
                if (this.DynamicFolderFormula != null)
                    hashCode = hashCode * 59 + this.DynamicFolderFormula.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.Attachment != null)
                    hashCode = hashCode * 59 + this.Attachment.GetHashCode();
                if (this.Related != null)
                    hashCode = hashCode * 59 + this.Related.GetHashCode();
                if (this.RelationMode != null)
                    hashCode = hashCode * 59 + this.RelationMode.GetHashCode();
                return hashCode;
            }
        }

    }
}
