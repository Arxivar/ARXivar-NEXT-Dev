/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Describes a log entry model
    /// </summary>
    [DataContract]
        public partial class LogEntryRm :  IEquatable<LogEntryRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogEntryRm" /> class.
        /// </summary>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other].</param>
        /// <param name="timestamp">Log timestamp.</param>
        /// <param name="message">Log message.</param>
        /// <param name="properties">List of properties.</param>
        public LogEntryRm(int? level = default(int?), DateTime? timestamp = default(DateTime?), string message = default(string), List<LogExtendedPropertyRm> properties = default(List<LogExtendedPropertyRm>))
        {
            this.Level = level;
            this.Timestamp = timestamp;
            this.Message = message;
            this.Properties = properties;
        }
        
        /// <summary>
        /// Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]
        /// </summary>
        /// <value>Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int? Level { get; set; }

        /// <summary>
        /// Log timestamp
        /// </summary>
        /// <value>Log timestamp</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Log message
        /// </summary>
        /// <value>Log message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// List of properties
        /// </summary>
        /// <value>List of properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<LogExtendedPropertyRm> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogEntryRm {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogEntryRm);
        }

        /// <summary>
        /// Returns true if LogEntryRm instances are equal
        /// </summary>
        /// <param name="input">Instance of LogEntryRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogEntryRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

    }
}
