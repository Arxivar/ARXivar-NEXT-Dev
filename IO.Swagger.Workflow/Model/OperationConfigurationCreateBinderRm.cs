/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationCreateBinderRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationCreateBinderRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationCreateBinderRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationCreateBinderRm" /> class.
        /// </summary>
        /// <param name="binderTypeExternalId">Binder Type External Id.</param>
        /// <param name="binderTypeId">Binder Type Id.</param>
        /// <param name="binderName">binderName (required).</param>
        /// <param name="binderNumber">binderNumber.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="mappings">Mapping from binder additional fields and variables.</param>
        /// <param name="binderCreatedNumber">binderCreatedNumber.</param>
        public OperationConfigurationCreateBinderRm(string binderTypeExternalId = default(string), int? binderTypeId = default(int?), VariableInfoRm binderName = default(VariableInfoRm), VariableInfoRm binderNumber = default(VariableInfoRm), VariableInfoRm startDate = default(VariableInfoRm), VariableInfoRm endDate = default(VariableInfoRm), VariableInfoRm externalId = default(VariableInfoRm), List<MappingVariableBinderFieldRm> mappings = default(List<MappingVariableBinderFieldRm>), VariableInfoRm binderCreatedNumber = default(VariableInfoRm), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            // to ensure "binderName" is required (not null)
            if (binderName == null)
            {
                throw new InvalidDataException("binderName is a required property for OperationConfigurationCreateBinderRm and cannot be null");
            }
            else
            {
                this.BinderName = binderName;
            }
            this.BinderTypeExternalId = binderTypeExternalId;
            this.BinderTypeId = binderTypeId;
            this.BinderNumber = binderNumber;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ExternalId = externalId;
            this.Mappings = mappings;
            this.BinderCreatedNumber = binderCreatedNumber;
        }
        
        /// <summary>
        /// Binder Type External Id
        /// </summary>
        /// <value>Binder Type External Id</value>
        [DataMember(Name="binderTypeExternalId", EmitDefaultValue=false)]
        public string BinderTypeExternalId { get; set; }

        /// <summary>
        /// Binder Type Id
        /// </summary>
        /// <value>Binder Type Id</value>
        [DataMember(Name="binderTypeId", EmitDefaultValue=false)]
        public int? BinderTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BinderName
        /// </summary>
        [DataMember(Name="binderName", EmitDefaultValue=false)]
        public VariableInfoRm BinderName { get; set; }

        /// <summary>
        /// Gets or Sets BinderNumber
        /// </summary>
        [DataMember(Name="binderNumber", EmitDefaultValue=false)]
        public VariableInfoRm BinderNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public VariableInfoRm StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public VariableInfoRm EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public VariableInfoRm ExternalId { get; set; }

        /// <summary>
        /// Mapping from binder additional fields and variables
        /// </summary>
        /// <value>Mapping from binder additional fields and variables</value>
        [DataMember(Name="mappings", EmitDefaultValue=false)]
        public List<MappingVariableBinderFieldRm> Mappings { get; set; }

        /// <summary>
        /// Gets or Sets BinderCreatedNumber
        /// </summary>
        [DataMember(Name="binderCreatedNumber", EmitDefaultValue=false)]
        public VariableInfoRm BinderCreatedNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationCreateBinderRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BinderTypeExternalId: ").Append(BinderTypeExternalId).Append("\n");
            sb.Append("  BinderTypeId: ").Append(BinderTypeId).Append("\n");
            sb.Append("  BinderName: ").Append(BinderName).Append("\n");
            sb.Append("  BinderNumber: ").Append(BinderNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  BinderCreatedNumber: ").Append(BinderCreatedNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationCreateBinderRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationCreateBinderRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationCreateBinderRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationCreateBinderRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BinderTypeExternalId == input.BinderTypeExternalId ||
                    (this.BinderTypeExternalId != null &&
                    this.BinderTypeExternalId.Equals(input.BinderTypeExternalId))
                ) && base.Equals(input) && 
                (
                    this.BinderTypeId == input.BinderTypeId ||
                    (this.BinderTypeId != null &&
                    this.BinderTypeId.Equals(input.BinderTypeId))
                ) && base.Equals(input) && 
                (
                    this.BinderName == input.BinderName ||
                    (this.BinderName != null &&
                    this.BinderName.Equals(input.BinderName))
                ) && base.Equals(input) && 
                (
                    this.BinderNumber == input.BinderNumber ||
                    (this.BinderNumber != null &&
                    this.BinderNumber.Equals(input.BinderNumber))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && base.Equals(input) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && base.Equals(input) && 
                (
                    this.BinderCreatedNumber == input.BinderCreatedNumber ||
                    (this.BinderCreatedNumber != null &&
                    this.BinderCreatedNumber.Equals(input.BinderCreatedNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BinderTypeExternalId != null)
                    hashCode = hashCode * 59 + this.BinderTypeExternalId.GetHashCode();
                if (this.BinderTypeId != null)
                    hashCode = hashCode * 59 + this.BinderTypeId.GetHashCode();
                if (this.BinderName != null)
                    hashCode = hashCode * 59 + this.BinderName.GetHashCode();
                if (this.BinderNumber != null)
                    hashCode = hashCode * 59 + this.BinderNumber.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Mappings != null)
                    hashCode = hashCode * 59 + this.Mappings.GetHashCode();
                if (this.BinderCreatedNumber != null)
                    hashCode = hashCode * 59 + this.BinderCreatedNumber.GetHashCode();
                return hashCode;
            }
        }

    }
}
