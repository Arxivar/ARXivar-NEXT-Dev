/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Search interval for process dashboard
    /// </summary>
    [DataContract]
        public partial class ProcessDashboardSearchIntervalRm :  IEquatable<ProcessDashboardSearchIntervalRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDashboardSearchIntervalRm" /> class.
        /// </summary>
        /// <param name="intervalType">Interval type [0&#x3D;Custom, 1&#x3D;Last24Hours, 2&#x3D;Last48Hours, 3&#x3D;LastWeek].</param>
        /// <param name="dateFromUtc">Date from.</param>
        /// <param name="dateToUtc">Date to.</param>
        public ProcessDashboardSearchIntervalRm(int? intervalType = default(int?), DateTime? dateFromUtc = default(DateTime?), DateTime? dateToUtc = default(DateTime?))
        {
            this.IntervalType = intervalType;
            this.DateFromUtc = dateFromUtc;
            this.DateToUtc = dateToUtc;
        }
        
        /// <summary>
        /// Interval type [0&#x3D;Custom, 1&#x3D;Last24Hours, 2&#x3D;Last48Hours, 3&#x3D;LastWeek]
        /// </summary>
        /// <value>Interval type [0&#x3D;Custom, 1&#x3D;Last24Hours, 2&#x3D;Last48Hours, 3&#x3D;LastWeek]</value>
        [DataMember(Name="intervalType", EmitDefaultValue=false)]
        public int? IntervalType { get; set; }

        /// <summary>
        /// Date from
        /// </summary>
        /// <value>Date from</value>
        [DataMember(Name="dateFromUtc", EmitDefaultValue=false)]
        public DateTime? DateFromUtc { get; set; }

        /// <summary>
        /// Date to
        /// </summary>
        /// <value>Date to</value>
        [DataMember(Name="dateToUtc", EmitDefaultValue=false)]
        public DateTime? DateToUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDashboardSearchIntervalRm {\n");
            sb.Append("  IntervalType: ").Append(IntervalType).Append("\n");
            sb.Append("  DateFromUtc: ").Append(DateFromUtc).Append("\n");
            sb.Append("  DateToUtc: ").Append(DateToUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDashboardSearchIntervalRm);
        }

        /// <summary>
        /// Returns true if ProcessDashboardSearchIntervalRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDashboardSearchIntervalRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDashboardSearchIntervalRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IntervalType == input.IntervalType ||
                    (this.IntervalType != null &&
                    this.IntervalType.Equals(input.IntervalType))
                ) && 
                (
                    this.DateFromUtc == input.DateFromUtc ||
                    (this.DateFromUtc != null &&
                    this.DateFromUtc.Equals(input.DateFromUtc))
                ) && 
                (
                    this.DateToUtc == input.DateToUtc ||
                    (this.DateToUtc != null &&
                    this.DateToUtc.Equals(input.DateToUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IntervalType != null)
                    hashCode = hashCode * 59 + this.IntervalType.GetHashCode();
                if (this.DateFromUtc != null)
                    hashCode = hashCode * 59 + this.DateFromUtc.GetHashCode();
                if (this.DateToUtc != null)
                    hashCode = hashCode * 59 + this.DateToUtc.GetHashCode();
                return hashCode;
            }
        }

    }
}
