/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// DiagramObjectConnectorRm
    /// </summary>
    [DataContract]
        public partial class DiagramObjectConnectorRm : DiagramObjectRm,  IEquatable<DiagramObjectConnectorRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectConnectorRm" /> class.
        /// </summary>
        /// <param name="connectorMode">Connector proceed mode [0&#x3D;Proceed, 1&#x3D;EvaluateFormule].</param>
        /// <param name="emergencyOutcome">emergencyOutcome.</param>
        /// <param name="emergencyVariable">emergencyVariable.</param>
        /// <param name="defaultOutcome">defaultOutcome.</param>
        public DiagramObjectConnectorRm(int? connectorMode = default(int?), OutcomeInfoRm emergencyOutcome = default(OutcomeInfoRm), VariableInfoRm emergencyVariable = default(VariableInfoRm), OutcomeInfoRm defaultOutcome = default(OutcomeInfoRm), Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? objectType = default(int?)) : base(id, diagramId, objectType)
        {
            this.ConnectorMode = connectorMode;
            this.EmergencyOutcome = emergencyOutcome;
            this.EmergencyVariable = emergencyVariable;
            this.DefaultOutcome = defaultOutcome;
        }
        
        /// <summary>
        /// Connector proceed mode [0&#x3D;Proceed, 1&#x3D;EvaluateFormule]
        /// </summary>
        /// <value>Connector proceed mode [0&#x3D;Proceed, 1&#x3D;EvaluateFormule]</value>
        [DataMember(Name="connectorMode", EmitDefaultValue=false)]
        public int? ConnectorMode { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyOutcome
        /// </summary>
        [DataMember(Name="emergencyOutcome", EmitDefaultValue=false)]
        public OutcomeInfoRm EmergencyOutcome { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyVariable
        /// </summary>
        [DataMember(Name="emergencyVariable", EmitDefaultValue=false)]
        public VariableInfoRm EmergencyVariable { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOutcome
        /// </summary>
        [DataMember(Name="defaultOutcome", EmitDefaultValue=false)]
        public OutcomeInfoRm DefaultOutcome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectConnectorRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ConnectorMode: ").Append(ConnectorMode).Append("\n");
            sb.Append("  EmergencyOutcome: ").Append(EmergencyOutcome).Append("\n");
            sb.Append("  EmergencyVariable: ").Append(EmergencyVariable).Append("\n");
            sb.Append("  DefaultOutcome: ").Append(DefaultOutcome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectConnectorRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectConnectorRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectConnectorRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectConnectorRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ConnectorMode == input.ConnectorMode ||
                    (this.ConnectorMode != null &&
                    this.ConnectorMode.Equals(input.ConnectorMode))
                ) && base.Equals(input) && 
                (
                    this.EmergencyOutcome == input.EmergencyOutcome ||
                    (this.EmergencyOutcome != null &&
                    this.EmergencyOutcome.Equals(input.EmergencyOutcome))
                ) && base.Equals(input) && 
                (
                    this.EmergencyVariable == input.EmergencyVariable ||
                    (this.EmergencyVariable != null &&
                    this.EmergencyVariable.Equals(input.EmergencyVariable))
                ) && base.Equals(input) && 
                (
                    this.DefaultOutcome == input.DefaultOutcome ||
                    (this.DefaultOutcome != null &&
                    this.DefaultOutcome.Equals(input.DefaultOutcome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ConnectorMode != null)
                    hashCode = hashCode * 59 + this.ConnectorMode.GetHashCode();
                if (this.EmergencyOutcome != null)
                    hashCode = hashCode * 59 + this.EmergencyOutcome.GetHashCode();
                if (this.EmergencyVariable != null)
                    hashCode = hashCode * 59 + this.EmergencyVariable.GetHashCode();
                if (this.DefaultOutcome != null)
                    hashCode = hashCode * 59 + this.DefaultOutcome.GetHashCode();
                return hashCode;
            }
        }

    }
}
