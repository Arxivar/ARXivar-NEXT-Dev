/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Diagrams for view model
    /// </summary>
    [DataContract]
        public partial class DiagramsForViewRm :  IEquatable<DiagramsForViewRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramsForViewRm" /> class.
        /// </summary>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="diagramName">Diagram name.</param>
        /// <param name="diagramRevision">Diagram revision.</param>
        /// <param name="status">This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance].</param>
        /// <param name="xmlData">XML description of the diagram.</param>
        /// <param name="usedStatus">List of used process object status.</param>
        public DiagramsForViewRm(Guid? diagramId = default(Guid?), string diagramName = default(string), int? diagramRevision = default(int?), int? status = default(int?), string xmlData = default(string), List<ProcessObjectStatusInfoRm> usedStatus = default(List<ProcessObjectStatusInfoRm>))
        {
            this.DiagramId = diagramId;
            this.DiagramName = diagramName;
            this.DiagramRevision = diagramRevision;
            this.Status = status;
            this.XmlData = xmlData;
            this.UsedStatus = usedStatus;
        }
        
        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Diagram name
        /// </summary>
        /// <value>Diagram name</value>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Diagram revision
        /// </summary>
        /// <value>Diagram revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance]
        /// </summary>
        /// <value>This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// XML description of the diagram
        /// </summary>
        /// <value>XML description of the diagram</value>
        [DataMember(Name="xmlData", EmitDefaultValue=false)]
        public string XmlData { get; set; }

        /// <summary>
        /// List of used process object status
        /// </summary>
        /// <value>List of used process object status</value>
        [DataMember(Name="usedStatus", EmitDefaultValue=false)]
        public List<ProcessObjectStatusInfoRm> UsedStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramsForViewRm {\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  XmlData: ").Append(XmlData).Append("\n");
            sb.Append("  UsedStatus: ").Append(UsedStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramsForViewRm);
        }

        /// <summary>
        /// Returns true if DiagramsForViewRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramsForViewRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramsForViewRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.XmlData == input.XmlData ||
                    (this.XmlData != null &&
                    this.XmlData.Equals(input.XmlData))
                ) && 
                (
                    this.UsedStatus == input.UsedStatus ||
                    this.UsedStatus != null &&
                    input.UsedStatus != null &&
                    this.UsedStatus.SequenceEqual(input.UsedStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.XmlData != null)
                    hashCode = hashCode * 59 + this.XmlData.GetHashCode();
                if (this.UsedStatus != null)
                    hashCode = hashCode * 59 + this.UsedStatus.GetHashCode();
                return hashCode;
            }
        }

    }
}
