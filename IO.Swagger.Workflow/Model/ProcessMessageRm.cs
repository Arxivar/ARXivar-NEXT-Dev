/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process message model
    /// </summary>
    [DataContract]
        public partial class ProcessMessageRm :  IEquatable<ProcessMessageRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessMessageRm" /> class.
        /// </summary>
        /// <param name="dateTimeUtc">Message date.</param>
        /// <param name="messageLevel">Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error].</param>
        /// <param name="message">Message text (required).</param>
        public ProcessMessageRm(DateTime? dateTimeUtc = default(DateTime?), int? messageLevel = default(int?), string message = default(string))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for ProcessMessageRm and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.DateTimeUtc = dateTimeUtc;
            this.MessageLevel = messageLevel;
        }
        
        /// <summary>
        /// Message date
        /// </summary>
        /// <value>Message date</value>
        [DataMember(Name="dateTimeUtc", EmitDefaultValue=false)]
        public DateTime? DateTimeUtc { get; set; }

        /// <summary>
        /// Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]
        /// </summary>
        /// <value>Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]</value>
        [DataMember(Name="messageLevel", EmitDefaultValue=false)]
        public int? MessageLevel { get; set; }

        /// <summary>
        /// Message text
        /// </summary>
        /// <value>Message text</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessMessageRm {\n");
            sb.Append("  DateTimeUtc: ").Append(DateTimeUtc).Append("\n");
            sb.Append("  MessageLevel: ").Append(MessageLevel).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessMessageRm);
        }

        /// <summary>
        /// Returns true if ProcessMessageRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessMessageRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessMessageRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTimeUtc == input.DateTimeUtc ||
                    (this.DateTimeUtc != null &&
                    this.DateTimeUtc.Equals(input.DateTimeUtc))
                ) && 
                (
                    this.MessageLevel == input.MessageLevel ||
                    (this.MessageLevel != null &&
                    this.MessageLevel.Equals(input.MessageLevel))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTimeUtc != null)
                    hashCode = hashCode * 59 + this.DateTimeUtc.GetHashCode();
                if (this.MessageLevel != null)
                    hashCode = hashCode * 59 + this.MessageLevel.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

    }
}
