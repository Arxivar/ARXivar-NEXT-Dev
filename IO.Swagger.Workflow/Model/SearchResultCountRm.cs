/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Search result count model
    /// </summary>
    [DataContract]
        public partial class SearchResultCountRm :  IEquatable<SearchResultCountRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultCountRm" /> class.
        /// </summary>
        /// <param name="resultCount">Corrent result count (max value: take).</param>
        /// <param name="totalResultCount">Total result count.</param>
        public SearchResultCountRm(int? resultCount = default(int?), long? totalResultCount = default(long?))
        {
            this.ResultCount = resultCount;
            this.TotalResultCount = totalResultCount;
        }
        
        /// <summary>
        /// Corrent result count (max value: take)
        /// </summary>
        /// <value>Corrent result count (max value: take)</value>
        [DataMember(Name="resultCount", EmitDefaultValue=false)]
        public int? ResultCount { get; set; }

        /// <summary>
        /// Total result count
        /// </summary>
        /// <value>Total result count</value>
        [DataMember(Name="totalResultCount", EmitDefaultValue=false)]
        public long? TotalResultCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResultCountRm {\n");
            sb.Append("  ResultCount: ").Append(ResultCount).Append("\n");
            sb.Append("  TotalResultCount: ").Append(TotalResultCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResultCountRm);
        }

        /// <summary>
        /// Returns true if SearchResultCountRm instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResultCountRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResultCountRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultCount == input.ResultCount ||
                    (this.ResultCount != null &&
                    this.ResultCount.Equals(input.ResultCount))
                ) && 
                (
                    this.TotalResultCount == input.TotalResultCount ||
                    (this.TotalResultCount != null &&
                    this.TotalResultCount.Equals(input.TotalResultCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultCount != null)
                    hashCode = hashCode * 59 + this.ResultCount.GetHashCode();
                if (this.TotalResultCount != null)
                    hashCode = hashCode * 59 + this.TotalResultCount.GetHashCode();
                return hashCode;
            }
        }

    }
}
