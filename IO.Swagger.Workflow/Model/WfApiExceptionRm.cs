/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// API Exception model
    /// </summary>
    [DataContract]
        public partial class WfApiExceptionRm :  IEquatable<WfApiExceptionRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WfApiExceptionRm" /> class.
        /// </summary>
        /// <param name="httpStatusCode">Exception code.</param>
        /// <param name="userMessage">User message.</param>
        /// <param name="detail">Errore detail.</param>
        /// <param name="exceptionCode">Exception code.</param>
        public WfApiExceptionRm(int? httpStatusCode = default(int?), string userMessage = default(string), string detail = default(string), int? exceptionCode = default(int?))
        {
            this.HttpStatusCode = httpStatusCode;
            this.UserMessage = userMessage;
            this.Detail = detail;
            this.ExceptionCode = exceptionCode;
        }
        
        /// <summary>
        /// Exception code
        /// </summary>
        /// <value>Exception code</value>
        [DataMember(Name="httpStatusCode", EmitDefaultValue=false)]
        public int? HttpStatusCode { get; set; }

        /// <summary>
        /// User message
        /// </summary>
        /// <value>User message</value>
        [DataMember(Name="userMessage", EmitDefaultValue=false)]
        public string UserMessage { get; set; }

        /// <summary>
        /// Errore detail
        /// </summary>
        /// <value>Errore detail</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// Exception code
        /// </summary>
        /// <value>Exception code</value>
        [DataMember(Name="exceptionCode", EmitDefaultValue=false)]
        public int? ExceptionCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WfApiExceptionRm {\n");
            sb.Append("  HttpStatusCode: ").Append(HttpStatusCode).Append("\n");
            sb.Append("  UserMessage: ").Append(UserMessage).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  ExceptionCode: ").Append(ExceptionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WfApiExceptionRm);
        }

        /// <summary>
        /// Returns true if WfApiExceptionRm instances are equal
        /// </summary>
        /// <param name="input">Instance of WfApiExceptionRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WfApiExceptionRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HttpStatusCode == input.HttpStatusCode ||
                    (this.HttpStatusCode != null &&
                    this.HttpStatusCode.Equals(input.HttpStatusCode))
                ) && 
                (
                    this.UserMessage == input.UserMessage ||
                    (this.UserMessage != null &&
                    this.UserMessage.Equals(input.UserMessage))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.ExceptionCode == input.ExceptionCode ||
                    (this.ExceptionCode != null &&
                    this.ExceptionCode.Equals(input.ExceptionCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpStatusCode != null)
                    hashCode = hashCode * 59 + this.HttpStatusCode.GetHashCode();
                if (this.UserMessage != null)
                    hashCode = hashCode * 59 + this.UserMessage.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.ExceptionCode != null)
                    hashCode = hashCode * 59 + this.ExceptionCode.GetHashCode();
                return hashCode;
            }
        }

    }
}
