/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process dashboard search duration model
    /// </summary>
    [DataContract]
        public partial class ProcessDashboardSearchDurationRm :  IEquatable<ProcessDashboardSearchDurationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDashboardSearchDurationRm" /> class.
        /// </summary>
        /// <param name="_operator">Numeric filter operator [0&#x3D;NoOperation, 1&#x3D;Lower, 2&#x3D;LowerOrEqual, 3&#x3D;Equal, 4&#x3D;GreaterOrEqual, 5&#x3D;Greater, 6&#x3D;NotEqual].</param>
        /// <param name="days">Days.</param>
        /// <param name="hours">Hours.</param>
        /// <param name="minutes">Minutes.</param>
        public ProcessDashboardSearchDurationRm(int? _operator = default(int?), int? days = default(int?), int? hours = default(int?), int? minutes = default(int?))
        {
            this.Operator = _operator;
            this.Days = days;
            this.Hours = hours;
            this.Minutes = minutes;
        }
        
        /// <summary>
        /// Numeric filter operator [0&#x3D;NoOperation, 1&#x3D;Lower, 2&#x3D;LowerOrEqual, 3&#x3D;Equal, 4&#x3D;GreaterOrEqual, 5&#x3D;Greater, 6&#x3D;NotEqual]
        /// </summary>
        /// <value>Numeric filter operator [0&#x3D;NoOperation, 1&#x3D;Lower, 2&#x3D;LowerOrEqual, 3&#x3D;Equal, 4&#x3D;GreaterOrEqual, 5&#x3D;Greater, 6&#x3D;NotEqual]</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public int? Operator { get; set; }

        /// <summary>
        /// Days
        /// </summary>
        /// <value>Days</value>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public int? Days { get; set; }

        /// <summary>
        /// Hours
        /// </summary>
        /// <value>Hours</value>
        [DataMember(Name="hours", EmitDefaultValue=false)]
        public int? Hours { get; set; }

        /// <summary>
        /// Minutes
        /// </summary>
        /// <value>Minutes</value>
        [DataMember(Name="minutes", EmitDefaultValue=false)]
        public int? Minutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDashboardSearchDurationRm {\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDashboardSearchDurationRm);
        }

        /// <summary>
        /// Returns true if ProcessDashboardSearchDurationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDashboardSearchDurationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDashboardSearchDurationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Days == input.Days ||
                    (this.Days != null &&
                    this.Days.Equals(input.Days))
                ) && 
                (
                    this.Hours == input.Hours ||
                    (this.Hours != null &&
                    this.Hours.Equals(input.Hours))
                ) && 
                (
                    this.Minutes == input.Minutes ||
                    (this.Minutes != null &&
                    this.Minutes.Equals(input.Minutes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.Hours != null)
                    hashCode = hashCode * 59 + this.Hours.GetHashCode();
                if (this.Minutes != null)
                    hashCode = hashCode * 59 + this.Minutes.GetHashCode();
                return hashCode;
            }
        }

    }
}
