/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// DiagramObjectLinkRm
    /// </summary>
    [DataContract]
        public partial class DiagramObjectLinkRm : DiagramObjectRm,  IEquatable<DiagramObjectLinkRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectLinkRm" /> class.
        /// </summary>
        /// <param name="outcome">outcome.</param>
        /// <param name="srcObjectId">Source object identifier.</param>
        /// <param name="destObjectId">Destination object identifier.</param>
        public DiagramObjectLinkRm(OutcomeInfoRm outcome = default(OutcomeInfoRm), Guid? srcObjectId = default(Guid?), Guid? destObjectId = default(Guid?), Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? objectType = default(int?)) : base(id, diagramId, objectType)
        {
            this.Outcome = outcome;
            this.SrcObjectId = srcObjectId;
            this.DestObjectId = destObjectId;
        }
        
        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name="outcome", EmitDefaultValue=false)]
        public OutcomeInfoRm Outcome { get; set; }

        /// <summary>
        /// Source object identifier
        /// </summary>
        /// <value>Source object identifier</value>
        [DataMember(Name="srcObjectId", EmitDefaultValue=false)]
        public Guid? SrcObjectId { get; set; }

        /// <summary>
        /// Destination object identifier
        /// </summary>
        /// <value>Destination object identifier</value>
        [DataMember(Name="destObjectId", EmitDefaultValue=false)]
        public Guid? DestObjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectLinkRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  SrcObjectId: ").Append(SrcObjectId).Append("\n");
            sb.Append("  DestObjectId: ").Append(DestObjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectLinkRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectLinkRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectLinkRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectLinkRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && base.Equals(input) && 
                (
                    this.SrcObjectId == input.SrcObjectId ||
                    (this.SrcObjectId != null &&
                    this.SrcObjectId.Equals(input.SrcObjectId))
                ) && base.Equals(input) && 
                (
                    this.DestObjectId == input.DestObjectId ||
                    (this.DestObjectId != null &&
                    this.DestObjectId.Equals(input.DestObjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Outcome != null)
                    hashCode = hashCode * 59 + this.Outcome.GetHashCode();
                if (this.SrcObjectId != null)
                    hashCode = hashCode * 59 + this.SrcObjectId.GetHashCode();
                if (this.DestObjectId != null)
                    hashCode = hashCode * 59 + this.DestObjectId.GetHashCode();
                return hashCode;
            }
        }

    }
}
