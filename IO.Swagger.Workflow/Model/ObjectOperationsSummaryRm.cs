/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Object operation summary model, includes aggregate information about the status of the operations
    /// </summary>
    [DataContract]
        public partial class ObjectOperationsSummaryRm :  IEquatable<ObjectOperationsSummaryRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectOperationsSummaryRm" /> class.
        /// </summary>
        /// <param name="queued">Number of operations in queued status.</param>
        /// <param name="running">Number of operations in running status.</param>
        /// <param name="suspended">Number of operations in suspended status.</param>
        /// <param name="error">Number of operations in error status.</param>
        /// <param name="completed">Number of operations in completed status.</param>
        public ObjectOperationsSummaryRm(int? queued = default(int?), int? running = default(int?), int? suspended = default(int?), int? error = default(int?), int? completed = default(int?))
        {
            this.Queued = queued;
            this.Running = running;
            this.Suspended = suspended;
            this.Error = error;
            this.Completed = completed;
        }
        
        /// <summary>
        /// Number of operations in queued status
        /// </summary>
        /// <value>Number of operations in queued status</value>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public int? Queued { get; set; }

        /// <summary>
        /// Number of operations in running status
        /// </summary>
        /// <value>Number of operations in running status</value>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public int? Running { get; set; }

        /// <summary>
        /// Number of operations in suspended status
        /// </summary>
        /// <value>Number of operations in suspended status</value>
        [DataMember(Name="suspended", EmitDefaultValue=false)]
        public int? Suspended { get; set; }

        /// <summary>
        /// Number of operations in error status
        /// </summary>
        /// <value>Number of operations in error status</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public int? Error { get; set; }

        /// <summary>
        /// Number of operations in completed status
        /// </summary>
        /// <value>Number of operations in completed status</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public int? Completed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectOperationsSummaryRm {\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectOperationsSummaryRm);
        }

        /// <summary>
        /// Returns true if ObjectOperationsSummaryRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectOperationsSummaryRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectOperationsSummaryRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                return hashCode;
            }
        }

    }
}
