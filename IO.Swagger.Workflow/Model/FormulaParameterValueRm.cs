/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// FormulaParameterValueRm
    /// </summary>
    [DataContract]
        public partial class FormulaParameterValueRm : ParameterValueRm,  IEquatable<FormulaParameterValueRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaParameterValueRm" /> class.
        /// </summary>
        /// <param name="formula">Formula (required).</param>
        public FormulaParameterValueRm(string formula = default(string), int? kind = default(int?)) : base(kind)
        {
            // to ensure "formula" is required (not null)
            if (formula == null)
            {
                throw new InvalidDataException("formula is a required property for FormulaParameterValueRm and cannot be null");
            }
            else
            {
                this.Formula = formula;
            }
        }
        
        /// <summary>
        /// Formula
        /// </summary>
        /// <value>Formula</value>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormulaParameterValueRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormulaParameterValueRm);
        }

        /// <summary>
        /// Returns true if FormulaParameterValueRm instances are equal
        /// </summary>
        /// <param name="input">Instance of FormulaParameterValueRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormulaParameterValueRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                return hashCode;
            }
        }

    }
}
