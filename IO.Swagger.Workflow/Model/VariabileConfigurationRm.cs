/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base class of variable configuration
    /// </summary>
    [DataContract]
        public partial class VariabileConfigurationRm :  IEquatable<VariabileConfigurationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariabileConfigurationRm" /> class.
        /// </summary>
        /// <param name="variableType">Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono].</param>
        /// <param name="name">Variable name (required).</param>
        /// <param name="encryption">Variable Encryption.</param>
        /// <param name="labels">Variable Label.</param>
        /// <param name="descriptions">Variable description.</param>
        /// <param name="validationType">Indicates the validation type [0&#x3D;None, 1&#x3D;Regex].</param>
        /// <param name="validationString">The validation formula to test.</param>
        /// <param name="validationErrors">Variable validation errors.</param>
        public VariabileConfigurationRm(int? variableType = default(int?), string name = default(string), bool? encryption = default(bool?), List<MultiLanguageValueRm> labels = default(List<MultiLanguageValueRm>), List<MultiLanguageValueRm> descriptions = default(List<MultiLanguageValueRm>), int? validationType = default(int?), string validationString = default(string), List<MultiLanguageValueRm> validationErrors = default(List<MultiLanguageValueRm>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for VariabileConfigurationRm and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.VariableType = variableType;
            this.Encryption = encryption;
            this.Labels = labels;
            this.Descriptions = descriptions;
            this.ValidationType = validationType;
            this.ValidationString = validationString;
            this.ValidationErrors = validationErrors;
        }
        
        /// <summary>
        /// Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono]
        /// </summary>
        /// <value>Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono]</value>
        [DataMember(Name="variableType", EmitDefaultValue=false)]
        public int? VariableType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        /// <value>Variable name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Variable Encryption
        /// </summary>
        /// <value>Variable Encryption</value>
        [DataMember(Name="encryption", EmitDefaultValue=false)]
        public bool? Encryption { get; set; }

        /// <summary>
        /// Variable Label
        /// </summary>
        /// <value>Variable Label</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Labels { get; set; }

        /// <summary>
        /// Variable description
        /// </summary>
        /// <value>Variable description</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Descriptions { get; set; }

        /// <summary>
        /// Indicates the validation type [0&#x3D;None, 1&#x3D;Regex]
        /// </summary>
        /// <value>Indicates the validation type [0&#x3D;None, 1&#x3D;Regex]</value>
        [DataMember(Name="validationType", EmitDefaultValue=false)]
        public int? ValidationType { get; set; }

        /// <summary>
        /// The validation formula to test
        /// </summary>
        /// <value>The validation formula to test</value>
        [DataMember(Name="validationString", EmitDefaultValue=false)]
        public string ValidationString { get; set; }

        /// <summary>
        /// Variable validation errors
        /// </summary>
        /// <value>Variable validation errors</value>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariabileConfigurationRm {\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  ValidationType: ").Append(ValidationType).Append("\n");
            sb.Append("  ValidationString: ").Append(ValidationString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariabileConfigurationRm);
        }

        /// <summary>
        /// Returns true if VariabileConfigurationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of VariabileConfigurationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariabileConfigurationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableType == input.VariableType ||
                    (this.VariableType != null &&
                    this.VariableType.Equals(input.VariableType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    (this.Encryption != null &&
                    this.Encryption.Equals(input.Encryption))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.ValidationType == input.ValidationType ||
                    (this.ValidationType != null &&
                    this.ValidationType.Equals(input.ValidationType))
                ) && 
                (
                    this.ValidationString == input.ValidationString ||
                    (this.ValidationString != null &&
                    this.ValidationString.Equals(input.ValidationString))
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    input.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableType != null)
                    hashCode = hashCode * 59 + this.VariableType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Encryption != null)
                    hashCode = hashCode * 59 + this.Encryption.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.ValidationType != null)
                    hashCode = hashCode * 59 + this.ValidationType.GetHashCode();
                if (this.ValidationString != null)
                    hashCode = hashCode * 59 + this.ValidationString.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                return hashCode;
            }
        }

    }
}
