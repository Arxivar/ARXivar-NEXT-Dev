/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Mapping from variable and rest api execution
    /// </summary>
    [DataContract]
        public partial class MappingVariableRestApiCallResultItemRm :  IEquatable<MappingVariableRestApiCallResultItemRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingVariableRestApiCallResultItemRm" /> class.
        /// </summary>
        /// <param name="variable">variable (required).</param>
        /// <param name="mapping">mapping (required).</param>
        public MappingVariableRestApiCallResultItemRm(VariableInfoRm variable = default(VariableInfoRm), OneOfMappingVariableRestApiCallResultItemRmMapping mapping = default(OneOfMappingVariableRestApiCallResultItemRmMapping))
        {
            // to ensure "variable" is required (not null)
            if (variable == null)
            {
                throw new InvalidDataException("variable is a required property for MappingVariableRestApiCallResultItemRm and cannot be null");
            }
            else
            {
                this.Variable = variable;
            }
            // to ensure "mapping" is required (not null)
            if (mapping == null)
            {
                throw new InvalidDataException("mapping is a required property for MappingVariableRestApiCallResultItemRm and cannot be null");
            }
            else
            {
                this.Mapping = mapping;
            }
        }
        
        /// <summary>
        /// Gets or Sets Variable
        /// </summary>
        [DataMember(Name="variable", EmitDefaultValue=false)]
        public VariableInfoRm Variable { get; set; }

        /// <summary>
        /// Gets or Sets Mapping
        /// </summary>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public OneOfMappingVariableRestApiCallResultItemRmMapping Mapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MappingVariableRestApiCallResultItemRm {\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappingVariableRestApiCallResultItemRm);
        }

        /// <summary>
        /// Returns true if MappingVariableRestApiCallResultItemRm instances are equal
        /// </summary>
        /// <param name="input">Instance of MappingVariableRestApiCallResultItemRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingVariableRestApiCallResultItemRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Variable == input.Variable ||
                    (this.Variable != null &&
                    this.Variable.Equals(input.Variable))
                ) && 
                (
                    this.Mapping == input.Mapping ||
                    (this.Mapping != null &&
                    this.Mapping.Equals(input.Mapping))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Variable != null)
                    hashCode = hashCode * 59 + this.Variable.GetHashCode();
                if (this.Mapping != null)
                    hashCode = hashCode * 59 + this.Mapping.GetHashCode();
                return hashCode;
            }
        }

    }
}
