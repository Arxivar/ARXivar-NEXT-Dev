/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationTestRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationTestRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationTestRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationTestRm" /> class.
        /// </summary>
        /// <param name="numThrowError">Num errors to throw.</param>
        /// <param name="errorMessageThrown">The error message description to throw.</param>
        /// <param name="duration">The operation duration.</param>
        /// <param name="raiseBrokenCircuitException">Raise a BrokenCircuitException.</param>
        public OperationConfigurationTestRm(int? numThrowError = default(int?), string errorMessageThrown = default(string), int? duration = default(int?), bool? raiseBrokenCircuitException = default(bool?), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            this.NumThrowError = numThrowError;
            this.ErrorMessageThrown = errorMessageThrown;
            this.Duration = duration;
            this.RaiseBrokenCircuitException = raiseBrokenCircuitException;
        }
        
        /// <summary>
        /// Num errors to throw
        /// </summary>
        /// <value>Num errors to throw</value>
        [DataMember(Name="numThrowError", EmitDefaultValue=false)]
        public int? NumThrowError { get; set; }

        /// <summary>
        /// The error message description to throw
        /// </summary>
        /// <value>The error message description to throw</value>
        [DataMember(Name="errorMessageThrown", EmitDefaultValue=false)]
        public string ErrorMessageThrown { get; set; }

        /// <summary>
        /// The operation duration
        /// </summary>
        /// <value>The operation duration</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Raise a BrokenCircuitException
        /// </summary>
        /// <value>Raise a BrokenCircuitException</value>
        [DataMember(Name="raiseBrokenCircuitException", EmitDefaultValue=false)]
        public bool? RaiseBrokenCircuitException { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationTestRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  NumThrowError: ").Append(NumThrowError).Append("\n");
            sb.Append("  ErrorMessageThrown: ").Append(ErrorMessageThrown).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  RaiseBrokenCircuitException: ").Append(RaiseBrokenCircuitException).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationTestRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationTestRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationTestRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationTestRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.NumThrowError == input.NumThrowError ||
                    (this.NumThrowError != null &&
                    this.NumThrowError.Equals(input.NumThrowError))
                ) && base.Equals(input) && 
                (
                    this.ErrorMessageThrown == input.ErrorMessageThrown ||
                    (this.ErrorMessageThrown != null &&
                    this.ErrorMessageThrown.Equals(input.ErrorMessageThrown))
                ) && base.Equals(input) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && base.Equals(input) && 
                (
                    this.RaiseBrokenCircuitException == input.RaiseBrokenCircuitException ||
                    (this.RaiseBrokenCircuitException != null &&
                    this.RaiseBrokenCircuitException.Equals(input.RaiseBrokenCircuitException))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.NumThrowError != null)
                    hashCode = hashCode * 59 + this.NumThrowError.GetHashCode();
                if (this.ErrorMessageThrown != null)
                    hashCode = hashCode * 59 + this.ErrorMessageThrown.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.RaiseBrokenCircuitException != null)
                    hashCode = hashCode * 59 + this.RaiseBrokenCircuitException.GetHashCode();
                return hashCode;
            }
        }

    }
}
