/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Mapping process variable
    /// </summary>
    [DataContract]
        public partial class MappingProcessVariableRm :  IEquatable<MappingProcessVariableRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingProcessVariableRm" /> class.
        /// </summary>
        /// <param name="sourceVariable">sourceVariable (required).</param>
        /// <param name="destinationVariable">destinationVariable (required).</param>
        public MappingProcessVariableRm(VariableInfoRm sourceVariable = default(VariableInfoRm), VariableInfoRm destinationVariable = default(VariableInfoRm))
        {
            // to ensure "sourceVariable" is required (not null)
            if (sourceVariable == null)
            {
                throw new InvalidDataException("sourceVariable is a required property for MappingProcessVariableRm and cannot be null");
            }
            else
            {
                this.SourceVariable = sourceVariable;
            }
            // to ensure "destinationVariable" is required (not null)
            if (destinationVariable == null)
            {
                throw new InvalidDataException("destinationVariable is a required property for MappingProcessVariableRm and cannot be null");
            }
            else
            {
                this.DestinationVariable = destinationVariable;
            }
        }
        
        /// <summary>
        /// Gets or Sets SourceVariable
        /// </summary>
        [DataMember(Name="sourceVariable", EmitDefaultValue=false)]
        public VariableInfoRm SourceVariable { get; set; }

        /// <summary>
        /// Gets or Sets DestinationVariable
        /// </summary>
        [DataMember(Name="destinationVariable", EmitDefaultValue=false)]
        public VariableInfoRm DestinationVariable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MappingProcessVariableRm {\n");
            sb.Append("  SourceVariable: ").Append(SourceVariable).Append("\n");
            sb.Append("  DestinationVariable: ").Append(DestinationVariable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappingProcessVariableRm);
        }

        /// <summary>
        /// Returns true if MappingProcessVariableRm instances are equal
        /// </summary>
        /// <param name="input">Instance of MappingProcessVariableRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingProcessVariableRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceVariable == input.SourceVariable ||
                    (this.SourceVariable != null &&
                    this.SourceVariable.Equals(input.SourceVariable))
                ) && 
                (
                    this.DestinationVariable == input.DestinationVariable ||
                    (this.DestinationVariable != null &&
                    this.DestinationVariable.Equals(input.DestinationVariable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceVariable != null)
                    hashCode = hashCode * 59 + this.SourceVariable.GetHashCode();
                if (this.DestinationVariable != null)
                    hashCode = hashCode * 59 + this.DestinationVariable.GetHashCode();
                return hashCode;
            }
        }

    }
}
