/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Object clone model, with operations
    /// </summary>
    [DataContract]
        public partial class DiagramObjectCloneRm :  IEquatable<DiagramObjectCloneRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectCloneRm" /> class.
        /// </summary>
        /// <param name="sourceObjectId">Source object identifier.</param>
        /// <param name="destObjectId">Destination object identifier.</param>
        /// <param name="operations">Operations clone list (required).</param>
        public DiagramObjectCloneRm(Guid? sourceObjectId = default(Guid?), Guid? destObjectId = default(Guid?), List<OperationsCloneItemRm> operations = default(List<OperationsCloneItemRm>))
        {
            // to ensure "operations" is required (not null)
            if (operations == null)
            {
                throw new InvalidDataException("operations is a required property for DiagramObjectCloneRm and cannot be null");
            }
            else
            {
                this.Operations = operations;
            }
            this.SourceObjectId = sourceObjectId;
            this.DestObjectId = destObjectId;
        }
        
        /// <summary>
        /// Source object identifier
        /// </summary>
        /// <value>Source object identifier</value>
        [DataMember(Name="sourceObjectId", EmitDefaultValue=false)]
        public Guid? SourceObjectId { get; set; }

        /// <summary>
        /// Destination object identifier
        /// </summary>
        /// <value>Destination object identifier</value>
        [DataMember(Name="destObjectId", EmitDefaultValue=false)]
        public Guid? DestObjectId { get; set; }

        /// <summary>
        /// Operations clone list
        /// </summary>
        /// <value>Operations clone list</value>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public List<OperationsCloneItemRm> Operations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectCloneRm {\n");
            sb.Append("  SourceObjectId: ").Append(SourceObjectId).Append("\n");
            sb.Append("  DestObjectId: ").Append(DestObjectId).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectCloneRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectCloneRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectCloneRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectCloneRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceObjectId == input.SourceObjectId ||
                    (this.SourceObjectId != null &&
                    this.SourceObjectId.Equals(input.SourceObjectId))
                ) && 
                (
                    this.DestObjectId == input.DestObjectId ||
                    (this.DestObjectId != null &&
                    this.DestObjectId.Equals(input.DestObjectId))
                ) && 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceObjectId != null)
                    hashCode = hashCode * 59 + this.SourceObjectId.GetHashCode();
                if (this.DestObjectId != null)
                    hashCode = hashCode * 59 + this.DestObjectId.GetHashCode();
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                return hashCode;
            }
        }

    }
}
