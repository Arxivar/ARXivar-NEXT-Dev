/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base class for retry strategy
    /// </summary>
    [DataContract]
        public partial class RetryStrategyRm :  IEquatable<RetryStrategyRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetryStrategyRm" /> class.
        /// </summary>
        /// <param name="retryType">Retry strategy type definition [0&#x3D;Constant, 1&#x3D;Incremental].</param>
        /// <param name="delay">Delay.</param>
        public RetryStrategyRm(int? retryType = default(int?), int? delay = default(int?))
        {
            this.RetryType = retryType;
            this.Delay = delay;
        }
        
        /// <summary>
        /// Retry strategy type definition [0&#x3D;Constant, 1&#x3D;Incremental]
        /// </summary>
        /// <value>Retry strategy type definition [0&#x3D;Constant, 1&#x3D;Incremental]</value>
        [DataMember(Name="retryType", EmitDefaultValue=false)]
        public int? RetryType { get; set; }

        /// <summary>
        /// Delay
        /// </summary>
        /// <value>Delay</value>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetryStrategyRm {\n");
            sb.Append("  RetryType: ").Append(RetryType).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetryStrategyRm);
        }

        /// <summary>
        /// Returns true if RetryStrategyRm instances are equal
        /// </summary>
        /// <param name="input">Instance of RetryStrategyRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetryStrategyRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RetryType == input.RetryType ||
                    (this.RetryType != null &&
                    this.RetryType.Equals(input.RetryType))
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RetryType != null)
                    hashCode = hashCode * 59 + this.RetryType.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                return hashCode;
            }
        }

    }
}
