/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Operation definition model
    /// </summary>
    [DataContract]
        public partial class OperationsRm :  IEquatable<OperationsRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsRm" /> class.
        /// </summary>
        /// <param name="id">Operation identifier.</param>
        /// <param name="srcId">Source operation identifier.</param>
        /// <param name="execOrder">Execution order.</param>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="objectId">Object identifier.</param>
        /// <param name="configuration">configuration (required).</param>
        public OperationsRm(Guid? id = default(Guid?), Guid? srcId = default(Guid?), int? execOrder = default(int?), Guid? diagramId = default(Guid?), Guid? objectId = default(Guid?), OperationsConfigurationRm configuration = default(OperationsConfigurationRm))
        {
            // to ensure "configuration" is required (not null)
            if (configuration == null)
            {
                throw new InvalidDataException("configuration is a required property for OperationsRm and cannot be null");
            }
            else
            {
                this.Configuration = configuration;
            }
            this.Id = id;
            this.SrcId = srcId;
            this.ExecOrder = execOrder;
            this.DiagramId = diagramId;
            this.ObjectId = objectId;
        }
        
        /// <summary>
        /// Operation identifier
        /// </summary>
        /// <value>Operation identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Source operation identifier
        /// </summary>
        /// <value>Source operation identifier</value>
        [DataMember(Name="srcId", EmitDefaultValue=false)]
        public Guid? SrcId { get; set; }

        /// <summary>
        /// Execution order
        /// </summary>
        /// <value>Execution order</value>
        [DataMember(Name="execOrder", EmitDefaultValue=false)]
        public int? ExecOrder { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Object identifier
        /// </summary>
        /// <value>Object identifier</value>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public Guid? ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public OperationsConfigurationRm Configuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationsRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SrcId: ").Append(SrcId).Append("\n");
            sb.Append("  ExecOrder: ").Append(ExecOrder).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationsRm);
        }

        /// <summary>
        /// Returns true if OperationsRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationsRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationsRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SrcId == input.SrcId ||
                    (this.SrcId != null &&
                    this.SrcId.Equals(input.SrcId))
                ) && 
                (
                    this.ExecOrder == input.ExecOrder ||
                    (this.ExecOrder != null &&
                    this.ExecOrder.Equals(input.ExecOrder))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SrcId != null)
                    hashCode = hashCode * 59 + this.SrcId.GetHashCode();
                if (this.ExecOrder != null)
                    hashCode = hashCode * 59 + this.ExecOrder.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                return hashCode;
            }
        }

    }
}
