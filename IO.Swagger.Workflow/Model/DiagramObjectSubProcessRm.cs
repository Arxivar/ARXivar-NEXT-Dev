/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// DiagramObjectSubProcessRm
    /// </summary>
    [DataContract]
        public partial class DiagramObjectSubProcessRm : DiagramObjectRm,  IEquatable<DiagramObjectSubProcessRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectSubProcessRm" /> class.
        /// </summary>
        /// <param name="subProcessDiagramName">Sub process diagram name.</param>
        /// <param name="subProcessDiagramRevision">Sub process diagram revision.</param>
        /// <param name="subProcessDiagramId">Sub process diagram identifier.</param>
        /// <param name="subProcessParentDiagramId">Sub process parent diagram identifier.</param>
        /// <param name="startOptions">startOptions (required).</param>
        /// <param name="endOptions">endOptions (required).</param>
        public DiagramObjectSubProcessRm(string subProcessDiagramName = default(string), int? subProcessDiagramRevision = default(int?), Guid? subProcessDiagramId = default(Guid?), Guid? subProcessParentDiagramId = default(Guid?), SubProcessStartOptionsRm startOptions = default(SubProcessStartOptionsRm), SubProcessEndOptionsRm endOptions = default(SubProcessEndOptionsRm), Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? objectType = default(int?)) : base(id, diagramId, objectType)
        {
            // to ensure "startOptions" is required (not null)
            if (startOptions == null)
            {
                throw new InvalidDataException("startOptions is a required property for DiagramObjectSubProcessRm and cannot be null");
            }
            else
            {
                this.StartOptions = startOptions;
            }
            // to ensure "endOptions" is required (not null)
            if (endOptions == null)
            {
                throw new InvalidDataException("endOptions is a required property for DiagramObjectSubProcessRm and cannot be null");
            }
            else
            {
                this.EndOptions = endOptions;
            }
            this.SubProcessDiagramName = subProcessDiagramName;
            this.SubProcessDiagramRevision = subProcessDiagramRevision;
            this.SubProcessDiagramId = subProcessDiagramId;
            this.SubProcessParentDiagramId = subProcessParentDiagramId;
        }
        
        /// <summary>
        /// Sub process diagram name
        /// </summary>
        /// <value>Sub process diagram name</value>
        [DataMember(Name="subProcessDiagramName", EmitDefaultValue=false)]
        public string SubProcessDiagramName { get; set; }

        /// <summary>
        /// Sub process diagram revision
        /// </summary>
        /// <value>Sub process diagram revision</value>
        [DataMember(Name="subProcessDiagramRevision", EmitDefaultValue=false)]
        public int? SubProcessDiagramRevision { get; set; }

        /// <summary>
        /// Sub process diagram identifier
        /// </summary>
        /// <value>Sub process diagram identifier</value>
        [DataMember(Name="subProcessDiagramId", EmitDefaultValue=false)]
        public Guid? SubProcessDiagramId { get; set; }

        /// <summary>
        /// Sub process parent diagram identifier
        /// </summary>
        /// <value>Sub process parent diagram identifier</value>
        [DataMember(Name="subProcessParentDiagramId", EmitDefaultValue=false)]
        public Guid? SubProcessParentDiagramId { get; set; }

        /// <summary>
        /// Gets or Sets StartOptions
        /// </summary>
        [DataMember(Name="startOptions", EmitDefaultValue=false)]
        public SubProcessStartOptionsRm StartOptions { get; set; }

        /// <summary>
        /// Gets or Sets EndOptions
        /// </summary>
        [DataMember(Name="endOptions", EmitDefaultValue=false)]
        public SubProcessEndOptionsRm EndOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectSubProcessRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SubProcessDiagramName: ").Append(SubProcessDiagramName).Append("\n");
            sb.Append("  SubProcessDiagramRevision: ").Append(SubProcessDiagramRevision).Append("\n");
            sb.Append("  SubProcessDiagramId: ").Append(SubProcessDiagramId).Append("\n");
            sb.Append("  SubProcessParentDiagramId: ").Append(SubProcessParentDiagramId).Append("\n");
            sb.Append("  StartOptions: ").Append(StartOptions).Append("\n");
            sb.Append("  EndOptions: ").Append(EndOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectSubProcessRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectSubProcessRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectSubProcessRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectSubProcessRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.SubProcessDiagramName == input.SubProcessDiagramName ||
                    (this.SubProcessDiagramName != null &&
                    this.SubProcessDiagramName.Equals(input.SubProcessDiagramName))
                ) && base.Equals(input) && 
                (
                    this.SubProcessDiagramRevision == input.SubProcessDiagramRevision ||
                    (this.SubProcessDiagramRevision != null &&
                    this.SubProcessDiagramRevision.Equals(input.SubProcessDiagramRevision))
                ) && base.Equals(input) && 
                (
                    this.SubProcessDiagramId == input.SubProcessDiagramId ||
                    (this.SubProcessDiagramId != null &&
                    this.SubProcessDiagramId.Equals(input.SubProcessDiagramId))
                ) && base.Equals(input) && 
                (
                    this.SubProcessParentDiagramId == input.SubProcessParentDiagramId ||
                    (this.SubProcessParentDiagramId != null &&
                    this.SubProcessParentDiagramId.Equals(input.SubProcessParentDiagramId))
                ) && base.Equals(input) && 
                (
                    this.StartOptions == input.StartOptions ||
                    (this.StartOptions != null &&
                    this.StartOptions.Equals(input.StartOptions))
                ) && base.Equals(input) && 
                (
                    this.EndOptions == input.EndOptions ||
                    (this.EndOptions != null &&
                    this.EndOptions.Equals(input.EndOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SubProcessDiagramName != null)
                    hashCode = hashCode * 59 + this.SubProcessDiagramName.GetHashCode();
                if (this.SubProcessDiagramRevision != null)
                    hashCode = hashCode * 59 + this.SubProcessDiagramRevision.GetHashCode();
                if (this.SubProcessDiagramId != null)
                    hashCode = hashCode * 59 + this.SubProcessDiagramId.GetHashCode();
                if (this.SubProcessParentDiagramId != null)
                    hashCode = hashCode * 59 + this.SubProcessParentDiagramId.GetHashCode();
                if (this.StartOptions != null)
                    hashCode = hashCode * 59 + this.StartOptions.GetHashCode();
                if (this.EndOptions != null)
                    hashCode = hashCode * 59 + this.EndOptions.GetHashCode();
                return hashCode;
            }
        }

    }
}
