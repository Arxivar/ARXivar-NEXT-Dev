/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process instance model
    /// </summary>
    [DataContract]
        public partial class ProcessInstancesRm :  IEquatable<ProcessInstancesRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstancesRm" /> class.
        /// </summary>
        /// <param name="id">Process identifier.</param>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="diagramRevision">Diagram revision.</param>
        /// <param name="hasCustomDiagram">Indicates if the process has been modified.</param>
        /// <param name="diagramName">Diagram name.</param>
        /// <param name="status">Process status [0&#x3D;Created, 1&#x3D;Initialized, 2&#x3D;Started, 3&#x3D;Paused, 9&#x3D;Stopped, 10&#x3D;Terminated, 11&#x3D;TerminatedError].</param>
        /// <param name="logicStatus">Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued].</param>
        /// <param name="priority">Process priority.</param>
        /// <param name="activationMode">activationMode.</param>
        /// <param name="creationDateUtc">Creation date.</param>
        /// <param name="lastUpdateUtc">Last update date.</param>
        /// <param name="startDateUtc">Start date.</param>
        /// <param name="endDateUtc">End date.</param>
        /// <param name="deleteDateUtc">Delete date.</param>
        /// <param name="descriptions">List of traslation of the descriptions.</param>
        /// <param name="details">List of traslation of the details.</param>
        /// <param name="notes">List of notes.</param>
        /// <param name="messageLevel">Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error].</param>
        /// <param name="messages">List of messages.</param>
        /// <param name="customDeleteOption">customDeleteOption.</param>
        public ProcessInstancesRm(Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? diagramRevision = default(int?), bool? hasCustomDiagram = default(bool?), string diagramName = default(string), int? status = default(int?), int? logicStatus = default(int?), int? priority = default(int?), OneOfProcessInstancesRmActivationMode activationMode = default(OneOfProcessInstancesRmActivationMode), DateTime? creationDateUtc = default(DateTime?), DateTime? lastUpdateUtc = default(DateTime?), DateTime? startDateUtc = default(DateTime?), DateTime? endDateUtc = default(DateTime?), DateTime? deleteDateUtc = default(DateTime?), List<MultiLanguageValueRm> descriptions = default(List<MultiLanguageValueRm>), List<MultiLanguageValueRm> details = default(List<MultiLanguageValueRm>), List<NoteRm> notes = default(List<NoteRm>), int? messageLevel = default(int?), List<ProcessMessageRm> messages = default(List<ProcessMessageRm>), ProcessDeleteOptionsRm customDeleteOption = default(ProcessDeleteOptionsRm))
        {
            this.Id = id;
            this.DiagramId = diagramId;
            this.DiagramRevision = diagramRevision;
            this.HasCustomDiagram = hasCustomDiagram;
            this.DiagramName = diagramName;
            this.Status = status;
            this.LogicStatus = logicStatus;
            this.Priority = priority;
            this.ActivationMode = activationMode;
            this.CreationDateUtc = creationDateUtc;
            this.LastUpdateUtc = lastUpdateUtc;
            this.StartDateUtc = startDateUtc;
            this.EndDateUtc = endDateUtc;
            this.DeleteDateUtc = deleteDateUtc;
            this.Descriptions = descriptions;
            this.Details = details;
            this.Notes = notes;
            this.MessageLevel = messageLevel;
            this.Messages = messages;
            this.CustomDeleteOption = customDeleteOption;
        }
        
        /// <summary>
        /// Process identifier
        /// </summary>
        /// <value>Process identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Diagram revision
        /// </summary>
        /// <value>Diagram revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// Indicates if the process has been modified
        /// </summary>
        /// <value>Indicates if the process has been modified</value>
        [DataMember(Name="hasCustomDiagram", EmitDefaultValue=false)]
        public bool? HasCustomDiagram { get; set; }

        /// <summary>
        /// Diagram name
        /// </summary>
        /// <value>Diagram name</value>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Process status [0&#x3D;Created, 1&#x3D;Initialized, 2&#x3D;Started, 3&#x3D;Paused, 9&#x3D;Stopped, 10&#x3D;Terminated, 11&#x3D;TerminatedError]
        /// </summary>
        /// <value>Process status [0&#x3D;Created, 1&#x3D;Initialized, 2&#x3D;Started, 3&#x3D;Paused, 9&#x3D;Stopped, 10&#x3D;Terminated, 11&#x3D;TerminatedError]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued]
        /// </summary>
        /// <value>Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued]</value>
        [DataMember(Name="logicStatus", EmitDefaultValue=false)]
        public int? LogicStatus { get; set; }

        /// <summary>
        /// Process priority
        /// </summary>
        /// <value>Process priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets ActivationMode
        /// </summary>
        [DataMember(Name="activationMode", EmitDefaultValue=false)]
        public OneOfProcessInstancesRmActivationMode ActivationMode { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creationDateUtc", EmitDefaultValue=false)]
        public DateTime? CreationDateUtc { get; set; }

        /// <summary>
        /// Last update date
        /// </summary>
        /// <value>Last update date</value>
        [DataMember(Name="lastUpdateUtc", EmitDefaultValue=false)]
        public DateTime? LastUpdateUtc { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="startDateUtc", EmitDefaultValue=false)]
        public DateTime? StartDateUtc { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="endDateUtc", EmitDefaultValue=false)]
        public DateTime? EndDateUtc { get; set; }

        /// <summary>
        /// Delete date
        /// </summary>
        /// <value>Delete date</value>
        [DataMember(Name="deleteDateUtc", EmitDefaultValue=false)]
        public DateTime? DeleteDateUtc { get; set; }

        /// <summary>
        /// List of traslation of the descriptions
        /// </summary>
        /// <value>List of traslation of the descriptions</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Descriptions { get; set; }

        /// <summary>
        /// List of traslation of the details
        /// </summary>
        /// <value>List of traslation of the details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Details { get; set; }

        /// <summary>
        /// List of notes
        /// </summary>
        /// <value>List of notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<NoteRm> Notes { get; set; }

        /// <summary>
        /// Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]
        /// </summary>
        /// <value>Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]</value>
        [DataMember(Name="messageLevel", EmitDefaultValue=false)]
        public int? MessageLevel { get; set; }

        /// <summary>
        /// List of messages
        /// </summary>
        /// <value>List of messages</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ProcessMessageRm> Messages { get; set; }

        /// <summary>
        /// Gets or Sets CustomDeleteOption
        /// </summary>
        [DataMember(Name="customDeleteOption", EmitDefaultValue=false)]
        public ProcessDeleteOptionsRm CustomDeleteOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessInstancesRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  HasCustomDiagram: ").Append(HasCustomDiagram).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LogicStatus: ").Append(LogicStatus).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ActivationMode: ").Append(ActivationMode).Append("\n");
            sb.Append("  CreationDateUtc: ").Append(CreationDateUtc).Append("\n");
            sb.Append("  LastUpdateUtc: ").Append(LastUpdateUtc).Append("\n");
            sb.Append("  StartDateUtc: ").Append(StartDateUtc).Append("\n");
            sb.Append("  EndDateUtc: ").Append(EndDateUtc).Append("\n");
            sb.Append("  DeleteDateUtc: ").Append(DeleteDateUtc).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  MessageLevel: ").Append(MessageLevel).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  CustomDeleteOption: ").Append(CustomDeleteOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessInstancesRm);
        }

        /// <summary>
        /// Returns true if ProcessInstancesRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessInstancesRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessInstancesRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && 
                (
                    this.HasCustomDiagram == input.HasCustomDiagram ||
                    (this.HasCustomDiagram != null &&
                    this.HasCustomDiagram.Equals(input.HasCustomDiagram))
                ) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.LogicStatus == input.LogicStatus ||
                    (this.LogicStatus != null &&
                    this.LogicStatus.Equals(input.LogicStatus))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ActivationMode == input.ActivationMode ||
                    (this.ActivationMode != null &&
                    this.ActivationMode.Equals(input.ActivationMode))
                ) && 
                (
                    this.CreationDateUtc == input.CreationDateUtc ||
                    (this.CreationDateUtc != null &&
                    this.CreationDateUtc.Equals(input.CreationDateUtc))
                ) && 
                (
                    this.LastUpdateUtc == input.LastUpdateUtc ||
                    (this.LastUpdateUtc != null &&
                    this.LastUpdateUtc.Equals(input.LastUpdateUtc))
                ) && 
                (
                    this.StartDateUtc == input.StartDateUtc ||
                    (this.StartDateUtc != null &&
                    this.StartDateUtc.Equals(input.StartDateUtc))
                ) && 
                (
                    this.EndDateUtc == input.EndDateUtc ||
                    (this.EndDateUtc != null &&
                    this.EndDateUtc.Equals(input.EndDateUtc))
                ) && 
                (
                    this.DeleteDateUtc == input.DeleteDateUtc ||
                    (this.DeleteDateUtc != null &&
                    this.DeleteDateUtc.Equals(input.DeleteDateUtc))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.MessageLevel == input.MessageLevel ||
                    (this.MessageLevel != null &&
                    this.MessageLevel.Equals(input.MessageLevel))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.CustomDeleteOption == input.CustomDeleteOption ||
                    (this.CustomDeleteOption != null &&
                    this.CustomDeleteOption.Equals(input.CustomDeleteOption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.HasCustomDiagram != null)
                    hashCode = hashCode * 59 + this.HasCustomDiagram.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.LogicStatus != null)
                    hashCode = hashCode * 59 + this.LogicStatus.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ActivationMode != null)
                    hashCode = hashCode * 59 + this.ActivationMode.GetHashCode();
                if (this.CreationDateUtc != null)
                    hashCode = hashCode * 59 + this.CreationDateUtc.GetHashCode();
                if (this.LastUpdateUtc != null)
                    hashCode = hashCode * 59 + this.LastUpdateUtc.GetHashCode();
                if (this.StartDateUtc != null)
                    hashCode = hashCode * 59 + this.StartDateUtc.GetHashCode();
                if (this.EndDateUtc != null)
                    hashCode = hashCode * 59 + this.EndDateUtc.GetHashCode();
                if (this.DeleteDateUtc != null)
                    hashCode = hashCode * 59 + this.DeleteDateUtc.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.MessageLevel != null)
                    hashCode = hashCode * 59 + this.MessageLevel.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.CustomDeleteOption != null)
                    hashCode = hashCode * 59 + this.CustomDeleteOption.GetHashCode();
                return hashCode;
            }
        }

    }
}
