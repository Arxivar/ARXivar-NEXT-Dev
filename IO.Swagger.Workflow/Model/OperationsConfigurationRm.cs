/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base class for operation configuration
    /// </summary>
    [DataContract]
        public partial class OperationsConfigurationRm :  IEquatable<OperationsConfigurationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsConfigurationRm" /> class.
        /// </summary>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder].</param>
        /// <param name="retryConfiguration">retryConfiguration.</param>
        /// <param name="onErrorEventConfiguration">onErrorEventConfiguration.</param>
        /// <param name="onFailedEventConfiguration">onFailedEventConfiguration.</param>
        /// <param name="invalidateOtherOperations">Indicated if the next operations can be executed even if the current operation fails.</param>
        /// <param name="userDescription">Operation description.</param>
        public OperationsConfigurationRm(int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string))
        {
            this.OperationType = operationType;
            this.RetryConfiguration = retryConfiguration;
            this.OnErrorEventConfiguration = onErrorEventConfiguration;
            this.OnFailedEventConfiguration = onFailedEventConfiguration;
            this.InvalidateOtherOperations = invalidateOtherOperations;
            this.UserDescription = userDescription;
        }
        
        /// <summary>
        /// Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]
        /// </summary>
        /// <value>Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</value>
        [DataMember(Name="operationType", EmitDefaultValue=false)]
        public int? OperationType { get; set; }

        /// <summary>
        /// Gets or Sets RetryConfiguration
        /// </summary>
        [DataMember(Name="retryConfiguration", EmitDefaultValue=false)]
        public OperationRetryConfigurationRm RetryConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets OnErrorEventConfiguration
        /// </summary>
        [DataMember(Name="onErrorEventConfiguration", EmitDefaultValue=false)]
        public EventInfoRm OnErrorEventConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets OnFailedEventConfiguration
        /// </summary>
        [DataMember(Name="onFailedEventConfiguration", EmitDefaultValue=false)]
        public EventInfoRm OnFailedEventConfiguration { get; set; }

        /// <summary>
        /// Indicated if the next operations can be executed even if the current operation fails
        /// </summary>
        /// <value>Indicated if the next operations can be executed even if the current operation fails</value>
        [DataMember(Name="invalidateOtherOperations", EmitDefaultValue=false)]
        public bool? InvalidateOtherOperations { get; set; }

        /// <summary>
        /// Operation description
        /// </summary>
        /// <value>Operation description</value>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationsConfigurationRm {\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  RetryConfiguration: ").Append(RetryConfiguration).Append("\n");
            sb.Append("  OnErrorEventConfiguration: ").Append(OnErrorEventConfiguration).Append("\n");
            sb.Append("  OnFailedEventConfiguration: ").Append(OnFailedEventConfiguration).Append("\n");
            sb.Append("  InvalidateOtherOperations: ").Append(InvalidateOtherOperations).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationsConfigurationRm);
        }

        /// <summary>
        /// Returns true if OperationsConfigurationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationsConfigurationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationsConfigurationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OperationType == input.OperationType ||
                    (this.OperationType != null &&
                    this.OperationType.Equals(input.OperationType))
                ) && 
                (
                    this.RetryConfiguration == input.RetryConfiguration ||
                    (this.RetryConfiguration != null &&
                    this.RetryConfiguration.Equals(input.RetryConfiguration))
                ) && 
                (
                    this.OnErrorEventConfiguration == input.OnErrorEventConfiguration ||
                    (this.OnErrorEventConfiguration != null &&
                    this.OnErrorEventConfiguration.Equals(input.OnErrorEventConfiguration))
                ) && 
                (
                    this.OnFailedEventConfiguration == input.OnFailedEventConfiguration ||
                    (this.OnFailedEventConfiguration != null &&
                    this.OnFailedEventConfiguration.Equals(input.OnFailedEventConfiguration))
                ) && 
                (
                    this.InvalidateOtherOperations == input.InvalidateOtherOperations ||
                    (this.InvalidateOtherOperations != null &&
                    this.InvalidateOtherOperations.Equals(input.InvalidateOtherOperations))
                ) && 
                (
                    this.UserDescription == input.UserDescription ||
                    (this.UserDescription != null &&
                    this.UserDescription.Equals(input.UserDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OperationType != null)
                    hashCode = hashCode * 59 + this.OperationType.GetHashCode();
                if (this.RetryConfiguration != null)
                    hashCode = hashCode * 59 + this.RetryConfiguration.GetHashCode();
                if (this.OnErrorEventConfiguration != null)
                    hashCode = hashCode * 59 + this.OnErrorEventConfiguration.GetHashCode();
                if (this.OnFailedEventConfiguration != null)
                    hashCode = hashCode * 59 + this.OnFailedEventConfiguration.GetHashCode();
                if (this.InvalidateOtherOperations != null)
                    hashCode = hashCode * 59 + this.InvalidateOtherOperations.GetHashCode();
                if (this.UserDescription != null)
                    hashCode = hashCode * 59 + this.UserDescription.GetHashCode();
                return hashCode;
            }
        }

    }
}
