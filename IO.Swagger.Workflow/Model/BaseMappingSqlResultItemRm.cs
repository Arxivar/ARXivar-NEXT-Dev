/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base type for sql result item
    /// </summary>
    [DataContract]
        public partial class BaseMappingSqlResultItemRm :  IEquatable<BaseMappingSqlResultItemRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseMappingSqlResultItemRm" /> class.
        /// </summary>
        /// <param name="mappingType">Sql result mapping type [0&#x3D;Single, 1&#x3D;MatrixAuto, 2&#x3D;MatrixCustom, 3&#x3D;ArrayAuto, 4&#x3D;ArrayCustom].</param>
        public BaseMappingSqlResultItemRm(int? mappingType = default(int?))
        {
            this.MappingType = mappingType;
        }
        
        /// <summary>
        /// Sql result mapping type [0&#x3D;Single, 1&#x3D;MatrixAuto, 2&#x3D;MatrixCustom, 3&#x3D;ArrayAuto, 4&#x3D;ArrayCustom]
        /// </summary>
        /// <value>Sql result mapping type [0&#x3D;Single, 1&#x3D;MatrixAuto, 2&#x3D;MatrixCustom, 3&#x3D;ArrayAuto, 4&#x3D;ArrayCustom]</value>
        [DataMember(Name="mappingType", EmitDefaultValue=false)]
        public int? MappingType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseMappingSqlResultItemRm {\n");
            sb.Append("  MappingType: ").Append(MappingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseMappingSqlResultItemRm);
        }

        /// <summary>
        /// Returns true if BaseMappingSqlResultItemRm instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseMappingSqlResultItemRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseMappingSqlResultItemRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MappingType == input.MappingType ||
                    (this.MappingType != null &&
                    this.MappingType.Equals(input.MappingType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MappingType != null)
                    hashCode = hashCode * 59 + this.MappingType.GetHashCode();
                return hashCode;
            }
        }

    }
}
