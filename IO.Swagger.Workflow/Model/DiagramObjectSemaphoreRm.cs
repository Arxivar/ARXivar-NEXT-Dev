/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// DiagramObjectSemaphoreRm
    /// </summary>
    [DataContract]
        public partial class DiagramObjectSemaphoreRm : DiagramObjectRm,  IEquatable<DiagramObjectSemaphoreRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectSemaphoreRm" /> class.
        /// </summary>
        /// <param name="semaphoreMode">Semaphore mode [0&#x3D;WaitIncomingLinks].</param>
        public DiagramObjectSemaphoreRm(int? semaphoreMode = default(int?), Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? objectType = default(int?)) : base(id, diagramId, objectType)
        {
            this.SemaphoreMode = semaphoreMode;
        }
        
        /// <summary>
        /// Semaphore mode [0&#x3D;WaitIncomingLinks]
        /// </summary>
        /// <value>Semaphore mode [0&#x3D;WaitIncomingLinks]</value>
        [DataMember(Name="semaphoreMode", EmitDefaultValue=false)]
        public int? SemaphoreMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectSemaphoreRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SemaphoreMode: ").Append(SemaphoreMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectSemaphoreRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectSemaphoreRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectSemaphoreRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectSemaphoreRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.SemaphoreMode == input.SemaphoreMode ||
                    (this.SemaphoreMode != null &&
                    this.SemaphoreMode.Equals(input.SemaphoreMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SemaphoreMode != null)
                    hashCode = hashCode * 59 + this.SemaphoreMode.GetHashCode();
                return hashCode;
            }
        }

    }
}
