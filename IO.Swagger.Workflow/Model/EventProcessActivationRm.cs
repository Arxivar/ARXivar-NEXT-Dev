/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// EventProcessActivationRm
    /// </summary>
    [DataContract]
        public partial class EventProcessActivationRm : ProcessActivationRm,  IEquatable<EventProcessActivationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventProcessActivationRm" /> class.
        /// </summary>
        /// <param name="eventIdentifier">External event identifier (required).</param>
        /// <param name="eventMetadata">Event metadata, eg: event type, event description ecc....</param>
        /// <param name="eventConfiguration">Additional information about event, like filtering configuration.</param>
        /// <param name="userInfo">userInfo (required).</param>
        public EventProcessActivationRm(string eventIdentifier = default(string), List<KeyValueRm> eventMetadata = default(List<KeyValueRm>), List<KeyValueRm> eventConfiguration = default(List<KeyValueRm>), ArxivarUserInfoRm userInfo = default(ArxivarUserInfoRm), int? activationType = default(int?), int? eventPriority = default(int?), List<ProcessDocumentParameterRm> documents = default(List<ProcessDocumentParameterRm>), List<string> htmlNotes = default(List<string>), List<ProcessExternalParameterRm> externalParameters = default(List<ProcessExternalParameterRm>)) : base(activationType, eventPriority, documents, htmlNotes, externalParameters)
        {
            // to ensure "eventIdentifier" is required (not null)
            if (eventIdentifier == null)
            {
                throw new InvalidDataException("eventIdentifier is a required property for EventProcessActivationRm and cannot be null");
            }
            else
            {
                this.EventIdentifier = eventIdentifier;
            }
            // to ensure "userInfo" is required (not null)
            if (userInfo == null)
            {
                throw new InvalidDataException("userInfo is a required property for EventProcessActivationRm and cannot be null");
            }
            else
            {
                this.UserInfo = userInfo;
            }
            this.EventMetadata = eventMetadata;
            this.EventConfiguration = eventConfiguration;
        }
        
        /// <summary>
        /// External event identifier
        /// </summary>
        /// <value>External event identifier</value>
        [DataMember(Name="eventIdentifier", EmitDefaultValue=false)]
        public string EventIdentifier { get; set; }

        /// <summary>
        /// Event metadata, eg: event type, event description ecc...
        /// </summary>
        /// <value>Event metadata, eg: event type, event description ecc...</value>
        [DataMember(Name="eventMetadata", EmitDefaultValue=false)]
        public List<KeyValueRm> EventMetadata { get; set; }

        /// <summary>
        /// Additional information about event, like filtering configuration
        /// </summary>
        /// <value>Additional information about event, like filtering configuration</value>
        [DataMember(Name="eventConfiguration", EmitDefaultValue=false)]
        public List<KeyValueRm> EventConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [DataMember(Name="userInfo", EmitDefaultValue=false)]
        public ArxivarUserInfoRm UserInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventProcessActivationRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EventIdentifier: ").Append(EventIdentifier).Append("\n");
            sb.Append("  EventMetadata: ").Append(EventMetadata).Append("\n");
            sb.Append("  EventConfiguration: ").Append(EventConfiguration).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventProcessActivationRm);
        }

        /// <summary>
        /// Returns true if EventProcessActivationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of EventProcessActivationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventProcessActivationRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.EventIdentifier == input.EventIdentifier ||
                    (this.EventIdentifier != null &&
                    this.EventIdentifier.Equals(input.EventIdentifier))
                ) && base.Equals(input) && 
                (
                    this.EventMetadata == input.EventMetadata ||
                    this.EventMetadata != null &&
                    input.EventMetadata != null &&
                    this.EventMetadata.SequenceEqual(input.EventMetadata)
                ) && base.Equals(input) && 
                (
                    this.EventConfiguration == input.EventConfiguration ||
                    this.EventConfiguration != null &&
                    input.EventConfiguration != null &&
                    this.EventConfiguration.SequenceEqual(input.EventConfiguration)
                ) && base.Equals(input) && 
                (
                    this.UserInfo == input.UserInfo ||
                    (this.UserInfo != null &&
                    this.UserInfo.Equals(input.UserInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EventIdentifier != null)
                    hashCode = hashCode * 59 + this.EventIdentifier.GetHashCode();
                if (this.EventMetadata != null)
                    hashCode = hashCode * 59 + this.EventMetadata.GetHashCode();
                if (this.EventConfiguration != null)
                    hashCode = hashCode * 59 + this.EventConfiguration.GetHashCode();
                if (this.UserInfo != null)
                    hashCode = hashCode * 59 + this.UserInfo.GetHashCode();
                return hashCode;
            }
        }

    }
}
