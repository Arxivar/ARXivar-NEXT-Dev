/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// SubProcessActivationRm
    /// </summary>
    [DataContract]
        public partial class SubProcessActivationRm : ProcessActivationRm,  IEquatable<SubProcessActivationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubProcessActivationRm" /> class.
        /// </summary>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="parentProcessId">Parent process identifier.</param>
        /// <param name="parentDiagramId">Parent diagram identifier.</param>
        /// <param name="parentPriority">Parent diagram priority.</param>
        /// <param name="parentDiagramRevision">Parent diagram revision.</param>
        /// <param name="parentDiagramName">Parent diagram name.</param>
        /// <param name="detached">True se avviato su link.</param>
        /// <param name="srcProcessObjectId">Riferimento dell&#x27;id oggetto di processo.</param>
        public SubProcessActivationRm(Guid? diagramId = default(Guid?), Guid? parentProcessId = default(Guid?), Guid? parentDiagramId = default(Guid?), int? parentPriority = default(int?), int? parentDiagramRevision = default(int?), string parentDiagramName = default(string), bool? detached = default(bool?), Guid? srcProcessObjectId = default(Guid?), int? activationType = default(int?), int? eventPriority = default(int?), List<ProcessDocumentParameterRm> documents = default(List<ProcessDocumentParameterRm>), List<string> htmlNotes = default(List<string>), List<ProcessExternalParameterRm> externalParameters = default(List<ProcessExternalParameterRm>)) : base(activationType, eventPriority, documents, htmlNotes, externalParameters)
        {
            this.DiagramId = diagramId;
            this.ParentProcessId = parentProcessId;
            this.ParentDiagramId = parentDiagramId;
            this.ParentPriority = parentPriority;
            this.ParentDiagramRevision = parentDiagramRevision;
            this.ParentDiagramName = parentDiagramName;
            this.Detached = detached;
            this.SrcProcessObjectId = srcProcessObjectId;
        }
        
        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Parent process identifier
        /// </summary>
        /// <value>Parent process identifier</value>
        [DataMember(Name="parentProcessId", EmitDefaultValue=false)]
        public Guid? ParentProcessId { get; set; }

        /// <summary>
        /// Parent diagram identifier
        /// </summary>
        /// <value>Parent diagram identifier</value>
        [DataMember(Name="parentDiagramId", EmitDefaultValue=false)]
        public Guid? ParentDiagramId { get; set; }

        /// <summary>
        /// Parent diagram priority
        /// </summary>
        /// <value>Parent diagram priority</value>
        [DataMember(Name="parentPriority", EmitDefaultValue=false)]
        public int? ParentPriority { get; set; }

        /// <summary>
        /// Parent diagram revision
        /// </summary>
        /// <value>Parent diagram revision</value>
        [DataMember(Name="parentDiagramRevision", EmitDefaultValue=false)]
        public int? ParentDiagramRevision { get; set; }

        /// <summary>
        /// Parent diagram name
        /// </summary>
        /// <value>Parent diagram name</value>
        [DataMember(Name="parentDiagramName", EmitDefaultValue=false)]
        public string ParentDiagramName { get; set; }

        /// <summary>
        /// True se avviato su link
        /// </summary>
        /// <value>True se avviato su link</value>
        [DataMember(Name="detached", EmitDefaultValue=false)]
        public bool? Detached { get; set; }

        /// <summary>
        /// Riferimento dell&#x27;id oggetto di processo
        /// </summary>
        /// <value>Riferimento dell&#x27;id oggetto di processo</value>
        [DataMember(Name="srcProcessObjectId", EmitDefaultValue=false)]
        public Guid? SrcProcessObjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubProcessActivationRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  ParentProcessId: ").Append(ParentProcessId).Append("\n");
            sb.Append("  ParentDiagramId: ").Append(ParentDiagramId).Append("\n");
            sb.Append("  ParentPriority: ").Append(ParentPriority).Append("\n");
            sb.Append("  ParentDiagramRevision: ").Append(ParentDiagramRevision).Append("\n");
            sb.Append("  ParentDiagramName: ").Append(ParentDiagramName).Append("\n");
            sb.Append("  Detached: ").Append(Detached).Append("\n");
            sb.Append("  SrcProcessObjectId: ").Append(SrcProcessObjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubProcessActivationRm);
        }

        /// <summary>
        /// Returns true if SubProcessActivationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of SubProcessActivationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubProcessActivationRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && base.Equals(input) && 
                (
                    this.ParentProcessId == input.ParentProcessId ||
                    (this.ParentProcessId != null &&
                    this.ParentProcessId.Equals(input.ParentProcessId))
                ) && base.Equals(input) && 
                (
                    this.ParentDiagramId == input.ParentDiagramId ||
                    (this.ParentDiagramId != null &&
                    this.ParentDiagramId.Equals(input.ParentDiagramId))
                ) && base.Equals(input) && 
                (
                    this.ParentPriority == input.ParentPriority ||
                    (this.ParentPriority != null &&
                    this.ParentPriority.Equals(input.ParentPriority))
                ) && base.Equals(input) && 
                (
                    this.ParentDiagramRevision == input.ParentDiagramRevision ||
                    (this.ParentDiagramRevision != null &&
                    this.ParentDiagramRevision.Equals(input.ParentDiagramRevision))
                ) && base.Equals(input) && 
                (
                    this.ParentDiagramName == input.ParentDiagramName ||
                    (this.ParentDiagramName != null &&
                    this.ParentDiagramName.Equals(input.ParentDiagramName))
                ) && base.Equals(input) && 
                (
                    this.Detached == input.Detached ||
                    (this.Detached != null &&
                    this.Detached.Equals(input.Detached))
                ) && base.Equals(input) && 
                (
                    this.SrcProcessObjectId == input.SrcProcessObjectId ||
                    (this.SrcProcessObjectId != null &&
                    this.SrcProcessObjectId.Equals(input.SrcProcessObjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.ParentProcessId != null)
                    hashCode = hashCode * 59 + this.ParentProcessId.GetHashCode();
                if (this.ParentDiagramId != null)
                    hashCode = hashCode * 59 + this.ParentDiagramId.GetHashCode();
                if (this.ParentPriority != null)
                    hashCode = hashCode * 59 + this.ParentPriority.GetHashCode();
                if (this.ParentDiagramRevision != null)
                    hashCode = hashCode * 59 + this.ParentDiagramRevision.GetHashCode();
                if (this.ParentDiagramName != null)
                    hashCode = hashCode * 59 + this.ParentDiagramName.GetHashCode();
                if (this.Detached != null)
                    hashCode = hashCode * 59 + this.Detached.GetHashCode();
                if (this.SrcProcessObjectId != null)
                    hashCode = hashCode * 59 + this.SrcProcessObjectId.GetHashCode();
                return hashCode;
            }
        }

    }
}
