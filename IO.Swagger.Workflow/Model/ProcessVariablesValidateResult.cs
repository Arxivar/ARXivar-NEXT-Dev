/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process variable validate result
    /// </summary>
    [DataContract]
        public partial class ProcessVariablesValidateResult :  IEquatable<ProcessVariablesValidateResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesValidateResult" /> class.
        /// </summary>
        /// <param name="validated">Indicates the validation result.</param>
        /// <param name="errorMessage">Validation error.</param>
        public ProcessVariablesValidateResult(bool? validated = default(bool?), string errorMessage = default(string))
        {
            this.Validated = validated;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Indicates the validation result
        /// </summary>
        /// <value>Indicates the validation result</value>
        [DataMember(Name="validated", EmitDefaultValue=false)]
        public bool? Validated { get; set; }

        /// <summary>
        /// Validation error
        /// </summary>
        /// <value>Validation error</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessVariablesValidateResult {\n");
            sb.Append("  Validated: ").Append(Validated).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessVariablesValidateResult);
        }

        /// <summary>
        /// Returns true if ProcessVariablesValidateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessVariablesValidateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessVariablesValidateResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Validated == input.Validated ||
                    (this.Validated != null &&
                    this.Validated.Equals(input.Validated))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Validated != null)
                    hashCode = hashCode * 59 + this.Validated.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

    }
}
