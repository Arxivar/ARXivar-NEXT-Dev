/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Diagram event model
    /// </summary>
    [DataContract]
        public partial class DiagramEventsRm :  IEquatable<DiagramEventsRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramEventsRm" /> class.
        /// </summary>
        /// <param name="id">The event identifier.</param>
        /// <param name="diagramId">The diagram identifier.</param>
        /// <param name="srcId">The source diagram identifier.</param>
        /// <param name="name">The event name (required).</param>
        /// <param name="info">info (required).</param>
        public DiagramEventsRm(Guid? id = default(Guid?), Guid? diagramId = default(Guid?), Guid? srcId = default(Guid?), string name = default(string), RecordInfoRm info = default(RecordInfoRm))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DiagramEventsRm and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "info" is required (not null)
            if (info == null)
            {
                throw new InvalidDataException("info is a required property for DiagramEventsRm and cannot be null");
            }
            else
            {
                this.Info = info;
            }
            this.Id = id;
            this.DiagramId = diagramId;
            this.SrcId = srcId;
        }
        
        /// <summary>
        /// The event identifier
        /// </summary>
        /// <value>The event identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The diagram identifier
        /// </summary>
        /// <value>The diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// The source diagram identifier
        /// </summary>
        /// <value>The source diagram identifier</value>
        [DataMember(Name="srcId", EmitDefaultValue=false)]
        public Guid? SrcId { get; set; }

        /// <summary>
        /// The event name
        /// </summary>
        /// <value>The event name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public RecordInfoRm Info { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramEventsRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  SrcId: ").Append(SrcId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramEventsRm);
        }

        /// <summary>
        /// Returns true if DiagramEventsRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramEventsRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramEventsRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.SrcId == input.SrcId ||
                    (this.SrcId != null &&
                    this.SrcId.Equals(input.SrcId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.SrcId != null)
                    hashCode = hashCode * 59 + this.SrcId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                return hashCode;
            }
        }

    }
}
