/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationUpdateProfileRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationUpdateProfileRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationUpdateProfileRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationUpdateProfileRm" /> class.
        /// </summary>
        /// <param name="mappings">Mapping from profile fields and variables (required).</param>
        /// <param name="primary">Update the primary document.</param>
        /// <param name="secondary">Update the secondary documents.</param>
        /// <param name="attachment">Update the profiled attachments.</param>
        /// <param name="documentsFromVariable">documentsFromVariable.</param>
        public OperationConfigurationUpdateProfileRm(List<MappingVariableProfileFieldRm> mappings = default(List<MappingVariableProfileFieldRm>), bool? primary = default(bool?), bool? secondary = default(bool?), bool? attachment = default(bool?), VariableInfoRm documentsFromVariable = default(VariableInfoRm), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            // to ensure "mappings" is required (not null)
            if (mappings == null)
            {
                throw new InvalidDataException("mappings is a required property for OperationConfigurationUpdateProfileRm and cannot be null");
            }
            else
            {
                this.Mappings = mappings;
            }
            this.Primary = primary;
            this.Secondary = secondary;
            this.Attachment = attachment;
            this.DocumentsFromVariable = documentsFromVariable;
        }
        
        /// <summary>
        /// Mapping from profile fields and variables
        /// </summary>
        /// <value>Mapping from profile fields and variables</value>
        [DataMember(Name="mappings", EmitDefaultValue=false)]
        public List<MappingVariableProfileFieldRm> Mappings { get; set; }

        /// <summary>
        /// Update the primary document
        /// </summary>
        /// <value>Update the primary document</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Update the secondary documents
        /// </summary>
        /// <value>Update the secondary documents</value>
        [DataMember(Name="secondary", EmitDefaultValue=false)]
        public bool? Secondary { get; set; }

        /// <summary>
        /// Update the profiled attachments
        /// </summary>
        /// <value>Update the profiled attachments</value>
        [DataMember(Name="attachment", EmitDefaultValue=false)]
        public bool? Attachment { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsFromVariable
        /// </summary>
        [DataMember(Name="documentsFromVariable", EmitDefaultValue=false)]
        public VariableInfoRm DocumentsFromVariable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationUpdateProfileRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  DocumentsFromVariable: ").Append(DocumentsFromVariable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationUpdateProfileRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationUpdateProfileRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationUpdateProfileRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationUpdateProfileRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && base.Equals(input) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && base.Equals(input) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && base.Equals(input) && 
                (
                    this.Attachment == input.Attachment ||
                    (this.Attachment != null &&
                    this.Attachment.Equals(input.Attachment))
                ) && base.Equals(input) && 
                (
                    this.DocumentsFromVariable == input.DocumentsFromVariable ||
                    (this.DocumentsFromVariable != null &&
                    this.DocumentsFromVariable.Equals(input.DocumentsFromVariable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Mappings != null)
                    hashCode = hashCode * 59 + this.Mappings.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.Attachment != null)
                    hashCode = hashCode * 59 + this.Attachment.GetHashCode();
                if (this.DocumentsFromVariable != null)
                    hashCode = hashCode * 59 + this.DocumentsFromVariable.GetHashCode();
                return hashCode;
            }
        }

    }
}
