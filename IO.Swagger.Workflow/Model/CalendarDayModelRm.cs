/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Calendar day model
    /// </summary>
    [DataContract]
        public partial class CalendarDayModelRm :  IEquatable<CalendarDayModelRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarDayModelRm" /> class.
        /// </summary>
        /// <param name="day">Day of week [0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday].</param>
        /// <param name="fromInterval1">fromInterval1 (required).</param>
        /// <param name="endInterval1">endInterval1 (required).</param>
        /// <param name="fromInterval2">fromInterval2 (required).</param>
        /// <param name="endInterval2">endInterval2 (required).</param>
        public CalendarDayModelRm(int? day = default(int?), CalendarIntervalRm fromInterval1 = default(CalendarIntervalRm), CalendarIntervalRm endInterval1 = default(CalendarIntervalRm), CalendarIntervalRm fromInterval2 = default(CalendarIntervalRm), CalendarIntervalRm endInterval2 = default(CalendarIntervalRm))
        {
            // to ensure "fromInterval1" is required (not null)
            if (fromInterval1 == null)
            {
                throw new InvalidDataException("fromInterval1 is a required property for CalendarDayModelRm and cannot be null");
            }
            else
            {
                this.FromInterval1 = fromInterval1;
            }
            // to ensure "endInterval1" is required (not null)
            if (endInterval1 == null)
            {
                throw new InvalidDataException("endInterval1 is a required property for CalendarDayModelRm and cannot be null");
            }
            else
            {
                this.EndInterval1 = endInterval1;
            }
            // to ensure "fromInterval2" is required (not null)
            if (fromInterval2 == null)
            {
                throw new InvalidDataException("fromInterval2 is a required property for CalendarDayModelRm and cannot be null");
            }
            else
            {
                this.FromInterval2 = fromInterval2;
            }
            // to ensure "endInterval2" is required (not null)
            if (endInterval2 == null)
            {
                throw new InvalidDataException("endInterval2 is a required property for CalendarDayModelRm and cannot be null");
            }
            else
            {
                this.EndInterval2 = endInterval2;
            }
            this.Day = day;
        }
        
        /// <summary>
        /// Day of week [0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday]
        /// </summary>
        /// <value>Day of week [0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday]</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int? Day { get; set; }

        /// <summary>
        /// Gets or Sets FromInterval1
        /// </summary>
        [DataMember(Name="fromInterval1", EmitDefaultValue=false)]
        public CalendarIntervalRm FromInterval1 { get; set; }

        /// <summary>
        /// Gets or Sets EndInterval1
        /// </summary>
        [DataMember(Name="endInterval1", EmitDefaultValue=false)]
        public CalendarIntervalRm EndInterval1 { get; set; }

        /// <summary>
        /// Gets or Sets FromInterval2
        /// </summary>
        [DataMember(Name="fromInterval2", EmitDefaultValue=false)]
        public CalendarIntervalRm FromInterval2 { get; set; }

        /// <summary>
        /// Gets or Sets EndInterval2
        /// </summary>
        [DataMember(Name="endInterval2", EmitDefaultValue=false)]
        public CalendarIntervalRm EndInterval2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalendarDayModelRm {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  FromInterval1: ").Append(FromInterval1).Append("\n");
            sb.Append("  EndInterval1: ").Append(EndInterval1).Append("\n");
            sb.Append("  FromInterval2: ").Append(FromInterval2).Append("\n");
            sb.Append("  EndInterval2: ").Append(EndInterval2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalendarDayModelRm);
        }

        /// <summary>
        /// Returns true if CalendarDayModelRm instances are equal
        /// </summary>
        /// <param name="input">Instance of CalendarDayModelRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalendarDayModelRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.FromInterval1 == input.FromInterval1 ||
                    (this.FromInterval1 != null &&
                    this.FromInterval1.Equals(input.FromInterval1))
                ) && 
                (
                    this.EndInterval1 == input.EndInterval1 ||
                    (this.EndInterval1 != null &&
                    this.EndInterval1.Equals(input.EndInterval1))
                ) && 
                (
                    this.FromInterval2 == input.FromInterval2 ||
                    (this.FromInterval2 != null &&
                    this.FromInterval2.Equals(input.FromInterval2))
                ) && 
                (
                    this.EndInterval2 == input.EndInterval2 ||
                    (this.EndInterval2 != null &&
                    this.EndInterval2.Equals(input.EndInterval2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.FromInterval1 != null)
                    hashCode = hashCode * 59 + this.FromInterval1.GetHashCode();
                if (this.EndInterval1 != null)
                    hashCode = hashCode * 59 + this.EndInterval1.GetHashCode();
                if (this.FromInterval2 != null)
                    hashCode = hashCode * 59 + this.FromInterval2.GetHashCode();
                if (this.EndInterval2 != null)
                    hashCode = hashCode * 59 + this.EndInterval2.GetHashCode();
                return hashCode;
            }
        }

    }
}
