/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process dashboard search request model
    /// </summary>
    [DataContract]
        public partial class ProcessDashboardSearchRequestRm :  IEquatable<ProcessDashboardSearchRequestRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDashboardSearchRequestRm" /> class.
        /// </summary>
        /// <param name="processId">Process identifier.</param>
        /// <param name="diagramParentId">Diagram parend identifier.</param>
        /// <param name="diagramRevision">Diagram index revision.</param>
        /// <param name="processDescription">Process description.</param>
        /// <param name="docnumber">Docnumber.</param>
        /// <param name="creationDateInterval">creationDateInterval.</param>
        /// <param name="endDateInterval">endDateInterval.</param>
        /// <param name="statuses">List of process dashboard status.</param>
        /// <param name="durations">durations.</param>
        /// <param name="creationDateSortDirection">Sort direction [0&#x3D;Asc, 1&#x3D;Desc].</param>
        /// <param name="skip">Number of element to skip (used for pagination).</param>
        /// <param name="take">Number of element to take (used for pagination).</param>
        public ProcessDashboardSearchRequestRm(Guid? processId = default(Guid?), Guid? diagramParentId = default(Guid?), int? diagramRevision = default(int?), string processDescription = default(string), int? docnumber = default(int?), ProcessDashboardSearchIntervalRm creationDateInterval = default(ProcessDashboardSearchIntervalRm), ProcessDashboardSearchIntervalRm endDateInterval = default(ProcessDashboardSearchIntervalRm), List<int?> statuses = default(List<int?>), ProcessDashboardSearchDurationRm durations = default(ProcessDashboardSearchDurationRm), int? creationDateSortDirection = default(int?), int? skip = default(int?), int? take = default(int?))
        {
            this.ProcessId = processId;
            this.DiagramParentId = diagramParentId;
            this.DiagramRevision = diagramRevision;
            this.ProcessDescription = processDescription;
            this.Docnumber = docnumber;
            this.CreationDateInterval = creationDateInterval;
            this.EndDateInterval = endDateInterval;
            this.Statuses = statuses;
            this.Durations = durations;
            this.CreationDateSortDirection = creationDateSortDirection;
            this.Skip = skip;
            this.Take = take;
        }
        
        /// <summary>
        /// Process identifier
        /// </summary>
        /// <value>Process identifier</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public Guid? ProcessId { get; set; }

        /// <summary>
        /// Diagram parend identifier
        /// </summary>
        /// <value>Diagram parend identifier</value>
        [DataMember(Name="diagramParentId", EmitDefaultValue=false)]
        public Guid? DiagramParentId { get; set; }

        /// <summary>
        /// Diagram index revision
        /// </summary>
        /// <value>Diagram index revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// Process description
        /// </summary>
        /// <value>Process description</value>
        [DataMember(Name="processDescription", EmitDefaultValue=false)]
        public string ProcessDescription { get; set; }

        /// <summary>
        /// Docnumber
        /// </summary>
        /// <value>Docnumber</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }

        /// <summary>
        /// Gets or Sets CreationDateInterval
        /// </summary>
        [DataMember(Name="creationDateInterval", EmitDefaultValue=false)]
        public ProcessDashboardSearchIntervalRm CreationDateInterval { get; set; }

        /// <summary>
        /// Gets or Sets EndDateInterval
        /// </summary>
        [DataMember(Name="endDateInterval", EmitDefaultValue=false)]
        public ProcessDashboardSearchIntervalRm EndDateInterval { get; set; }

        /// <summary>
        /// List of process dashboard status
        /// </summary>
        /// <value>List of process dashboard status</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<int?> Statuses { get; set; }

        /// <summary>
        /// Gets or Sets Durations
        /// </summary>
        [DataMember(Name="durations", EmitDefaultValue=false)]
        public ProcessDashboardSearchDurationRm Durations { get; set; }

        /// <summary>
        /// Sort direction [0&#x3D;Asc, 1&#x3D;Desc]
        /// </summary>
        /// <value>Sort direction [0&#x3D;Asc, 1&#x3D;Desc]</value>
        [DataMember(Name="creationDateSortDirection", EmitDefaultValue=false)]
        public int? CreationDateSortDirection { get; set; }

        /// <summary>
        /// Number of element to skip (used for pagination)
        /// </summary>
        /// <value>Number of element to skip (used for pagination)</value>
        [DataMember(Name="skip", EmitDefaultValue=false)]
        public int? Skip { get; set; }

        /// <summary>
        /// Number of element to take (used for pagination)
        /// </summary>
        /// <value>Number of element to take (used for pagination)</value>
        [DataMember(Name="take", EmitDefaultValue=false)]
        public int? Take { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDashboardSearchRequestRm {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  DiagramParentId: ").Append(DiagramParentId).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  ProcessDescription: ").Append(ProcessDescription).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  CreationDateInterval: ").Append(CreationDateInterval).Append("\n");
            sb.Append("  EndDateInterval: ").Append(EndDateInterval).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Durations: ").Append(Durations).Append("\n");
            sb.Append("  CreationDateSortDirection: ").Append(CreationDateSortDirection).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Take: ").Append(Take).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDashboardSearchRequestRm);
        }

        /// <summary>
        /// Returns true if ProcessDashboardSearchRequestRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDashboardSearchRequestRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDashboardSearchRequestRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.DiagramParentId == input.DiagramParentId ||
                    (this.DiagramParentId != null &&
                    this.DiagramParentId.Equals(input.DiagramParentId))
                ) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && 
                (
                    this.ProcessDescription == input.ProcessDescription ||
                    (this.ProcessDescription != null &&
                    this.ProcessDescription.Equals(input.ProcessDescription))
                ) && 
                (
                    this.Docnumber == input.Docnumber ||
                    (this.Docnumber != null &&
                    this.Docnumber.Equals(input.Docnumber))
                ) && 
                (
                    this.CreationDateInterval == input.CreationDateInterval ||
                    (this.CreationDateInterval != null &&
                    this.CreationDateInterval.Equals(input.CreationDateInterval))
                ) && 
                (
                    this.EndDateInterval == input.EndDateInterval ||
                    (this.EndDateInterval != null &&
                    this.EndDateInterval.Equals(input.EndDateInterval))
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    input.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.Durations == input.Durations ||
                    (this.Durations != null &&
                    this.Durations.Equals(input.Durations))
                ) && 
                (
                    this.CreationDateSortDirection == input.CreationDateSortDirection ||
                    (this.CreationDateSortDirection != null &&
                    this.CreationDateSortDirection.Equals(input.CreationDateSortDirection))
                ) && 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.Take == input.Take ||
                    (this.Take != null &&
                    this.Take.Equals(input.Take))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.DiagramParentId != null)
                    hashCode = hashCode * 59 + this.DiagramParentId.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.ProcessDescription != null)
                    hashCode = hashCode * 59 + this.ProcessDescription.GetHashCode();
                if (this.Docnumber != null)
                    hashCode = hashCode * 59 + this.Docnumber.GetHashCode();
                if (this.CreationDateInterval != null)
                    hashCode = hashCode * 59 + this.CreationDateInterval.GetHashCode();
                if (this.EndDateInterval != null)
                    hashCode = hashCode * 59 + this.EndDateInterval.GetHashCode();
                if (this.Statuses != null)
                    hashCode = hashCode * 59 + this.Statuses.GetHashCode();
                if (this.Durations != null)
                    hashCode = hashCode * 59 + this.Durations.GetHashCode();
                if (this.CreationDateSortDirection != null)
                    hashCode = hashCode * 59 + this.CreationDateSortDirection.GetHashCode();
                if (this.Skip != null)
                    hashCode = hashCode * 59 + this.Skip.GetHashCode();
                if (this.Take != null)
                    hashCode = hashCode * 59 + this.Take.GetHashCode();
                return hashCode;
            }
        }

    }
}
