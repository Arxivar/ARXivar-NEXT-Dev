/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Object interval configuration
    /// </summary>
    [DataContract]
        public partial class ObjectIntervalConfigurationRm :  IEquatable<ObjectIntervalConfigurationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectIntervalConfigurationRm" /> class.
        /// </summary>
        /// <param name="intervalType">Object interval type [0&#x3D;Timespan, 1&#x3D;Calendar].</param>
        /// <param name="numDays">Number of days.</param>
        /// <param name="numHours">Number of hours.</param>
        /// <param name="numMinutes">Number of minutes.</param>
        /// <param name="numSeconds">Number of seconds.</param>
        public ObjectIntervalConfigurationRm(int? intervalType = default(int?), int? numDays = default(int?), int? numHours = default(int?), int? numMinutes = default(int?), int? numSeconds = default(int?))
        {
            this.IntervalType = intervalType;
            this.NumDays = numDays;
            this.NumHours = numHours;
            this.NumMinutes = numMinutes;
            this.NumSeconds = numSeconds;
        }
        
        /// <summary>
        /// Object interval type [0&#x3D;Timespan, 1&#x3D;Calendar]
        /// </summary>
        /// <value>Object interval type [0&#x3D;Timespan, 1&#x3D;Calendar]</value>
        [DataMember(Name="intervalType", EmitDefaultValue=false)]
        public int? IntervalType { get; set; }

        /// <summary>
        /// Number of days
        /// </summary>
        /// <value>Number of days</value>
        [DataMember(Name="numDays", EmitDefaultValue=false)]
        public int? NumDays { get; set; }

        /// <summary>
        /// Number of hours
        /// </summary>
        /// <value>Number of hours</value>
        [DataMember(Name="numHours", EmitDefaultValue=false)]
        public int? NumHours { get; set; }

        /// <summary>
        /// Number of minutes
        /// </summary>
        /// <value>Number of minutes</value>
        [DataMember(Name="numMinutes", EmitDefaultValue=false)]
        public int? NumMinutes { get; set; }

        /// <summary>
        /// Number of seconds
        /// </summary>
        /// <value>Number of seconds</value>
        [DataMember(Name="numSeconds", EmitDefaultValue=false)]
        public int? NumSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectIntervalConfigurationRm {\n");
            sb.Append("  IntervalType: ").Append(IntervalType).Append("\n");
            sb.Append("  NumDays: ").Append(NumDays).Append("\n");
            sb.Append("  NumHours: ").Append(NumHours).Append("\n");
            sb.Append("  NumMinutes: ").Append(NumMinutes).Append("\n");
            sb.Append("  NumSeconds: ").Append(NumSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectIntervalConfigurationRm);
        }

        /// <summary>
        /// Returns true if ObjectIntervalConfigurationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectIntervalConfigurationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectIntervalConfigurationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IntervalType == input.IntervalType ||
                    (this.IntervalType != null &&
                    this.IntervalType.Equals(input.IntervalType))
                ) && 
                (
                    this.NumDays == input.NumDays ||
                    (this.NumDays != null &&
                    this.NumDays.Equals(input.NumDays))
                ) && 
                (
                    this.NumHours == input.NumHours ||
                    (this.NumHours != null &&
                    this.NumHours.Equals(input.NumHours))
                ) && 
                (
                    this.NumMinutes == input.NumMinutes ||
                    (this.NumMinutes != null &&
                    this.NumMinutes.Equals(input.NumMinutes))
                ) && 
                (
                    this.NumSeconds == input.NumSeconds ||
                    (this.NumSeconds != null &&
                    this.NumSeconds.Equals(input.NumSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IntervalType != null)
                    hashCode = hashCode * 59 + this.IntervalType.GetHashCode();
                if (this.NumDays != null)
                    hashCode = hashCode * 59 + this.NumDays.GetHashCode();
                if (this.NumHours != null)
                    hashCode = hashCode * 59 + this.NumHours.GetHashCode();
                if (this.NumMinutes != null)
                    hashCode = hashCode * 59 + this.NumMinutes.GetHashCode();
                if (this.NumSeconds != null)
                    hashCode = hashCode * 59 + this.NumSeconds.GetHashCode();
                return hashCode;
            }
        }

    }
}
