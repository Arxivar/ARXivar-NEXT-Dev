/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessVariablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessVariableRm</returns>
        ProcessVariableRm ApiV1ProcessVariablesIdProcessProcessIdGet (Guid? id, Guid? processId);

        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessVariableRm</returns>
        ApiResponse<ProcessVariableRm> ApiV1ProcessVariablesIdProcessProcessIdGetWithHttpInfo (Guid? id, Guid? processId);
        /// <summary>
        /// This call allows to set the variables value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>List&lt;ProcessVariableRm&gt;</returns>
        List<ProcessVariableRm> ApiV1ProcessVariablesSetPost (List<ProcessSetVariableRm> body);

        /// <summary>
        /// This call allows to set the variables value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>ApiResponse of List&lt;ProcessVariableRm&gt;</returns>
        ApiResponse<List<ProcessVariableRm>> ApiV1ProcessVariablesSetPostWithHttpInfo (List<ProcessSetVariableRm> body);
        /// <summary>
        /// This call validates a list of variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>ProcessVariablesValidateResult</returns>
        ProcessVariablesValidateResult ApiV1ProcessVariablesValidatePost (List<ProcessSetVariableRm> body);

        /// <summary>
        /// This call validates a list of variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>ApiResponse of ProcessVariablesValidateResult</returns>
        ApiResponse<ProcessVariablesValidateResult> ApiV1ProcessVariablesValidatePostWithHttpInfo (List<ProcessSetVariableRm> body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessVariableRm</returns>
        System.Threading.Tasks.Task<ProcessVariableRm> ApiV1ProcessVariablesIdProcessProcessIdGetAsync (Guid? id, Guid? processId);

        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessVariableRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessVariableRm>> ApiV1ProcessVariablesIdProcessProcessIdGetAsyncWithHttpInfo (Guid? id, Guid? processId);
        /// <summary>
        /// This call allows to set the variables value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>Task of List&lt;ProcessVariableRm&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessVariableRm>> ApiV1ProcessVariablesSetPostAsync (List<ProcessSetVariableRm> body);

        /// <summary>
        /// This call allows to set the variables value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessVariableRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessVariableRm>>> ApiV1ProcessVariablesSetPostAsyncWithHttpInfo (List<ProcessSetVariableRm> body);
        /// <summary>
        /// This call validates a list of variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>Task of ProcessVariablesValidateResult</returns>
        System.Threading.Tasks.Task<ProcessVariablesValidateResult> ApiV1ProcessVariablesValidatePostAsync (List<ProcessSetVariableRm> body);

        /// <summary>
        /// This call validates a list of variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>Task of ApiResponse (ProcessVariablesValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessVariablesValidateResult>> ApiV1ProcessVariablesValidatePostAsyncWithHttpInfo (List<ProcessSetVariableRm> body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessVariablesApi : IProcessVariablesApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessVariablesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessVariablesApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessVariablesApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessVariableRm</returns>
        public ProcessVariableRm ApiV1ProcessVariablesIdProcessProcessIdGet (Guid? id, Guid? processId)
        {
             ApiResponse<ProcessVariableRm> localVarResponse = ApiV1ProcessVariablesIdProcessProcessIdGetWithHttpInfo(id, processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessVariableRm</returns>
        public ApiResponse< ProcessVariableRm > ApiV1ProcessVariablesIdProcessProcessIdGetWithHttpInfo (Guid? id, Guid? processId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessVariablesApi->ApiV1ProcessVariablesIdProcessProcessIdGet");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ApiV1ProcessVariablesIdProcessProcessIdGet");

            var localVarPath = "/api/v1/process-variables/{id}/process/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesIdProcessProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariableRm)));
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessVariableRm</returns>
        public async System.Threading.Tasks.Task<ProcessVariableRm> ApiV1ProcessVariablesIdProcessProcessIdGetAsync (Guid? id, Guid? processId)
        {
             ApiResponse<ProcessVariableRm> localVarResponse = await ApiV1ProcessVariablesIdProcessProcessIdGetAsyncWithHttpInfo(id, processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessVariableRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessVariableRm>> ApiV1ProcessVariablesIdProcessProcessIdGetAsyncWithHttpInfo (Guid? id, Guid? processId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessVariablesApi->ApiV1ProcessVariablesIdProcessProcessIdGet");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ApiV1ProcessVariablesIdProcessProcessIdGet");

            var localVarPath = "/api/v1/process-variables/{id}/process/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesIdProcessProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariableRm)));
        }

        /// <summary>
        /// This call allows to set the variables value 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>List&lt;ProcessVariableRm&gt;</returns>
        public List<ProcessVariableRm> ApiV1ProcessVariablesSetPost (List<ProcessSetVariableRm> body)
        {
             ApiResponse<List<ProcessVariableRm>> localVarResponse = ApiV1ProcessVariablesSetPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to set the variables value 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>ApiResponse of List&lt;ProcessVariableRm&gt;</returns>
        public ApiResponse< List<ProcessVariableRm> > ApiV1ProcessVariablesSetPostWithHttpInfo (List<ProcessSetVariableRm> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ApiV1ProcessVariablesSetPost");

            var localVarPath = "/api/v1/process-variables/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesSetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessVariableRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessVariableRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessVariableRm>)));
        }

        /// <summary>
        /// This call allows to set the variables value 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>Task of List&lt;ProcessVariableRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessVariableRm>> ApiV1ProcessVariablesSetPostAsync (List<ProcessSetVariableRm> body)
        {
             ApiResponse<List<ProcessVariableRm>> localVarResponse = await ApiV1ProcessVariablesSetPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to set the variables value 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be set</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessVariableRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessVariableRm>>> ApiV1ProcessVariablesSetPostAsyncWithHttpInfo (List<ProcessSetVariableRm> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ApiV1ProcessVariablesSetPost");

            var localVarPath = "/api/v1/process-variables/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesSetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessVariableRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessVariableRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessVariableRm>)));
        }

        /// <summary>
        /// This call validates a list of variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>ProcessVariablesValidateResult</returns>
        public ProcessVariablesValidateResult ApiV1ProcessVariablesValidatePost (List<ProcessSetVariableRm> body)
        {
             ApiResponse<ProcessVariablesValidateResult> localVarResponse = ApiV1ProcessVariablesValidatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call validates a list of variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>ApiResponse of ProcessVariablesValidateResult</returns>
        public ApiResponse< ProcessVariablesValidateResult > ApiV1ProcessVariablesValidatePostWithHttpInfo (List<ProcessSetVariableRm> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ApiV1ProcessVariablesValidatePost");

            var localVarPath = "/api/v1/process-variables/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariablesValidateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariablesValidateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariablesValidateResult)));
        }

        /// <summary>
        /// This call validates a list of variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>Task of ProcessVariablesValidateResult</returns>
        public async System.Threading.Tasks.Task<ProcessVariablesValidateResult> ApiV1ProcessVariablesValidatePostAsync (List<ProcessSetVariableRm> body)
        {
             ApiResponse<ProcessVariablesValidateResult> localVarResponse = await ApiV1ProcessVariablesValidatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call validates a list of variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of variables to be validate</param>
        /// <returns>Task of ApiResponse (ProcessVariablesValidateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessVariablesValidateResult>> ApiV1ProcessVariablesValidatePostAsyncWithHttpInfo (List<ProcessSetVariableRm> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ApiV1ProcessVariablesValidatePost");

            var localVarPath = "/api/v1/process-variables/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessVariablesValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariablesValidateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariablesValidateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariablesValidateResult)));
        }

    }
}
