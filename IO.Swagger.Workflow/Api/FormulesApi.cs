/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFormulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call evaluates a formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>FormuleTestResultRm</returns>
        FormuleTestResultRm ApiV1FormulesEvaluatePost (FormuleTestRequestRm body);

        /// <summary>
        /// This call evaluates a formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>ApiResponse of FormuleTestResultRm</returns>
        ApiResponse<FormuleTestResultRm> ApiV1FormulesEvaluatePostWithHttpInfo (FormuleTestRequestRm body);
        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ProfileFormulaFieldRm</returns>
        ProfileFormulaFieldRm ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet (int? documentTypeSystemId);

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        ApiResponse<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetWithHttpInfo (int? documentTypeSystemId);
        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileFormulaFieldRm</returns>
        ProfileFormulaFieldRm ApiV1FormulesFieldsProfileGet ();

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        ApiResponse<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileGetWithHttpInfo ();
        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileFormulaFieldRm</returns>
        ProfileFormulaFieldRm ApiV1FormulesFieldsSystemGet ();

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        ApiResponse<ProfileFormulaFieldRm> ApiV1FormulesFieldsSystemGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call evaluates a formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>Task of FormuleTestResultRm</returns>
        System.Threading.Tasks.Task<FormuleTestResultRm> ApiV1FormulesEvaluatePostAsync (FormuleTestRequestRm body);

        /// <summary>
        /// This call evaluates a formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>Task of ApiResponse (FormuleTestResultRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormuleTestResultRm>> ApiV1FormulesEvaluatePostAsyncWithHttpInfo (FormuleTestRequestRm body);
        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetAsync (int? documentTypeSystemId);

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetAsyncWithHttpInfo (int? documentTypeSystemId);
        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileGetAsync ();

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsProfileGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsSystemGetAsync ();

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsSystemGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FormulesApi : IFormulesApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FormulesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FormulesApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FormulesApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call evaluates a formula 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>FormuleTestResultRm</returns>
        public FormuleTestResultRm ApiV1FormulesEvaluatePost (FormuleTestRequestRm body)
        {
             ApiResponse<FormuleTestResultRm> localVarResponse = ApiV1FormulesEvaluatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call evaluates a formula 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>ApiResponse of FormuleTestResultRm</returns>
        public ApiResponse< FormuleTestResultRm > ApiV1FormulesEvaluatePostWithHttpInfo (FormuleTestRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FormulesApi->ApiV1FormulesEvaluatePost");

            var localVarPath = "/api/v1/formules/evaluate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesEvaluatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormuleTestResultRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormuleTestResultRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormuleTestResultRm)));
        }

        /// <summary>
        /// This call evaluates a formula 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>Task of FormuleTestResultRm</returns>
        public async System.Threading.Tasks.Task<FormuleTestResultRm> ApiV1FormulesEvaluatePostAsync (FormuleTestRequestRm body)
        {
             ApiResponse<FormuleTestResultRm> localVarResponse = await ApiV1FormulesEvaluatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call evaluates a formula 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Formula to evaluate</param>
        /// <returns>Task of ApiResponse (FormuleTestResultRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormuleTestResultRm>> ApiV1FormulesEvaluatePostAsyncWithHttpInfo (FormuleTestRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FormulesApi->ApiV1FormulesEvaluatePost");

            var localVarPath = "/api/v1/formules/evaluate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesEvaluatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormuleTestResultRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormuleTestResultRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormuleTestResultRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ProfileFormulaFieldRm</returns>
        public ProfileFormulaFieldRm ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet (int? documentTypeSystemId)
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetWithHttpInfo(documentTypeSystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        public ApiResponse< ProfileFormulaFieldRm > ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetWithHttpInfo (int? documentTypeSystemId)
        {
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling FormulesApi->ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet");

            var localVarPath = "/api/v1/formules/fields/profile/class/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        public async System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetAsync (int? documentTypeSystemId)
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = await ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetAsyncWithHttpInfo(documentTypeSystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of the profile fields of a specific class that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGetAsyncWithHttpInfo (int? documentTypeSystemId)
        {
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling FormulesApi->ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet");

            var localVarPath = "/api/v1/formules/fields/profile/class/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsProfileClassDocumentTypeSystemIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileFormulaFieldRm</returns>
        public ProfileFormulaFieldRm ApiV1FormulesFieldsProfileGet ()
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = ApiV1FormulesFieldsProfileGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        public ApiResponse< ProfileFormulaFieldRm > ApiV1FormulesFieldsProfileGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/formules/fields/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        public async System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsProfileGetAsync ()
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = await ApiV1FormulesFieldsProfileGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsProfileGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/formules/fields/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileFormulaFieldRm</returns>
        public ProfileFormulaFieldRm ApiV1FormulesFieldsSystemGet ()
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = ApiV1FormulesFieldsSystemGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileFormulaFieldRm</returns>
        public ApiResponse< ProfileFormulaFieldRm > ApiV1FormulesFieldsSystemGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/formules/fields/system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsSystemGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileFormulaFieldRm</returns>
        public async System.Threading.Tasks.Task<ProfileFormulaFieldRm> ApiV1FormulesFieldsSystemGetAsync ()
        {
             ApiResponse<ProfileFormulaFieldRm> localVarResponse = await ApiV1FormulesFieldsSystemGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call return the list of the profile fields that can be used in the formula engine 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileFormulaFieldRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileFormulaFieldRm>> ApiV1FormulesFieldsSystemGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/formules/fields/system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1FormulesFieldsSystemGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileFormulaFieldRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileFormulaFieldRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileFormulaFieldRm)));
        }

    }
}
