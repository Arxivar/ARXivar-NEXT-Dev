/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDiagramsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call duplicates a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsClonePost (CloneDiagramRm body);

        /// <summary>
        /// This call duplicates a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsClonePostWithHttpInfo (CloneDiagramRm body);
        /// <summary>
        /// This call duplicates a diagram from a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsCloneProcessPost (CloneRuntimeDiagramRm body);

        /// <summary>
        /// This call duplicates a diagram from a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsCloneProcessPostWithHttpInfo (CloneRuntimeDiagramRm body);
        /// <summary>
        /// This call sets the diagram as a edit diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns></returns>
        void ApiV1DiagramsEditPost (EntityGuidIdRm body);

        /// <summary>
        /// This call sets the diagram as a edit diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramsEditPostWithHttpInfo (EntityGuidIdRm body);
        /// <summary>
        /// This call deletes a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns></returns>
        void ApiV1DiagramsIdDelete (Guid? id);

        /// <summary>
        /// This call deletes a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramsIdDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the events associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramEventsRm&gt;</returns>
        List<DiagramEventsRm> ApiV1DiagramsIdEventsGet (Guid? id);

        /// <summary>
        /// This call returns the events associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramEventsRm&gt;</returns>
        ApiResponse<List<DiagramEventsRm>> ApiV1DiagramsIdEventsGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsIdGet (Guid? id);

        /// <summary>
        /// This call returns a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the outcomes associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;OutcomesRm&gt;</returns>
        List<OutcomesRm> ApiV1DiagramsIdOutcomesGet (Guid? id);

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;OutcomesRm&gt;</returns>
        ApiResponse<List<OutcomesRm>> ApiV1DiagramsIdOutcomesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the revisions of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramInfoRm&gt;</returns>
        List<DiagramInfoRm> ApiV1DiagramsIdRevisionsGet (Guid? id);

        /// <summary>
        /// This call returns the revisions of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramInfoRm&gt;</returns>
        ApiResponse<List<DiagramInfoRm>> ApiV1DiagramsIdRevisionsGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the variables of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramVariableRm&gt;</returns>
        List<DiagramVariableRm> ApiV1DiagramsIdVariablesGet (Guid? id);

        /// <summary>
        /// This call returns the variables of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramVariableRm&gt;</returns>
        ApiResponse<List<DiagramVariableRm>> ApiV1DiagramsIdVariablesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns informations about available diagram that can run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoAvailableGet (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns informations about available diagram that can run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        ApiResponse<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoAvailableGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoDashboardGet (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        ApiResponse<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoDashboardGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns diagrams informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoGet (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns diagrams informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        ApiResponse<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call sets the diagram as a offline diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns></returns>
        void ApiV1DiagramsOfflinePost (DiagramOfflineRequestRm body);

        /// <summary>
        /// This call sets the diagram as a offline diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramsOfflinePostWithHttpInfo (DiagramOfflineRequestRm body);
        /// <summary>
        /// This call adds new diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsPost (DiagramCreateRm body);

        /// <summary>
        /// This call adds new diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsPostWithHttpInfo (DiagramCreateRm body);
        /// <summary>
        /// This call sets the diagram as a online diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns></returns>
        void ApiV1DiagramsPublishPost (DiagramPublishRequestRm body);

        /// <summary>
        /// This call sets the diagram as a online diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramsPublishPostWithHttpInfo (DiagramPublishRequestRm body);
        /// <summary>
        /// This call updates the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsPut (DiagramUpdateRm body);

        /// <summary>
        /// This call updates the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsPutWithHttpInfo (DiagramUpdateRm body);
        /// <summary>
        /// This call creates a revision of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsRevisionPost (EntityGuidIdRm body);

        /// <summary>
        /// This call creates a revision of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsRevisionPostWithHttpInfo (EntityGuidIdRm body);
        /// <summary>
        /// This call saves the XML description of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsSavePut (SaveDiagramRequestRm body);

        /// <summary>
        /// This call saves the XML description of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsSavePutWithHttpInfo (SaveDiagramRequestRm body);
        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>DiagramStartResponseRm</returns>
        DiagramStartResponseRm ApiV1DiagramsStartPost (DiagramStartRequestRm body);

        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>ApiResponse of DiagramStartResponseRm</returns>
        ApiResponse<DiagramStartResponseRm> ApiV1DiagramsStartPostWithHttpInfo (DiagramStartRequestRm body);
        /// <summary>
        /// This call updates the outcomes associated to a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns></returns>
        void ApiV1DiagramsUpdateOutcomesPut (DiagramUpdateOutcomesRequestRm body);

        /// <summary>
        /// This call updates the outcomes associated to a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramsUpdateOutcomesPutWithHttpInfo (DiagramUpdateOutcomesRequestRm body);
        /// <summary>
        /// This call updates the diagram supervisor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>DiagramsRm</returns>
        DiagramsRm ApiV1DiagramsUpdateSupervisorListPut (DiagramUpdateSupervisorListRequestRm body);

        /// <summary>
        /// This call updates the diagram supervisor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        ApiResponse<DiagramsRm> ApiV1DiagramsUpdateSupervisorListPutWithHttpInfo (DiagramUpdateSupervisorListRequestRm body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call duplicates a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsClonePostAsync (CloneDiagramRm body);

        /// <summary>
        /// This call duplicates a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsClonePostAsyncWithHttpInfo (CloneDiagramRm body);
        /// <summary>
        /// This call duplicates a diagram from a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsCloneProcessPostAsync (CloneRuntimeDiagramRm body);

        /// <summary>
        /// This call duplicates a diagram from a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsCloneProcessPostAsyncWithHttpInfo (CloneRuntimeDiagramRm body);
        /// <summary>
        /// This call sets the diagram as a edit diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramsEditPostAsync (EntityGuidIdRm body);

        /// <summary>
        /// This call sets the diagram as a edit diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsEditPostAsyncWithHttpInfo (EntityGuidIdRm body);
        /// <summary>
        /// This call deletes a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramsIdDeleteAsync (Guid? id);

        /// <summary>
        /// This call deletes a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsIdDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the events associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramEventsRm&gt;</returns>
        System.Threading.Tasks.Task<List<DiagramEventsRm>> ApiV1DiagramsIdEventsGetAsync (Guid? id);

        /// <summary>
        /// This call returns the events associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramEventsRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DiagramEventsRm>>> ApiV1DiagramsIdEventsGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsIdGetAsync (Guid? id);

        /// <summary>
        /// This call returns a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the outcomes associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;OutcomesRm&gt;</returns>
        System.Threading.Tasks.Task<List<OutcomesRm>> ApiV1DiagramsIdOutcomesGetAsync (Guid? id);

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;OutcomesRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OutcomesRm>>> ApiV1DiagramsIdOutcomesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the revisions of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramInfoRm&gt;</returns>
        System.Threading.Tasks.Task<List<DiagramInfoRm>> ApiV1DiagramsIdRevisionsGetAsync (Guid? id);

        /// <summary>
        /// This call returns the revisions of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramInfoRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DiagramInfoRm>>> ApiV1DiagramsIdRevisionsGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the variables of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramVariableRm&gt;</returns>
        System.Threading.Tasks.Task<List<DiagramVariableRm>> ApiV1DiagramsIdVariablesGetAsync (Guid? id);

        /// <summary>
        /// This call returns the variables of a specific diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramVariableRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DiagramVariableRm>>> ApiV1DiagramsIdVariablesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns informations about available diagram that can run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoAvailableGetAsync (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns informations about available diagram that can run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoAvailableGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoDashboardGetAsync (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoDashboardGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns diagrams informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoGetAsync (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns diagrams informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call sets the diagram as a offline diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramsOfflinePostAsync (DiagramOfflineRequestRm body);

        /// <summary>
        /// This call sets the diagram as a offline diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsOfflinePostAsyncWithHttpInfo (DiagramOfflineRequestRm body);
        /// <summary>
        /// This call adds new diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsPostAsync (DiagramCreateRm body);

        /// <summary>
        /// This call adds new diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsPostAsyncWithHttpInfo (DiagramCreateRm body);
        /// <summary>
        /// This call sets the diagram as a online diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramsPublishPostAsync (DiagramPublishRequestRm body);

        /// <summary>
        /// This call sets the diagram as a online diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsPublishPostAsyncWithHttpInfo (DiagramPublishRequestRm body);
        /// <summary>
        /// This call updates the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsPutAsync (DiagramUpdateRm body);

        /// <summary>
        /// This call updates the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsPutAsyncWithHttpInfo (DiagramUpdateRm body);
        /// <summary>
        /// This call creates a revision of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsRevisionPostAsync (EntityGuidIdRm body);

        /// <summary>
        /// This call creates a revision of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsRevisionPostAsyncWithHttpInfo (EntityGuidIdRm body);
        /// <summary>
        /// This call saves the XML description of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsSavePutAsync (SaveDiagramRequestRm body);

        /// <summary>
        /// This call saves the XML description of the diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsSavePutAsyncWithHttpInfo (SaveDiagramRequestRm body);
        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>Task of DiagramStartResponseRm</returns>
        System.Threading.Tasks.Task<DiagramStartResponseRm> ApiV1DiagramsStartPostAsync (DiagramStartRequestRm body);

        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>Task of ApiResponse (DiagramStartResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramStartResponseRm>> ApiV1DiagramsStartPostAsyncWithHttpInfo (DiagramStartRequestRm body);
        /// <summary>
        /// This call updates the outcomes associated to a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramsUpdateOutcomesPutAsync (DiagramUpdateOutcomesRequestRm body);

        /// <summary>
        /// This call updates the outcomes associated to a diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsUpdateOutcomesPutAsyncWithHttpInfo (DiagramUpdateOutcomesRequestRm body);
        /// <summary>
        /// This call updates the diagram supervisor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>Task of DiagramsRm</returns>
        System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsUpdateSupervisorListPutAsync (DiagramUpdateSupervisorListRequestRm body);

        /// <summary>
        /// This call updates the diagram supervisor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsUpdateSupervisorListPutAsyncWithHttpInfo (DiagramUpdateSupervisorListRequestRm body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DiagramsApi : IDiagramsApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DiagramsApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramsApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call duplicates a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsClonePost (CloneDiagramRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsClonePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call duplicates a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsClonePostWithHttpInfo (CloneDiagramRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsClonePost");

            var localVarPath = "/api/v1/diagrams/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsClonePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call duplicates a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsClonePostAsync (CloneDiagramRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsClonePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call duplicates a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to duplicate</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsClonePostAsyncWithHttpInfo (CloneDiagramRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsClonePost");

            var localVarPath = "/api/v1/diagrams/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsClonePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call duplicates a diagram from a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsCloneProcessPost (CloneRuntimeDiagramRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsCloneProcessPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call duplicates a diagram from a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsCloneProcessPostWithHttpInfo (CloneRuntimeDiagramRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsCloneProcessPost");

            var localVarPath = "/api/v1/diagrams/clone/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsCloneProcessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call duplicates a diagram from a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsCloneProcessPostAsync (CloneRuntimeDiagramRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsCloneProcessPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call duplicates a diagram from a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Runtime diagram to duplicate</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsCloneProcessPostAsyncWithHttpInfo (CloneRuntimeDiagramRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsCloneProcessPost");

            var localVarPath = "/api/v1/diagrams/clone/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsCloneProcessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call sets the diagram as a edit diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns></returns>
        public void ApiV1DiagramsEditPost (EntityGuidIdRm body)
        {
             ApiV1DiagramsEditPostWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the diagram as a edit diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramsEditPostWithHttpInfo (EntityGuidIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsEditPost");

            var localVarPath = "/api/v1/diagrams/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsEditPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the diagram as a edit diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramsEditPostAsync (EntityGuidIdRm body)
        {
             await ApiV1DiagramsEditPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the diagram as a edit diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set edit</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsEditPostAsyncWithHttpInfo (EntityGuidIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsEditPost");

            var localVarPath = "/api/v1/diagrams/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsEditPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns></returns>
        public void ApiV1DiagramsIdDelete (Guid? id)
        {
             ApiV1DiagramsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramsIdDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdDelete");

            var localVarPath = "/api/v1/diagrams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramsIdDeleteAsync (Guid? id)
        {
             await ApiV1DiagramsIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsIdDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdDelete");

            var localVarPath = "/api/v1/diagrams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the events associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramEventsRm&gt;</returns>
        public List<DiagramEventsRm> ApiV1DiagramsIdEventsGet (Guid? id)
        {
             ApiResponse<List<DiagramEventsRm>> localVarResponse = ApiV1DiagramsIdEventsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the events associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramEventsRm&gt;</returns>
        public ApiResponse< List<DiagramEventsRm> > ApiV1DiagramsIdEventsGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdEventsGet");

            var localVarPath = "/api/v1/diagrams/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramEventsRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramEventsRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramEventsRm>)));
        }

        /// <summary>
        /// This call returns the events associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramEventsRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<DiagramEventsRm>> ApiV1DiagramsIdEventsGetAsync (Guid? id)
        {
             ApiResponse<List<DiagramEventsRm>> localVarResponse = await ApiV1DiagramsIdEventsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the events associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramEventsRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DiagramEventsRm>>> ApiV1DiagramsIdEventsGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdEventsGet");

            var localVarPath = "/api/v1/diagrams/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramEventsRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramEventsRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramEventsRm>)));
        }

        /// <summary>
        /// This call returns a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsIdGet (Guid? id)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdGet");

            var localVarPath = "/api/v1/diagrams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call returns a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsIdGetAsync (Guid? id)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdGet");

            var localVarPath = "/api/v1/diagrams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;OutcomesRm&gt;</returns>
        public List<OutcomesRm> ApiV1DiagramsIdOutcomesGet (Guid? id)
        {
             ApiResponse<List<OutcomesRm>> localVarResponse = ApiV1DiagramsIdOutcomesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;OutcomesRm&gt;</returns>
        public ApiResponse< List<OutcomesRm> > ApiV1DiagramsIdOutcomesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdOutcomesGet");

            var localVarPath = "/api/v1/diagrams/{id}/outcomes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdOutcomesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OutcomesRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OutcomesRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OutcomesRm>)));
        }

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;OutcomesRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<OutcomesRm>> ApiV1DiagramsIdOutcomesGetAsync (Guid? id)
        {
             ApiResponse<List<OutcomesRm>> localVarResponse = await ApiV1DiagramsIdOutcomesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the outcomes associated to a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;OutcomesRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OutcomesRm>>> ApiV1DiagramsIdOutcomesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdOutcomesGet");

            var localVarPath = "/api/v1/diagrams/{id}/outcomes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdOutcomesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OutcomesRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OutcomesRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OutcomesRm>)));
        }

        /// <summary>
        /// This call returns the revisions of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramInfoRm&gt;</returns>
        public List<DiagramInfoRm> ApiV1DiagramsIdRevisionsGet (Guid? id)
        {
             ApiResponse<List<DiagramInfoRm>> localVarResponse = ApiV1DiagramsIdRevisionsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the revisions of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramInfoRm&gt;</returns>
        public ApiResponse< List<DiagramInfoRm> > ApiV1DiagramsIdRevisionsGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdRevisionsGet");

            var localVarPath = "/api/v1/diagrams/{id}/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdRevisionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramInfoRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramInfoRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramInfoRm>)));
        }

        /// <summary>
        /// This call returns the revisions of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramInfoRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<DiagramInfoRm>> ApiV1DiagramsIdRevisionsGetAsync (Guid? id)
        {
             ApiResponse<List<DiagramInfoRm>> localVarResponse = await ApiV1DiagramsIdRevisionsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the revisions of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramInfoRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DiagramInfoRm>>> ApiV1DiagramsIdRevisionsGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdRevisionsGet");

            var localVarPath = "/api/v1/diagrams/{id}/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdRevisionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramInfoRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramInfoRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramInfoRm>)));
        }

        /// <summary>
        /// This call returns the variables of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>List&lt;DiagramVariableRm&gt;</returns>
        public List<DiagramVariableRm> ApiV1DiagramsIdVariablesGet (Guid? id)
        {
             ApiResponse<List<DiagramVariableRm>> localVarResponse = ApiV1DiagramsIdVariablesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the variables of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>ApiResponse of List&lt;DiagramVariableRm&gt;</returns>
        public ApiResponse< List<DiagramVariableRm> > ApiV1DiagramsIdVariablesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdVariablesGet");

            var localVarPath = "/api/v1/diagrams/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdVariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramVariableRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramVariableRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramVariableRm>)));
        }

        /// <summary>
        /// This call returns the variables of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of List&lt;DiagramVariableRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<DiagramVariableRm>> ApiV1DiagramsIdVariablesGetAsync (Guid? id)
        {
             ApiResponse<List<DiagramVariableRm>> localVarResponse = await ApiV1DiagramsIdVariablesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the variables of a specific diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DiagramVariableRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DiagramVariableRm>>> ApiV1DiagramsIdVariablesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramsApi->ApiV1DiagramsIdVariablesGet");

            var localVarPath = "/api/v1/diagrams/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsIdVariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DiagramVariableRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DiagramVariableRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DiagramVariableRm>)));
        }

        /// <summary>
        /// This call returns informations about available diagram that can run 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        public DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoAvailableGet (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = ApiV1DiagramsInfoAvailableGetWithHttpInfo(sortFieldName, sortDirection, filterFieldName, filter, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns informations about available diagram that can run 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        public ApiResponse< DiagramInfoRmSearchResponseRm > ApiV1DiagramsInfoAvailableGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoAvailableGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoAvailableGet");

            var localVarPath = "/api/v1/diagrams/info/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterFieldName", filterFieldName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoAvailableGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns informations about available diagram that can run 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoAvailableGetAsync (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = await ApiV1DiagramsInfoAvailableGetAsyncWithHttpInfo(sortFieldName, sortDirection, filterFieldName, filter, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns informations about available diagram that can run 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoAvailableGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoAvailableGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoAvailableGet");

            var localVarPath = "/api/v1/diagrams/info/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterFieldName", filterFieldName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoAvailableGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        public DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoDashboardGet (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = ApiV1DiagramsInfoDashboardGetWithHttpInfo(sortFieldName, sortDirection, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        public ApiResponse< DiagramInfoRmSearchResponseRm > ApiV1DiagramsInfoDashboardGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoDashboardGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoDashboardGet");

            var localVarPath = "/api/v1/diagrams/info/dashboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoDashboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoDashboardGetAsync (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = await ApiV1DiagramsInfoDashboardGetAsyncWithHttpInfo(sortFieldName, sortDirection, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns informations about available diagram in the dashboard filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoDashboardGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoDashboardGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoDashboardGet");

            var localVarPath = "/api/v1/diagrams/info/dashboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoDashboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns diagrams informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        public DiagramInfoRmSearchResponseRm ApiV1DiagramsInfoGet (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = ApiV1DiagramsInfoGetWithHttpInfo(sortFieldName, sortDirection, filterFieldName, filter, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns diagrams informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        public ApiResponse< DiagramInfoRmSearchResponseRm > ApiV1DiagramsInfoGetWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoGet");

            var localVarPath = "/api/v1/diagrams/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterFieldName", filterFieldName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns diagrams informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramsInfoGetAsync (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = await ApiV1DiagramsInfoGetAsyncWithHttpInfo(sortFieldName, sortDirection, filterFieldName, filter, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns diagrams informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortFieldName">The field name on which to apply the sort [0&#x3D;Name, 1&#x3D;Priority, 2&#x3D;Revision]</param>
        /// <param name="sortDirection">The sort direction [0&#x3D;Asc, 1&#x3D;Desc]</param>
        /// <param name="filterFieldName">The field name on which to apply the filter [0&#x3D;Name] (optional)</param>
        /// <param name="filter">The filter to apply (optional)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramsInfoGetAsyncWithHttpInfo (int? sortFieldName, int? sortDirection, int? filterFieldName = null, string filter = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'sortFieldName' is set
            if (sortFieldName == null)
                throw new ApiException(400, "Missing required parameter 'sortFieldName' when calling DiagramsApi->ApiV1DiagramsInfoGet");
            // verify the required parameter 'sortDirection' is set
            if (sortDirection == null)
                throw new ApiException(400, "Missing required parameter 'sortDirection' when calling DiagramsApi->ApiV1DiagramsInfoGet");

            var localVarPath = "/api/v1/diagrams/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterFieldName", filterFieldName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (sortFieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortFieldName", sortFieldName)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call sets the diagram as a offline diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns></returns>
        public void ApiV1DiagramsOfflinePost (DiagramOfflineRequestRm body)
        {
             ApiV1DiagramsOfflinePostWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the diagram as a offline diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramsOfflinePostWithHttpInfo (DiagramOfflineRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsOfflinePost");

            var localVarPath = "/api/v1/diagrams/offline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsOfflinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the diagram as a offline diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramsOfflinePostAsync (DiagramOfflineRequestRm body)
        {
             await ApiV1DiagramsOfflinePostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the diagram as a offline diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set offline</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsOfflinePostAsyncWithHttpInfo (DiagramOfflineRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsOfflinePost");

            var localVarPath = "/api/v1/diagrams/offline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsOfflinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call adds new diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsPost (DiagramCreateRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds new diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsPostWithHttpInfo (DiagramCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPost");

            var localVarPath = "/api/v1/diagrams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call adds new diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsPostAsync (DiagramCreateRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds new diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to add</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsPostAsyncWithHttpInfo (DiagramCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPost");

            var localVarPath = "/api/v1/diagrams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call sets the diagram as a online diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns></returns>
        public void ApiV1DiagramsPublishPost (DiagramPublishRequestRm body)
        {
             ApiV1DiagramsPublishPostWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the diagram as a online diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramsPublishPostWithHttpInfo (DiagramPublishRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPublishPost");

            var localVarPath = "/api/v1/diagrams/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPublishPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the diagram as a online diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramsPublishPostAsync (DiagramPublishRequestRm body)
        {
             await ApiV1DiagramsPublishPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the diagram as a online diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to set online</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsPublishPostAsyncWithHttpInfo (DiagramPublishRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPublishPost");

            var localVarPath = "/api/v1/diagrams/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPublishPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsPut (DiagramUpdateRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsPutWithHttpInfo (DiagramUpdateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPut");

            var localVarPath = "/api/v1/diagrams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call updates the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsPutAsync (DiagramUpdateRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to update</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsPutAsyncWithHttpInfo (DiagramUpdateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsPut");

            var localVarPath = "/api/v1/diagrams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call creates a revision of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsRevisionPost (EntityGuidIdRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsRevisionPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call creates a revision of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsRevisionPostWithHttpInfo (EntityGuidIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsRevisionPost");

            var localVarPath = "/api/v1/diagrams/revision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsRevisionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call creates a revision of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsRevisionPostAsync (EntityGuidIdRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsRevisionPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call creates a revision of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to be revised</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsRevisionPostAsyncWithHttpInfo (EntityGuidIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsRevisionPost");

            var localVarPath = "/api/v1/diagrams/revision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsRevisionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call saves the XML description of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsSavePut (SaveDiagramRequestRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsSavePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call saves the XML description of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsSavePutWithHttpInfo (SaveDiagramRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsSavePut");

            var localVarPath = "/api/v1/diagrams/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsSavePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call saves the XML description of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsSavePutAsync (SaveDiagramRequestRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsSavePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call saves the XML description of the diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The XML description to save</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsSavePutAsyncWithHttpInfo (SaveDiagramRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsSavePut");

            var localVarPath = "/api/v1/diagrams/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsSavePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>DiagramStartResponseRm</returns>
        public DiagramStartResponseRm ApiV1DiagramsStartPost (DiagramStartRequestRm body)
        {
             ApiResponse<DiagramStartResponseRm> localVarResponse = ApiV1DiagramsStartPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>ApiResponse of DiagramStartResponseRm</returns>
        public ApiResponse< DiagramStartResponseRm > ApiV1DiagramsStartPostWithHttpInfo (DiagramStartRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsStartPost");

            var localVarPath = "/api/v1/diagrams/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsStartPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramStartResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramStartResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramStartResponseRm)));
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>Task of DiagramStartResponseRm</returns>
        public async System.Threading.Tasks.Task<DiagramStartResponseRm> ApiV1DiagramsStartPostAsync (DiagramStartRequestRm body)
        {
             ApiResponse<DiagramStartResponseRm> localVarResponse = await ApiV1DiagramsStartPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram to start</param>
        /// <returns>Task of ApiResponse (DiagramStartResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramStartResponseRm>> ApiV1DiagramsStartPostAsyncWithHttpInfo (DiagramStartRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsStartPost");

            var localVarPath = "/api/v1/diagrams/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsStartPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramStartResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramStartResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramStartResponseRm)));
        }

        /// <summary>
        /// This call updates the outcomes associated to a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns></returns>
        public void ApiV1DiagramsUpdateOutcomesPut (DiagramUpdateOutcomesRequestRm body)
        {
             ApiV1DiagramsUpdateOutcomesPutWithHttpInfo(body);
        }

        /// <summary>
        /// This call updates the outcomes associated to a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramsUpdateOutcomesPutWithHttpInfo (DiagramUpdateOutcomesRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsUpdateOutcomesPut");

            var localVarPath = "/api/v1/diagrams/update-outcomes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsUpdateOutcomesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the outcomes associated to a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramsUpdateOutcomesPutAsync (DiagramUpdateOutcomesRequestRm body)
        {
             await ApiV1DiagramsUpdateOutcomesPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call updates the outcomes associated to a diagram 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Outcomes to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramsUpdateOutcomesPutAsyncWithHttpInfo (DiagramUpdateOutcomesRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsUpdateOutcomesPut");

            var localVarPath = "/api/v1/diagrams/update-outcomes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsUpdateOutcomesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the diagram supervisor 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>DiagramsRm</returns>
        public DiagramsRm ApiV1DiagramsUpdateSupervisorListPut (DiagramUpdateSupervisorListRequestRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = ApiV1DiagramsUpdateSupervisorListPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the diagram supervisor 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>ApiResponse of DiagramsRm</returns>
        public ApiResponse< DiagramsRm > ApiV1DiagramsUpdateSupervisorListPutWithHttpInfo (DiagramUpdateSupervisorListRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsUpdateSupervisorListPut");

            var localVarPath = "/api/v1/diagrams/update-supervisor-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsUpdateSupervisorListPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

        /// <summary>
        /// This call updates the diagram supervisor 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>Task of DiagramsRm</returns>
        public async System.Threading.Tasks.Task<DiagramsRm> ApiV1DiagramsUpdateSupervisorListPutAsync (DiagramUpdateSupervisorListRequestRm body)
        {
             ApiResponse<DiagramsRm> localVarResponse = await ApiV1DiagramsUpdateSupervisorListPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the diagram supervisor 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supervisor to update</param>
        /// <returns>Task of ApiResponse (DiagramsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsRm>> ApiV1DiagramsUpdateSupervisorListPutAsyncWithHttpInfo (DiagramUpdateSupervisorListRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramsApi->ApiV1DiagramsUpdateSupervisorListPut");

            var localVarPath = "/api/v1/diagrams/update-supervisor-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramsUpdateSupervisorListPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsRm)));
        }

    }
}
