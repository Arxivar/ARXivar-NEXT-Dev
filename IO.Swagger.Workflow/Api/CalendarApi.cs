/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICalendarApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call retuns all calendars with users associated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CalendarUsersInfoRm&gt;</returns>
        List<CalendarUsersInfoRm> ApiV1CalendarCalendarUsersGet ();

        /// <summary>
        /// This call retuns all calendars with users associated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CalendarUsersInfoRm&gt;</returns>
        ApiResponse<List<CalendarUsersInfoRm>> ApiV1CalendarCalendarUsersGetWithHttpInfo ();
        /// <summary>
        /// This call returns the default calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CalendarRm</returns>
        CalendarRm ApiV1CalendarDefaultGet ();

        /// <summary>
        /// This call returns the default calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CalendarRm</returns>
        ApiResponse<CalendarRm> ApiV1CalendarDefaultGetWithHttpInfo ();
        /// <summary>
        /// This call returns all the calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CalendarRm&gt;</returns>
        List<CalendarRm> ApiV1CalendarGet ();

        /// <summary>
        /// This call returns all the calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CalendarRm&gt;</returns>
        ApiResponse<List<CalendarRm>> ApiV1CalendarGetWithHttpInfo ();
        /// <summary>
        /// This call deletes a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns></returns>
        void ApiV1CalendarIdDelete (Guid? id);

        /// <summary>
        /// This call deletes a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1CalendarIdDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>CalendarRm</returns>
        CalendarRm ApiV1CalendarIdGet (Guid? id);

        /// <summary>
        /// This call returns a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>ApiResponse of CalendarRm</returns>
        ApiResponse<CalendarRm> ApiV1CalendarIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds a new calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CalendarRm</returns>
        CalendarRm ApiV1CalendarPost (CalendarCreateRm body);

        /// <summary>
        /// This call adds a new calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CalendarRm</returns>
        ApiResponse<CalendarRm> ApiV1CalendarPostWithHttpInfo (CalendarCreateRm body);
        /// <summary>
        /// This call updates a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void ApiV1CalendarPut (CalendarRm body);

        /// <summary>
        /// This call updates a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1CalendarPutWithHttpInfo (CalendarRm body);
        /// <summary>
        /// This call returns the user calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>CalendarRm</returns>
        CalendarRm ApiV1CalendarUsersUserIdGet (int? userId);

        /// <summary>
        /// This call returns the user calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of CalendarRm</returns>
        ApiResponse<CalendarRm> ApiV1CalendarUsersUserIdGetWithHttpInfo (int? userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call retuns all calendars with users associated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CalendarUsersInfoRm&gt;</returns>
        System.Threading.Tasks.Task<List<CalendarUsersInfoRm>> ApiV1CalendarCalendarUsersGetAsync ();

        /// <summary>
        /// This call retuns all calendars with users associated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CalendarUsersInfoRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalendarUsersInfoRm>>> ApiV1CalendarCalendarUsersGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the default calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CalendarRm</returns>
        System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarDefaultGetAsync ();

        /// <summary>
        /// This call returns the default calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarDefaultGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all the calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CalendarRm&gt;</returns>
        System.Threading.Tasks.Task<List<CalendarRm>> ApiV1CalendarGetAsync ();

        /// <summary>
        /// This call returns all the calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CalendarRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalendarRm>>> ApiV1CalendarGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call deletes a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1CalendarIdDeleteAsync (Guid? id);

        /// <summary>
        /// This call deletes a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1CalendarIdDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of CalendarRm</returns>
        System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarIdGetAsync (Guid? id);

        /// <summary>
        /// This call returns a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds a new calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CalendarRm</returns>
        System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarPostAsync (CalendarCreateRm body);

        /// <summary>
        /// This call adds a new calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarPostAsyncWithHttpInfo (CalendarCreateRm body);
        /// <summary>
        /// This call updates a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1CalendarPutAsync (CalendarRm body);

        /// <summary>
        /// This call updates a calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1CalendarPutAsyncWithHttpInfo (CalendarRm body);
        /// <summary>
        /// This call returns the user calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of CalendarRm</returns>
        System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarUsersUserIdGetAsync (int? userId);

        /// <summary>
        /// This call returns the user calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarUsersUserIdGetAsyncWithHttpInfo (int? userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CalendarApi : ICalendarApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// </summary>
        /// <returns></returns>
        public CalendarApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call retuns all calendars with users associated 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CalendarUsersInfoRm&gt;</returns>
        public List<CalendarUsersInfoRm> ApiV1CalendarCalendarUsersGet ()
        {
             ApiResponse<List<CalendarUsersInfoRm>> localVarResponse = ApiV1CalendarCalendarUsersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retuns all calendars with users associated 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CalendarUsersInfoRm&gt;</returns>
        public ApiResponse< List<CalendarUsersInfoRm> > ApiV1CalendarCalendarUsersGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar/calendar-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarCalendarUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalendarUsersInfoRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CalendarUsersInfoRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalendarUsersInfoRm>)));
        }

        /// <summary>
        /// This call retuns all calendars with users associated 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CalendarUsersInfoRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalendarUsersInfoRm>> ApiV1CalendarCalendarUsersGetAsync ()
        {
             ApiResponse<List<CalendarUsersInfoRm>> localVarResponse = await ApiV1CalendarCalendarUsersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retuns all calendars with users associated 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CalendarUsersInfoRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CalendarUsersInfoRm>>> ApiV1CalendarCalendarUsersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar/calendar-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarCalendarUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalendarUsersInfoRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CalendarUsersInfoRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalendarUsersInfoRm>)));
        }

        /// <summary>
        /// This call returns the default calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CalendarRm</returns>
        public CalendarRm ApiV1CalendarDefaultGet ()
        {
             ApiResponse<CalendarRm> localVarResponse = ApiV1CalendarDefaultGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the default calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CalendarRm</returns>
        public ApiResponse< CalendarRm > ApiV1CalendarDefaultGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarDefaultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call returns the default calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CalendarRm</returns>
        public async System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarDefaultGetAsync ()
        {
             ApiResponse<CalendarRm> localVarResponse = await ApiV1CalendarDefaultGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the default calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarDefaultGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarDefaultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call returns all the calendars 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CalendarRm&gt;</returns>
        public List<CalendarRm> ApiV1CalendarGet ()
        {
             ApiResponse<List<CalendarRm>> localVarResponse = ApiV1CalendarGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the calendars 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CalendarRm&gt;</returns>
        public ApiResponse< List<CalendarRm> > ApiV1CalendarGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalendarRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CalendarRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalendarRm>)));
        }

        /// <summary>
        /// This call returns all the calendars 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CalendarRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalendarRm>> ApiV1CalendarGetAsync ()
        {
             ApiResponse<List<CalendarRm>> localVarResponse = await ApiV1CalendarGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the calendars 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CalendarRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CalendarRm>>> ApiV1CalendarGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalendarRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CalendarRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalendarRm>)));
        }

        /// <summary>
        /// This call deletes a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns></returns>
        public void ApiV1CalendarIdDelete (Guid? id)
        {
             ApiV1CalendarIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1CalendarIdDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CalendarApi->ApiV1CalendarIdDelete");

            var localVarPath = "/api/v1/calendar/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1CalendarIdDeleteAsync (Guid? id)
        {
             await ApiV1CalendarIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1CalendarIdDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CalendarApi->ApiV1CalendarIdDelete");

            var localVarPath = "/api/v1/calendar/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>CalendarRm</returns>
        public CalendarRm ApiV1CalendarIdGet (Guid? id)
        {
             ApiResponse<CalendarRm> localVarResponse = ApiV1CalendarIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>ApiResponse of CalendarRm</returns>
        public ApiResponse< CalendarRm > ApiV1CalendarIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CalendarApi->ApiV1CalendarIdGet");

            var localVarPath = "/api/v1/calendar/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call returns a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of CalendarRm</returns>
        public async System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarIdGetAsync (Guid? id)
        {
             ApiResponse<CalendarRm> localVarResponse = await ApiV1CalendarIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Calendar identifier</param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CalendarApi->ApiV1CalendarIdGet");

            var localVarPath = "/api/v1/calendar/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call adds a new calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CalendarRm</returns>
        public CalendarRm ApiV1CalendarPost (CalendarCreateRm body)
        {
             ApiResponse<CalendarRm> localVarResponse = ApiV1CalendarPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CalendarRm</returns>
        public ApiResponse< CalendarRm > ApiV1CalendarPostWithHttpInfo (CalendarCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CalendarApi->ApiV1CalendarPost");

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call adds a new calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CalendarRm</returns>
        public async System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarPostAsync (CalendarCreateRm body)
        {
             ApiResponse<CalendarRm> localVarResponse = await ApiV1CalendarPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarPostAsyncWithHttpInfo (CalendarCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CalendarApi->ApiV1CalendarPost");

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call updates a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ApiV1CalendarPut (CalendarRm body)
        {
             ApiV1CalendarPutWithHttpInfo(body);
        }

        /// <summary>
        /// This call updates a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1CalendarPutWithHttpInfo (CalendarRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CalendarApi->ApiV1CalendarPut");

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1CalendarPutAsync (CalendarRm body)
        {
             await ApiV1CalendarPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call updates a calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1CalendarPutAsyncWithHttpInfo (CalendarRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CalendarApi->ApiV1CalendarPut");

            var localVarPath = "/api/v1/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the user calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>CalendarRm</returns>
        public CalendarRm ApiV1CalendarUsersUserIdGet (int? userId)
        {
             ApiResponse<CalendarRm> localVarResponse = ApiV1CalendarUsersUserIdGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the user calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of CalendarRm</returns>
        public ApiResponse< CalendarRm > ApiV1CalendarUsersUserIdGetWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CalendarApi->ApiV1CalendarUsersUserIdGet");

            var localVarPath = "/api/v1/calendar/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarUsersUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

        /// <summary>
        /// This call returns the user calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of CalendarRm</returns>
        public async System.Threading.Tasks.Task<CalendarRm> ApiV1CalendarUsersUserIdGetAsync (int? userId)
        {
             ApiResponse<CalendarRm> localVarResponse = await ApiV1CalendarUsersUserIdGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the user calendar 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (CalendarRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarRm>> ApiV1CalendarUsersUserIdGetAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CalendarApi->ApiV1CalendarUsersUserIdGet");

            var localVarPath = "/api/v1/calendar/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CalendarUsersUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalendarRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarRm)));
        }

    }
}
