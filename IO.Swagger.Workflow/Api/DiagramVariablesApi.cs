/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDiagramVariablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns></returns>
        void ApiV1DiagramVariablesIdDiagramDiagramIdDelete (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call deletes a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramVariablesIdDiagramDiagramIdDeleteWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>DiagramVariableRm</returns>
        DiagramVariableRm ApiV1DiagramVariablesIdDiagramDiagramIdGet (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of DiagramVariableRm</returns>
        ApiResponse<DiagramVariableRm> ApiV1DiagramVariablesIdDiagramDiagramIdGetWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call adds new variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>DiagramVariableRm</returns>
        DiagramVariableRm ApiV1DiagramVariablesPost (DiagramVariableRm body);

        /// <summary>
        /// This call adds new variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>ApiResponse of DiagramVariableRm</returns>
        ApiResponse<DiagramVariableRm> ApiV1DiagramVariablesPostWithHttpInfo (DiagramVariableRm body);
        /// <summary>
        /// this call updates a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns></returns>
        void ApiV1DiagramVariablesPut (DiagramVariableRm body);

        /// <summary>
        /// this call updates a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramVariablesPutWithHttpInfo (DiagramVariableRm body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramVariablesIdDiagramDiagramIdDeleteAsync (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call deletes a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramVariablesIdDiagramDiagramIdDeleteAsyncWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of DiagramVariableRm</returns>
        System.Threading.Tasks.Task<DiagramVariableRm> ApiV1DiagramVariablesIdDiagramDiagramIdGetAsync (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call returns a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse (DiagramVariableRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramVariableRm>> ApiV1DiagramVariablesIdDiagramDiagramIdGetAsyncWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call adds new variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>Task of DiagramVariableRm</returns>
        System.Threading.Tasks.Task<DiagramVariableRm> ApiV1DiagramVariablesPostAsync (DiagramVariableRm body);

        /// <summary>
        /// This call adds new variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>Task of ApiResponse (DiagramVariableRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramVariableRm>> ApiV1DiagramVariablesPostAsyncWithHttpInfo (DiagramVariableRm body);
        /// <summary>
        /// this call updates a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramVariablesPutAsync (DiagramVariableRm body);

        /// <summary>
        /// this call updates a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramVariablesPutAsyncWithHttpInfo (DiagramVariableRm body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DiagramVariablesApi : IDiagramVariablesApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramVariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramVariablesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramVariablesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DiagramVariablesApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramVariablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramVariablesApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns></returns>
        public void ApiV1DiagramVariablesIdDiagramDiagramIdDelete (Guid? id, Guid? diagramId)
        {
             ApiV1DiagramVariablesIdDiagramDiagramIdDeleteWithHttpInfo(id, diagramId);
        }

        /// <summary>
        /// This call deletes a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramVariablesIdDiagramDiagramIdDeleteWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdDelete");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdDelete");

            var localVarPath = "/api/v1/diagram-variables/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesIdDiagramDiagramIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramVariablesIdDiagramDiagramIdDeleteAsync (Guid? id, Guid? diagramId)
        {
             await ApiV1DiagramVariablesIdDiagramDiagramIdDeleteAsyncWithHttpInfo(id, diagramId);

        }

        /// <summary>
        /// This call deletes a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramVariablesIdDiagramDiagramIdDeleteAsyncWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdDelete");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdDelete");

            var localVarPath = "/api/v1/diagram-variables/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesIdDiagramDiagramIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>DiagramVariableRm</returns>
        public DiagramVariableRm ApiV1DiagramVariablesIdDiagramDiagramIdGet (Guid? id, Guid? diagramId)
        {
             ApiResponse<DiagramVariableRm> localVarResponse = ApiV1DiagramVariablesIdDiagramDiagramIdGetWithHttpInfo(id, diagramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of DiagramVariableRm</returns>
        public ApiResponse< DiagramVariableRm > ApiV1DiagramVariablesIdDiagramDiagramIdGetWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdGet");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdGet");

            var localVarPath = "/api/v1/diagram-variables/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesIdDiagramDiagramIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramVariableRm)));
        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of DiagramVariableRm</returns>
        public async System.Threading.Tasks.Task<DiagramVariableRm> ApiV1DiagramVariablesIdDiagramDiagramIdGetAsync (Guid? id, Guid? diagramId)
        {
             ApiResponse<DiagramVariableRm> localVarResponse = await ApiV1DiagramVariablesIdDiagramDiagramIdGetAsyncWithHttpInfo(id, diagramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Variable identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse (DiagramVariableRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramVariableRm>> ApiV1DiagramVariablesIdDiagramDiagramIdGetAsyncWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdGet");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramVariablesApi->ApiV1DiagramVariablesIdDiagramDiagramIdGet");

            var localVarPath = "/api/v1/diagram-variables/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesIdDiagramDiagramIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramVariableRm)));
        }

        /// <summary>
        /// This call adds new variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>DiagramVariableRm</returns>
        public DiagramVariableRm ApiV1DiagramVariablesPost (DiagramVariableRm body)
        {
             ApiResponse<DiagramVariableRm> localVarResponse = ApiV1DiagramVariablesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds new variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>ApiResponse of DiagramVariableRm</returns>
        public ApiResponse< DiagramVariableRm > ApiV1DiagramVariablesPostWithHttpInfo (DiagramVariableRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramVariablesApi->ApiV1DiagramVariablesPost");

            var localVarPath = "/api/v1/diagram-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramVariableRm)));
        }

        /// <summary>
        /// This call adds new variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>Task of DiagramVariableRm</returns>
        public async System.Threading.Tasks.Task<DiagramVariableRm> ApiV1DiagramVariablesPostAsync (DiagramVariableRm body)
        {
             ApiResponse<DiagramVariableRm> localVarResponse = await ApiV1DiagramVariablesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds new variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to add</param>
        /// <returns>Task of ApiResponse (DiagramVariableRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramVariableRm>> ApiV1DiagramVariablesPostAsyncWithHttpInfo (DiagramVariableRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramVariablesApi->ApiV1DiagramVariablesPost");

            var localVarPath = "/api/v1/diagram-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramVariableRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramVariableRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramVariableRm)));
        }

        /// <summary>
        /// this call updates a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns></returns>
        public void ApiV1DiagramVariablesPut (DiagramVariableRm body)
        {
             ApiV1DiagramVariablesPutWithHttpInfo(body);
        }

        /// <summary>
        /// this call updates a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramVariablesPutWithHttpInfo (DiagramVariableRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramVariablesApi->ApiV1DiagramVariablesPut");

            var localVarPath = "/api/v1/diagram-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// this call updates a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramVariablesPutAsync (DiagramVariableRm body)
        {
             await ApiV1DiagramVariablesPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// this call updates a variable 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramVariablesPutAsyncWithHttpInfo (DiagramVariableRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramVariablesApi->ApiV1DiagramVariablesPut");

            var localVarPath = "/api/v1/diagram-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramVariablesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
