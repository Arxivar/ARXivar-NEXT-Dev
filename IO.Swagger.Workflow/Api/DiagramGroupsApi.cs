/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDiagramGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the tree of the diagram groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DiagramGroupsTreeRm</returns>
        DiagramGroupsTreeRm ApiV1DiagramGroupsGet ();

        /// <summary>
        /// This call returns the tree of the diagram groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DiagramGroupsTreeRm</returns>
        ApiResponse<DiagramGroupsTreeRm> ApiV1DiagramGroupsGetWithHttpInfo ();
        /// <summary>
        /// This call deletes a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns></returns>
        void ApiV1DiagramGroupsIdDelete (Guid? id);

        /// <summary>
        /// This call deletes a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramGroupsIdDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the information of diagrams contained in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        DiagramInfoRmSearchResponseRm ApiV1DiagramGroupsIdDiagramsInfoGet (Guid? id, bool? editable = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        ApiResponse<DiagramInfoRmSearchResponseRm> ApiV1DiagramGroupsIdDiagramsInfoGetWithHttpInfo (Guid? id, bool? editable = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>DiagramGroupsRm</returns>
        DiagramGroupsRm ApiV1DiagramGroupsIdGet (Guid? id);

        /// <summary>
        /// This call returns a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        ApiResponse<DiagramGroupsRm> ApiV1DiagramGroupsIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds new diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>DiagramGroupsRm</returns>
        DiagramGroupsRm ApiV1DiagramGroupsPost (DiagramGroupsCreateRm body);

        /// <summary>
        /// This call adds new diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        ApiResponse<DiagramGroupsRm> ApiV1DiagramGroupsPostWithHttpInfo (DiagramGroupsCreateRm body);
        /// <summary>
        /// This call updates a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>DiagramGroupsRm</returns>
        DiagramGroupsRm ApiV1DiagramGroupsPut (DiagramGroupsRm body);

        /// <summary>
        /// This call updates a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        ApiResponse<DiagramGroupsRm> ApiV1DiagramGroupsPutWithHttpInfo (DiagramGroupsRm body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the tree of the diagram groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DiagramGroupsTreeRm</returns>
        System.Threading.Tasks.Task<DiagramGroupsTreeRm> ApiV1DiagramGroupsGetAsync ();

        /// <summary>
        /// This call returns the tree of the diagram groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DiagramGroupsTreeRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramGroupsTreeRm>> ApiV1DiagramGroupsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call deletes a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramGroupsIdDeleteAsync (Guid? id);

        /// <summary>
        /// This call deletes a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramGroupsIdDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call returns the information of diagrams contained in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramGroupsIdDiagramsInfoGetAsync (Guid? id, bool? editable = null, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramGroupsIdDiagramsInfoGetAsyncWithHttpInfo (Guid? id, bool? editable = null, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsIdGetAsync (Guid? id);

        /// <summary>
        /// This call returns a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds new diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsPostAsync (DiagramGroupsCreateRm body);

        /// <summary>
        /// This call adds new diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsPostAsyncWithHttpInfo (DiagramGroupsCreateRm body);
        /// <summary>
        /// This call updates a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsPutAsync (DiagramGroupsRm body);

        /// <summary>
        /// This call updates a diagram group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsPutAsyncWithHttpInfo (DiagramGroupsRm body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DiagramGroupsApi : IDiagramGroupsApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramGroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramGroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DiagramGroupsApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramGroupsApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the tree of the diagram groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DiagramGroupsTreeRm</returns>
        public DiagramGroupsTreeRm ApiV1DiagramGroupsGet ()
        {
             ApiResponse<DiagramGroupsTreeRm> localVarResponse = ApiV1DiagramGroupsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the tree of the diagram groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DiagramGroupsTreeRm</returns>
        public ApiResponse< DiagramGroupsTreeRm > ApiV1DiagramGroupsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsTreeRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsTreeRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsTreeRm)));
        }

        /// <summary>
        /// This call returns the tree of the diagram groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DiagramGroupsTreeRm</returns>
        public async System.Threading.Tasks.Task<DiagramGroupsTreeRm> ApiV1DiagramGroupsGetAsync ()
        {
             ApiResponse<DiagramGroupsTreeRm> localVarResponse = await ApiV1DiagramGroupsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the tree of the diagram groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DiagramGroupsTreeRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramGroupsTreeRm>> ApiV1DiagramGroupsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsTreeRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsTreeRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsTreeRm)));
        }

        /// <summary>
        /// This call deletes a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns></returns>
        public void ApiV1DiagramGroupsIdDelete (Guid? id)
        {
             ApiV1DiagramGroupsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramGroupsIdDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdDelete");

            var localVarPath = "/api/v1/diagram-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramGroupsIdDeleteAsync (Guid? id)
        {
             await ApiV1DiagramGroupsIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramGroupsIdDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdDelete");

            var localVarPath = "/api/v1/diagram-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>DiagramInfoRmSearchResponseRm</returns>
        public DiagramInfoRmSearchResponseRm ApiV1DiagramGroupsIdDiagramsInfoGet (Guid? id, bool? editable = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = ApiV1DiagramGroupsIdDiagramsInfoGetWithHttpInfo(id, editable, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of DiagramInfoRmSearchResponseRm</returns>
        public ApiResponse< DiagramInfoRmSearchResponseRm > ApiV1DiagramGroupsIdDiagramsInfoGetWithHttpInfo (Guid? id, bool? editable = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdDiagramsInfoGet");

            var localVarPath = "/api/v1/diagram-groups/{id}/diagrams-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (editable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editable", editable)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdDiagramsInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of DiagramInfoRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<DiagramInfoRmSearchResponseRm> ApiV1DiagramGroupsIdDiagramsInfoGetAsync (Guid? id, bool? editable = null, int? skip = null, int? take = null)
        {
             ApiResponse<DiagramInfoRmSearchResponseRm> localVarResponse = await ApiV1DiagramGroupsIdDiagramsInfoGetAsyncWithHttpInfo(id, editable, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the information of diagrams contained in a specific group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <param name="editable">Show only editable diagrams (optional, default to true)</param>
        /// <param name="skip">Number of elements to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of elements to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (DiagramInfoRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramInfoRmSearchResponseRm>> ApiV1DiagramGroupsIdDiagramsInfoGetAsyncWithHttpInfo (Guid? id, bool? editable = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdDiagramsInfoGet");

            var localVarPath = "/api/v1/diagram-groups/{id}/diagrams-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (editable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "editable", editable)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdDiagramsInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramInfoRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramInfoRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramInfoRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>DiagramGroupsRm</returns>
        public DiagramGroupsRm ApiV1DiagramGroupsIdGet (Guid? id)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = ApiV1DiagramGroupsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        public ApiResponse< DiagramGroupsRm > ApiV1DiagramGroupsIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdGet");

            var localVarPath = "/api/v1/diagram-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

        /// <summary>
        /// This call returns a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        public async System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsIdGetAsync (Guid? id)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = await ApiV1DiagramGroupsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Diagram group identifier</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramGroupsApi->ApiV1DiagramGroupsIdGet");

            var localVarPath = "/api/v1/diagram-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

        /// <summary>
        /// This call adds new diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>DiagramGroupsRm</returns>
        public DiagramGroupsRm ApiV1DiagramGroupsPost (DiagramGroupsCreateRm body)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = ApiV1DiagramGroupsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds new diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        public ApiResponse< DiagramGroupsRm > ApiV1DiagramGroupsPostWithHttpInfo (DiagramGroupsCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramGroupsApi->ApiV1DiagramGroupsPost");

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

        /// <summary>
        /// This call adds new diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        public async System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsPostAsync (DiagramGroupsCreateRm body)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = await ApiV1DiagramGroupsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds new diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to add</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsPostAsyncWithHttpInfo (DiagramGroupsCreateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramGroupsApi->ApiV1DiagramGroupsPost");

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

        /// <summary>
        /// This call updates a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>DiagramGroupsRm</returns>
        public DiagramGroupsRm ApiV1DiagramGroupsPut (DiagramGroupsRm body)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = ApiV1DiagramGroupsPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>ApiResponse of DiagramGroupsRm</returns>
        public ApiResponse< DiagramGroupsRm > ApiV1DiagramGroupsPutWithHttpInfo (DiagramGroupsRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramGroupsApi->ApiV1DiagramGroupsPut");

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

        /// <summary>
        /// This call updates a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>Task of DiagramGroupsRm</returns>
        public async System.Threading.Tasks.Task<DiagramGroupsRm> ApiV1DiagramGroupsPutAsync (DiagramGroupsRm body)
        {
             ApiResponse<DiagramGroupsRm> localVarResponse = await ApiV1DiagramGroupsPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a diagram group 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Diagram group to update</param>
        /// <returns>Task of ApiResponse (DiagramGroupsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramGroupsRm>> ApiV1DiagramGroupsPutAsyncWithHttpInfo (DiagramGroupsRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramGroupsApi->ApiV1DiagramGroupsPut");

            var localVarPath = "/api/v1/diagram-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramGroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramGroupsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramGroupsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramGroupsRm)));
        }

    }
}
