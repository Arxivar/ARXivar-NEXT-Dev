/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call allows to copy security from one business unit to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns></returns>
        void SecurityManagementCopySecurityByBusinessUnit (SecurityBusinessUnitCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one business unit to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityManagementCopySecurityByBusinessUnitWithHttpInfo (SecurityBusinessUnitCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call allows to copy security from one document type to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns></returns>
        void SecurityManagementCopySecurityByDocumentType (SecurityDocumentTypeCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one document type to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityManagementCopySecurityByDocumentTypeWithHttpInfo (SecurityDocumentTypeCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call allows to copy security from one user to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns></returns>
        void SecurityManagementCopySecurityByUser (SecurityUserCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one user to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityManagementCopySecurityByUserWithHttpInfo (SecurityUserCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call exports security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityExportCsvResponseDTO</returns>
        SecurityExportCsvResponseDTO SecurityManagementExportSecurity ();

        /// <summary>
        /// This call exports security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityExportCsvResponseDTO</returns>
        ApiResponse<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityWithHttpInfo ();
        /// <summary>
        /// This call exports security for profile by doc number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>SecurityExportCsvResponseDTO</returns>
        SecurityExportCsvResponseDTO SecurityManagementExportSecurityForProfile (int? docNumber);

        /// <summary>
        /// This call exports security for profile by doc number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of SecurityExportCsvResponseDTO</returns>
        ApiResponse<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityForProfileWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the security for user and business unit or document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>List&lt;SecurityDTO&gt;</returns>
        List<SecurityDTO> SecurityManagementGetSecurityList (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null);

        /// <summary>
        /// This call returns the security for user and business unit or document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;SecurityDTO&gt;</returns>
        ApiResponse<List<SecurityDTO>> SecurityManagementGetSecurityListWithHttpInfo (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null);
        /// <summary>
        /// This call allows to insert or update security options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns></returns>
        void SecurityManagementWriteSecurity (List<SecurityDTO> security);

        /// <summary>
        /// This call allows to insert or update security options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityManagementWriteSecurityWithHttpInfo (List<SecurityDTO> security);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call allows to copy security from one business unit to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityManagementCopySecurityByBusinessUnitAsync (SecurityBusinessUnitCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one business unit to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByBusinessUnitAsyncWithHttpInfo (SecurityBusinessUnitCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call allows to copy security from one document type to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityManagementCopySecurityByDocumentTypeAsync (SecurityDocumentTypeCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one document type to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByDocumentTypeAsyncWithHttpInfo (SecurityDocumentTypeCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call allows to copy security from one user to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityManagementCopySecurityByUserAsync (SecurityUserCopyOptionsDTO copyOptions);

        /// <summary>
        /// This call allows to copy security from one user to many
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByUserAsyncWithHttpInfo (SecurityUserCopyOptionsDTO copyOptions);
        /// <summary>
        /// This call exports security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityExportCsvResponseDTO</returns>
        System.Threading.Tasks.Task<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityAsync ();

        /// <summary>
        /// This call exports security
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityExportCsvResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExportCsvResponseDTO>> SecurityManagementExportSecurityAsyncWithHttpInfo ();
        /// <summary>
        /// This call exports security for profile by doc number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of SecurityExportCsvResponseDTO</returns>
        System.Threading.Tasks.Task<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityForProfileAsync (int? docNumber);

        /// <summary>
        /// This call exports security for profile by doc number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (SecurityExportCsvResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExportCsvResponseDTO>> SecurityManagementExportSecurityForProfileAsyncWithHttpInfo (int? docNumber);
        /// <summary>
        /// This call returns the security for user and business unit or document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>Task of List&lt;SecurityDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityDTO>> SecurityManagementGetSecurityListAsync (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null);

        /// <summary>
        /// This call returns the security for user and business unit or document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityDTO>>> SecurityManagementGetSecurityListAsyncWithHttpInfo (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null);
        /// <summary>
        /// This call allows to insert or update security options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityManagementWriteSecurityAsync (List<SecurityDTO> security);

        /// <summary>
        /// This call allows to insert or update security options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementWriteSecurityAsyncWithHttpInfo (List<SecurityDTO> security);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityManagementApi : ISecurityManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call allows to copy security from one business unit to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns></returns>
        public void SecurityManagementCopySecurityByBusinessUnit (SecurityBusinessUnitCopyOptionsDTO copyOptions)
        {
             SecurityManagementCopySecurityByBusinessUnitWithHttpInfo(copyOptions);
        }

        /// <summary>
        /// This call allows to copy security from one business unit to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityManagementCopySecurityByBusinessUnitWithHttpInfo (SecurityBusinessUnitCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByBusinessUnit");

            var localVarPath = "/api/management/Security/security/copyByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByBusinessUnit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to copy security from one business unit to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityManagementCopySecurityByBusinessUnitAsync (SecurityBusinessUnitCopyOptionsDTO copyOptions)
        {
             await SecurityManagementCopySecurityByBusinessUnitAsyncWithHttpInfo(copyOptions);

        }

        /// <summary>
        /// This call allows to copy security from one business unit to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Business unit copy options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByBusinessUnitAsyncWithHttpInfo (SecurityBusinessUnitCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByBusinessUnit");

            var localVarPath = "/api/management/Security/security/copyByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByBusinessUnit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to copy security from one document type to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns></returns>
        public void SecurityManagementCopySecurityByDocumentType (SecurityDocumentTypeCopyOptionsDTO copyOptions)
        {
             SecurityManagementCopySecurityByDocumentTypeWithHttpInfo(copyOptions);
        }

        /// <summary>
        /// This call allows to copy security from one document type to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityManagementCopySecurityByDocumentTypeWithHttpInfo (SecurityDocumentTypeCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByDocumentType");

            var localVarPath = "/api/management/Security/security/copyByDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByDocumentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to copy security from one document type to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityManagementCopySecurityByDocumentTypeAsync (SecurityDocumentTypeCopyOptionsDTO copyOptions)
        {
             await SecurityManagementCopySecurityByDocumentTypeAsyncWithHttpInfo(copyOptions);

        }

        /// <summary>
        /// This call allows to copy security from one document type to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">Document type copy options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByDocumentTypeAsyncWithHttpInfo (SecurityDocumentTypeCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByDocumentType");

            var localVarPath = "/api/management/Security/security/copyByDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByDocumentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to copy security from one user to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns></returns>
        public void SecurityManagementCopySecurityByUser (SecurityUserCopyOptionsDTO copyOptions)
        {
             SecurityManagementCopySecurityByUserWithHttpInfo(copyOptions);
        }

        /// <summary>
        /// This call allows to copy security from one user to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityManagementCopySecurityByUserWithHttpInfo (SecurityUserCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByUser");

            var localVarPath = "/api/management/Security/security/copyByUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to copy security from one user to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityManagementCopySecurityByUserAsync (SecurityUserCopyOptionsDTO copyOptions)
        {
             await SecurityManagementCopySecurityByUserAsyncWithHttpInfo(copyOptions);

        }

        /// <summary>
        /// This call allows to copy security from one user to many 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyOptions">User copy options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementCopySecurityByUserAsyncWithHttpInfo (SecurityUserCopyOptionsDTO copyOptions)
        {
            // verify the required parameter 'copyOptions' is set
            if (copyOptions == null)
                throw new ApiException(400, "Missing required parameter 'copyOptions' when calling SecurityManagementApi->SecurityManagementCopySecurityByUser");

            var localVarPath = "/api/management/Security/security/copyByUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyOptions != null && copyOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementCopySecurityByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call exports security 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityExportCsvResponseDTO</returns>
        public SecurityExportCsvResponseDTO SecurityManagementExportSecurity ()
        {
             ApiResponse<SecurityExportCsvResponseDTO> localVarResponse = SecurityManagementExportSecurityWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call exports security 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityExportCsvResponseDTO</returns>
        public ApiResponse< SecurityExportCsvResponseDTO > SecurityManagementExportSecurityWithHttpInfo ()
        {

            var localVarPath = "/api/management/Security/security/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementExportSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExportCsvResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExportCsvResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExportCsvResponseDTO)));
        }

        /// <summary>
        /// This call exports security 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityExportCsvResponseDTO</returns>
        public async System.Threading.Tasks.Task<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityAsync ()
        {
             ApiResponse<SecurityExportCsvResponseDTO> localVarResponse = await SecurityManagementExportSecurityAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call exports security 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityExportCsvResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityExportCsvResponseDTO>> SecurityManagementExportSecurityAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Security/security/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementExportSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExportCsvResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExportCsvResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExportCsvResponseDTO)));
        }

        /// <summary>
        /// This call exports security for profile by doc number 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>SecurityExportCsvResponseDTO</returns>
        public SecurityExportCsvResponseDTO SecurityManagementExportSecurityForProfile (int? docNumber)
        {
             ApiResponse<SecurityExportCsvResponseDTO> localVarResponse = SecurityManagementExportSecurityForProfileWithHttpInfo(docNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call exports security for profile by doc number 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>ApiResponse of SecurityExportCsvResponseDTO</returns>
        public ApiResponse< SecurityExportCsvResponseDTO > SecurityManagementExportSecurityForProfileWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling SecurityManagementApi->SecurityManagementExportSecurityForProfile");

            var localVarPath = "/api/management/Security/security/export/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementExportSecurityForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExportCsvResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExportCsvResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExportCsvResponseDTO)));
        }

        /// <summary>
        /// This call exports security for profile by doc number 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of SecurityExportCsvResponseDTO</returns>
        public async System.Threading.Tasks.Task<SecurityExportCsvResponseDTO> SecurityManagementExportSecurityForProfileAsync (int? docNumber)
        {
             ApiResponse<SecurityExportCsvResponseDTO> localVarResponse = await SecurityManagementExportSecurityForProfileAsyncWithHttpInfo(docNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call exports security for profile by doc number 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docNumber"></param>
        /// <returns>Task of ApiResponse (SecurityExportCsvResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityExportCsvResponseDTO>> SecurityManagementExportSecurityForProfileAsyncWithHttpInfo (int? docNumber)
        {
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling SecurityManagementApi->SecurityManagementExportSecurityForProfile");

            var localVarPath = "/api/management/Security/security/export/{docNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementExportSecurityForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExportCsvResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExportCsvResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExportCsvResponseDTO)));
        }

        /// <summary>
        /// This call returns the security for user and business unit or document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>List&lt;SecurityDTO&gt;</returns>
        public List<SecurityDTO> SecurityManagementGetSecurityList (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null)
        {
             ApiResponse<List<SecurityDTO>> localVarResponse = SecurityManagementGetSecurityListWithHttpInfo(mode, businessUnitCode, userId, documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the security for user and business unit or document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;SecurityDTO&gt;</returns>
        public ApiResponse< List<SecurityDTO> > SecurityManagementGetSecurityListWithHttpInfo (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling SecurityManagementApi->SecurityManagementGetSecurityList");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SecurityManagementApi->SecurityManagementGetSecurityList");

            var localVarPath = "/api/management/Security/security/mode/{mode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", this.Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementGetSecurityList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecurityDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SecurityDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecurityDTO>)));
        }

        /// <summary>
        /// This call returns the security for user and business unit or document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>Task of List&lt;SecurityDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityDTO>> SecurityManagementGetSecurityListAsync (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null)
        {
             ApiResponse<List<SecurityDTO>> localVarResponse = await SecurityManagementGetSecurityListAsyncWithHttpInfo(mode, businessUnitCode, userId, documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the security for user and business unit or document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">Possible values:  0: User  1: DocumentType </param>
        /// <param name="businessUnitCode">Business Unit identifier</param>
        /// <param name="userId">User identifier (optional)</param>
        /// <param name="documentTypeId">Document type identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecurityDTO>>> SecurityManagementGetSecurityListAsyncWithHttpInfo (int? mode, string businessUnitCode, int? userId = null, int? documentTypeId = null)
        {
            // verify the required parameter 'mode' is set
            if (mode == null)
                throw new ApiException(400, "Missing required parameter 'mode' when calling SecurityManagementApi->SecurityManagementGetSecurityList");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SecurityManagementApi->SecurityManagementGetSecurityList");

            var localVarPath = "/api/management/Security/security/mode/{mode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mode != null) localVarPathParams.Add("mode", this.Configuration.ApiClient.ParameterToString(mode)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementGetSecurityList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecurityDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SecurityDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecurityDTO>)));
        }

        /// <summary>
        /// This call allows to insert or update security options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns></returns>
        public void SecurityManagementWriteSecurity (List<SecurityDTO> security)
        {
             SecurityManagementWriteSecurityWithHttpInfo(security);
        }

        /// <summary>
        /// This call allows to insert or update security options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityManagementWriteSecurityWithHttpInfo (List<SecurityDTO> security)
        {
            // verify the required parameter 'security' is set
            if (security == null)
                throw new ApiException(400, "Missing required parameter 'security' when calling SecurityManagementApi->SecurityManagementWriteSecurity");

            var localVarPath = "/api/management/Security/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (security != null && security.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(security); // http body (model) parameter
            }
            else
            {
                localVarPostBody = security; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementWriteSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to insert or update security options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityManagementWriteSecurityAsync (List<SecurityDTO> security)
        {
             await SecurityManagementWriteSecurityAsyncWithHttpInfo(security);

        }

        /// <summary>
        /// This call allows to insert or update security options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">Security options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityManagementWriteSecurityAsyncWithHttpInfo (List<SecurityDTO> security)
        {
            // verify the required parameter 'security' is set
            if (security == null)
                throw new ApiException(400, "Missing required parameter 'security' when calling SecurityManagementApi->SecurityManagementWriteSecurity");

            var localVarPath = "/api/management/Security/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (security != null && security.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(security); // http body (model) parameter
            }
            else
            {
                localVarPostBody = security; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityManagementWriteSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
