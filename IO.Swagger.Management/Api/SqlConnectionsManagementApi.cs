/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlConnectionsManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes specific sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns></returns>
        void SqlConnectionsManagementDeleteSqlConnection (string id);

        /// <summary>
        /// This call deletes specific sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SqlConnectionsManagementDeleteSqlConnectionWithHttpInfo (string id);
        /// <summary>
        /// This call gets list of connection string samples
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        List<KeyValueDTO> SqlConnectionsManagementGetConnectionStringSamples ();

        /// <summary>
        /// This call gets list of connection string samples
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        ApiResponse<List<KeyValueDTO>> SqlConnectionsManagementGetConnectionStringSamplesWithHttpInfo ();
        /// <summary>
        /// This call gets list of DSN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        List<KeyValueDTO> SqlConnectionsManagementGetDsnList ();

        /// <summary>
        /// This call gets list of DSN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        ApiResponse<List<KeyValueDTO>> SqlConnectionsManagementGetDsnListWithHttpInfo ();
        /// <summary>
        /// This call gets specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        SqlConnectionForViewDTO SqlConnectionsManagementGetSqlConnection (string id);

        /// <summary>
        /// This call gets specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        ApiResponse<SqlConnectionForViewDTO> SqlConnectionsManagementGetSqlConnectionWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SqlConnectionForViewDTO&gt;</returns>
        List<SqlConnectionForViewDTO> SqlConnectionsManagementGetSqlConnections ();

        /// <summary>
        /// This call returns all sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SqlConnectionForViewDTO&gt;</returns>
        ApiResponse<List<SqlConnectionForViewDTO>> SqlConnectionsManagementGetSqlConnectionsWithHttpInfo ();
        /// <summary>
        /// This call inserts sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        SqlConnectionForViewDTO SqlConnectionsManagementInsertSqlConnection (SqlConnectionDTO sqlConnection);

        /// <summary>
        /// This call inserts sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        ApiResponse<SqlConnectionForViewDTO> SqlConnectionsManagementInsertSqlConnectionWithHttpInfo (SqlConnectionDTO sqlConnection);
        /// <summary>
        /// This call allows to test sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>bool?</returns>
        bool? SqlConnectionsManagementTestSqlConnection (SqlConnectionTestDTO parameters);

        /// <summary>
        /// This call allows to test sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SqlConnectionsManagementTestSqlConnectionWithHttpInfo (SqlConnectionTestDTO parameters);
        /// <summary>
        /// This call updates specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        SqlConnectionForViewDTO SqlConnectionsManagementUpdateSqlConnection (string id, SqlConnectionDTO sqlConnection);

        /// <summary>
        /// This call updates specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        ApiResponse<SqlConnectionForViewDTO> SqlConnectionsManagementUpdateSqlConnectionWithHttpInfo (string id, SqlConnectionDTO sqlConnection);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes specific sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SqlConnectionsManagementDeleteSqlConnectionAsync (string id);

        /// <summary>
        /// This call deletes specific sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SqlConnectionsManagementDeleteSqlConnectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call gets list of connection string samples
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueDTO>> SqlConnectionsManagementGetConnectionStringSamplesAsync ();

        /// <summary>
        /// This call gets list of connection string samples
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlConnectionsManagementGetConnectionStringSamplesAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets list of DSN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueDTO>> SqlConnectionsManagementGetDsnListAsync ();

        /// <summary>
        /// This call gets list of DSN
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlConnectionsManagementGetDsnListAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementGetSqlConnectionAsync (string id);

        /// <summary>
        /// This call gets specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementGetSqlConnectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SqlConnectionForViewDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SqlConnectionForViewDTO>> SqlConnectionsManagementGetSqlConnectionsAsync ();

        /// <summary>
        /// This call returns all sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SqlConnectionForViewDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SqlConnectionForViewDTO>>> SqlConnectionsManagementGetSqlConnectionsAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementInsertSqlConnectionAsync (SqlConnectionDTO sqlConnection);

        /// <summary>
        /// This call inserts sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementInsertSqlConnectionAsyncWithHttpInfo (SqlConnectionDTO sqlConnection);
        /// <summary>
        /// This call allows to test sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SqlConnectionsManagementTestSqlConnectionAsync (SqlConnectionTestDTO parameters);

        /// <summary>
        /// This call allows to test sql connection configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SqlConnectionsManagementTestSqlConnectionAsyncWithHttpInfo (SqlConnectionTestDTO parameters);
        /// <summary>
        /// This call updates specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementUpdateSqlConnectionAsync (string id, SqlConnectionDTO sqlConnection);

        /// <summary>
        /// This call updates specific sql connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementUpdateSqlConnectionAsyncWithHttpInfo (string id, SqlConnectionDTO sqlConnection);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SqlConnectionsManagementApi : ISqlConnectionsManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlConnectionsManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlConnectionsManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlConnectionsManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SqlConnectionsManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes specific sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns></returns>
        public void SqlConnectionsManagementDeleteSqlConnection (string id)
        {
             SqlConnectionsManagementDeleteSqlConnectionWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SqlConnectionsManagementDeleteSqlConnectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementDeleteSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementDeleteSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SqlConnectionsManagementDeleteSqlConnectionAsync (string id)
        {
             await SqlConnectionsManagementDeleteSqlConnectionAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SqlConnectionsManagementDeleteSqlConnectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementDeleteSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementDeleteSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call gets list of connection string samples 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        public List<KeyValueDTO> SqlConnectionsManagementGetConnectionStringSamples ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = SqlConnectionsManagementGetConnectionStringSamplesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets list of connection string samples 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        public ApiResponse< List<KeyValueDTO> > SqlConnectionsManagementGetConnectionStringSamplesWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections/Samples";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetConnectionStringSamples", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call gets list of connection string samples 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueDTO>> SqlConnectionsManagementGetConnectionStringSamplesAsync ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = await SqlConnectionsManagementGetConnectionStringSamplesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets list of connection string samples 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlConnectionsManagementGetConnectionStringSamplesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections/Samples";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetConnectionStringSamples", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call gets list of DSN 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        public List<KeyValueDTO> SqlConnectionsManagementGetDsnList ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = SqlConnectionsManagementGetDsnListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets list of DSN 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        public ApiResponse< List<KeyValueDTO> > SqlConnectionsManagementGetDsnListWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections/dsn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetDsnList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call gets list of DSN 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueDTO>> SqlConnectionsManagementGetDsnListAsync ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = await SqlConnectionsManagementGetDsnListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets list of DSN 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlConnectionsManagementGetDsnListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections/dsn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetDsnList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call gets specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        public SqlConnectionForViewDTO SqlConnectionsManagementGetSqlConnection (string id)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = SqlConnectionsManagementGetSqlConnectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        public ApiResponse< SqlConnectionForViewDTO > SqlConnectionsManagementGetSqlConnectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementGetSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

        /// <summary>
        /// This call gets specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        public async System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementGetSqlConnectionAsync (string id)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = await SqlConnectionsManagementGetSqlConnectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementGetSqlConnectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementGetSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

        /// <summary>
        /// This call returns all sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SqlConnectionForViewDTO&gt;</returns>
        public List<SqlConnectionForViewDTO> SqlConnectionsManagementGetSqlConnections ()
        {
             ApiResponse<List<SqlConnectionForViewDTO>> localVarResponse = SqlConnectionsManagementGetSqlConnectionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SqlConnectionForViewDTO&gt;</returns>
        public ApiResponse< List<SqlConnectionForViewDTO> > SqlConnectionsManagementGetSqlConnectionsWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetSqlConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlConnectionForViewDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlConnectionForViewDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlConnectionForViewDTO>)));
        }

        /// <summary>
        /// This call returns all sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SqlConnectionForViewDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SqlConnectionForViewDTO>> SqlConnectionsManagementGetSqlConnectionsAsync ()
        {
             ApiResponse<List<SqlConnectionForViewDTO>> localVarResponse = await SqlConnectionsManagementGetSqlConnectionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SqlConnectionForViewDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SqlConnectionForViewDTO>>> SqlConnectionsManagementGetSqlConnectionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementGetSqlConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlConnectionForViewDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlConnectionForViewDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlConnectionForViewDTO>)));
        }

        /// <summary>
        /// This call inserts sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        public SqlConnectionForViewDTO SqlConnectionsManagementInsertSqlConnection (SqlConnectionDTO sqlConnection)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = SqlConnectionsManagementInsertSqlConnectionWithHttpInfo(sqlConnection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        public ApiResponse< SqlConnectionForViewDTO > SqlConnectionsManagementInsertSqlConnectionWithHttpInfo (SqlConnectionDTO sqlConnection)
        {
            // verify the required parameter 'sqlConnection' is set
            if (sqlConnection == null)
                throw new ApiException(400, "Missing required parameter 'sqlConnection' when calling SqlConnectionsManagementApi->SqlConnectionsManagementInsertSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlConnection != null && sqlConnection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlConnection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlConnection; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementInsertSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

        /// <summary>
        /// This call inserts sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        public async System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementInsertSqlConnectionAsync (SqlConnectionDTO sqlConnection)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = await SqlConnectionsManagementInsertSqlConnectionAsyncWithHttpInfo(sqlConnection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlConnection">Sql connection informations for insert</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementInsertSqlConnectionAsyncWithHttpInfo (SqlConnectionDTO sqlConnection)
        {
            // verify the required parameter 'sqlConnection' is set
            if (sqlConnection == null)
                throw new ApiException(400, "Missing required parameter 'sqlConnection' when calling SqlConnectionsManagementApi->SqlConnectionsManagementInsertSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlConnection != null && sqlConnection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlConnection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlConnection; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementInsertSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

        /// <summary>
        /// This call allows to test sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>bool?</returns>
        public bool? SqlConnectionsManagementTestSqlConnection (SqlConnectionTestDTO parameters)
        {
             ApiResponse<bool?> localVarResponse = SqlConnectionsManagementTestSqlConnectionWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to test sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SqlConnectionsManagementTestSqlConnectionWithHttpInfo (SqlConnectionTestDTO parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SqlConnectionsManagementApi->SqlConnectionsManagementTestSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementTestSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows to test sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SqlConnectionsManagementTestSqlConnectionAsync (SqlConnectionTestDTO parameters)
        {
             ApiResponse<bool?> localVarResponse = await SqlConnectionsManagementTestSqlConnectionAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to test sql connection configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Test parameters</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SqlConnectionsManagementTestSqlConnectionAsyncWithHttpInfo (SqlConnectionTestDTO parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling SqlConnectionsManagementApi->SqlConnectionsManagementTestSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementTestSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call updates specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>SqlConnectionForViewDTO</returns>
        public SqlConnectionForViewDTO SqlConnectionsManagementUpdateSqlConnection (string id, SqlConnectionDTO sqlConnection)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = SqlConnectionsManagementUpdateSqlConnectionWithHttpInfo(id, sqlConnection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>ApiResponse of SqlConnectionForViewDTO</returns>
        public ApiResponse< SqlConnectionForViewDTO > SqlConnectionsManagementUpdateSqlConnectionWithHttpInfo (string id, SqlConnectionDTO sqlConnection)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementUpdateSqlConnection");
            // verify the required parameter 'sqlConnection' is set
            if (sqlConnection == null)
                throw new ApiException(400, "Missing required parameter 'sqlConnection' when calling SqlConnectionsManagementApi->SqlConnectionsManagementUpdateSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sqlConnection != null && sqlConnection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlConnection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlConnection; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementUpdateSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

        /// <summary>
        /// This call updates specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>Task of SqlConnectionForViewDTO</returns>
        public async System.Threading.Tasks.Task<SqlConnectionForViewDTO> SqlConnectionsManagementUpdateSqlConnectionAsync (string id, SqlConnectionDTO sqlConnection)
        {
             ApiResponse<SqlConnectionForViewDTO> localVarResponse = await SqlConnectionsManagementUpdateSqlConnectionAsyncWithHttpInfo(id, sqlConnection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific sql connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql connection identifier</param>
        /// <param name="sqlConnection">Sql connection informations for update</param>
        /// <returns>Task of ApiResponse (SqlConnectionForViewDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlConnectionForViewDTO>> SqlConnectionsManagementUpdateSqlConnectionAsyncWithHttpInfo (string id, SqlConnectionDTO sqlConnection)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlConnectionsManagementApi->SqlConnectionsManagementUpdateSqlConnection");
            // verify the required parameter 'sqlConnection' is set
            if (sqlConnection == null)
                throw new ApiException(400, "Missing required parameter 'sqlConnection' when calling SqlConnectionsManagementApi->SqlConnectionsManagementUpdateSqlConnection");

            var localVarPath = "/api/management/DataSources/SqlConnections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sqlConnection != null && sqlConnection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlConnection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlConnection; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlConnectionsManagementUpdateSqlConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlConnectionForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlConnectionForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlConnectionForViewDTO)));
        }

    }
}
