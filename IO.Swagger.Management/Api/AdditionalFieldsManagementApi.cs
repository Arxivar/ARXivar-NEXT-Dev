/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdditionalFieldsManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method clone additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        AdditionalFieldManagementBaseDTO AdditionalFieldsManagementCloneAdditionalField (AdditionalFieldManagementCloneOptionsDTO cloneOptions);

        /// <summary>
        /// This method clone additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        ApiResponse<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementCloneAdditionalFieldWithHttpInfo (AdditionalFieldManagementCloneOptionsDTO cloneOptions);
        /// <summary>
        /// This method removes specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns></returns>
        void AdditionalFieldsManagementDeleteAdditionalField (int? documentTypeId, string key);

        /// <summary>
        /// This method removes specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdditionalFieldsManagementDeleteAdditionalFieldWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method removes specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns></returns>
        void AdditionalFieldsManagementDeleteFieldGroup (int? id);

        /// <summary>
        /// This method removes specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdditionalFieldsManagementDeleteFieldGroupWithHttpInfo (int? id);
        /// <summary>
        /// This method returns additional field by document type and key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        AdditionalFieldManagementBaseDTO AdditionalFieldsManagementGetAdditionalField (int? documentTypeId, string key);

        /// <summary>
        /// This method returns additional field by document type and key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        ApiResponse<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method gets field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        List<AdditionalFieldManagementAssociationDTO> AdditionalFieldsManagementGetAdditionalFieldAssociations (int? documentTypeId, string key);

        /// <summary>
        /// This method gets field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        ApiResponse<List<AdditionalFieldManagementAssociationDTO>> AdditionalFieldsManagementGetAdditionalFieldAssociationsWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method returns all additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFields ();

        /// <summary>
        /// This method returns all additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        ApiResponse<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsWithHttpInfo ();
        /// <summary>
        /// This method returns all additional fields for document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId (int? documentTypeId);

        /// <summary>
        /// This method returns all additional fields for document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        ApiResponse<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This method returns all additional fields by reference id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldsByReferenceId (string referenceId);

        /// <summary>
        /// This method returns all additional fields by reference id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        ApiResponse<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdWithHttpInfo (string referenceId);
        /// <summary>
        /// This method returns specific field group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>FieldGroupDTO</returns>
        FieldGroupDTO AdditionalFieldsManagementGetFieldGroup (int? id);

        /// <summary>
        /// This method returns specific field group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        ApiResponse<FieldGroupDTO> AdditionalFieldsManagementGetFieldGroupWithHttpInfo (int? id);
        /// <summary>
        /// This method returns all field groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FieldGroupDTO&gt;</returns>
        List<FieldGroupDTO> AdditionalFieldsManagementGetFieldGroups ();

        /// <summary>
        /// This method returns all field groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FieldGroupDTO&gt;</returns>
        ApiResponse<List<FieldGroupDTO>> AdditionalFieldsManagementGetFieldGroupsWithHttpInfo ();
        /// <summary>
        /// This method creates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        AdditionalFieldManagementBaseDTO AdditionalFieldsManagementInsertAdditionalField (AdditionalFieldManagementBaseDTO field = null);

        /// <summary>
        /// This method creates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        ApiResponse<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementInsertAdditionalFieldWithHttpInfo (AdditionalFieldManagementBaseDTO field = null);
        /// <summary>
        /// This method creates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>FieldGroupDTO</returns>
        FieldGroupDTO AdditionalFieldsManagementInsertFieldGroup (FieldGroupDTO fieldGroup);

        /// <summary>
        /// This method creates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        ApiResponse<FieldGroupDTO> AdditionalFieldsManagementInsertFieldGroupWithHttpInfo (FieldGroupDTO fieldGroup);
        /// <summary>
        /// This method updates field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns></returns>
        void AdditionalFieldsManagementSetAdditionalFieldAssociations (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations);

        /// <summary>
        /// This method updates field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdditionalFieldsManagementSetAdditionalFieldAssociationsWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations);
        /// <summary>
        /// This method updates field references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns></returns>
        void AdditionalFieldsManagementSetAdditionalFieldReferences (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references);

        /// <summary>
        /// This method updates field references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdditionalFieldsManagementSetAdditionalFieldReferencesWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references);
        /// <summary>
        /// This method updates field groups order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        void AdditionalFieldsManagementSortFieldGroups (List<FieldGroupSortOptionsDTO> options);

        /// <summary>
        /// This method updates field groups order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdditionalFieldsManagementSortFieldGroupsWithHttpInfo (List<FieldGroupSortOptionsDTO> options);
        /// <summary>
        /// This method updates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        AdditionalFieldManagementBaseDTO AdditionalFieldsManagementUpdateAdditionalField (AdditionalFieldManagementBaseDTO field = null);

        /// <summary>
        /// This method updates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        ApiResponse<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementUpdateAdditionalFieldWithHttpInfo (AdditionalFieldManagementBaseDTO field = null);
        /// <summary>
        /// This method updates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>FieldGroupDTO</returns>
        FieldGroupDTO AdditionalFieldsManagementUpdateFieldGroup (int? id, FieldGroupDTO fieldGroup);

        /// <summary>
        /// This method updates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        ApiResponse<FieldGroupDTO> AdditionalFieldsManagementUpdateFieldGroupWithHttpInfo (int? id, FieldGroupDTO fieldGroup);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method clone additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementCloneAdditionalFieldAsync (AdditionalFieldManagementCloneOptionsDTO cloneOptions);

        /// <summary>
        /// This method clone additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementCloneAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementCloneOptionsDTO cloneOptions);
        /// <summary>
        /// This method removes specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdditionalFieldsManagementDeleteAdditionalFieldAsync (int? documentTypeId, string key);

        /// <summary>
        /// This method removes specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementDeleteAdditionalFieldAsyncWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method removes specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdditionalFieldsManagementDeleteFieldGroupAsync (int? id);

        /// <summary>
        /// This method removes specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementDeleteFieldGroupAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method returns additional field by document type and key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldAsync (int? documentTypeId, string key);

        /// <summary>
        /// This method returns additional field by document type and key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldAsyncWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method gets field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AdditionalFieldManagementAssociationDTO>> AdditionalFieldsManagementGetAdditionalFieldAssociationsAsync (int? documentTypeId, string key);

        /// <summary>
        /// This method gets field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementAssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementAssociationDTO>>> AdditionalFieldsManagementGetAdditionalFieldAssociationsAsyncWithHttpInfo (int? documentTypeId, string key);
        /// <summary>
        /// This method returns all additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsAsync ();

        /// <summary>
        /// This method returns all additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsAsyncWithHttpInfo ();
        /// <summary>
        /// This method returns all additional fields for document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdAsync (int? documentTypeId);

        /// <summary>
        /// This method returns all additional fields for document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This method returns all additional fields by reference id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdAsync (string referenceId);

        /// <summary>
        /// This method returns all additional fields by reference id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdAsyncWithHttpInfo (string referenceId);
        /// <summary>
        /// This method returns specific field group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of FieldGroupDTO</returns>
        System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementGetFieldGroupAsync (int? id);

        /// <summary>
        /// This method returns specific field group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementGetFieldGroupAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method returns all field groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FieldGroupDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldGroupDTO>> AdditionalFieldsManagementGetFieldGroupsAsync ();

        /// <summary>
        /// This method returns all field groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FieldGroupDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldGroupDTO>>> AdditionalFieldsManagementGetFieldGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// This method creates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementInsertAdditionalFieldAsync (AdditionalFieldManagementBaseDTO field = null);

        /// <summary>
        /// This method creates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementInsertAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementBaseDTO field = null);
        /// <summary>
        /// This method creates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>Task of FieldGroupDTO</returns>
        System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementInsertFieldGroupAsync (FieldGroupDTO fieldGroup);

        /// <summary>
        /// This method creates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementInsertFieldGroupAsyncWithHttpInfo (FieldGroupDTO fieldGroup);
        /// <summary>
        /// This method updates field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdditionalFieldsManagementSetAdditionalFieldAssociationsAsync (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations);

        /// <summary>
        /// This method updates field associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSetAdditionalFieldAssociationsAsyncWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations);
        /// <summary>
        /// This method updates field references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdditionalFieldsManagementSetAdditionalFieldReferencesAsync (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references);

        /// <summary>
        /// This method updates field references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSetAdditionalFieldReferencesAsyncWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references);
        /// <summary>
        /// This method updates field groups order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdditionalFieldsManagementSortFieldGroupsAsync (List<FieldGroupSortOptionsDTO> options);

        /// <summary>
        /// This method updates field groups order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSortFieldGroupsAsyncWithHttpInfo (List<FieldGroupSortOptionsDTO> options);
        /// <summary>
        /// This method updates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementUpdateAdditionalFieldAsync (AdditionalFieldManagementBaseDTO field = null);

        /// <summary>
        /// This method updates specific additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementUpdateAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementBaseDTO field = null);
        /// <summary>
        /// This method updates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>Task of FieldGroupDTO</returns>
        System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementUpdateFieldGroupAsync (int? id, FieldGroupDTO fieldGroup);

        /// <summary>
        /// This method updates specific field group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementUpdateFieldGroupAsyncWithHttpInfo (int? id, FieldGroupDTO fieldGroup);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdditionalFieldsManagementApi : IAdditionalFieldsManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalFieldsManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdditionalFieldsManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalFieldsManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdditionalFieldsManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method clone additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        public AdditionalFieldManagementBaseDTO AdditionalFieldsManagementCloneAdditionalField (AdditionalFieldManagementCloneOptionsDTO cloneOptions)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = AdditionalFieldsManagementCloneAdditionalFieldWithHttpInfo(cloneOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method clone additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        public ApiResponse< AdditionalFieldManagementBaseDTO > AdditionalFieldsManagementCloneAdditionalFieldWithHttpInfo (AdditionalFieldManagementCloneOptionsDTO cloneOptions)
        {
            // verify the required parameter 'cloneOptions' is set
            if (cloneOptions == null)
                throw new ApiException(400, "Missing required parameter 'cloneOptions' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementCloneAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Fields/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloneOptions != null && cloneOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementCloneAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method clone additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        public async System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementCloneAdditionalFieldAsync (AdditionalFieldManagementCloneOptionsDTO cloneOptions)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = await AdditionalFieldsManagementCloneAdditionalFieldAsyncWithHttpInfo(cloneOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method clone additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Additional field options for clone operation</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementCloneAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementCloneOptionsDTO cloneOptions)
        {
            // verify the required parameter 'cloneOptions' is set
            if (cloneOptions == null)
                throw new ApiException(400, "Missing required parameter 'cloneOptions' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementCloneAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Fields/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloneOptions != null && cloneOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementCloneAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method removes specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns></returns>
        public void AdditionalFieldsManagementDeleteAdditionalField (int? documentTypeId, string key)
        {
             AdditionalFieldsManagementDeleteAdditionalFieldWithHttpInfo(documentTypeId, key);
        }

        /// <summary>
        /// This method removes specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdditionalFieldsManagementDeleteAdditionalFieldWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteAdditionalField");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Field/{documentTypeId}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementDeleteAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdditionalFieldsManagementDeleteAdditionalFieldAsync (int? documentTypeId, string key)
        {
             await AdditionalFieldsManagementDeleteAdditionalFieldAsyncWithHttpInfo(documentTypeId, key);

        }

        /// <summary>
        /// This method removes specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementDeleteAdditionalFieldAsyncWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteAdditionalField");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Field/{documentTypeId}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementDeleteAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns></returns>
        public void AdditionalFieldsManagementDeleteFieldGroup (int? id)
        {
             AdditionalFieldsManagementDeleteFieldGroupWithHttpInfo(id);
        }

        /// <summary>
        /// This method removes specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdditionalFieldsManagementDeleteFieldGroupWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementDeleteFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdditionalFieldsManagementDeleteFieldGroupAsync (int? id)
        {
             await AdditionalFieldsManagementDeleteFieldGroupAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method removes specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementDeleteFieldGroupAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementDeleteFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementDeleteFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method returns additional field by document type and key 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        public AdditionalFieldManagementBaseDTO AdditionalFieldsManagementGetAdditionalField (int? documentTypeId, string key)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = AdditionalFieldsManagementGetAdditionalFieldWithHttpInfo(documentTypeId, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns additional field by document type and key 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        public ApiResponse< AdditionalFieldManagementBaseDTO > AdditionalFieldsManagementGetAdditionalFieldWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalField");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Field/{documentTypeId}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method returns additional field by document type and key 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        public async System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldAsync (int? documentTypeId, string key)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = await AdditionalFieldsManagementGetAdditionalFieldAsyncWithHttpInfo(documentTypeId, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns additional field by document type and key 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldAsyncWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalField");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalField");

            var localVarPath = "/api/management/AdditionalFields/Field/{documentTypeId}/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method gets field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        public List<AdditionalFieldManagementAssociationDTO> AdditionalFieldsManagementGetAdditionalFieldAssociations (int? documentTypeId, string key)
        {
             ApiResponse<List<AdditionalFieldManagementAssociationDTO>> localVarResponse = AdditionalFieldsManagementGetAdditionalFieldAssociationsWithHttpInfo(documentTypeId, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method gets field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        public ApiResponse< List<AdditionalFieldManagementAssociationDTO> > AdditionalFieldsManagementGetAdditionalFieldAssociationsWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldAssociations");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldAssociations");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementAssociationDTO>)));
        }

        /// <summary>
        /// This method gets field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementAssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdditionalFieldManagementAssociationDTO>> AdditionalFieldsManagementGetAdditionalFieldAssociationsAsync (int? documentTypeId, string key)
        {
             ApiResponse<List<AdditionalFieldManagementAssociationDTO>> localVarResponse = await AdditionalFieldsManagementGetAdditionalFieldAssociationsAsyncWithHttpInfo(documentTypeId, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method gets field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementAssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementAssociationDTO>>> AdditionalFieldsManagementGetAdditionalFieldAssociationsAsyncWithHttpInfo (int? documentTypeId, string key)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldAssociations");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldAssociations");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementAssociationDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFields ()
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = AdditionalFieldsManagementGetAdditionalFieldsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all additional fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public ApiResponse< List<AdditionalFieldManagementBaseDTO> > AdditionalFieldsManagementGetAdditionalFieldsWithHttpInfo ()
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsAsync ()
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = await AdditionalFieldsManagementGetAdditionalFieldsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all additional fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields for document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId (int? documentTypeId)
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all additional fields for document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public ApiResponse< List<AdditionalFieldManagementBaseDTO> > AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId");

            var localVarPath = "/api/management/AdditionalFields/Fields/ByDocumentType/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields for document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdAsync (int? documentTypeId)
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = await AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all additional fields for document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId");

            var localVarPath = "/api/management/AdditionalFields/Fields/ByDocumentType/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldsByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields by reference id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public List<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementGetAdditionalFieldsByReferenceId (string referenceId)
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdWithHttpInfo(referenceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all additional fields by reference id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>ApiResponse of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public ApiResponse< List<AdditionalFieldManagementBaseDTO> > AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdWithHttpInfo (string referenceId)
        {
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldsByReferenceId");

            var localVarPath = "/api/management/AdditionalFields/Fields/ByReferenceId/{referenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceId != null) localVarPathParams.Add("referenceId", this.Configuration.ApiClient.ParameterToString(referenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldsByReferenceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns all additional fields by reference id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>Task of List&lt;AdditionalFieldManagementBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdAsync (string referenceId)
        {
             ApiResponse<List<AdditionalFieldManagementBaseDTO>> localVarResponse = await AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdAsyncWithHttpInfo(referenceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all additional fields by reference id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId">Reference identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AdditionalFieldManagementBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdditionalFieldManagementBaseDTO>>> AdditionalFieldsManagementGetAdditionalFieldsByReferenceIdAsyncWithHttpInfo (string referenceId)
        {
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetAdditionalFieldsByReferenceId");

            var localVarPath = "/api/management/AdditionalFields/Fields/ByReferenceId/{referenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceId != null) localVarPathParams.Add("referenceId", this.Configuration.ApiClient.ParameterToString(referenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetAdditionalFieldsByReferenceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdditionalFieldManagementBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AdditionalFieldManagementBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdditionalFieldManagementBaseDTO>)));
        }

        /// <summary>
        /// This method returns specific field group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>FieldGroupDTO</returns>
        public FieldGroupDTO AdditionalFieldsManagementGetFieldGroup (int? id)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = AdditionalFieldsManagementGetFieldGroupWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns specific field group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        public ApiResponse< FieldGroupDTO > AdditionalFieldsManagementGetFieldGroupWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

        /// <summary>
        /// This method returns specific field group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of FieldGroupDTO</returns>
        public async System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementGetFieldGroupAsync (int? id)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = await AdditionalFieldsManagementGetFieldGroupAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns specific field group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementGetFieldGroupAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementGetFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

        /// <summary>
        /// This method returns all field groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FieldGroupDTO&gt;</returns>
        public List<FieldGroupDTO> AdditionalFieldsManagementGetFieldGroups ()
        {
             ApiResponse<List<FieldGroupDTO>> localVarResponse = AdditionalFieldsManagementGetFieldGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all field groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FieldGroupDTO&gt;</returns>
        public ApiResponse< List<FieldGroupDTO> > AdditionalFieldsManagementGetFieldGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/management/AdditionalFields/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldGroupDTO>)));
        }

        /// <summary>
        /// This method returns all field groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FieldGroupDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldGroupDTO>> AdditionalFieldsManagementGetFieldGroupsAsync ()
        {
             ApiResponse<List<FieldGroupDTO>> localVarResponse = await AdditionalFieldsManagementGetFieldGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all field groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FieldGroupDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldGroupDTO>>> AdditionalFieldsManagementGetFieldGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/AdditionalFields/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementGetFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldGroupDTO>)));
        }

        /// <summary>
        /// This method creates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        public AdditionalFieldManagementBaseDTO AdditionalFieldsManagementInsertAdditionalField (AdditionalFieldManagementBaseDTO field = null)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = AdditionalFieldsManagementInsertAdditionalFieldWithHttpInfo(field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method creates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        public ApiResponse< AdditionalFieldManagementBaseDTO > AdditionalFieldsManagementInsertAdditionalFieldWithHttpInfo (AdditionalFieldManagementBaseDTO field = null)
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementInsertAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method creates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        public async System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementInsertAdditionalFieldAsync (AdditionalFieldManagementBaseDTO field = null)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = await AdditionalFieldsManagementInsertAdditionalFieldAsyncWithHttpInfo(field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method creates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementInsertAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementBaseDTO field = null)
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementInsertAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method creates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>FieldGroupDTO</returns>
        public FieldGroupDTO AdditionalFieldsManagementInsertFieldGroup (FieldGroupDTO fieldGroup)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = AdditionalFieldsManagementInsertFieldGroupWithHttpInfo(fieldGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method creates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        public ApiResponse< FieldGroupDTO > AdditionalFieldsManagementInsertFieldGroupWithHttpInfo (FieldGroupDTO fieldGroup)
        {
            // verify the required parameter 'fieldGroup' is set
            if (fieldGroup == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroup' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementInsertFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldGroup != null && fieldGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldGroup; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementInsertFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

        /// <summary>
        /// This method creates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>Task of FieldGroupDTO</returns>
        public async System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementInsertFieldGroupAsync (FieldGroupDTO fieldGroup)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = await AdditionalFieldsManagementInsertFieldGroupAsyncWithHttpInfo(fieldGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method creates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldGroup">Field group data for insert</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementInsertFieldGroupAsyncWithHttpInfo (FieldGroupDTO fieldGroup)
        {
            // verify the required parameter 'fieldGroup' is set
            if (fieldGroup == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroup' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementInsertFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldGroup != null && fieldGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldGroup; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementInsertFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

        /// <summary>
        /// This method updates field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns></returns>
        public void AdditionalFieldsManagementSetAdditionalFieldAssociations (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations)
        {
             AdditionalFieldsManagementSetAdditionalFieldAssociationsWithHttpInfo(documentTypeId, key, associations);
        }

        /// <summary>
        /// This method updates field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdditionalFieldsManagementSetAdditionalFieldAssociationsWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (associations != null && associations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(associations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associations; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSetAdditionalFieldAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdditionalFieldsManagementSetAdditionalFieldAssociationsAsync (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations)
        {
             await AdditionalFieldsManagementSetAdditionalFieldAssociationsAsyncWithHttpInfo(documentTypeId, key, associations);

        }

        /// <summary>
        /// This method updates field associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="associations">Associations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSetAdditionalFieldAssociationsAsyncWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementAssociationDTO> associations)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldAssociations");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (associations != null && associations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(associations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associations; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSetAdditionalFieldAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates field references 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns></returns>
        public void AdditionalFieldsManagementSetAdditionalFieldReferences (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references)
        {
             AdditionalFieldsManagementSetAdditionalFieldReferencesWithHttpInfo(documentTypeId, key, references);
        }

        /// <summary>
        /// This method updates field references 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdditionalFieldsManagementSetAdditionalFieldReferencesWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");
            // verify the required parameter 'references' is set
            if (references == null)
                throw new ApiException(400, "Missing required parameter 'references' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/References";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (references != null && references.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(references); // http body (model) parameter
            }
            else
            {
                localVarPostBody = references; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSetAdditionalFieldReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates field references 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdditionalFieldsManagementSetAdditionalFieldReferencesAsync (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references)
        {
             await AdditionalFieldsManagementSetAdditionalFieldReferencesAsyncWithHttpInfo(documentTypeId, key, references);

        }

        /// <summary>
        /// This method updates field references 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="key">Additional field key</param>
        /// <param name="references">Reference list for specified field</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSetAdditionalFieldReferencesAsyncWithHttpInfo (int? documentTypeId, string key, List<AdditionalFieldManagementReferenceDTO> references)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");
            // verify the required parameter 'references' is set
            if (references == null)
                throw new ApiException(400, "Missing required parameter 'references' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSetAdditionalFieldReferences");

            var localVarPath = "/api/management/AdditionalFields/Fields/{documentTypeId}/{key}/References";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (references != null && references.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(references); // http body (model) parameter
            }
            else
            {
                localVarPostBody = references; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSetAdditionalFieldReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates field groups order 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        public void AdditionalFieldsManagementSortFieldGroups (List<FieldGroupSortOptionsDTO> options)
        {
             AdditionalFieldsManagementSortFieldGroupsWithHttpInfo(options);
        }

        /// <summary>
        /// This method updates field groups order 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdditionalFieldsManagementSortFieldGroupsWithHttpInfo (List<FieldGroupSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSortFieldGroups");

            var localVarPath = "/api/management/AdditionalFields/Groups/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates field groups order 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdditionalFieldsManagementSortFieldGroupsAsync (List<FieldGroupSortOptionsDTO> options)
        {
             await AdditionalFieldsManagementSortFieldGroupsAsyncWithHttpInfo(options);

        }

        /// <summary>
        /// This method updates field groups order 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdditionalFieldsManagementSortFieldGroupsAsyncWithHttpInfo (List<FieldGroupSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementSortFieldGroups");

            var localVarPath = "/api/management/AdditionalFields/Groups/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>AdditionalFieldManagementBaseDTO</returns>
        public AdditionalFieldManagementBaseDTO AdditionalFieldsManagementUpdateAdditionalField (AdditionalFieldManagementBaseDTO field = null)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = AdditionalFieldsManagementUpdateAdditionalFieldWithHttpInfo(field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of AdditionalFieldManagementBaseDTO</returns>
        public ApiResponse< AdditionalFieldManagementBaseDTO > AdditionalFieldsManagementUpdateAdditionalFieldWithHttpInfo (AdditionalFieldManagementBaseDTO field = null)
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementUpdateAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method updates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of AdditionalFieldManagementBaseDTO</returns>
        public async System.Threading.Tasks.Task<AdditionalFieldManagementBaseDTO> AdditionalFieldsManagementUpdateAdditionalFieldAsync (AdditionalFieldManagementBaseDTO field = null)
        {
             ApiResponse<AdditionalFieldManagementBaseDTO> localVarResponse = await AdditionalFieldsManagementUpdateAdditionalFieldAsyncWithHttpInfo(field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates specific additional field 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalFieldManagementBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalFieldManagementBaseDTO>> AdditionalFieldsManagementUpdateAdditionalFieldAsyncWithHttpInfo (AdditionalFieldManagementBaseDTO field = null)
        {

            var localVarPath = "/api/management/AdditionalFields/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementUpdateAdditionalField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalFieldManagementBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalFieldManagementBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalFieldManagementBaseDTO)));
        }

        /// <summary>
        /// This method updates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>FieldGroupDTO</returns>
        public FieldGroupDTO AdditionalFieldsManagementUpdateFieldGroup (int? id, FieldGroupDTO fieldGroup)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = AdditionalFieldsManagementUpdateFieldGroupWithHttpInfo(id, fieldGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>ApiResponse of FieldGroupDTO</returns>
        public ApiResponse< FieldGroupDTO > AdditionalFieldsManagementUpdateFieldGroupWithHttpInfo (int? id, FieldGroupDTO fieldGroup)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementUpdateFieldGroup");
            // verify the required parameter 'fieldGroup' is set
            if (fieldGroup == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroup' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementUpdateFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldGroup != null && fieldGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldGroup; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementUpdateFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

        /// <summary>
        /// This method updates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>Task of FieldGroupDTO</returns>
        public async System.Threading.Tasks.Task<FieldGroupDTO> AdditionalFieldsManagementUpdateFieldGroupAsync (int? id, FieldGroupDTO fieldGroup)
        {
             ApiResponse<FieldGroupDTO> localVarResponse = await AdditionalFieldsManagementUpdateFieldGroupAsyncWithHttpInfo(id, fieldGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates specific field group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Field group identifier</param>
        /// <param name="fieldGroup">Field group data for update</param>
        /// <returns>Task of ApiResponse (FieldGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldGroupDTO>> AdditionalFieldsManagementUpdateFieldGroupAsyncWithHttpInfo (int? id, FieldGroupDTO fieldGroup)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementUpdateFieldGroup");
            // verify the required parameter 'fieldGroup' is set
            if (fieldGroup == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroup' when calling AdditionalFieldsManagementApi->AdditionalFieldsManagementUpdateFieldGroup");

            var localVarPath = "/api/management/AdditionalFields/Groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldGroup != null && fieldGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldGroup; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdditionalFieldsManagementUpdateFieldGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldGroupDTO)));
        }

    }
}
