/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>bool?</returns>
        bool? UsersManagementGetAddressBookProfile (int? userId);

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UsersManagementGetAddressBookProfileWithHttpInfo (int? userId);
        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>int?</returns>
        int? UsersManagementGetMailOutMaxSize (int? userId);

        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> UsersManagementGetMailOutMaxSizeWithHttpInfo (int? userId);
        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns></returns>
        void UsersManagementSetAddressBookProfile (int? userId, bool? enable);

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetAddressBookProfileWithHttpInfo (int? userId, bool? enable);
        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns></returns>
        void UsersManagementSetMailOutMaxSize (int? userId, int? maxSize);

        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetMailOutMaxSizeWithHttpInfo (int? userId, int? maxSize);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UsersManagementGetAddressBookProfileAsync (int? userId);

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UsersManagementGetAddressBookProfileAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> UsersManagementGetMailOutMaxSizeAsync (int? userId);

        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetAddressBookProfileAsync (int? userId, bool? enable);

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetAddressBookProfileAsyncWithHttpInfo (int? userId, bool? enable);
        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetMailOutMaxSizeAsync (int? userId, int? maxSize);

        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo (int? userId, int? maxSize);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersManagementApi : IUsersManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>bool?</returns>
        public bool? UsersManagementGetAddressBookProfile (int? userId)
        {
             ApiResponse<bool?> localVarResponse = UsersManagementGetAddressBookProfileWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UsersManagementGetAddressBookProfileWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/GetAddressBookProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UsersManagementGetAddressBookProfileAsync (int? userId)
        {
             ApiResponse<bool?> localVarResponse = await UsersManagementGetAddressBookProfileAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UsersManagementGetAddressBookProfileAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/GetAddressBookProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>int?</returns>
        public int? UsersManagementGetMailOutMaxSize (int? userId)
        {
             ApiResponse<int?> localVarResponse = UsersManagementGetMailOutMaxSizeWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > UsersManagementGetMailOutMaxSizeWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/GetMailOutMaxSize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> UsersManagementGetMailOutMaxSizeAsync (int? userId)
        {
             ApiResponse<int?> localVarResponse = await UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/GetMailOutMaxSize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns></returns>
        public void UsersManagementSetAddressBookProfile (int? userId, bool? enable)
        {
             UsersManagementSetAddressBookProfileWithHttpInfo(userId, enable);
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetAddressBookProfileWithHttpInfo (int? userId, bool? enable)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");
            // verify the required parameter 'enable' is set
            if (enable == null)
                throw new ApiException(400, "Missing required parameter 'enable' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/SetAddressBookProfile/{enable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (enable != null) localVarPathParams.Add("enable", this.Configuration.ApiClient.ParameterToString(enable)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetAddressBookProfileAsync (int? userId, bool? enable)
        {
             await UsersManagementSetAddressBookProfileAsyncWithHttpInfo(userId, enable);

        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetAddressBookProfileAsyncWithHttpInfo (int? userId, bool? enable)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");
            // verify the required parameter 'enable' is set
            if (enable == null)
                throw new ApiException(400, "Missing required parameter 'enable' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/SetAddressBookProfile/{enable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (enable != null) localVarPathParams.Add("enable", this.Configuration.ApiClient.ParameterToString(enable)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns></returns>
        public void UsersManagementSetMailOutMaxSize (int? userId, int? maxSize)
        {
             UsersManagementSetMailOutMaxSizeWithHttpInfo(userId, maxSize);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetMailOutMaxSizeWithHttpInfo (int? userId, int? maxSize)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");
            // verify the required parameter 'maxSize' is set
            if (maxSize == null)
                throw new ApiException(400, "Missing required parameter 'maxSize' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/SetMailOutMaxSize/{maxSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (maxSize != null) localVarPathParams.Add("maxSize", this.Configuration.ApiClient.ParameterToString(maxSize)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetMailOutMaxSizeAsync (int? userId, int? maxSize)
        {
             await UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo(userId, maxSize);

        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo (int? userId, int? maxSize)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");
            // verify the required parameter 'maxSize' is set
            if (maxSize == null)
                throw new ApiException(400, "Missing required parameter 'maxSize' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/SetMailOutMaxSize/{maxSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (maxSize != null) localVarPathParams.Add("maxSize", this.Configuration.ApiClient.ParameterToString(maxSize)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
