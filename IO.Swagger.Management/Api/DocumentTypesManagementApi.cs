/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentTypesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes Document Type specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        void DocumentTypesManagementDelete (int? id);

        /// <summary>
        /// This call deletes Document Type specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This call delete an automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns></returns>
        void DocumentTypesManagementDeleteAutomaticReference (int? automaticReferenceId);

        /// <summary>
        /// This call delete an automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeleteAutomaticReferenceWithHttpInfo (int? automaticReferenceId);
        /// <summary>
        /// This call deletes specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns></returns>
        void DocumentTypesManagementDeleteDocumentTypeReceiptPA (int? documentTypeId);

        /// <summary>
        /// This call deletes specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call remove Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns></returns>
        void DocumentTypesManagementDeleteDocumentTypeStylesheet (int? documentTypeId);

        /// <summary>
        /// This call remove Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypeStylesheetWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call delete specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns></returns>
        void DocumentTypesManagementDeleteDocumentTypesFolder (int? folderTypeId);

        /// <summary>
        /// This call delete specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypesFolderWithHttpInfo (int? folderTypeId);
        /// <summary>
        /// This call delete pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns></returns>
        void DocumentTypesManagementDeletePdfOptions (int? pdfOptionsId);

        /// <summary>
        /// This call delete pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementDeletePdfOptionsWithHttpInfo (int? pdfOptionsId);
        /// <summary>
        /// This call returns all archive options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ArchiveOptionsForViewDTO</returns>
        ArchiveOptionsForViewDTO DocumentTypesManagementGetArchiveRules (int? documentTypeId);

        /// <summary>
        /// This call returns all archive options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of ArchiveOptionsForViewDTO</returns>
        ApiResponse<ArchiveOptionsForViewDTO> DocumentTypesManagementGetArchiveRulesWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all automatic references for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;AutomaticReferenceDTO&gt;</returns>
        List<AutomaticReferenceDTO> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId (int? documentTypeId);

        /// <summary>
        /// This call returns all automatic references for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;AutomaticReferenceDTO&gt;</returns>
        ApiResponse<List<AutomaticReferenceDTO>> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call gets Document Type information by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        DocumentTypeCompleteDTO DocumentTypesManagementGetById (int? id);

        /// <summary>
        /// This call gets Document Type information by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        ApiResponse<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets Document Type information by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        DocumentTypeCompleteDTO DocumentTypesManagementGetByIds (int? documentType, int? type2, int? type3);

        /// <summary>
        /// This call gets Document Type information by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        ApiResponse<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdsWithHttpInfo (int? documentType, int? type2, int? type3);
        /// <summary>
        /// This call gets Document Type information by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        DocumentTypeCompleteDTO DocumentTypesManagementGetByKey (string key);

        /// <summary>
        /// This call gets Document Type information by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        ApiResponse<DocumentTypeCompleteDTO> DocumentTypesManagementGetByKeyWithHttpInfo (string key);
        /// <summary>
        /// This call returns all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>List&lt;FolderTypeDTO&gt;</returns>
        List<FolderTypeDTO> DocumentTypesManagementGetDocumentTypeFolders (int? documentTypeId);

        /// <summary>
        /// This call returns all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of List&lt;FolderTypeDTO&gt;</returns>
        ApiResponse<List<FolderTypeDTO>> DocumentTypesManagementGetDocumentTypeFoldersWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns receipt PA by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ReceiptPADTO</returns>
        ReceiptPADTO DocumentTypesManagementGetDocumentTypeReceiptPA (int? documentTypeId);

        /// <summary>
        /// This call returns receipt PA by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of ReceiptPADTO</returns>
        ApiResponse<ReceiptPADTO> DocumentTypesManagementGetDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all receipts PA for all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReceiptPADTO&gt;</returns>
        List<ReceiptPADTO> DocumentTypesManagementGetDocumentTypeReceiptPAList ();

        /// <summary>
        /// This call returns all receipts PA for all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReceiptPADTO&gt;</returns>
        ApiResponse<List<ReceiptPADTO>> DocumentTypesManagementGetDocumentTypeReceiptPAListWithHttpInfo ();
        /// <summary>
        /// This call returns all states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;DocumentTypeStateDTO&gt;</returns>
        List<DocumentTypeStateDTO> DocumentTypesManagementGetDocumentTypeStates (int? documentTypeId);

        /// <summary>
        /// This call returns all states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeStateDTO&gt;</returns>
        ApiResponse<List<DocumentTypeStateDTO>> DocumentTypesManagementGetDocumentTypeStatesWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call get Document type stylesheet binary file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentTypesManagementGetDocumentTypeStylesheet (int? documentTypeId);

        /// <summary>
        /// This call get Document type stylesheet binary file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentTypesManagementGetDocumentTypeStylesheetWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>UsersMasksDTO</returns>
        UsersMasksDTO DocumentTypesManagementGetDocumentTypeUsersMasks (int? documentTypeId);

        /// <summary>
        /// This call returns all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of UsersMasksDTO</returns>
        ApiResponse<UsersMasksDTO> DocumentTypesManagementGetDocumentTypeUsersMasksWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call get specific document type folder by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>FolderTypeDTO</returns>
        FolderTypeDTO DocumentTypesManagementGetDocumentTypesFolder (int? folderTypeId);

        /// <summary>
        /// This call get specific document type folder by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        ApiResponse<FolderTypeDTO> DocumentTypesManagementGetDocumentTypesFolderWithHttpInfo (int? folderTypeId);
        /// <summary>
        /// This call retrieve Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ForwardUsersDTO</returns>
        ForwardUsersDTO DocumentTypesManagementGetForwardUsers (int? documentTypeId);

        /// <summary>
        /// This call retrieve Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of ForwardUsersDTO</returns>
        ApiResponse<ForwardUsersDTO> DocumentTypesManagementGetForwardUsersWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentTypeCompleteDTO&gt;</returns>
        List<DocumentTypeCompleteDTO> DocumentTypesManagementGetList ();

        /// <summary>
        /// This call returns all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentTypeCompleteDTO&gt;</returns>
        ApiResponse<List<DocumentTypeCompleteDTO>> DocumentTypesManagementGetListWithHttpInfo ();
        /// <summary>
        /// This call returns all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>MailOptionsDTO</returns>
        MailOptionsDTO DocumentTypesManagementGetMailOptions (int? documentTypeId);

        /// <summary>
        /// This call returns all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of MailOptionsDTO</returns>
        ApiResponse<MailOptionsDTO> DocumentTypesManagementGetMailOptionsWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all pdf options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;PdfOptionsDTO&gt;</returns>
        List<PdfOptionsDTO> DocumentTypesManagementGetPdfOptionsByDocumentTypeId (int? documentTypeId);

        /// <summary>
        /// This call returns all pdf options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;PdfOptionsDTO&gt;</returns>
        ApiResponse<List<PdfOptionsDTO>> DocumentTypesManagementGetPdfOptionsByDocumentTypeIdWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>PdfOptionsDTO</returns>
        PdfOptionsDTO DocumentTypesManagementGetPdfOptionsById (int? pdfOptionsId);

        /// <summary>
        /// This call returns pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        ApiResponse<PdfOptionsDTO> DocumentTypesManagementGetPdfOptionsByIdWithHttpInfo (int? pdfOptionsId);
        /// <summary>
        /// This call returns automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>AutomaticReferenceDTO</returns>
        AutomaticReferenceDTO DocumentTypesManagementGetReferencesById (int? automaticReferenceId);

        /// <summary>
        /// This call returns automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        ApiResponse<AutomaticReferenceDTO> DocumentTypesManagementGetReferencesByIdWithHttpInfo (int? automaticReferenceId);
        /// <summary>
        /// This call returns all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>UniquenessRulesDTO</returns>
        UniquenessRulesDTO DocumentTypesManagementGetUniquenessRules (int? documentTypeId);

        /// <summary>
        /// This call returns all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of UniquenessRulesDTO</returns>
        ApiResponse<UniquenessRulesDTO> DocumentTypesManagementGetUniquenessRulesWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call inserts a new Docuent Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        DocumentTypeCompleteDTO DocumentTypesManagementInsert (DocumentTypeForInsertDTO documentTypeForInsert);

        /// <summary>
        /// This call inserts a new Docuent Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        ApiResponse<DocumentTypeCompleteDTO> DocumentTypesManagementInsertWithHttpInfo (DocumentTypeForInsertDTO documentTypeForInsert);
        /// <summary>
        /// This call insert automatic reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>AutomaticReferenceDTO</returns>
        AutomaticReferenceDTO DocumentTypesManagementInsertAutomaticReference (AutomaticReferenceDTO automaticReference);

        /// <summary>
        /// This call insert automatic reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        ApiResponse<AutomaticReferenceDTO> DocumentTypesManagementInsertAutomaticReferenceWithHttpInfo (AutomaticReferenceDTO automaticReference);
        /// <summary>
        /// This call insert new document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>FolderTypeDTO</returns>
        FolderTypeDTO DocumentTypesManagementInsertDocumentTypesFolders (FolderTypeDTO folderType);

        /// <summary>
        /// This call insert new document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        ApiResponse<FolderTypeDTO> DocumentTypesManagementInsertDocumentTypesFoldersWithHttpInfo (FolderTypeDTO folderType);
        /// <summary>
        /// This call insert pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>PdfOptionsDTO</returns>
        PdfOptionsDTO DocumentTypesManagementInsertPdfOptions (PdfOptionsDTO pdfOptions);

        /// <summary>
        /// This call insert pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        ApiResponse<PdfOptionsDTO> DocumentTypesManagementInsertPdfOptionsWithHttpInfo (PdfOptionsDTO pdfOptions);
        /// <summary>
        /// This call update archive options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns></returns>
        void DocumentTypesManagementSetArchiveRules (int? documentTypeId, ArchiveOptionsDTO archiveOptions);

        /// <summary>
        /// This call update archive options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetArchiveRulesWithHttpInfo (int? documentTypeId, ArchiveOptionsDTO archiveOptions);
        /// <summary>
        /// This call inserts or updates specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>ReceiptPADTO</returns>
        ReceiptPADTO DocumentTypesManagementSetDocumentTypeReceiptPA (int? documentTypeId, ReceiptPADTO receiptPA);

        /// <summary>
        /// This call inserts or updates specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>ApiResponse of ReceiptPADTO</returns>
        ApiResponse<ReceiptPADTO> DocumentTypesManagementSetDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId, ReceiptPADTO receiptPA);
        /// <summary>
        /// This call update Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns></returns>
        void DocumentTypesManagementSetDocumentTypeStylesheet (int? documentTypeId, string fileBufferId);

        /// <summary>
        /// This call update Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetDocumentTypeStylesheetWithHttpInfo (int? documentTypeId, string fileBufferId);
        /// <summary>
        /// This call update all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns></returns>
        void DocumentTypesManagementSetDocumentTypeUsersMasks (int? documentTypeId, UsersMasksDTO usersMasks);

        /// <summary>
        /// This call update all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetDocumentTypeUsersMasksWithHttpInfo (int? documentTypeId, UsersMasksDTO usersMasks);
        /// <summary>
        /// This call update all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns></returns>
        void DocumentTypesManagementSetDocumentTypesFolders (int? documentTypeId, List<FolderTypeDTO> folderTypes);

        /// <summary>
        /// This call update all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetDocumentTypesFoldersWithHttpInfo (int? documentTypeId, List<FolderTypeDTO> folderTypes);
        /// <summary>
        /// This call update Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns></returns>
        void DocumentTypesManagementSetForwardUsers (int? documentTypeId, ForwardUsersDTO forwardUsers);

        /// <summary>
        /// This call update Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetForwardUsersWithHttpInfo (int? documentTypeId, ForwardUsersDTO forwardUsers);
        /// <summary>
        /// This call update all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns></returns>
        void DocumentTypesManagementSetMailOptions (int? documentTypeId, MailOptionsDTO mailOptions);

        /// <summary>
        /// This call update all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetMailOptionsWithHttpInfo (int? documentTypeId, MailOptionsDTO mailOptions);
        /// <summary>
        /// This call insert or update pdf options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns></returns>
        void DocumentTypesManagementSetOptionsPdf (int? documentTypeId, List<PdfOptionsDTO> pdfOptions);

        /// <summary>
        /// This call insert or update pdf options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetOptionsPdfWithHttpInfo (int? documentTypeId, List<PdfOptionsDTO> pdfOptions);
        /// <summary>
        /// This call update all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns></returns>
        void DocumentTypesManagementSetUniquenessRules (int? documentTypeId, UniquenessRulesDTO uniquenessRules);

        /// <summary>
        /// This call update all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementSetUniquenessRulesWithHttpInfo (int? documentTypeId, UniquenessRulesDTO uniquenessRules);
        /// <summary>
        /// This call updates a given Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        DocumentTypeCompleteDTO DocumentTypesManagementUpdate (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate);

        /// <summary>
        /// This call updates a given Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        ApiResponse<DocumentTypeCompleteDTO> DocumentTypesManagementUpdateWithHttpInfo (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate);
        /// <summary>
        /// This call update automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>AutomaticReferenceDTO</returns>
        AutomaticReferenceDTO DocumentTypesManagementUpdateAutomaticReference (AutomaticReferenceDTO automaticReference);

        /// <summary>
        /// This call update automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        ApiResponse<AutomaticReferenceDTO> DocumentTypesManagementUpdateAutomaticReferenceWithHttpInfo (AutomaticReferenceDTO automaticReference);
        /// <summary>
        /// This call update states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns></returns>
        void DocumentTypesManagementUpdateDocumentTypeStates (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates);

        /// <summary>
        /// This call update states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypesManagementUpdateDocumentTypeStatesWithHttpInfo (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates);
        /// <summary>
        /// This call update specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>FolderTypeDTO</returns>
        FolderTypeDTO DocumentTypesManagementUpdateDocumentTypesFolders (FolderTypeDTO folderType);

        /// <summary>
        /// This call update specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        ApiResponse<FolderTypeDTO> DocumentTypesManagementUpdateDocumentTypesFoldersWithHttpInfo (FolderTypeDTO folderType);
        /// <summary>
        /// This call update pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>PdfOptionsDTO</returns>
        PdfOptionsDTO DocumentTypesManagementUpdatePdfOptions (PdfOptionsDTO pdfOptions);

        /// <summary>
        /// This call update pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        ApiResponse<PdfOptionsDTO> DocumentTypesManagementUpdatePdfOptionsWithHttpInfo (PdfOptionsDTO pdfOptions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes Document Type specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeleteAsync (int? id);

        /// <summary>
        /// This call deletes Document Type specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call delete an automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeleteAutomaticReferenceAsync (int? automaticReferenceId);

        /// <summary>
        /// This call delete an automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteAutomaticReferenceAsyncWithHttpInfo (int? automaticReferenceId);
        /// <summary>
        /// This call deletes specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypeReceiptPAAsync (int? documentTypeId);

        /// <summary>
        /// This call deletes specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call remove Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypeStylesheetAsync (int? documentTypeId);

        /// <summary>
        /// This call remove Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call delete specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypesFolderAsync (int? folderTypeId);

        /// <summary>
        /// This call delete specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypesFolderAsyncWithHttpInfo (int? folderTypeId);
        /// <summary>
        /// This call delete pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementDeletePdfOptionsAsync (int? pdfOptionsId);

        /// <summary>
        /// This call delete pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeletePdfOptionsAsyncWithHttpInfo (int? pdfOptionsId);
        /// <summary>
        /// This call returns all archive options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ArchiveOptionsForViewDTO</returns>
        System.Threading.Tasks.Task<ArchiveOptionsForViewDTO> DocumentTypesManagementGetArchiveRulesAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all archive options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (ArchiveOptionsForViewDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveOptionsForViewDTO>> DocumentTypesManagementGetArchiveRulesAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all automatic references for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;AutomaticReferenceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AutomaticReferenceDTO>> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all automatic references for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;AutomaticReferenceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutomaticReferenceDTO>>> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call gets Document Type information by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdAsync (int? id);

        /// <summary>
        /// This call gets Document Type information by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets Document Type information by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdsAsync (int? documentType, int? type2, int? type3);

        /// <summary>
        /// This call gets Document Type information by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByIdsAsyncWithHttpInfo (int? documentType, int? type2, int? type3);
        /// <summary>
        /// This call gets Document Type information by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByKeyAsync (string key);

        /// <summary>
        /// This call gets Document Type information by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// This call returns all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of List&lt;FolderTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FolderTypeDTO>> DocumentTypesManagementGetDocumentTypeFoldersAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderTypeDTO>>> DocumentTypesManagementGetDocumentTypeFoldersAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns receipt PA by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ReceiptPADTO</returns>
        System.Threading.Tasks.Task<ReceiptPADTO> DocumentTypesManagementGetDocumentTypeReceiptPAAsync (int? documentTypeId);

        /// <summary>
        /// This call returns receipt PA by a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (ReceiptPADTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptPADTO>> DocumentTypesManagementGetDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all receipts PA for all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ReceiptPADTO&gt;</returns>
        System.Threading.Tasks.Task<List<ReceiptPADTO>> DocumentTypesManagementGetDocumentTypeReceiptPAListAsync ();

        /// <summary>
        /// This call returns all receipts PA for all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ReceiptPADTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReceiptPADTO>>> DocumentTypesManagementGetDocumentTypeReceiptPAListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;DocumentTypeStateDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeStateDTO>> DocumentTypesManagementGetDocumentTypeStatesAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeStateDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeStateDTO>>> DocumentTypesManagementGetDocumentTypeStatesAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call get Document type stylesheet binary file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentTypesManagementGetDocumentTypeStylesheetAsync (int? documentTypeId);

        /// <summary>
        /// This call get Document type stylesheet binary file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTypesManagementGetDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of UsersMasksDTO</returns>
        System.Threading.Tasks.Task<UsersMasksDTO> DocumentTypesManagementGetDocumentTypeUsersMasksAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (UsersMasksDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersMasksDTO>> DocumentTypesManagementGetDocumentTypeUsersMasksAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call get specific document type folder by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>Task of FolderTypeDTO</returns>
        System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementGetDocumentTypesFolderAsync (int? folderTypeId);

        /// <summary>
        /// This call get specific document type folder by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementGetDocumentTypesFolderAsyncWithHttpInfo (int? folderTypeId);
        /// <summary>
        /// This call retrieve Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ForwardUsersDTO</returns>
        System.Threading.Tasks.Task<ForwardUsersDTO> DocumentTypesManagementGetForwardUsersAsync (int? documentTypeId);

        /// <summary>
        /// This call retrieve Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (ForwardUsersDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForwardUsersDTO>> DocumentTypesManagementGetForwardUsersAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentTypeCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeCompleteDTO>> DocumentTypesManagementGetListAsync ();

        /// <summary>
        /// This call returns all document types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeCompleteDTO>>> DocumentTypesManagementGetListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of MailOptionsDTO</returns>
        System.Threading.Tasks.Task<MailOptionsDTO> DocumentTypesManagementGetMailOptionsAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (MailOptionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailOptionsDTO>> DocumentTypesManagementGetMailOptionsAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns all pdf options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;PdfOptionsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PdfOptionsDTO>> DocumentTypesManagementGetPdfOptionsByDocumentTypeIdAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all pdf options for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;PdfOptionsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PdfOptionsDTO>>> DocumentTypesManagementGetPdfOptionsByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call returns pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementGetPdfOptionsByIdAsync (int? pdfOptionsId);

        /// <summary>
        /// This call returns pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementGetPdfOptionsByIdAsyncWithHttpInfo (int? pdfOptionsId);
        /// <summary>
        /// This call returns automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementGetReferencesByIdAsync (int? automaticReferenceId);

        /// <summary>
        /// This call returns automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementGetReferencesByIdAsyncWithHttpInfo (int? automaticReferenceId);
        /// <summary>
        /// This call returns all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of UniquenessRulesDTO</returns>
        System.Threading.Tasks.Task<UniquenessRulesDTO> DocumentTypesManagementGetUniquenessRulesAsync (int? documentTypeId);

        /// <summary>
        /// This call returns all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (UniquenessRulesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UniquenessRulesDTO>> DocumentTypesManagementGetUniquenessRulesAsyncWithHttpInfo (int? documentTypeId);
        /// <summary>
        /// This call inserts a new Docuent Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementInsertAsync (DocumentTypeForInsertDTO documentTypeForInsert);

        /// <summary>
        /// This call inserts a new Docuent Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementInsertAsyncWithHttpInfo (DocumentTypeForInsertDTO documentTypeForInsert);
        /// <summary>
        /// This call insert automatic reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementInsertAutomaticReferenceAsync (AutomaticReferenceDTO automaticReference);

        /// <summary>
        /// This call insert automatic reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementInsertAutomaticReferenceAsyncWithHttpInfo (AutomaticReferenceDTO automaticReference);
        /// <summary>
        /// This call insert new document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>Task of FolderTypeDTO</returns>
        System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementInsertDocumentTypesFoldersAsync (FolderTypeDTO folderType);

        /// <summary>
        /// This call insert new document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementInsertDocumentTypesFoldersAsyncWithHttpInfo (FolderTypeDTO folderType);
        /// <summary>
        /// This call insert pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementInsertPdfOptionsAsync (PdfOptionsDTO pdfOptions);

        /// <summary>
        /// This call insert pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementInsertPdfOptionsAsyncWithHttpInfo (PdfOptionsDTO pdfOptions);
        /// <summary>
        /// This call update archive options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetArchiveRulesAsync (int? documentTypeId, ArchiveOptionsDTO archiveOptions);

        /// <summary>
        /// This call update archive options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetArchiveRulesAsyncWithHttpInfo (int? documentTypeId, ArchiveOptionsDTO archiveOptions);
        /// <summary>
        /// This call inserts or updates specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>Task of ReceiptPADTO</returns>
        System.Threading.Tasks.Task<ReceiptPADTO> DocumentTypesManagementSetDocumentTypeReceiptPAAsync (int? documentTypeId, ReceiptPADTO receiptPA);

        /// <summary>
        /// This call inserts or updates specific receipt PA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>Task of ApiResponse (ReceiptPADTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptPADTO>> DocumentTypesManagementSetDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId, ReceiptPADTO receiptPA);
        /// <summary>
        /// This call update Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypeStylesheetAsync (int? documentTypeId, string fileBufferId);

        /// <summary>
        /// This call update Document type stylesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId, string fileBufferId);
        /// <summary>
        /// This call update all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypeUsersMasksAsync (int? documentTypeId, UsersMasksDTO usersMasks);

        /// <summary>
        /// This call update all document type users masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypeUsersMasksAsyncWithHttpInfo (int? documentTypeId, UsersMasksDTO usersMasks);
        /// <summary>
        /// This call update all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypesFoldersAsync (int? documentTypeId, List<FolderTypeDTO> folderTypes);

        /// <summary>
        /// This call update all document type folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypesFoldersAsyncWithHttpInfo (int? documentTypeId, List<FolderTypeDTO> folderTypes);
        /// <summary>
        /// This call update Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetForwardUsersAsync (int? documentTypeId, ForwardUsersDTO forwardUsers);

        /// <summary>
        /// This call update Document type forward users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetForwardUsersAsyncWithHttpInfo (int? documentTypeId, ForwardUsersDTO forwardUsers);
        /// <summary>
        /// This call update all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetMailOptionsAsync (int? documentTypeId, MailOptionsDTO mailOptions);

        /// <summary>
        /// This call update all mail settings for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetMailOptionsAsyncWithHttpInfo (int? documentTypeId, MailOptionsDTO mailOptions);
        /// <summary>
        /// This call insert or update pdf options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetOptionsPdfAsync (int? documentTypeId, List<PdfOptionsDTO> pdfOptions);

        /// <summary>
        /// This call insert or update pdf options for a specific document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetOptionsPdfAsyncWithHttpInfo (int? documentTypeId, List<PdfOptionsDTO> pdfOptions);
        /// <summary>
        /// This call update all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementSetUniquenessRulesAsync (int? documentTypeId, UniquenessRulesDTO uniquenessRules);

        /// <summary>
        /// This call update all uniqueness rules for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetUniquenessRulesAsyncWithHttpInfo (int? documentTypeId, UniquenessRulesDTO uniquenessRules);
        /// <summary>
        /// This call updates a given Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementUpdateAsync (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate);

        /// <summary>
        /// This call updates a given Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementUpdateAsyncWithHttpInfo (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate);
        /// <summary>
        /// This call update automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementUpdateAutomaticReferenceAsync (AutomaticReferenceDTO automaticReference);

        /// <summary>
        /// This call update automatic reference by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementUpdateAutomaticReferenceAsyncWithHttpInfo (AutomaticReferenceDTO automaticReference);
        /// <summary>
        /// This call update states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypesManagementUpdateDocumentTypeStatesAsync (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates);

        /// <summary>
        /// This call update states for a document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementUpdateDocumentTypeStatesAsyncWithHttpInfo (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates);
        /// <summary>
        /// This call update specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>Task of FolderTypeDTO</returns>
        System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementUpdateDocumentTypesFoldersAsync (FolderTypeDTO folderType);

        /// <summary>
        /// This call update specific document type folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementUpdateDocumentTypesFoldersAsyncWithHttpInfo (FolderTypeDTO folderType);
        /// <summary>
        /// This call update pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementUpdatePdfOptionsAsync (PdfOptionsDTO pdfOptions);

        /// <summary>
        /// This call update pdf options by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementUpdatePdfOptionsAsyncWithHttpInfo (PdfOptionsDTO pdfOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentTypesManagementApi : IDocumentTypesManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentTypesManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentTypesManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes Document Type specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        public void DocumentTypesManagementDelete (int? id)
        {
             DocumentTypesManagementDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes Document Type specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementDelete");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes Document Type specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeleteAsync (int? id)
        {
             await DocumentTypesManagementDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes Document Type specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementDelete");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete an automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns></returns>
        public void DocumentTypesManagementDeleteAutomaticReference (int? automaticReferenceId)
        {
             DocumentTypesManagementDeleteAutomaticReferenceWithHttpInfo(automaticReferenceId);
        }

        /// <summary>
        /// This call delete an automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeleteAutomaticReferenceWithHttpInfo (int? automaticReferenceId)
        {
            // verify the required parameter 'automaticReferenceId' is set
            if (automaticReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'automaticReferenceId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/{automaticReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReferenceId != null) localVarPathParams.Add("automaticReferenceId", this.Configuration.ApiClient.ParameterToString(automaticReferenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete an automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeleteAutomaticReferenceAsync (int? automaticReferenceId)
        {
             await DocumentTypesManagementDeleteAutomaticReferenceAsyncWithHttpInfo(automaticReferenceId);

        }

        /// <summary>
        /// This call delete an automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId">Automatic reference identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteAutomaticReferenceAsyncWithHttpInfo (int? automaticReferenceId)
        {
            // verify the required parameter 'automaticReferenceId' is set
            if (automaticReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'automaticReferenceId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/{automaticReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReferenceId != null) localVarPathParams.Add("automaticReferenceId", this.Configuration.ApiClient.ParameterToString(automaticReferenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns></returns>
        public void DocumentTypesManagementDeleteDocumentTypeReceiptPA (int? documentTypeId)
        {
             DocumentTypesManagementDeleteDocumentTypeReceiptPAWithHttpInfo(documentTypeId);
        }

        /// <summary>
        /// This call deletes specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypeReceiptPAAsync (int? documentTypeId)
        {
             await DocumentTypesManagementDeleteDocumentTypeReceiptPAAsyncWithHttpInfo(documentTypeId);

        }

        /// <summary>
        /// This call deletes specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call remove Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns></returns>
        public void DocumentTypesManagementDeleteDocumentTypeStylesheet (int? documentTypeId)
        {
             DocumentTypesManagementDeleteDocumentTypeStylesheetWithHttpInfo(documentTypeId);
        }

        /// <summary>
        /// This call remove Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypeStylesheetWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call remove Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypeStylesheetAsync (int? documentTypeId)
        {
             await DocumentTypesManagementDeleteDocumentTypeStylesheetAsyncWithHttpInfo(documentTypeId);

        }

        /// <summary>
        /// This call remove Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns></returns>
        public void DocumentTypesManagementDeleteDocumentTypesFolder (int? folderTypeId)
        {
             DocumentTypesManagementDeleteDocumentTypesFolderWithHttpInfo(folderTypeId);
        }

        /// <summary>
        /// This call delete specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeleteDocumentTypesFolderWithHttpInfo (int? folderTypeId)
        {
            // verify the required parameter 'folderTypeId' is set
            if (folderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'folderTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypesFolder");

            var localVarPath = "/api/management/DocumentTypes/Folders/{folderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderTypeId != null) localVarPathParams.Add("folderTypeId", this.Configuration.ApiClient.ParameterToString(folderTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypesFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeleteDocumentTypesFolderAsync (int? folderTypeId)
        {
             await DocumentTypesManagementDeleteDocumentTypesFolderAsyncWithHttpInfo(folderTypeId);

        }

        /// <summary>
        /// This call delete specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeleteDocumentTypesFolderAsyncWithHttpInfo (int? folderTypeId)
        {
            // verify the required parameter 'folderTypeId' is set
            if (folderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'folderTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeleteDocumentTypesFolder");

            var localVarPath = "/api/management/DocumentTypes/Folders/{folderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderTypeId != null) localVarPathParams.Add("folderTypeId", this.Configuration.ApiClient.ParameterToString(folderTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeleteDocumentTypesFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns></returns>
        public void DocumentTypesManagementDeletePdfOptions (int? pdfOptionsId)
        {
             DocumentTypesManagementDeletePdfOptionsWithHttpInfo(pdfOptionsId);
        }

        /// <summary>
        /// This call delete pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementDeletePdfOptionsWithHttpInfo (int? pdfOptionsId)
        {
            // verify the required parameter 'pdfOptionsId' is set
            if (pdfOptionsId == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptionsId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeletePdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions/{pdfOptionsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptionsId != null) localVarPathParams.Add("pdfOptionsId", this.Configuration.ApiClient.ParameterToString(pdfOptionsId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeletePdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call delete pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementDeletePdfOptionsAsync (int? pdfOptionsId)
        {
             await DocumentTypesManagementDeletePdfOptionsAsyncWithHttpInfo(pdfOptionsId);

        }

        /// <summary>
        /// This call delete pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementDeletePdfOptionsAsyncWithHttpInfo (int? pdfOptionsId)
        {
            // verify the required parameter 'pdfOptionsId' is set
            if (pdfOptionsId == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptionsId' when calling DocumentTypesManagementApi->DocumentTypesManagementDeletePdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions/{pdfOptionsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptionsId != null) localVarPathParams.Add("pdfOptionsId", this.Configuration.ApiClient.ParameterToString(pdfOptionsId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementDeletePdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all archive options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ArchiveOptionsForViewDTO</returns>
        public ArchiveOptionsForViewDTO DocumentTypesManagementGetArchiveRules (int? documentTypeId)
        {
             ApiResponse<ArchiveOptionsForViewDTO> localVarResponse = DocumentTypesManagementGetArchiveRulesWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all archive options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of ArchiveOptionsForViewDTO</returns>
        public ApiResponse< ArchiveOptionsForViewDTO > DocumentTypesManagementGetArchiveRulesWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetArchiveRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetArchiveRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArchiveOptionsForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArchiveOptionsForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArchiveOptionsForViewDTO)));
        }

        /// <summary>
        /// This call returns all archive options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ArchiveOptionsForViewDTO</returns>
        public async System.Threading.Tasks.Task<ArchiveOptionsForViewDTO> DocumentTypesManagementGetArchiveRulesAsync (int? documentTypeId)
        {
             ApiResponse<ArchiveOptionsForViewDTO> localVarResponse = await DocumentTypesManagementGetArchiveRulesAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all archive options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (ArchiveOptionsForViewDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArchiveOptionsForViewDTO>> DocumentTypesManagementGetArchiveRulesAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetArchiveRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetArchiveRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArchiveOptionsForViewDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArchiveOptionsForViewDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArchiveOptionsForViewDTO)));
        }

        /// <summary>
        /// This call returns all automatic references for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;AutomaticReferenceDTO&gt;</returns>
        public List<AutomaticReferenceDTO> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId (int? documentTypeId)
        {
             ApiResponse<List<AutomaticReferenceDTO>> localVarResponse = DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all automatic references for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;AutomaticReferenceDTO&gt;</returns>
        public ApiResponse< List<AutomaticReferenceDTO> > DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/ByDocumentTypeId/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomaticReferenceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AutomaticReferenceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomaticReferenceDTO>)));
        }

        /// <summary>
        /// This call returns all automatic references for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;AutomaticReferenceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutomaticReferenceDTO>> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdAsync (int? documentTypeId)
        {
             ApiResponse<List<AutomaticReferenceDTO>> localVarResponse = await DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all automatic references for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;AutomaticReferenceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AutomaticReferenceDTO>>> DocumentTypesManagementGetAutomaticReferencesByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/ByDocumentTypeId/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetAutomaticReferencesByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomaticReferenceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AutomaticReferenceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomaticReferenceDTO>)));
        }

        /// <summary>
        /// This call gets Document Type information by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        public DocumentTypeCompleteDTO DocumentTypesManagementGetById (int? id)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = DocumentTypesManagementGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets Document Type information by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        public ApiResponse< DocumentTypeCompleteDTO > DocumentTypesManagementGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementGetById");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call gets Document Type information by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdAsync (int? id)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = await DocumentTypesManagementGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets Document Type information by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementGetById");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call gets Document Type information by ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        public DocumentTypeCompleteDTO DocumentTypesManagementGetByIds (int? documentType, int? type2, int? type3)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = DocumentTypesManagementGetByIdsWithHttpInfo(documentType, type2, type3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets Document Type information by ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        public ApiResponse< DocumentTypeCompleteDTO > DocumentTypesManagementGetByIdsWithHttpInfo (int? documentType, int? type2, int? type3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");
            // verify the required parameter 'type2' is set
            if (type2 == null)
                throw new ApiException(400, "Missing required parameter 'type2' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");
            // verify the required parameter 'type3' is set
            if (type3 == null)
                throw new ApiException(400, "Missing required parameter 'type3' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");

            var localVarPath = "/api/management/DocumentTypes/byids/{documentType}/{type2}/{type3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (type2 != null) localVarPathParams.Add("type2", this.Configuration.ApiClient.ParameterToString(type2)); // path parameter
            if (type3 != null) localVarPathParams.Add("type3", this.Configuration.ApiClient.ParameterToString(type3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call gets Document Type information by ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByIdsAsync (int? documentType, int? type2, int? type3)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = await DocumentTypesManagementGetByIdsAsyncWithHttpInfo(documentType, type2, type3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets Document Type information by ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentType">First level document Type Identifier</param>
        /// <param name="type2">Second level document Type Identifier</param>
        /// <param name="type3">Third level document Type Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByIdsAsyncWithHttpInfo (int? documentType, int? type2, int? type3)
        {
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");
            // verify the required parameter 'type2' is set
            if (type2 == null)
                throw new ApiException(400, "Missing required parameter 'type2' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");
            // verify the required parameter 'type3' is set
            if (type3 == null)
                throw new ApiException(400, "Missing required parameter 'type3' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByIds");

            var localVarPath = "/api/management/DocumentTypes/byids/{documentType}/{type2}/{type3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (type2 != null) localVarPathParams.Add("type2", this.Configuration.ApiClient.ParameterToString(type2)); // path parameter
            if (type3 != null) localVarPathParams.Add("type3", this.Configuration.ApiClient.ParameterToString(type3)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call gets Document Type information by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        public DocumentTypeCompleteDTO DocumentTypesManagementGetByKey (string key)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = DocumentTypesManagementGetByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets Document Type information by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        public ApiResponse< DocumentTypeCompleteDTO > DocumentTypesManagementGetByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByKey");

            var localVarPath = "/api/management/DocumentTypes/byKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call gets Document Type information by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementGetByKeyAsync (string key)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = await DocumentTypesManagementGetByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets Document Type information by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Identifier</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementGetByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DocumentTypesManagementApi->DocumentTypesManagementGetByKey");

            var localVarPath = "/api/management/DocumentTypes/byKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call returns all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>List&lt;FolderTypeDTO&gt;</returns>
        public List<FolderTypeDTO> DocumentTypesManagementGetDocumentTypeFolders (int? documentTypeId)
        {
             ApiResponse<List<FolderTypeDTO>> localVarResponse = DocumentTypesManagementGetDocumentTypeFoldersWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of List&lt;FolderTypeDTO&gt;</returns>
        public ApiResponse< List<FolderTypeDTO> > DocumentTypesManagementGetDocumentTypeFoldersWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeFolders");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderTypeDTO>)));
        }

        /// <summary>
        /// This call returns all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of List&lt;FolderTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderTypeDTO>> DocumentTypesManagementGetDocumentTypeFoldersAsync (int? documentTypeId)
        {
             ApiResponse<List<FolderTypeDTO>> localVarResponse = await DocumentTypesManagementGetDocumentTypeFoldersAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FolderTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderTypeDTO>>> DocumentTypesManagementGetDocumentTypeFoldersAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeFolders");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderTypeDTO>)));
        }

        /// <summary>
        /// This call returns receipt PA by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ReceiptPADTO</returns>
        public ReceiptPADTO DocumentTypesManagementGetDocumentTypeReceiptPA (int? documentTypeId)
        {
             ApiResponse<ReceiptPADTO> localVarResponse = DocumentTypesManagementGetDocumentTypeReceiptPAWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns receipt PA by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of ReceiptPADTO</returns>
        public ApiResponse< ReceiptPADTO > DocumentTypesManagementGetDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptPADTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptPADTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptPADTO)));
        }

        /// <summary>
        /// This call returns receipt PA by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ReceiptPADTO</returns>
        public async System.Threading.Tasks.Task<ReceiptPADTO> DocumentTypesManagementGetDocumentTypeReceiptPAAsync (int? documentTypeId)
        {
             ApiResponse<ReceiptPADTO> localVarResponse = await DocumentTypesManagementGetDocumentTypeReceiptPAAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns receipt PA by a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (ReceiptPADTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceiptPADTO>> DocumentTypesManagementGetDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptPADTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptPADTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptPADTO)));
        }

        /// <summary>
        /// This call returns all receipts PA for all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReceiptPADTO&gt;</returns>
        public List<ReceiptPADTO> DocumentTypesManagementGetDocumentTypeReceiptPAList ()
        {
             ApiResponse<List<ReceiptPADTO>> localVarResponse = DocumentTypesManagementGetDocumentTypeReceiptPAListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all receipts PA for all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReceiptPADTO&gt;</returns>
        public ApiResponse< List<ReceiptPADTO> > DocumentTypesManagementGetDocumentTypeReceiptPAListWithHttpInfo ()
        {

            var localVarPath = "/api/management/DocumentTypes/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeReceiptPAList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReceiptPADTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReceiptPADTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReceiptPADTO>)));
        }

        /// <summary>
        /// This call returns all receipts PA for all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ReceiptPADTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReceiptPADTO>> DocumentTypesManagementGetDocumentTypeReceiptPAListAsync ()
        {
             ApiResponse<List<ReceiptPADTO>> localVarResponse = await DocumentTypesManagementGetDocumentTypeReceiptPAListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all receipts PA for all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ReceiptPADTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReceiptPADTO>>> DocumentTypesManagementGetDocumentTypeReceiptPAListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DocumentTypes/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeReceiptPAList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReceiptPADTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReceiptPADTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReceiptPADTO>)));
        }

        /// <summary>
        /// This call returns all states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;DocumentTypeStateDTO&gt;</returns>
        public List<DocumentTypeStateDTO> DocumentTypesManagementGetDocumentTypeStates (int? documentTypeId)
        {
             ApiResponse<List<DocumentTypeStateDTO>> localVarResponse = DocumentTypesManagementGetDocumentTypeStatesWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeStateDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeStateDTO> > DocumentTypesManagementGetDocumentTypeStatesWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeStates");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeStateDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeStateDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeStateDTO>)));
        }

        /// <summary>
        /// This call returns all states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;DocumentTypeStateDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeStateDTO>> DocumentTypesManagementGetDocumentTypeStatesAsync (int? documentTypeId)
        {
             ApiResponse<List<DocumentTypeStateDTO>> localVarResponse = await DocumentTypesManagementGetDocumentTypeStatesAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeStateDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeStateDTO>>> DocumentTypesManagementGetDocumentTypeStatesAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeStates");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeStateDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeStateDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeStateDTO>)));
        }

        /// <summary>
        /// This call get Document type stylesheet binary file 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentTypesManagementGetDocumentTypeStylesheet (int? documentTypeId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentTypesManagementGetDocumentTypeStylesheetWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call get Document type stylesheet binary file 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentTypesManagementGetDocumentTypeStylesheetWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call get Document type stylesheet binary file 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentTypesManagementGetDocumentTypeStylesheetAsync (int? documentTypeId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentTypesManagementGetDocumentTypeStylesheetAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call get Document type stylesheet binary file 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentTypesManagementGetDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>UsersMasksDTO</returns>
        public UsersMasksDTO DocumentTypesManagementGetDocumentTypeUsersMasks (int? documentTypeId)
        {
             ApiResponse<UsersMasksDTO> localVarResponse = DocumentTypesManagementGetDocumentTypeUsersMasksWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of UsersMasksDTO</returns>
        public ApiResponse< UsersMasksDTO > DocumentTypesManagementGetDocumentTypeUsersMasksWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeUsersMasks");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UsersMasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeUsersMasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersMasksDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersMasksDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersMasksDTO)));
        }

        /// <summary>
        /// This call returns all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of UsersMasksDTO</returns>
        public async System.Threading.Tasks.Task<UsersMasksDTO> DocumentTypesManagementGetDocumentTypeUsersMasksAsync (int? documentTypeId)
        {
             ApiResponse<UsersMasksDTO> localVarResponse = await DocumentTypesManagementGetDocumentTypeUsersMasksAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (UsersMasksDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersMasksDTO>> DocumentTypesManagementGetDocumentTypeUsersMasksAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypeUsersMasks");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UsersMasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypeUsersMasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersMasksDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersMasksDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersMasksDTO)));
        }

        /// <summary>
        /// This call get specific document type folder by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>FolderTypeDTO</returns>
        public FolderTypeDTO DocumentTypesManagementGetDocumentTypesFolder (int? folderTypeId)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = DocumentTypesManagementGetDocumentTypesFolderWithHttpInfo(folderTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call get specific document type folder by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        public ApiResponse< FolderTypeDTO > DocumentTypesManagementGetDocumentTypesFolderWithHttpInfo (int? folderTypeId)
        {
            // verify the required parameter 'folderTypeId' is set
            if (folderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'folderTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypesFolder");

            var localVarPath = "/api/management/DocumentTypes/Folders/{folderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderTypeId != null) localVarPathParams.Add("folderTypeId", this.Configuration.ApiClient.ParameterToString(folderTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypesFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call get specific document type folder by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>Task of FolderTypeDTO</returns>
        public async System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementGetDocumentTypesFolderAsync (int? folderTypeId)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = await DocumentTypesManagementGetDocumentTypesFolderAsyncWithHttpInfo(folderTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call get specific document type folder by its identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderTypeId">Folder type Identifier</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementGetDocumentTypesFolderAsyncWithHttpInfo (int? folderTypeId)
        {
            // verify the required parameter 'folderTypeId' is set
            if (folderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'folderTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetDocumentTypesFolder");

            var localVarPath = "/api/management/DocumentTypes/Folders/{folderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderTypeId != null) localVarPathParams.Add("folderTypeId", this.Configuration.ApiClient.ParameterToString(folderTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetDocumentTypesFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call retrieve Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ForwardUsersDTO</returns>
        public ForwardUsersDTO DocumentTypesManagementGetForwardUsers (int? documentTypeId)
        {
             ApiResponse<ForwardUsersDTO> localVarResponse = DocumentTypesManagementGetForwardUsersWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>ApiResponse of ForwardUsersDTO</returns>
        public ApiResponse< ForwardUsersDTO > DocumentTypesManagementGetForwardUsersWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetForwardUsers");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ForwardUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetForwardUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardUsersDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForwardUsersDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardUsersDTO)));
        }

        /// <summary>
        /// This call retrieve Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ForwardUsersDTO</returns>
        public async System.Threading.Tasks.Task<ForwardUsersDTO> DocumentTypesManagementGetForwardUsersAsync (int? documentTypeId)
        {
             ApiResponse<ForwardUsersDTO> localVarResponse = await DocumentTypesManagementGetForwardUsersAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <returns>Task of ApiResponse (ForwardUsersDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForwardUsersDTO>> DocumentTypesManagementGetForwardUsersAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetForwardUsers");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ForwardUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetForwardUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForwardUsersDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForwardUsersDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForwardUsersDTO)));
        }

        /// <summary>
        /// This call returns all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentTypeCompleteDTO&gt;</returns>
        public List<DocumentTypeCompleteDTO> DocumentTypesManagementGetList ()
        {
             ApiResponse<List<DocumentTypeCompleteDTO>> localVarResponse = DocumentTypesManagementGetListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentTypeCompleteDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeCompleteDTO> > DocumentTypesManagementGetListWithHttpInfo ()
        {

            var localVarPath = "/api/management/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentTypeCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeCompleteDTO>> DocumentTypesManagementGetListAsync ()
        {
             ApiResponse<List<DocumentTypeCompleteDTO>> localVarResponse = await DocumentTypesManagementGetListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all document types 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeCompleteDTO>>> DocumentTypesManagementGetListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>MailOptionsDTO</returns>
        public MailOptionsDTO DocumentTypesManagementGetMailOptions (int? documentTypeId)
        {
             ApiResponse<MailOptionsDTO> localVarResponse = DocumentTypesManagementGetMailOptionsWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of MailOptionsDTO</returns>
        public ApiResponse< MailOptionsDTO > DocumentTypesManagementGetMailOptionsWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetMailOptions");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/MailOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetMailOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailOptionsDTO)));
        }

        /// <summary>
        /// This call returns all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of MailOptionsDTO</returns>
        public async System.Threading.Tasks.Task<MailOptionsDTO> DocumentTypesManagementGetMailOptionsAsync (int? documentTypeId)
        {
             ApiResponse<MailOptionsDTO> localVarResponse = await DocumentTypesManagementGetMailOptionsAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (MailOptionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailOptionsDTO>> DocumentTypesManagementGetMailOptionsAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetMailOptions");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/MailOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetMailOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailOptionsDTO)));
        }

        /// <summary>
        /// This call returns all pdf options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>List&lt;PdfOptionsDTO&gt;</returns>
        public List<PdfOptionsDTO> DocumentTypesManagementGetPdfOptionsByDocumentTypeId (int? documentTypeId)
        {
             ApiResponse<List<PdfOptionsDTO>> localVarResponse = DocumentTypesManagementGetPdfOptionsByDocumentTypeIdWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all pdf options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of List&lt;PdfOptionsDTO&gt;</returns>
        public ApiResponse< List<PdfOptionsDTO> > DocumentTypesManagementGetPdfOptionsByDocumentTypeIdWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetPdfOptionsByDocumentTypeId");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetPdfOptionsByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PdfOptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PdfOptionsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PdfOptionsDTO>)));
        }

        /// <summary>
        /// This call returns all pdf options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of List&lt;PdfOptionsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PdfOptionsDTO>> DocumentTypesManagementGetPdfOptionsByDocumentTypeIdAsync (int? documentTypeId)
        {
             ApiResponse<List<PdfOptionsDTO>> localVarResponse = await DocumentTypesManagementGetPdfOptionsByDocumentTypeIdAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all pdf options for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (List&lt;PdfOptionsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PdfOptionsDTO>>> DocumentTypesManagementGetPdfOptionsByDocumentTypeIdAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetPdfOptionsByDocumentTypeId");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetPdfOptionsByDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PdfOptionsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PdfOptionsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PdfOptionsDTO>)));
        }

        /// <summary>
        /// This call returns pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>PdfOptionsDTO</returns>
        public PdfOptionsDTO DocumentTypesManagementGetPdfOptionsById (int? pdfOptionsId)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = DocumentTypesManagementGetPdfOptionsByIdWithHttpInfo(pdfOptionsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        public ApiResponse< PdfOptionsDTO > DocumentTypesManagementGetPdfOptionsByIdWithHttpInfo (int? pdfOptionsId)
        {
            // verify the required parameter 'pdfOptionsId' is set
            if (pdfOptionsId == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptionsId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetPdfOptionsById");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions/{pdfOptionsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptionsId != null) localVarPathParams.Add("pdfOptionsId", this.Configuration.ApiClient.ParameterToString(pdfOptionsId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetPdfOptionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

        /// <summary>
        /// This call returns pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        public async System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementGetPdfOptionsByIdAsync (int? pdfOptionsId)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = await DocumentTypesManagementGetPdfOptionsByIdAsyncWithHttpInfo(pdfOptionsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptionsId">Pdf options id</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementGetPdfOptionsByIdAsyncWithHttpInfo (int? pdfOptionsId)
        {
            // verify the required parameter 'pdfOptionsId' is set
            if (pdfOptionsId == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptionsId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetPdfOptionsById");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions/{pdfOptionsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptionsId != null) localVarPathParams.Add("pdfOptionsId", this.Configuration.ApiClient.ParameterToString(pdfOptionsId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetPdfOptionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

        /// <summary>
        /// This call returns automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>AutomaticReferenceDTO</returns>
        public AutomaticReferenceDTO DocumentTypesManagementGetReferencesById (int? automaticReferenceId)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = DocumentTypesManagementGetReferencesByIdWithHttpInfo(automaticReferenceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        public ApiResponse< AutomaticReferenceDTO > DocumentTypesManagementGetReferencesByIdWithHttpInfo (int? automaticReferenceId)
        {
            // verify the required parameter 'automaticReferenceId' is set
            if (automaticReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'automaticReferenceId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetReferencesById");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/{AutomaticReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReferenceId != null) localVarPathParams.Add("AutomaticReferenceId", this.Configuration.ApiClient.ParameterToString(automaticReferenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetReferencesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call returns automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        public async System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementGetReferencesByIdAsync (int? automaticReferenceId)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = await DocumentTypesManagementGetReferencesByIdAsyncWithHttpInfo(automaticReferenceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReferenceId"></param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementGetReferencesByIdAsyncWithHttpInfo (int? automaticReferenceId)
        {
            // verify the required parameter 'automaticReferenceId' is set
            if (automaticReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'automaticReferenceId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetReferencesById");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences/{AutomaticReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReferenceId != null) localVarPathParams.Add("AutomaticReferenceId", this.Configuration.ApiClient.ParameterToString(automaticReferenceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetReferencesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call returns all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>UniquenessRulesDTO</returns>
        public UniquenessRulesDTO DocumentTypesManagementGetUniquenessRules (int? documentTypeId)
        {
             ApiResponse<UniquenessRulesDTO> localVarResponse = DocumentTypesManagementGetUniquenessRulesWithHttpInfo(documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>ApiResponse of UniquenessRulesDTO</returns>
        public ApiResponse< UniquenessRulesDTO > DocumentTypesManagementGetUniquenessRulesWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetUniquenessRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UniquenessRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetUniquenessRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UniquenessRulesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UniquenessRulesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UniquenessRulesDTO)));
        }

        /// <summary>
        /// This call returns all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of UniquenessRulesDTO</returns>
        public async System.Threading.Tasks.Task<UniquenessRulesDTO> DocumentTypesManagementGetUniquenessRulesAsync (int? documentTypeId)
        {
             ApiResponse<UniquenessRulesDTO> localVarResponse = await DocumentTypesManagementGetUniquenessRulesAsyncWithHttpInfo(documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <returns>Task of ApiResponse (UniquenessRulesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UniquenessRulesDTO>> DocumentTypesManagementGetUniquenessRulesAsyncWithHttpInfo (int? documentTypeId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementGetUniquenessRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UniquenessRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementGetUniquenessRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UniquenessRulesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UniquenessRulesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UniquenessRulesDTO)));
        }

        /// <summary>
        /// This call inserts a new Docuent Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        public DocumentTypeCompleteDTO DocumentTypesManagementInsert (DocumentTypeForInsertDTO documentTypeForInsert)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = DocumentTypesManagementInsertWithHttpInfo(documentTypeForInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new Docuent Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        public ApiResponse< DocumentTypeCompleteDTO > DocumentTypesManagementInsertWithHttpInfo (DocumentTypeForInsertDTO documentTypeForInsert)
        {
            // verify the required parameter 'documentTypeForInsert' is set
            if (documentTypeForInsert == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeForInsert' when calling DocumentTypesManagementApi->DocumentTypesManagementInsert");

            var localVarPath = "/api/management/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeForInsert != null && documentTypeForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new Docuent Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementInsertAsync (DocumentTypeForInsertDTO documentTypeForInsert)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = await DocumentTypesManagementInsertAsyncWithHttpInfo(documentTypeForInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new Docuent Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeForInsert">Document type information for insert</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementInsertAsyncWithHttpInfo (DocumentTypeForInsertDTO documentTypeForInsert)
        {
            // verify the required parameter 'documentTypeForInsert' is set
            if (documentTypeForInsert == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeForInsert' when calling DocumentTypesManagementApi->DocumentTypesManagementInsert");

            var localVarPath = "/api/management/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeForInsert != null && documentTypeForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call insert automatic reference 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>AutomaticReferenceDTO</returns>
        public AutomaticReferenceDTO DocumentTypesManagementInsertAutomaticReference (AutomaticReferenceDTO automaticReference)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = DocumentTypesManagementInsertAutomaticReferenceWithHttpInfo(automaticReference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert automatic reference 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        public ApiResponse< AutomaticReferenceDTO > DocumentTypesManagementInsertAutomaticReferenceWithHttpInfo (AutomaticReferenceDTO automaticReference)
        {
            // verify the required parameter 'automaticReference' is set
            if (automaticReference == null)
                throw new ApiException(400, "Missing required parameter 'automaticReference' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReference != null && automaticReference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(automaticReference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = automaticReference; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call insert automatic reference 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        public async System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementInsertAutomaticReferenceAsync (AutomaticReferenceDTO automaticReference)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = await DocumentTypesManagementInsertAutomaticReferenceAsyncWithHttpInfo(automaticReference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert automatic reference 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for insert</param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementInsertAutomaticReferenceAsyncWithHttpInfo (AutomaticReferenceDTO automaticReference)
        {
            // verify the required parameter 'automaticReference' is set
            if (automaticReference == null)
                throw new ApiException(400, "Missing required parameter 'automaticReference' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReference != null && automaticReference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(automaticReference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = automaticReference; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call insert new document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>FolderTypeDTO</returns>
        public FolderTypeDTO DocumentTypesManagementInsertDocumentTypesFolders (FolderTypeDTO folderType)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = DocumentTypesManagementInsertDocumentTypesFoldersWithHttpInfo(folderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert new document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        public ApiResponse< FolderTypeDTO > DocumentTypesManagementInsertDocumentTypesFoldersWithHttpInfo (FolderTypeDTO folderType)
        {
            // verify the required parameter 'folderType' is set
            if (folderType == null)
                throw new ApiException(400, "Missing required parameter 'folderType' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderType != null && folderType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderType; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call insert new document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>Task of FolderTypeDTO</returns>
        public async System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementInsertDocumentTypesFoldersAsync (FolderTypeDTO folderType)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = await DocumentTypesManagementInsertDocumentTypesFoldersAsyncWithHttpInfo(folderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert new document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for insert</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementInsertDocumentTypesFoldersAsyncWithHttpInfo (FolderTypeDTO folderType)
        {
            // verify the required parameter 'folderType' is set
            if (folderType == null)
                throw new ApiException(400, "Missing required parameter 'folderType' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderType != null && folderType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderType; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call insert pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>PdfOptionsDTO</returns>
        public PdfOptionsDTO DocumentTypesManagementInsertPdfOptions (PdfOptionsDTO pdfOptions)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = DocumentTypesManagementInsertPdfOptionsWithHttpInfo(pdfOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        public ApiResponse< PdfOptionsDTO > DocumentTypesManagementInsertPdfOptionsWithHttpInfo (PdfOptionsDTO pdfOptions)
        {
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertPdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertPdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

        /// <summary>
        /// This call insert pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        public async System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementInsertPdfOptionsAsync (PdfOptionsDTO pdfOptions)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = await DocumentTypesManagementInsertPdfOptionsAsyncWithHttpInfo(pdfOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for insert</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementInsertPdfOptionsAsyncWithHttpInfo (PdfOptionsDTO pdfOptions)
        {
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementInsertPdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementInsertPdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

        /// <summary>
        /// This call update archive options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetArchiveRules (int? documentTypeId, ArchiveOptionsDTO archiveOptions)
        {
             DocumentTypesManagementSetArchiveRulesWithHttpInfo(documentTypeId, archiveOptions);
        }

        /// <summary>
        /// This call update archive options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetArchiveRulesWithHttpInfo (int? documentTypeId, ArchiveOptionsDTO archiveOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetArchiveRules");
            // verify the required parameter 'archiveOptions' is set
            if (archiveOptions == null)
                throw new ApiException(400, "Missing required parameter 'archiveOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetArchiveRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (archiveOptions != null && archiveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(archiveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetArchiveRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update archive options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetArchiveRulesAsync (int? documentTypeId, ArchiveOptionsDTO archiveOptions)
        {
             await DocumentTypesManagementSetArchiveRulesAsyncWithHttpInfo(documentTypeId, archiveOptions);

        }

        /// <summary>
        /// This call update archive options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="archiveOptions">Archive options for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetArchiveRulesAsyncWithHttpInfo (int? documentTypeId, ArchiveOptionsDTO archiveOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetArchiveRules");
            // verify the required parameter 'archiveOptions' is set
            if (archiveOptions == null)
                throw new ApiException(400, "Missing required parameter 'archiveOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetArchiveRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (archiveOptions != null && archiveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(archiveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = archiveOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetArchiveRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts or updates specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>ReceiptPADTO</returns>
        public ReceiptPADTO DocumentTypesManagementSetDocumentTypeReceiptPA (int? documentTypeId, ReceiptPADTO receiptPA)
        {
             ApiResponse<ReceiptPADTO> localVarResponse = DocumentTypesManagementSetDocumentTypeReceiptPAWithHttpInfo(documentTypeId, receiptPA);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts or updates specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>ApiResponse of ReceiptPADTO</returns>
        public ApiResponse< ReceiptPADTO > DocumentTypesManagementSetDocumentTypeReceiptPAWithHttpInfo (int? documentTypeId, ReceiptPADTO receiptPA)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeReceiptPA");
            // verify the required parameter 'receiptPA' is set
            if (receiptPA == null)
                throw new ApiException(400, "Missing required parameter 'receiptPA' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (receiptPA != null && receiptPA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receiptPA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receiptPA; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptPADTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptPADTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptPADTO)));
        }

        /// <summary>
        /// This call inserts or updates specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>Task of ReceiptPADTO</returns>
        public async System.Threading.Tasks.Task<ReceiptPADTO> DocumentTypesManagementSetDocumentTypeReceiptPAAsync (int? documentTypeId, ReceiptPADTO receiptPA)
        {
             ApiResponse<ReceiptPADTO> localVarResponse = await DocumentTypesManagementSetDocumentTypeReceiptPAAsyncWithHttpInfo(documentTypeId, receiptPA);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts or updates specific receipt PA 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="receiptPA">Receipt PA</param>
        /// <returns>Task of ApiResponse (ReceiptPADTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceiptPADTO>> DocumentTypesManagementSetDocumentTypeReceiptPAAsyncWithHttpInfo (int? documentTypeId, ReceiptPADTO receiptPA)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeReceiptPA");
            // verify the required parameter 'receiptPA' is set
            if (receiptPA == null)
                throw new ApiException(400, "Missing required parameter 'receiptPA' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeReceiptPA");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ReceiptPA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (receiptPA != null && receiptPA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receiptPA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receiptPA; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeReceiptPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptPADTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptPADTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptPADTO)));
        }

        /// <summary>
        /// This call update Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetDocumentTypeStylesheet (int? documentTypeId, string fileBufferId)
        {
             DocumentTypesManagementSetDocumentTypeStylesheetWithHttpInfo(documentTypeId, fileBufferId);
        }

        /// <summary>
        /// This call update Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetDocumentTypeStylesheetWithHttpInfo (int? documentTypeId, string fileBufferId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeStylesheet");
            // verify the required parameter 'fileBufferId' is set
            if (fileBufferId == null)
                throw new ApiException(400, "Missing required parameter 'fileBufferId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet/{fileBufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (fileBufferId != null) localVarPathParams.Add("fileBufferId", this.Configuration.ApiClient.ParameterToString(fileBufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypeStylesheetAsync (int? documentTypeId, string fileBufferId)
        {
             await DocumentTypesManagementSetDocumentTypeStylesheetAsyncWithHttpInfo(documentTypeId, fileBufferId);

        }

        /// <summary>
        /// This call update Document type stylesheet 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypeStylesheetAsyncWithHttpInfo (int? documentTypeId, string fileBufferId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeStylesheet");
            // verify the required parameter 'fileBufferId' is set
            if (fileBufferId == null)
                throw new ApiException(400, "Missing required parameter 'fileBufferId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeStylesheet");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Stylesheet/{fileBufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (fileBufferId != null) localVarPathParams.Add("fileBufferId", this.Configuration.ApiClient.ParameterToString(fileBufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeStylesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetDocumentTypeUsersMasks (int? documentTypeId, UsersMasksDTO usersMasks)
        {
             DocumentTypesManagementSetDocumentTypeUsersMasksWithHttpInfo(documentTypeId, usersMasks);
        }

        /// <summary>
        /// This call update all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetDocumentTypeUsersMasksWithHttpInfo (int? documentTypeId, UsersMasksDTO usersMasks)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeUsersMasks");
            // verify the required parameter 'usersMasks' is set
            if (usersMasks == null)
                throw new ApiException(400, "Missing required parameter 'usersMasks' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeUsersMasks");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UsersMasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (usersMasks != null && usersMasks.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersMasks); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersMasks; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeUsersMasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypeUsersMasksAsync (int? documentTypeId, UsersMasksDTO usersMasks)
        {
             await DocumentTypesManagementSetDocumentTypeUsersMasksAsyncWithHttpInfo(documentTypeId, usersMasks);

        }

        /// <summary>
        /// This call update all document type users masks 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="usersMasks">Document type users masks</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypeUsersMasksAsyncWithHttpInfo (int? documentTypeId, UsersMasksDTO usersMasks)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeUsersMasks");
            // verify the required parameter 'usersMasks' is set
            if (usersMasks == null)
                throw new ApiException(400, "Missing required parameter 'usersMasks' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypeUsersMasks");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UsersMasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (usersMasks != null && usersMasks.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersMasks); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersMasks; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypeUsersMasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetDocumentTypesFolders (int? documentTypeId, List<FolderTypeDTO> folderTypes)
        {
             DocumentTypesManagementSetDocumentTypesFoldersWithHttpInfo(documentTypeId, folderTypes);
        }

        /// <summary>
        /// This call update all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetDocumentTypesFoldersWithHttpInfo (int? documentTypeId, List<FolderTypeDTO> folderTypes)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypesFolders");
            // verify the required parameter 'folderTypes' is set
            if (folderTypes == null)
                throw new ApiException(400, "Missing required parameter 'folderTypes' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (folderTypes != null && folderTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderTypes; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetDocumentTypesFoldersAsync (int? documentTypeId, List<FolderTypeDTO> folderTypes)
        {
             await DocumentTypesManagementSetDocumentTypesFoldersAsyncWithHttpInfo(documentTypeId, folderTypes);

        }

        /// <summary>
        /// This call update all document type folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="folderTypes">Document type folders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetDocumentTypesFoldersAsyncWithHttpInfo (int? documentTypeId, List<FolderTypeDTO> folderTypes)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypesFolders");
            // verify the required parameter 'folderTypes' is set
            if (folderTypes == null)
                throw new ApiException(400, "Missing required parameter 'folderTypes' when calling DocumentTypesManagementApi->DocumentTypesManagementSetDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (folderTypes != null && folderTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderTypes; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetForwardUsers (int? documentTypeId, ForwardUsersDTO forwardUsers)
        {
             DocumentTypesManagementSetForwardUsersWithHttpInfo(documentTypeId, forwardUsers);
        }

        /// <summary>
        /// This call update Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetForwardUsersWithHttpInfo (int? documentTypeId, ForwardUsersDTO forwardUsers)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetForwardUsers");
            // verify the required parameter 'forwardUsers' is set
            if (forwardUsers == null)
                throw new ApiException(400, "Missing required parameter 'forwardUsers' when calling DocumentTypesManagementApi->DocumentTypesManagementSetForwardUsers");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ForwardUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (forwardUsers != null && forwardUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardUsers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetForwardUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetForwardUsersAsync (int? documentTypeId, ForwardUsersDTO forwardUsers)
        {
             await DocumentTypesManagementSetForwardUsersAsyncWithHttpInfo(documentTypeId, forwardUsers);

        }

        /// <summary>
        /// This call update Document type forward users 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document type identifier</param>
        /// <param name="forwardUsers">Document type forward users</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetForwardUsersAsyncWithHttpInfo (int? documentTypeId, ForwardUsersDTO forwardUsers)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetForwardUsers");
            // verify the required parameter 'forwardUsers' is set
            if (forwardUsers == null)
                throw new ApiException(400, "Missing required parameter 'forwardUsers' when calling DocumentTypesManagementApi->DocumentTypesManagementSetForwardUsers");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/ForwardUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (forwardUsers != null && forwardUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardUsers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetForwardUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetMailOptions (int? documentTypeId, MailOptionsDTO mailOptions)
        {
             DocumentTypesManagementSetMailOptionsWithHttpInfo(documentTypeId, mailOptions);
        }

        /// <summary>
        /// This call update all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetMailOptionsWithHttpInfo (int? documentTypeId, MailOptionsDTO mailOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetMailOptions");
            // verify the required parameter 'mailOptions' is set
            if (mailOptions == null)
                throw new ApiException(400, "Missing required parameter 'mailOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetMailOptions");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/MailOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (mailOptions != null && mailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetMailOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetMailOptionsAsync (int? documentTypeId, MailOptionsDTO mailOptions)
        {
             await DocumentTypesManagementSetMailOptionsAsyncWithHttpInfo(documentTypeId, mailOptions);

        }

        /// <summary>
        /// This call update all mail settings for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="mailOptions">Mail settings for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetMailOptionsAsyncWithHttpInfo (int? documentTypeId, MailOptionsDTO mailOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetMailOptions");
            // verify the required parameter 'mailOptions' is set
            if (mailOptions == null)
                throw new ApiException(400, "Missing required parameter 'mailOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetMailOptions");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/MailOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (mailOptions != null && mailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetMailOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call insert or update pdf options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetOptionsPdf (int? documentTypeId, List<PdfOptionsDTO> pdfOptions)
        {
             DocumentTypesManagementSetOptionsPdfWithHttpInfo(documentTypeId, pdfOptions);
        }

        /// <summary>
        /// This call insert or update pdf options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetOptionsPdfWithHttpInfo (int? documentTypeId, List<PdfOptionsDTO> pdfOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetOptionsPdf");
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetOptionsPdf");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetOptionsPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call insert or update pdf options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetOptionsPdfAsync (int? documentTypeId, List<PdfOptionsDTO> pdfOptions)
        {
             await DocumentTypesManagementSetOptionsPdfAsyncWithHttpInfo(documentTypeId, pdfOptions);

        }

        /// <summary>
        /// This call insert or update pdf options for a specific document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="pdfOptions">Pdf options for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetOptionsPdfAsyncWithHttpInfo (int? documentTypeId, List<PdfOptionsDTO> pdfOptions)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetOptionsPdf");
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementSetOptionsPdf");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetOptionsPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns></returns>
        public void DocumentTypesManagementSetUniquenessRules (int? documentTypeId, UniquenessRulesDTO uniquenessRules)
        {
             DocumentTypesManagementSetUniquenessRulesWithHttpInfo(documentTypeId, uniquenessRules);
        }

        /// <summary>
        /// This call update all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementSetUniquenessRulesWithHttpInfo (int? documentTypeId, UniquenessRulesDTO uniquenessRules)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetUniquenessRules");
            // verify the required parameter 'uniquenessRules' is set
            if (uniquenessRules == null)
                throw new ApiException(400, "Missing required parameter 'uniquenessRules' when calling DocumentTypesManagementApi->DocumentTypesManagementSetUniquenessRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UniquenessRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (uniquenessRules != null && uniquenessRules.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uniquenessRules); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uniquenessRules; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetUniquenessRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementSetUniquenessRulesAsync (int? documentTypeId, UniquenessRulesDTO uniquenessRules)
        {
             await DocumentTypesManagementSetUniquenessRulesAsyncWithHttpInfo(documentTypeId, uniquenessRules);

        }

        /// <summary>
        /// This call update all uniqueness rules for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="uniquenessRules">Uniqueness rules for the document type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementSetUniquenessRulesAsyncWithHttpInfo (int? documentTypeId, UniquenessRulesDTO uniquenessRules)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementSetUniquenessRules");
            // verify the required parameter 'uniquenessRules' is set
            if (uniquenessRules == null)
                throw new ApiException(400, "Missing required parameter 'uniquenessRules' when calling DocumentTypesManagementApi->DocumentTypesManagementSetUniquenessRules");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/UniquenessRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (uniquenessRules != null && uniquenessRules.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uniquenessRules); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uniquenessRules; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementSetUniquenessRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a given Document Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>DocumentTypeCompleteDTO</returns>
        public DocumentTypeCompleteDTO DocumentTypesManagementUpdate (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = DocumentTypesManagementUpdateWithHttpInfo(id, documentTypeForUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a given Document Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>ApiResponse of DocumentTypeCompleteDTO</returns>
        public ApiResponse< DocumentTypeCompleteDTO > DocumentTypesManagementUpdateWithHttpInfo (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdate");
            // verify the required parameter 'documentTypeForUpdate' is set
            if (documentTypeForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeForUpdate' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdate");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentTypeForUpdate != null && documentTypeForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call updates a given Document Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>Task of DocumentTypeCompleteDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCompleteDTO> DocumentTypesManagementUpdateAsync (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate)
        {
             ApiResponse<DocumentTypeCompleteDTO> localVarResponse = await DocumentTypesManagementUpdateAsyncWithHttpInfo(id, documentTypeForUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a given Document Type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="documentTypeForUpdate">Document Type information for update</param>
        /// <returns>Task of ApiResponse (DocumentTypeCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCompleteDTO>> DocumentTypesManagementUpdateAsyncWithHttpInfo (int? id, DocumentTypeForUpdateDTO documentTypeForUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdate");
            // verify the required parameter 'documentTypeForUpdate' is set
            if (documentTypeForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeForUpdate' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdate");

            var localVarPath = "/api/management/DocumentTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentTypeForUpdate != null && documentTypeForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCompleteDTO)));
        }

        /// <summary>
        /// This call update automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>AutomaticReferenceDTO</returns>
        public AutomaticReferenceDTO DocumentTypesManagementUpdateAutomaticReference (AutomaticReferenceDTO automaticReference)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = DocumentTypesManagementUpdateAutomaticReferenceWithHttpInfo(automaticReference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call update automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>ApiResponse of AutomaticReferenceDTO</returns>
        public ApiResponse< AutomaticReferenceDTO > DocumentTypesManagementUpdateAutomaticReferenceWithHttpInfo (AutomaticReferenceDTO automaticReference)
        {
            // verify the required parameter 'automaticReference' is set
            if (automaticReference == null)
                throw new ApiException(400, "Missing required parameter 'automaticReference' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReference != null && automaticReference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(automaticReference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = automaticReference; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call update automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>Task of AutomaticReferenceDTO</returns>
        public async System.Threading.Tasks.Task<AutomaticReferenceDTO> DocumentTypesManagementUpdateAutomaticReferenceAsync (AutomaticReferenceDTO automaticReference)
        {
             ApiResponse<AutomaticReferenceDTO> localVarResponse = await DocumentTypesManagementUpdateAutomaticReferenceAsyncWithHttpInfo(automaticReference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call update automatic reference by its id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automaticReference">Automatic reference for update</param>
        /// <returns>Task of ApiResponse (AutomaticReferenceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticReferenceDTO>> DocumentTypesManagementUpdateAutomaticReferenceAsyncWithHttpInfo (AutomaticReferenceDTO automaticReference)
        {
            // verify the required parameter 'automaticReference' is set
            if (automaticReference == null)
                throw new ApiException(400, "Missing required parameter 'automaticReference' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateAutomaticReference");

            var localVarPath = "/api/management/DocumentTypes/AutomaticReferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automaticReference != null && automaticReference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(automaticReference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = automaticReference; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateAutomaticReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticReferenceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticReferenceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticReferenceDTO)));
        }

        /// <summary>
        /// This call update states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns></returns>
        public void DocumentTypesManagementUpdateDocumentTypeStates (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates)
        {
             DocumentTypesManagementUpdateDocumentTypeStatesWithHttpInfo(documentTypeId, documentTypeStates);
        }

        /// <summary>
        /// This call update states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypesManagementUpdateDocumentTypeStatesWithHttpInfo (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypeStates");
            // verify the required parameter 'documentTypeStates' is set
            if (documentTypeStates == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeStates' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypeStates");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (documentTypeStates != null && documentTypeStates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeStates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeStates; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateDocumentTypeStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypesManagementUpdateDocumentTypeStatesAsync (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates)
        {
             await DocumentTypesManagementUpdateDocumentTypeStatesAsyncWithHttpInfo(documentTypeId, documentTypeStates);

        }

        /// <summary>
        /// This call update states for a document type 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="documentTypeStates">Document Type states</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypesManagementUpdateDocumentTypeStatesAsyncWithHttpInfo (int? documentTypeId, List<DocumentTypeStateDTO> documentTypeStates)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypeStates");
            // verify the required parameter 'documentTypeStates' is set
            if (documentTypeStates == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeStates' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypeStates");

            var localVarPath = "/api/management/DocumentTypes/{documentTypeId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (documentTypeStates != null && documentTypeStates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeStates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeStates; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateDocumentTypeStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>FolderTypeDTO</returns>
        public FolderTypeDTO DocumentTypesManagementUpdateDocumentTypesFolders (FolderTypeDTO folderType)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = DocumentTypesManagementUpdateDocumentTypesFoldersWithHttpInfo(folderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call update specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>ApiResponse of FolderTypeDTO</returns>
        public ApiResponse< FolderTypeDTO > DocumentTypesManagementUpdateDocumentTypesFoldersWithHttpInfo (FolderTypeDTO folderType)
        {
            // verify the required parameter 'folderType' is set
            if (folderType == null)
                throw new ApiException(400, "Missing required parameter 'folderType' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderType != null && folderType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderType; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call update specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>Task of FolderTypeDTO</returns>
        public async System.Threading.Tasks.Task<FolderTypeDTO> DocumentTypesManagementUpdateDocumentTypesFoldersAsync (FolderTypeDTO folderType)
        {
             ApiResponse<FolderTypeDTO> localVarResponse = await DocumentTypesManagementUpdateDocumentTypesFoldersAsyncWithHttpInfo(folderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call update specific document type folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderType">Document type for update</param>
        /// <returns>Task of ApiResponse (FolderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderTypeDTO>> DocumentTypesManagementUpdateDocumentTypesFoldersAsyncWithHttpInfo (FolderTypeDTO folderType)
        {
            // verify the required parameter 'folderType' is set
            if (folderType == null)
                throw new ApiException(400, "Missing required parameter 'folderType' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdateDocumentTypesFolders");

            var localVarPath = "/api/management/DocumentTypes/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderType != null && folderType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(folderType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folderType; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdateDocumentTypesFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderTypeDTO)));
        }

        /// <summary>
        /// This call update pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>PdfOptionsDTO</returns>
        public PdfOptionsDTO DocumentTypesManagementUpdatePdfOptions (PdfOptionsDTO pdfOptions)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = DocumentTypesManagementUpdatePdfOptionsWithHttpInfo(pdfOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call update pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>ApiResponse of PdfOptionsDTO</returns>
        public ApiResponse< PdfOptionsDTO > DocumentTypesManagementUpdatePdfOptionsWithHttpInfo (PdfOptionsDTO pdfOptions)
        {
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdatePdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdatePdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

        /// <summary>
        /// This call update pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>Task of PdfOptionsDTO</returns>
        public async System.Threading.Tasks.Task<PdfOptionsDTO> DocumentTypesManagementUpdatePdfOptionsAsync (PdfOptionsDTO pdfOptions)
        {
             ApiResponse<PdfOptionsDTO> localVarResponse = await DocumentTypesManagementUpdatePdfOptionsAsyncWithHttpInfo(pdfOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call update pdf options by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfOptions">Pdf options for update</param>
        /// <returns>Task of ApiResponse (PdfOptionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfOptionsDTO>> DocumentTypesManagementUpdatePdfOptionsAsyncWithHttpInfo (PdfOptionsDTO pdfOptions)
        {
            // verify the required parameter 'pdfOptions' is set
            if (pdfOptions == null)
                throw new ApiException(400, "Missing required parameter 'pdfOptions' when calling DocumentTypesManagementApi->DocumentTypesManagementUpdatePdfOptions");

            var localVarPath = "/api/management/DocumentTypes/PdfOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfOptions != null && pdfOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypesManagementUpdatePdfOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfOptionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfOptionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfOptionsDTO)));
        }

    }
}
