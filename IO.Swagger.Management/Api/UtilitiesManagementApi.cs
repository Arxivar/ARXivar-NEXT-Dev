/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilitiesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call allows to check database connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>bool?</returns>
        bool? UtilitiesManagementCheckDbConnection (DbPropertiesDTO dbProperties);

        /// <summary>
        /// This call allows to check database connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UtilitiesManagementCheckDbConnectionWithHttpInfo (DbPropertiesDTO dbProperties);
        /// <summary>
        /// This call returns all fields for specific context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>List&lt;FieldManagementDTO&gt;</returns>
        List<FieldManagementDTO> UtilitiesManagementGetFields (int? documentTypeId, int? fieldManagementMode);

        /// <summary>
        /// This call returns all fields for specific context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>ApiResponse of List&lt;FieldManagementDTO&gt;</returns>
        ApiResponse<List<FieldManagementDTO>> UtilitiesManagementGetFieldsWithHttpInfo (int? documentTypeId, int? fieldManagementMode);
        /// <summary>
        /// This call returns all fonts supported for pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UtilitiesManagementGetOptionsPdfFonts ();

        /// <summary>
        /// This call returns all fonts supported for pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UtilitiesManagementGetOptionsPdfFontsWithHttpInfo ();
        /// <summary>
        /// This call retrieve database parameters list for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        List<SetPathDatabaseBaseDTO> UtilitiesManagementGetSetPathDatabaseInfo ();

        /// <summary>
        /// This call retrieve database parameters list for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        ApiResponse<List<SetPathDatabaseBaseDTO>> UtilitiesManagementGetSetPathDatabaseInfoWithHttpInfo ();
        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        List<SetPathFilesystemBaseDTO> UtilitiesManagementGetSetPathFilesystemInfo ();

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        ApiResponse<List<SetPathFilesystemBaseDTO>> UtilitiesManagementGetSetPathFilesystemInfoWithHttpInfo ();
        /// <summary>
        /// This call update database parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns></returns>
        void UtilitiesManagementUpdateSetPathDatabaseInfo (SetPathDatabaseForUpdateDTO databaseParams);

        /// <summary>
        /// This call update database parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UtilitiesManagementUpdateSetPathDatabaseInfoWithHttpInfo (SetPathDatabaseForUpdateDTO databaseParams);
        /// <summary>
        /// This call update filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns></returns>
        void UtilitiesManagementUpdateSetPathFilesystemInfo (SetPathFilesystemForUpdateDTO filesystemParams);

        /// <summary>
        /// This call update filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UtilitiesManagementUpdateSetPathFilesystemInfoWithHttpInfo (SetPathFilesystemForUpdateDTO filesystemParams);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call allows to check database connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UtilitiesManagementCheckDbConnectionAsync (DbPropertiesDTO dbProperties);

        /// <summary>
        /// This call allows to check database connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UtilitiesManagementCheckDbConnectionAsyncWithHttpInfo (DbPropertiesDTO dbProperties);
        /// <summary>
        /// This call returns all fields for specific context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>Task of List&lt;FieldManagementDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldManagementDTO>> UtilitiesManagementGetFieldsAsync (int? documentTypeId, int? fieldManagementMode);

        /// <summary>
        /// This call returns all fields for specific context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>Task of ApiResponse (List&lt;FieldManagementDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldManagementDTO>>> UtilitiesManagementGetFieldsAsyncWithHttpInfo (int? documentTypeId, int? fieldManagementMode);
        /// <summary>
        /// This call returns all fonts supported for pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UtilitiesManagementGetOptionsPdfFontsAsync ();

        /// <summary>
        /// This call returns all fonts supported for pdf options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UtilitiesManagementGetOptionsPdfFontsAsyncWithHttpInfo ();
        /// <summary>
        /// This call retrieve database parameters list for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SetPathDatabaseBaseDTO>> UtilitiesManagementGetSetPathDatabaseInfoAsync ();

        /// <summary>
        /// This call retrieve database parameters list for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SetPathDatabaseBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SetPathDatabaseBaseDTO>>> UtilitiesManagementGetSetPathDatabaseInfoAsyncWithHttpInfo ();
        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SetPathFilesystemBaseDTO>> UtilitiesManagementGetSetPathFilesystemInfoAsync ();

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SetPathFilesystemBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SetPathFilesystemBaseDTO>>> UtilitiesManagementGetSetPathFilesystemInfoAsyncWithHttpInfo ();
        /// <summary>
        /// This call update database parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UtilitiesManagementUpdateSetPathDatabaseInfoAsync (SetPathDatabaseForUpdateDTO databaseParams);

        /// <summary>
        /// This call update database parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UtilitiesManagementUpdateSetPathDatabaseInfoAsyncWithHttpInfo (SetPathDatabaseForUpdateDTO databaseParams);
        /// <summary>
        /// This call update filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UtilitiesManagementUpdateSetPathFilesystemInfoAsync (SetPathFilesystemForUpdateDTO filesystemParams);

        /// <summary>
        /// This call update filesystem parameters for files storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UtilitiesManagementUpdateSetPathFilesystemInfoAsyncWithHttpInfo (SetPathFilesystemForUpdateDTO filesystemParams);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtilitiesManagementApi : IUtilitiesManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilitiesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilitiesManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilitiesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilitiesManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call allows to check database connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>bool?</returns>
        public bool? UtilitiesManagementCheckDbConnection (DbPropertiesDTO dbProperties)
        {
             ApiResponse<bool?> localVarResponse = UtilitiesManagementCheckDbConnectionWithHttpInfo(dbProperties);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to check database connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UtilitiesManagementCheckDbConnectionWithHttpInfo (DbPropertiesDTO dbProperties)
        {
            // verify the required parameter 'dbProperties' is set
            if (dbProperties == null)
                throw new ApiException(400, "Missing required parameter 'dbProperties' when calling UtilitiesManagementApi->UtilitiesManagementCheckDbConnection");

            var localVarPath = "/api/management/Utilities/CheckDbConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbProperties != null && dbProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dbProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dbProperties; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementCheckDbConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows to check database connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UtilitiesManagementCheckDbConnectionAsync (DbPropertiesDTO dbProperties)
        {
             ApiResponse<bool?> localVarResponse = await UtilitiesManagementCheckDbConnectionAsyncWithHttpInfo(dbProperties);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to check database connection 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbProperties"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UtilitiesManagementCheckDbConnectionAsyncWithHttpInfo (DbPropertiesDTO dbProperties)
        {
            // verify the required parameter 'dbProperties' is set
            if (dbProperties == null)
                throw new ApiException(400, "Missing required parameter 'dbProperties' when calling UtilitiesManagementApi->UtilitiesManagementCheckDbConnection");

            var localVarPath = "/api/management/Utilities/CheckDbConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbProperties != null && dbProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dbProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dbProperties; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementCheckDbConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns all fields for specific context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>List&lt;FieldManagementDTO&gt;</returns>
        public List<FieldManagementDTO> UtilitiesManagementGetFields (int? documentTypeId, int? fieldManagementMode)
        {
             ApiResponse<List<FieldManagementDTO>> localVarResponse = UtilitiesManagementGetFieldsWithHttpInfo(documentTypeId, fieldManagementMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all fields for specific context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>ApiResponse of List&lt;FieldManagementDTO&gt;</returns>
        public ApiResponse< List<FieldManagementDTO> > UtilitiesManagementGetFieldsWithHttpInfo (int? documentTypeId, int? fieldManagementMode)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling UtilitiesManagementApi->UtilitiesManagementGetFields");
            // verify the required parameter 'fieldManagementMode' is set
            if (fieldManagementMode == null)
                throw new ApiException(400, "Missing required parameter 'fieldManagementMode' when calling UtilitiesManagementApi->UtilitiesManagementGetFields");

            var localVarPath = "/api/management/Utilities/Fields/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (fieldManagementMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldManagementMode", fieldManagementMode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldManagementDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldManagementDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldManagementDTO>)));
        }

        /// <summary>
        /// This call returns all fields for specific context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>Task of List&lt;FieldManagementDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldManagementDTO>> UtilitiesManagementGetFieldsAsync (int? documentTypeId, int? fieldManagementMode)
        {
             ApiResponse<List<FieldManagementDTO>> localVarResponse = await UtilitiesManagementGetFieldsAsyncWithHttpInfo(documentTypeId, fieldManagementMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all fields for specific context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId">Document Type system id</param>
        /// <param name="fieldManagementMode">Possible values:  0: Standard  1: UniquenessRules  2: Folders </param>
        /// <returns>Task of ApiResponse (List&lt;FieldManagementDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldManagementDTO>>> UtilitiesManagementGetFieldsAsyncWithHttpInfo (int? documentTypeId, int? fieldManagementMode)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling UtilitiesManagementApi->UtilitiesManagementGetFields");
            // verify the required parameter 'fieldManagementMode' is set
            if (fieldManagementMode == null)
                throw new ApiException(400, "Missing required parameter 'fieldManagementMode' when calling UtilitiesManagementApi->UtilitiesManagementGetFields");

            var localVarPath = "/api/management/Utilities/Fields/{documentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarPathParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // path parameter
            if (fieldManagementMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldManagementMode", fieldManagementMode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldManagementDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FieldManagementDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldManagementDTO>)));
        }

        /// <summary>
        /// This call returns all fonts supported for pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UtilitiesManagementGetOptionsPdfFonts ()
        {
             ApiResponse<List<string>> localVarResponse = UtilitiesManagementGetOptionsPdfFontsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all fonts supported for pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > UtilitiesManagementGetOptionsPdfFontsWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/PdfOptions/Fonts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetOptionsPdfFonts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns all fonts supported for pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UtilitiesManagementGetOptionsPdfFontsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await UtilitiesManagementGetOptionsPdfFontsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all fonts supported for pdf options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> UtilitiesManagementGetOptionsPdfFontsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/PdfOptions/Fonts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetOptionsPdfFonts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call retrieve database parameters list for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        public List<SetPathDatabaseBaseDTO> UtilitiesManagementGetSetPathDatabaseInfo ()
        {
             ApiResponse<List<SetPathDatabaseBaseDTO>> localVarResponse = UtilitiesManagementGetSetPathDatabaseInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve database parameters list for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        public ApiResponse< List<SetPathDatabaseBaseDTO> > UtilitiesManagementGetSetPathDatabaseInfoWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/SetPath/Database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetSetPathDatabaseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SetPathDatabaseBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SetPathDatabaseBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SetPathDatabaseBaseDTO>)));
        }

        /// <summary>
        /// This call retrieve database parameters list for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SetPathDatabaseBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SetPathDatabaseBaseDTO>> UtilitiesManagementGetSetPathDatabaseInfoAsync ()
        {
             ApiResponse<List<SetPathDatabaseBaseDTO>> localVarResponse = await UtilitiesManagementGetSetPathDatabaseInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve database parameters list for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SetPathDatabaseBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SetPathDatabaseBaseDTO>>> UtilitiesManagementGetSetPathDatabaseInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/SetPath/Database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetSetPathDatabaseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SetPathDatabaseBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SetPathDatabaseBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SetPathDatabaseBaseDTO>)));
        }

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        public List<SetPathFilesystemBaseDTO> UtilitiesManagementGetSetPathFilesystemInfo ()
        {
             ApiResponse<List<SetPathFilesystemBaseDTO>> localVarResponse = UtilitiesManagementGetSetPathFilesystemInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        public ApiResponse< List<SetPathFilesystemBaseDTO> > UtilitiesManagementGetSetPathFilesystemInfoWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/SetPath/Filesystem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetSetPathFilesystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SetPathFilesystemBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SetPathFilesystemBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SetPathFilesystemBaseDTO>)));
        }

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SetPathFilesystemBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SetPathFilesystemBaseDTO>> UtilitiesManagementGetSetPathFilesystemInfoAsync ()
        {
             ApiResponse<List<SetPathFilesystemBaseDTO>> localVarResponse = await UtilitiesManagementGetSetPathFilesystemInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve list of filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SetPathFilesystemBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SetPathFilesystemBaseDTO>>> UtilitiesManagementGetSetPathFilesystemInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Utilities/SetPath/Filesystem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementGetSetPathFilesystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SetPathFilesystemBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SetPathFilesystemBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SetPathFilesystemBaseDTO>)));
        }

        /// <summary>
        /// This call update database parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns></returns>
        public void UtilitiesManagementUpdateSetPathDatabaseInfo (SetPathDatabaseForUpdateDTO databaseParams)
        {
             UtilitiesManagementUpdateSetPathDatabaseInfoWithHttpInfo(databaseParams);
        }

        /// <summary>
        /// This call update database parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UtilitiesManagementUpdateSetPathDatabaseInfoWithHttpInfo (SetPathDatabaseForUpdateDTO databaseParams)
        {
            // verify the required parameter 'databaseParams' is set
            if (databaseParams == null)
                throw new ApiException(400, "Missing required parameter 'databaseParams' when calling UtilitiesManagementApi->UtilitiesManagementUpdateSetPathDatabaseInfo");

            var localVarPath = "/api/management/Utilities/SetPath/Database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (databaseParams != null && databaseParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(databaseParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = databaseParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementUpdateSetPathDatabaseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update database parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UtilitiesManagementUpdateSetPathDatabaseInfoAsync (SetPathDatabaseForUpdateDTO databaseParams)
        {
             await UtilitiesManagementUpdateSetPathDatabaseInfoAsyncWithHttpInfo(databaseParams);

        }

        /// <summary>
        /// This call update database parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseParams">Database parameters for update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UtilitiesManagementUpdateSetPathDatabaseInfoAsyncWithHttpInfo (SetPathDatabaseForUpdateDTO databaseParams)
        {
            // verify the required parameter 'databaseParams' is set
            if (databaseParams == null)
                throw new ApiException(400, "Missing required parameter 'databaseParams' when calling UtilitiesManagementApi->UtilitiesManagementUpdateSetPathDatabaseInfo");

            var localVarPath = "/api/management/Utilities/SetPath/Database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (databaseParams != null && databaseParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(databaseParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = databaseParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementUpdateSetPathDatabaseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns></returns>
        public void UtilitiesManagementUpdateSetPathFilesystemInfo (SetPathFilesystemForUpdateDTO filesystemParams)
        {
             UtilitiesManagementUpdateSetPathFilesystemInfoWithHttpInfo(filesystemParams);
        }

        /// <summary>
        /// This call update filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UtilitiesManagementUpdateSetPathFilesystemInfoWithHttpInfo (SetPathFilesystemForUpdateDTO filesystemParams)
        {
            // verify the required parameter 'filesystemParams' is set
            if (filesystemParams == null)
                throw new ApiException(400, "Missing required parameter 'filesystemParams' when calling UtilitiesManagementApi->UtilitiesManagementUpdateSetPathFilesystemInfo");

            var localVarPath = "/api/management/Utilities/SetPath/Filesystem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filesystemParams != null && filesystemParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filesystemParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filesystemParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementUpdateSetPathFilesystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UtilitiesManagementUpdateSetPathFilesystemInfoAsync (SetPathFilesystemForUpdateDTO filesystemParams)
        {
             await UtilitiesManagementUpdateSetPathFilesystemInfoAsyncWithHttpInfo(filesystemParams);

        }

        /// <summary>
        /// This call update filesystem parameters for files storage 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filesystemParams">Filesystem parameters for update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UtilitiesManagementUpdateSetPathFilesystemInfoAsyncWithHttpInfo (SetPathFilesystemForUpdateDTO filesystemParams)
        {
            // verify the required parameter 'filesystemParams' is set
            if (filesystemParams == null)
                throw new ApiException(400, "Missing required parameter 'filesystemParams' when calling UtilitiesManagementApi->UtilitiesManagementUpdateSetPathFilesystemInfo");

            var localVarPath = "/api/management/Utilities/SetPath/Filesystem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filesystemParams != null && filesystemParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filesystemParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filesystemParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UtilitiesManagementUpdateSetPathFilesystemInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
