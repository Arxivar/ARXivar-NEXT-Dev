/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlQueriesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes specific sql connection query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns></returns>
        void SqlQueriesManagementDeleteSqlQuery (string id);

        /// <summary>
        /// This call deletes specific sql connection query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SqlQueriesManagementDeleteSqlQueryWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SqlQueryDTO&gt;</returns>
        List<SqlQueryDTO> SqlQueriesManagementGetSqlQueries ();

        /// <summary>
        /// This call returns all sql queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SqlQueryDTO&gt;</returns>
        ApiResponse<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesWithHttpInfo ();
        /// <summary>
        /// This call returns all sql queries by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>List&lt;SqlQueryDTO&gt;</returns>
        List<SqlQueryDTO> SqlQueriesManagementGetSqlQueriesByContext (int? context);

        /// <summary>
        /// This call returns all sql queries by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>ApiResponse of List&lt;SqlQueryDTO&gt;</returns>
        ApiResponse<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesByContextWithHttpInfo (int? context);
        /// <summary>
        /// This call gets specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>SqlQueryDTO</returns>
        SqlQueryDTO SqlQueriesManagementGetSqlQuery (string id);

        /// <summary>
        /// This call gets specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        ApiResponse<SqlQueryDTO> SqlQueriesManagementGetSqlQueryWithHttpInfo (string id);
        /// <summary>
        /// This call gets sql query output fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        List<KeyValueDTO> SqlQueriesManagementGetSqlQueryFields (string id);

        /// <summary>
        /// This call gets sql query output fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        ApiResponse<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryFieldsWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql query variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        List<KeyValueDTO> SqlQueriesManagementGetSqlQueryVariables ();

        /// <summary>
        /// This call returns all sql query variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        ApiResponse<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryVariablesWithHttpInfo ();
        /// <summary>
        /// This call inserts sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>SqlQueryDTO</returns>
        SqlQueryDTO SqlQueriesManagementInsertSqlQuery (SqlQueryDTO sqlQuery);

        /// <summary>
        /// This call inserts sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        ApiResponse<SqlQueryDTO> SqlQueriesManagementInsertSqlQueryWithHttpInfo (SqlQueryDTO sqlQuery);
        /// <summary>
        /// This call executes specific sql query command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Object</returns>
        Object SqlQueriesManagementTestSqlQuery (SqlQueryTestDTO test);

        /// <summary>
        /// This call executes specific sql query command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SqlQueriesManagementTestSqlQueryWithHttpInfo (SqlQueryTestDTO test);
        /// <summary>
        /// This call updates specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>SqlQueryDTO</returns>
        SqlQueryDTO SqlQueriesManagementUpdateSqlQuery (string id, SqlQueryDTO sqlQuery);

        /// <summary>
        /// This call updates specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        ApiResponse<SqlQueryDTO> SqlQueriesManagementUpdateSqlQueryWithHttpInfo (string id, SqlQueryDTO sqlQuery);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes specific sql connection query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SqlQueriesManagementDeleteSqlQueryAsync (string id);

        /// <summary>
        /// This call deletes specific sql connection query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SqlQueriesManagementDeleteSqlQueryAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SqlQueryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesAsync ();

        /// <summary>
        /// This call returns all sql queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SqlQueryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SqlQueryDTO>>> SqlQueriesManagementGetSqlQueriesAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all sql queries by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of List&lt;SqlQueryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesByContextAsync (int? context);

        /// <summary>
        /// This call returns all sql queries by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of ApiResponse (List&lt;SqlQueryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SqlQueryDTO>>> SqlQueriesManagementGetSqlQueriesByContextAsyncWithHttpInfo (int? context);
        /// <summary>
        /// This call gets specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of SqlQueryDTO</returns>
        System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementGetSqlQueryAsync (string id);

        /// <summary>
        /// This call gets specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementGetSqlQueryAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call gets sql query output fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryFieldsAsync (string id);

        /// <summary>
        /// This call gets sql query output fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlQueriesManagementGetSqlQueryFieldsAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns all sql query variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryVariablesAsync ();

        /// <summary>
        /// This call returns all sql query variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlQueriesManagementGetSqlQueryVariablesAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>Task of SqlQueryDTO</returns>
        System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementInsertSqlQueryAsync (SqlQueryDTO sqlQuery);

        /// <summary>
        /// This call inserts sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementInsertSqlQueryAsyncWithHttpInfo (SqlQueryDTO sqlQuery);
        /// <summary>
        /// This call executes specific sql query command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SqlQueriesManagementTestSqlQueryAsync (SqlQueryTestDTO test);

        /// <summary>
        /// This call executes specific sql query command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SqlQueriesManagementTestSqlQueryAsyncWithHttpInfo (SqlQueryTestDTO test);
        /// <summary>
        /// This call updates specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>Task of SqlQueryDTO</returns>
        System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementUpdateSqlQueryAsync (string id, SqlQueryDTO sqlQuery);

        /// <summary>
        /// This call updates specific sql query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementUpdateSqlQueryAsyncWithHttpInfo (string id, SqlQueryDTO sqlQuery);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SqlQueriesManagementApi : ISqlQueriesManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlQueriesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlQueriesManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlQueriesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SqlQueriesManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes specific sql connection query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns></returns>
        public void SqlQueriesManagementDeleteSqlQuery (string id)
        {
             SqlQueriesManagementDeleteSqlQueryWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific sql connection query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SqlQueriesManagementDeleteSqlQueryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementDeleteSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementDeleteSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific sql connection query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SqlQueriesManagementDeleteSqlQueryAsync (string id)
        {
             await SqlQueriesManagementDeleteSqlQueryAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific sql connection query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SqlQueriesManagementDeleteSqlQueryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementDeleteSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementDeleteSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all sql queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SqlQueryDTO&gt;</returns>
        public List<SqlQueryDTO> SqlQueriesManagementGetSqlQueries ()
        {
             ApiResponse<List<SqlQueryDTO>> localVarResponse = SqlQueriesManagementGetSqlQueriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all sql queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SqlQueryDTO&gt;</returns>
        public ApiResponse< List<SqlQueryDTO> > SqlQueriesManagementGetSqlQueriesWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlQueries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlQueryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlQueryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlQueryDTO>)));
        }

        /// <summary>
        /// This call returns all sql queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SqlQueryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesAsync ()
        {
             ApiResponse<List<SqlQueryDTO>> localVarResponse = await SqlQueriesManagementGetSqlQueriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all sql queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SqlQueryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SqlQueryDTO>>> SqlQueriesManagementGetSqlQueriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlQueries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlQueryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlQueryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlQueryDTO>)));
        }

        /// <summary>
        /// This call returns all sql queries by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>List&lt;SqlQueryDTO&gt;</returns>
        public List<SqlQueryDTO> SqlQueriesManagementGetSqlQueriesByContext (int? context)
        {
             ApiResponse<List<SqlQueryDTO>> localVarResponse = SqlQueriesManagementGetSqlQueriesByContextWithHttpInfo(context);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all sql queries by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>ApiResponse of List&lt;SqlQueryDTO&gt;</returns>
        public ApiResponse< List<SqlQueryDTO> > SqlQueriesManagementGetSqlQueriesByContextWithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQueriesByContext");

            var localVarPath = "/api/management/DataSources/SqlQueries/ByContext/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueriesByContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlQueryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlQueryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlQueryDTO>)));
        }

        /// <summary>
        /// This call returns all sql queries by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of List&lt;SqlQueryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SqlQueryDTO>> SqlQueriesManagementGetSqlQueriesByContextAsync (int? context)
        {
             ApiResponse<List<SqlQueryDTO>> localVarResponse = await SqlQueriesManagementGetSqlQueriesByContextAsyncWithHttpInfo(context);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all sql queries by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of ApiResponse (List&lt;SqlQueryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SqlQueryDTO>>> SqlQueriesManagementGetSqlQueriesByContextAsyncWithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQueriesByContext");

            var localVarPath = "/api/management/DataSources/SqlQueries/ByContext/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueriesByContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlQueryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlQueryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlQueryDTO>)));
        }

        /// <summary>
        /// This call gets specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>SqlQueryDTO</returns>
        public SqlQueryDTO SqlQueriesManagementGetSqlQuery (string id)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = SqlQueriesManagementGetSqlQueryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        public ApiResponse< SqlQueryDTO > SqlQueriesManagementGetSqlQueryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

        /// <summary>
        /// This call gets specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of SqlQueryDTO</returns>
        public async System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementGetSqlQueryAsync (string id)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = await SqlQueriesManagementGetSqlQueryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementGetSqlQueryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

        /// <summary>
        /// This call gets sql query output fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        public List<KeyValueDTO> SqlQueriesManagementGetSqlQueryFields (string id)
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = SqlQueriesManagementGetSqlQueryFieldsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets sql query output fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        public ApiResponse< List<KeyValueDTO> > SqlQueriesManagementGetSqlQueryFieldsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQueryFields");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueryFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call gets sql query output fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryFieldsAsync (string id)
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = await SqlQueriesManagementGetSqlQueryFieldsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets sql query output fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlQueriesManagementGetSqlQueryFieldsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementGetSqlQueryFields");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueryFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call returns all sql query variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        public List<KeyValueDTO> SqlQueriesManagementGetSqlQueryVariables ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = SqlQueriesManagementGetSqlQueryVariablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all sql query variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        public ApiResponse< List<KeyValueDTO> > SqlQueriesManagementGetSqlQueryVariablesWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlQueries/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueryVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call returns all sql query variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueDTO>> SqlQueriesManagementGetSqlQueryVariablesAsync ()
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = await SqlQueriesManagementGetSqlQueryVariablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all sql query variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> SqlQueriesManagementGetSqlQueryVariablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/SqlQueries/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementGetSqlQueryVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call inserts sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>SqlQueryDTO</returns>
        public SqlQueryDTO SqlQueriesManagementInsertSqlQuery (SqlQueryDTO sqlQuery)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = SqlQueriesManagementInsertSqlQueryWithHttpInfo(sqlQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        public ApiResponse< SqlQueryDTO > SqlQueriesManagementInsertSqlQueryWithHttpInfo (SqlQueryDTO sqlQuery)
        {
            // verify the required parameter 'sqlQuery' is set
            if (sqlQuery == null)
                throw new ApiException(400, "Missing required parameter 'sqlQuery' when calling SqlQueriesManagementApi->SqlQueriesManagementInsertSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlQuery != null && sqlQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlQuery; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementInsertSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

        /// <summary>
        /// This call inserts sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>Task of SqlQueryDTO</returns>
        public async System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementInsertSqlQueryAsync (SqlQueryDTO sqlQuery)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = await SqlQueriesManagementInsertSqlQueryAsyncWithHttpInfo(sqlQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlQuery">Sql query informations for insert</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementInsertSqlQueryAsyncWithHttpInfo (SqlQueryDTO sqlQuery)
        {
            // verify the required parameter 'sqlQuery' is set
            if (sqlQuery == null)
                throw new ApiException(400, "Missing required parameter 'sqlQuery' when calling SqlQueriesManagementApi->SqlQueriesManagementInsertSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlQuery != null && sqlQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlQuery; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementInsertSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

        /// <summary>
        /// This call executes specific sql query command 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Object</returns>
        public Object SqlQueriesManagementTestSqlQuery (SqlQueryTestDTO test)
        {
             ApiResponse<Object> localVarResponse = SqlQueriesManagementTestSqlQueryWithHttpInfo(test);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes specific sql query command 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SqlQueriesManagementTestSqlQueryWithHttpInfo (SqlQueryTestDTO test)
        {
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SqlQueriesManagementApi->SqlQueriesManagementTestSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (test != null && test.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(test); // http body (model) parameter
            }
            else
            {
                localVarPostBody = test; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementTestSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call executes specific sql query command 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SqlQueriesManagementTestSqlQueryAsync (SqlQueryTestDTO test)
        {
             ApiResponse<Object> localVarResponse = await SqlQueriesManagementTestSqlQueryAsyncWithHttpInfo(test);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes specific sql query command 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="test">Sql params</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SqlQueriesManagementTestSqlQueryAsyncWithHttpInfo (SqlQueryTestDTO test)
        {
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling SqlQueriesManagementApi->SqlQueriesManagementTestSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (test != null && test.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(test); // http body (model) parameter
            }
            else
            {
                localVarPostBody = test; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementTestSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call updates specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>SqlQueryDTO</returns>
        public SqlQueryDTO SqlQueriesManagementUpdateSqlQuery (string id, SqlQueryDTO sqlQuery)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = SqlQueriesManagementUpdateSqlQueryWithHttpInfo(id, sqlQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>ApiResponse of SqlQueryDTO</returns>
        public ApiResponse< SqlQueryDTO > SqlQueriesManagementUpdateSqlQueryWithHttpInfo (string id, SqlQueryDTO sqlQuery)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementUpdateSqlQuery");
            // verify the required parameter 'sqlQuery' is set
            if (sqlQuery == null)
                throw new ApiException(400, "Missing required parameter 'sqlQuery' when calling SqlQueriesManagementApi->SqlQueriesManagementUpdateSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sqlQuery != null && sqlQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlQuery; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementUpdateSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

        /// <summary>
        /// This call updates specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>Task of SqlQueryDTO</returns>
        public async System.Threading.Tasks.Task<SqlQueryDTO> SqlQueriesManagementUpdateSqlQueryAsync (string id, SqlQueryDTO sqlQuery)
        {
             ApiResponse<SqlQueryDTO> localVarResponse = await SqlQueriesManagementUpdateSqlQueryAsyncWithHttpInfo(id, sqlQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific sql query 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sql query identifier</param>
        /// <param name="sqlQuery">Sql query informations for update</param>
        /// <returns>Task of ApiResponse (SqlQueryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlQueryDTO>> SqlQueriesManagementUpdateSqlQueryAsyncWithHttpInfo (string id, SqlQueryDTO sqlQuery)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SqlQueriesManagementApi->SqlQueriesManagementUpdateSqlQuery");
            // verify the required parameter 'sqlQuery' is set
            if (sqlQuery == null)
                throw new ApiException(400, "Missing required parameter 'sqlQuery' when calling SqlQueriesManagementApi->SqlQueriesManagementUpdateSqlQuery");

            var localVarPath = "/api/management/DataSources/SqlQueries/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sqlQuery != null && sqlQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sqlQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sqlQuery; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SqlQueriesManagementUpdateSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlQueryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlQueryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlQueryDTO)));
        }

    }
}
