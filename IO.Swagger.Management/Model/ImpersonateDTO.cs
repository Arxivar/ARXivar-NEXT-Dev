/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Impersonate information
    /// </summary>
    [DataContract]
    public partial class ImpersonateDTO :  IEquatable<ImpersonateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImpersonateDTO" /> class.
        /// </summary>
        /// <param name="allUsers">Boolean that indicates if user can impersonate all users.</param>
        /// <param name="users">List of users who can be impersonated.</param>
        public ImpersonateDTO(bool? allUsers = default(bool?), List<ImpersonateUserDTO> users = default(List<ImpersonateUserDTO>))
        {
            this.AllUsers = allUsers;
            this.Users = users;
        }
        
        /// <summary>
        /// Boolean that indicates if user can impersonate all users
        /// </summary>
        /// <value>Boolean that indicates if user can impersonate all users</value>
        [DataMember(Name="allUsers", EmitDefaultValue=false)]
        public bool? AllUsers { get; set; }

        /// <summary>
        /// List of users who can be impersonated
        /// </summary>
        /// <value>List of users who can be impersonated</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<ImpersonateUserDTO> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImpersonateDTO {\n");
            sb.Append("  AllUsers: ").Append(AllUsers).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImpersonateDTO);
        }

        /// <summary>
        /// Returns true if ImpersonateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ImpersonateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImpersonateDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllUsers == input.AllUsers ||
                    (this.AllUsers != null &&
                    this.AllUsers.Equals(input.AllUsers))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllUsers != null)
                    hashCode = hashCode * 59 + this.AllUsers.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
