/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of sql connection test
    /// </summary>
    [DataContract]
    public partial class SqlConnectionTestDTO :  IEquatable<SqlConnectionTestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlConnectionTestDTO" /> class.
        /// </summary>
        /// <param name="mode">Possible values:  0: BySqlConnection  1: ByCString  2: ByCStringWithSavedPassword .</param>
        /// <param name="type">Possible values:  1: OleDb  2: Dsn  3: Local  4: Odbc .</param>
        /// <param name="connectionString">Connection string.</param>
        /// <param name="sqlConnectionId">Sql Connection identifier.</param>
        public SqlConnectionTestDTO(int? mode = default(int?), int? type = default(int?), string connectionString = default(string), string sqlConnectionId = default(string))
        {
            this.Mode = mode;
            this.Type = type;
            this.ConnectionString = connectionString;
            this.SqlConnectionId = sqlConnectionId;
        }
        
        /// <summary>
        /// Possible values:  0: BySqlConnection  1: ByCString  2: ByCStringWithSavedPassword 
        /// </summary>
        /// <value>Possible values:  0: BySqlConnection  1: ByCString  2: ByCStringWithSavedPassword </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Possible values:  1: OleDb  2: Dsn  3: Local  4: Odbc 
        /// </summary>
        /// <value>Possible values:  1: OleDb  2: Dsn  3: Local  4: Odbc </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Connection string
        /// </summary>
        /// <value>Connection string</value>
        [DataMember(Name="connectionString", EmitDefaultValue=false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Sql Connection identifier
        /// </summary>
        /// <value>Sql Connection identifier</value>
        [DataMember(Name="sqlConnectionId", EmitDefaultValue=false)]
        public string SqlConnectionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SqlConnectionTestDTO {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  SqlConnectionId: ").Append(SqlConnectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlConnectionTestDTO);
        }

        /// <summary>
        /// Returns true if SqlConnectionTestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlConnectionTestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlConnectionTestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                ) && 
                (
                    this.SqlConnectionId == input.SqlConnectionId ||
                    (this.SqlConnectionId != null &&
                    this.SqlConnectionId.Equals(input.SqlConnectionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ConnectionString != null)
                    hashCode = hashCode * 59 + this.ConnectionString.GetHashCode();
                if (this.SqlConnectionId != null)
                    hashCode = hashCode * 59 + this.SqlConnectionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
