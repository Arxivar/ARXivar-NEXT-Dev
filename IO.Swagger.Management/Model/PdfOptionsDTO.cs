/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of timestamp (marcatura temporale)
    /// </summary>
    [DataContract]
    public partial class PdfOptionsDTO :  IEquatable<PdfOptionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfOptionsDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="documentTypeId">Document type system id.</param>
        /// <param name="font">Font name.</param>
        /// <param name="color">Identificativo del colore (decimal rapresentation).</param>
        /// <param name="freeText">Watermark text.</param>
        /// <param name="fontDimension">Font size.</param>
        /// <param name="layer">Possible values:  0: Foreground  1: Background .</param>
        /// <param name="transparency">Transparency percentage (works only if the layer is in background).</param>
        /// <param name="thickness">Line thickness (optional - -&amp;gt; can be null).</param>
        /// <param name="regX">Orizzontale regolation (0 if none).</param>
        /// <param name="regY">Vertical regolation (0 if none).</param>
        /// <param name="rotation">Watermark rotation  (0 - 45 - 90 - 135 - 180 - 225 -270 - 315).</param>
        /// <param name="posX">Possible values:  0: Left  1: Center  2: Right .</param>
        /// <param name="posY">Possible values:  0: Top  1: Center  2: Bottom .</param>
        public PdfOptionsDTO(int? id = default(int?), int? documentTypeId = default(int?), string font = default(string), int? color = default(int?), string freeText = default(string), int? fontDimension = default(int?), int? layer = default(int?), int? transparency = default(int?), int? thickness = default(int?), int? regX = default(int?), int? regY = default(int?), int? rotation = default(int?), int? posX = default(int?), int? posY = default(int?))
        {
            this.Id = id;
            this.DocumentTypeId = documentTypeId;
            this.Font = font;
            this.Color = color;
            this.FreeText = freeText;
            this.FontDimension = fontDimension;
            this.Layer = layer;
            this.Transparency = transparency;
            this.Thickness = thickness;
            this.RegX = regX;
            this.RegY = regY;
            this.Rotation = rotation;
            this.PosX = posX;
            this.PosY = posY;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Document type system id
        /// </summary>
        /// <value>Document type system id</value>
        [DataMember(Name="documentTypeId", EmitDefaultValue=false)]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// Font name
        /// </summary>
        /// <value>Font name</value>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public string Font { get; set; }

        /// <summary>
        /// Identificativo del colore (decimal rapresentation)
        /// </summary>
        /// <value>Identificativo del colore (decimal rapresentation)</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public int? Color { get; set; }

        /// <summary>
        /// Watermark text
        /// </summary>
        /// <value>Watermark text</value>
        [DataMember(Name="freeText", EmitDefaultValue=false)]
        public string FreeText { get; set; }

        /// <summary>
        /// Font size
        /// </summary>
        /// <value>Font size</value>
        [DataMember(Name="fontDimension", EmitDefaultValue=false)]
        public int? FontDimension { get; set; }

        /// <summary>
        /// Possible values:  0: Foreground  1: Background 
        /// </summary>
        /// <value>Possible values:  0: Foreground  1: Background </value>
        [DataMember(Name="layer", EmitDefaultValue=false)]
        public int? Layer { get; set; }

        /// <summary>
        /// Transparency percentage (works only if the layer is in background)
        /// </summary>
        /// <value>Transparency percentage (works only if the layer is in background)</value>
        [DataMember(Name="transparency", EmitDefaultValue=false)]
        public int? Transparency { get; set; }

        /// <summary>
        /// Line thickness (optional - -&amp;gt; can be null)
        /// </summary>
        /// <value>Line thickness (optional - -&amp;gt; can be null)</value>
        [DataMember(Name="thickness", EmitDefaultValue=false)]
        public int? Thickness { get; set; }

        /// <summary>
        /// Orizzontale regolation (0 if none)
        /// </summary>
        /// <value>Orizzontale regolation (0 if none)</value>
        [DataMember(Name="regX", EmitDefaultValue=false)]
        public int? RegX { get; set; }

        /// <summary>
        /// Vertical regolation (0 if none)
        /// </summary>
        /// <value>Vertical regolation (0 if none)</value>
        [DataMember(Name="regY", EmitDefaultValue=false)]
        public int? RegY { get; set; }

        /// <summary>
        /// Watermark rotation  (0 - 45 - 90 - 135 - 180 - 225 -270 - 315)
        /// </summary>
        /// <value>Watermark rotation  (0 - 45 - 90 - 135 - 180 - 225 -270 - 315)</value>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public int? Rotation { get; set; }

        /// <summary>
        /// Possible values:  0: Left  1: Center  2: Right 
        /// </summary>
        /// <value>Possible values:  0: Left  1: Center  2: Right </value>
        [DataMember(Name="posX", EmitDefaultValue=false)]
        public int? PosX { get; set; }

        /// <summary>
        /// Possible values:  0: Top  1: Center  2: Bottom 
        /// </summary>
        /// <value>Possible values:  0: Top  1: Center  2: Bottom </value>
        [DataMember(Name="posY", EmitDefaultValue=false)]
        public int? PosY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfOptionsDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FreeText: ").Append(FreeText).Append("\n");
            sb.Append("  FontDimension: ").Append(FontDimension).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  Transparency: ").Append(Transparency).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  RegX: ").Append(RegX).Append("\n");
            sb.Append("  RegY: ").Append(RegY).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  PosX: ").Append(PosX).Append("\n");
            sb.Append("  PosY: ").Append(PosY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfOptionsDTO);
        }

        /// <summary>
        /// Returns true if PdfOptionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfOptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfOptionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.Font == input.Font ||
                    (this.Font != null &&
                    this.Font.Equals(input.Font))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.FreeText == input.FreeText ||
                    (this.FreeText != null &&
                    this.FreeText.Equals(input.FreeText))
                ) && 
                (
                    this.FontDimension == input.FontDimension ||
                    (this.FontDimension != null &&
                    this.FontDimension.Equals(input.FontDimension))
                ) && 
                (
                    this.Layer == input.Layer ||
                    (this.Layer != null &&
                    this.Layer.Equals(input.Layer))
                ) && 
                (
                    this.Transparency == input.Transparency ||
                    (this.Transparency != null &&
                    this.Transparency.Equals(input.Transparency))
                ) && 
                (
                    this.Thickness == input.Thickness ||
                    (this.Thickness != null &&
                    this.Thickness.Equals(input.Thickness))
                ) && 
                (
                    this.RegX == input.RegX ||
                    (this.RegX != null &&
                    this.RegX.Equals(input.RegX))
                ) && 
                (
                    this.RegY == input.RegY ||
                    (this.RegY != null &&
                    this.RegY.Equals(input.RegY))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.PosX == input.PosX ||
                    (this.PosX != null &&
                    this.PosX.Equals(input.PosX))
                ) && 
                (
                    this.PosY == input.PosY ||
                    (this.PosY != null &&
                    this.PosY.Equals(input.PosY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DocumentTypeId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeId.GetHashCode();
                if (this.Font != null)
                    hashCode = hashCode * 59 + this.Font.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.FreeText != null)
                    hashCode = hashCode * 59 + this.FreeText.GetHashCode();
                if (this.FontDimension != null)
                    hashCode = hashCode * 59 + this.FontDimension.GetHashCode();
                if (this.Layer != null)
                    hashCode = hashCode * 59 + this.Layer.GetHashCode();
                if (this.Transparency != null)
                    hashCode = hashCode * 59 + this.Transparency.GetHashCode();
                if (this.Thickness != null)
                    hashCode = hashCode * 59 + this.Thickness.GetHashCode();
                if (this.RegX != null)
                    hashCode = hashCode * 59 + this.RegX.GetHashCode();
                if (this.RegY != null)
                    hashCode = hashCode * 59 + this.RegY.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.PosX != null)
                    hashCode = hashCode * 59 + this.PosX.GetHashCode();
                if (this.PosY != null)
                    hashCode = hashCode * 59 + this.PosY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
