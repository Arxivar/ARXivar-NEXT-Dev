/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of Business Unit
    /// </summary>
    [DataContract]
    public partial class BusinessUnitBaseDTO :  IEquatable<BusinessUnitBaseDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessUnitBaseDTO" /> class.
        /// </summary>
        /// <param name="email">Email.</param>
        /// <param name="manager">Manager.</param>
        /// <param name="creationDate">Creation date.</param>
        /// <param name="suppressionDate">Suppression date.</param>
        /// <param name="domainUser">Domain user.</param>
        /// <param name="storageType">Possible values:  0: FileSystem  1: Database .</param>
        /// <param name="filesPath">File path.</param>
        /// <param name="logsPath">Logs path.</param>
        /// <param name="editPath">Document buffer path.</param>
        /// <param name="mailPath">Mail path.</param>
        /// <param name="dbOrigin">Possible values:  0: SqlServer  1: Mysql  2: Oracle  -1: Nessuno .</param>
        /// <param name="dbServer">Db Server.</param>
        /// <param name="dbDatabase">Db Database.</param>
        /// <param name="dbUser">Db user.</param>
        /// <param name="vat">Vat code.</param>
        /// <param name="fiscalCode">Fiscal code.</param>
        /// <param name="countryCode">Country code.</param>
        /// <param name="countryRegistrationCode">Country Registration Code.</param>
        /// <param name="rea">REA.</param>
        /// <param name="legalAddress">Legal address.</param>
        /// <param name="legalHouseNumber">Legal House number.</param>
        /// <param name="legalZipCode">Legal zip code.</param>
        /// <param name="legalCity">Legal city.</param>
        /// <param name="legalProvince">Legal province.</param>
        /// <param name="address">Address.</param>
        /// <param name="houseNumber">House number.</param>
        /// <param name="zipCode">Zip code.</param>
        /// <param name="city">City.</param>
        /// <param name="province">Province.</param>
        /// <param name="archiveFilesPath">Archive Files path.</param>
        /// <param name="archiveDbServer">Archive Db Server.</param>
        /// <param name="archiveDbDatabase">Archive Db Database.</param>
        /// <param name="archiveDbUser">Archive Db user.</param>
        /// <param name="code">Code.</param>
        /// <param name="name">Name.</param>
        public BusinessUnitBaseDTO(string email = default(string), string manager = default(string), DateTime? creationDate = default(DateTime?), DateTime? suppressionDate = default(DateTime?), string domainUser = default(string), int? storageType = default(int?), string filesPath = default(string), string logsPath = default(string), string editPath = default(string), string mailPath = default(string), int? dbOrigin = default(int?), string dbServer = default(string), string dbDatabase = default(string), string dbUser = default(string), string vat = default(string), string fiscalCode = default(string), string countryCode = default(string), string countryRegistrationCode = default(string), string rea = default(string), string legalAddress = default(string), string legalHouseNumber = default(string), string legalZipCode = default(string), string legalCity = default(string), string legalProvince = default(string), string address = default(string), string houseNumber = default(string), string zipCode = default(string), string city = default(string), string province = default(string), string archiveFilesPath = default(string), string archiveDbServer = default(string), string archiveDbDatabase = default(string), string archiveDbUser = default(string), string code = default(string), string name = default(string))
        {
            this.Email = email;
            this.Manager = manager;
            this.CreationDate = creationDate;
            this.SuppressionDate = suppressionDate;
            this.DomainUser = domainUser;
            this.StorageType = storageType;
            this.FilesPath = filesPath;
            this.LogsPath = logsPath;
            this.EditPath = editPath;
            this.MailPath = mailPath;
            this.DbOrigin = dbOrigin;
            this.DbServer = dbServer;
            this.DbDatabase = dbDatabase;
            this.DbUser = dbUser;
            this.Vat = vat;
            this.FiscalCode = fiscalCode;
            this.CountryCode = countryCode;
            this.CountryRegistrationCode = countryRegistrationCode;
            this.Rea = rea;
            this.LegalAddress = legalAddress;
            this.LegalHouseNumber = legalHouseNumber;
            this.LegalZipCode = legalZipCode;
            this.LegalCity = legalCity;
            this.LegalProvince = legalProvince;
            this.Address = address;
            this.HouseNumber = houseNumber;
            this.ZipCode = zipCode;
            this.City = city;
            this.Province = province;
            this.ArchiveFilesPath = archiveFilesPath;
            this.ArchiveDbServer = archiveDbServer;
            this.ArchiveDbDatabase = archiveDbDatabase;
            this.ArchiveDbUser = archiveDbUser;
            this.Code = code;
            this.Name = name;
        }
        
        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Manager
        /// </summary>
        /// <value>Manager</value>
        [DataMember(Name="manager", EmitDefaultValue=false)]
        public string Manager { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Suppression date
        /// </summary>
        /// <value>Suppression date</value>
        [DataMember(Name="suppressionDate", EmitDefaultValue=false)]
        public DateTime? SuppressionDate { get; set; }

        /// <summary>
        /// Domain user
        /// </summary>
        /// <value>Domain user</value>
        [DataMember(Name="domainUser", EmitDefaultValue=false)]
        public string DomainUser { get; set; }

        /// <summary>
        /// Possible values:  0: FileSystem  1: Database 
        /// </summary>
        /// <value>Possible values:  0: FileSystem  1: Database </value>
        [DataMember(Name="storageType", EmitDefaultValue=false)]
        public int? StorageType { get; set; }

        /// <summary>
        /// File path
        /// </summary>
        /// <value>File path</value>
        [DataMember(Name="filesPath", EmitDefaultValue=false)]
        public string FilesPath { get; set; }

        /// <summary>
        /// Logs path
        /// </summary>
        /// <value>Logs path</value>
        [DataMember(Name="logsPath", EmitDefaultValue=false)]
        public string LogsPath { get; set; }

        /// <summary>
        /// Document buffer path
        /// </summary>
        /// <value>Document buffer path</value>
        [DataMember(Name="editPath", EmitDefaultValue=false)]
        public string EditPath { get; set; }

        /// <summary>
        /// Mail path
        /// </summary>
        /// <value>Mail path</value>
        [DataMember(Name="mailPath", EmitDefaultValue=false)]
        public string MailPath { get; set; }

        /// <summary>
        /// Possible values:  0: SqlServer  1: Mysql  2: Oracle  -1: Nessuno 
        /// </summary>
        /// <value>Possible values:  0: SqlServer  1: Mysql  2: Oracle  -1: Nessuno </value>
        [DataMember(Name="dbOrigin", EmitDefaultValue=false)]
        public int? DbOrigin { get; set; }

        /// <summary>
        /// Db Server
        /// </summary>
        /// <value>Db Server</value>
        [DataMember(Name="dbServer", EmitDefaultValue=false)]
        public string DbServer { get; set; }

        /// <summary>
        /// Db Database
        /// </summary>
        /// <value>Db Database</value>
        [DataMember(Name="dbDatabase", EmitDefaultValue=false)]
        public string DbDatabase { get; set; }

        /// <summary>
        /// Db user
        /// </summary>
        /// <value>Db user</value>
        [DataMember(Name="dbUser", EmitDefaultValue=false)]
        public string DbUser { get; set; }

        /// <summary>
        /// Vat code
        /// </summary>
        /// <value>Vat code</value>
        [DataMember(Name="vat", EmitDefaultValue=false)]
        public string Vat { get; set; }

        /// <summary>
        /// Fiscal code
        /// </summary>
        /// <value>Fiscal code</value>
        [DataMember(Name="fiscalCode", EmitDefaultValue=false)]
        public string FiscalCode { get; set; }

        /// <summary>
        /// Country code
        /// </summary>
        /// <value>Country code</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Country Registration Code
        /// </summary>
        /// <value>Country Registration Code</value>
        [DataMember(Name="countryRegistrationCode", EmitDefaultValue=false)]
        public string CountryRegistrationCode { get; set; }

        /// <summary>
        /// REA
        /// </summary>
        /// <value>REA</value>
        [DataMember(Name="rea", EmitDefaultValue=false)]
        public string Rea { get; set; }

        /// <summary>
        /// Legal address
        /// </summary>
        /// <value>Legal address</value>
        [DataMember(Name="legalAddress", EmitDefaultValue=false)]
        public string LegalAddress { get; set; }

        /// <summary>
        /// Legal House number
        /// </summary>
        /// <value>Legal House number</value>
        [DataMember(Name="legalHouseNumber", EmitDefaultValue=false)]
        public string LegalHouseNumber { get; set; }

        /// <summary>
        /// Legal zip code
        /// </summary>
        /// <value>Legal zip code</value>
        [DataMember(Name="legalZipCode", EmitDefaultValue=false)]
        public string LegalZipCode { get; set; }

        /// <summary>
        /// Legal city
        /// </summary>
        /// <value>Legal city</value>
        [DataMember(Name="legalCity", EmitDefaultValue=false)]
        public string LegalCity { get; set; }

        /// <summary>
        /// Legal province
        /// </summary>
        /// <value>Legal province</value>
        [DataMember(Name="legalProvince", EmitDefaultValue=false)]
        public string LegalProvince { get; set; }

        /// <summary>
        /// Address
        /// </summary>
        /// <value>Address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// House number
        /// </summary>
        /// <value>House number</value>
        [DataMember(Name="houseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Zip code
        /// </summary>
        /// <value>Zip code</value>
        [DataMember(Name="zipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Province
        /// </summary>
        /// <value>Province</value>
        [DataMember(Name="province", EmitDefaultValue=false)]
        public string Province { get; set; }

        /// <summary>
        /// Archive Files path
        /// </summary>
        /// <value>Archive Files path</value>
        [DataMember(Name="archiveFilesPath", EmitDefaultValue=false)]
        public string ArchiveFilesPath { get; set; }

        /// <summary>
        /// Archive Db Server
        /// </summary>
        /// <value>Archive Db Server</value>
        [DataMember(Name="archiveDbServer", EmitDefaultValue=false)]
        public string ArchiveDbServer { get; set; }

        /// <summary>
        /// Archive Db Database
        /// </summary>
        /// <value>Archive Db Database</value>
        [DataMember(Name="archiveDbDatabase", EmitDefaultValue=false)]
        public string ArchiveDbDatabase { get; set; }

        /// <summary>
        /// Archive Db user
        /// </summary>
        /// <value>Archive Db user</value>
        [DataMember(Name="archiveDbUser", EmitDefaultValue=false)]
        public string ArchiveDbUser { get; set; }

        /// <summary>
        /// Code
        /// </summary>
        /// <value>Code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessUnitBaseDTO {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  SuppressionDate: ").Append(SuppressionDate).Append("\n");
            sb.Append("  DomainUser: ").Append(DomainUser).Append("\n");
            sb.Append("  StorageType: ").Append(StorageType).Append("\n");
            sb.Append("  FilesPath: ").Append(FilesPath).Append("\n");
            sb.Append("  LogsPath: ").Append(LogsPath).Append("\n");
            sb.Append("  EditPath: ").Append(EditPath).Append("\n");
            sb.Append("  MailPath: ").Append(MailPath).Append("\n");
            sb.Append("  DbOrigin: ").Append(DbOrigin).Append("\n");
            sb.Append("  DbServer: ").Append(DbServer).Append("\n");
            sb.Append("  DbDatabase: ").Append(DbDatabase).Append("\n");
            sb.Append("  DbUser: ").Append(DbUser).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  FiscalCode: ").Append(FiscalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryRegistrationCode: ").Append(CountryRegistrationCode).Append("\n");
            sb.Append("  Rea: ").Append(Rea).Append("\n");
            sb.Append("  LegalAddress: ").Append(LegalAddress).Append("\n");
            sb.Append("  LegalHouseNumber: ").Append(LegalHouseNumber).Append("\n");
            sb.Append("  LegalZipCode: ").Append(LegalZipCode).Append("\n");
            sb.Append("  LegalCity: ").Append(LegalCity).Append("\n");
            sb.Append("  LegalProvince: ").Append(LegalProvince).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  ArchiveFilesPath: ").Append(ArchiveFilesPath).Append("\n");
            sb.Append("  ArchiveDbServer: ").Append(ArchiveDbServer).Append("\n");
            sb.Append("  ArchiveDbDatabase: ").Append(ArchiveDbDatabase).Append("\n");
            sb.Append("  ArchiveDbUser: ").Append(ArchiveDbUser).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessUnitBaseDTO);
        }

        /// <summary>
        /// Returns true if BusinessUnitBaseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessUnitBaseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessUnitBaseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.SuppressionDate == input.SuppressionDate ||
                    (this.SuppressionDate != null &&
                    this.SuppressionDate.Equals(input.SuppressionDate))
                ) && 
                (
                    this.DomainUser == input.DomainUser ||
                    (this.DomainUser != null &&
                    this.DomainUser.Equals(input.DomainUser))
                ) && 
                (
                    this.StorageType == input.StorageType ||
                    (this.StorageType != null &&
                    this.StorageType.Equals(input.StorageType))
                ) && 
                (
                    this.FilesPath == input.FilesPath ||
                    (this.FilesPath != null &&
                    this.FilesPath.Equals(input.FilesPath))
                ) && 
                (
                    this.LogsPath == input.LogsPath ||
                    (this.LogsPath != null &&
                    this.LogsPath.Equals(input.LogsPath))
                ) && 
                (
                    this.EditPath == input.EditPath ||
                    (this.EditPath != null &&
                    this.EditPath.Equals(input.EditPath))
                ) && 
                (
                    this.MailPath == input.MailPath ||
                    (this.MailPath != null &&
                    this.MailPath.Equals(input.MailPath))
                ) && 
                (
                    this.DbOrigin == input.DbOrigin ||
                    (this.DbOrigin != null &&
                    this.DbOrigin.Equals(input.DbOrigin))
                ) && 
                (
                    this.DbServer == input.DbServer ||
                    (this.DbServer != null &&
                    this.DbServer.Equals(input.DbServer))
                ) && 
                (
                    this.DbDatabase == input.DbDatabase ||
                    (this.DbDatabase != null &&
                    this.DbDatabase.Equals(input.DbDatabase))
                ) && 
                (
                    this.DbUser == input.DbUser ||
                    (this.DbUser != null &&
                    this.DbUser.Equals(input.DbUser))
                ) && 
                (
                    this.Vat == input.Vat ||
                    (this.Vat != null &&
                    this.Vat.Equals(input.Vat))
                ) && 
                (
                    this.FiscalCode == input.FiscalCode ||
                    (this.FiscalCode != null &&
                    this.FiscalCode.Equals(input.FiscalCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryRegistrationCode == input.CountryRegistrationCode ||
                    (this.CountryRegistrationCode != null &&
                    this.CountryRegistrationCode.Equals(input.CountryRegistrationCode))
                ) && 
                (
                    this.Rea == input.Rea ||
                    (this.Rea != null &&
                    this.Rea.Equals(input.Rea))
                ) && 
                (
                    this.LegalAddress == input.LegalAddress ||
                    (this.LegalAddress != null &&
                    this.LegalAddress.Equals(input.LegalAddress))
                ) && 
                (
                    this.LegalHouseNumber == input.LegalHouseNumber ||
                    (this.LegalHouseNumber != null &&
                    this.LegalHouseNumber.Equals(input.LegalHouseNumber))
                ) && 
                (
                    this.LegalZipCode == input.LegalZipCode ||
                    (this.LegalZipCode != null &&
                    this.LegalZipCode.Equals(input.LegalZipCode))
                ) && 
                (
                    this.LegalCity == input.LegalCity ||
                    (this.LegalCity != null &&
                    this.LegalCity.Equals(input.LegalCity))
                ) && 
                (
                    this.LegalProvince == input.LegalProvince ||
                    (this.LegalProvince != null &&
                    this.LegalProvince.Equals(input.LegalProvince))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.ArchiveFilesPath == input.ArchiveFilesPath ||
                    (this.ArchiveFilesPath != null &&
                    this.ArchiveFilesPath.Equals(input.ArchiveFilesPath))
                ) && 
                (
                    this.ArchiveDbServer == input.ArchiveDbServer ||
                    (this.ArchiveDbServer != null &&
                    this.ArchiveDbServer.Equals(input.ArchiveDbServer))
                ) && 
                (
                    this.ArchiveDbDatabase == input.ArchiveDbDatabase ||
                    (this.ArchiveDbDatabase != null &&
                    this.ArchiveDbDatabase.Equals(input.ArchiveDbDatabase))
                ) && 
                (
                    this.ArchiveDbUser == input.ArchiveDbUser ||
                    (this.ArchiveDbUser != null &&
                    this.ArchiveDbUser.Equals(input.ArchiveDbUser))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.SuppressionDate != null)
                    hashCode = hashCode * 59 + this.SuppressionDate.GetHashCode();
                if (this.DomainUser != null)
                    hashCode = hashCode * 59 + this.DomainUser.GetHashCode();
                if (this.StorageType != null)
                    hashCode = hashCode * 59 + this.StorageType.GetHashCode();
                if (this.FilesPath != null)
                    hashCode = hashCode * 59 + this.FilesPath.GetHashCode();
                if (this.LogsPath != null)
                    hashCode = hashCode * 59 + this.LogsPath.GetHashCode();
                if (this.EditPath != null)
                    hashCode = hashCode * 59 + this.EditPath.GetHashCode();
                if (this.MailPath != null)
                    hashCode = hashCode * 59 + this.MailPath.GetHashCode();
                if (this.DbOrigin != null)
                    hashCode = hashCode * 59 + this.DbOrigin.GetHashCode();
                if (this.DbServer != null)
                    hashCode = hashCode * 59 + this.DbServer.GetHashCode();
                if (this.DbDatabase != null)
                    hashCode = hashCode * 59 + this.DbDatabase.GetHashCode();
                if (this.DbUser != null)
                    hashCode = hashCode * 59 + this.DbUser.GetHashCode();
                if (this.Vat != null)
                    hashCode = hashCode * 59 + this.Vat.GetHashCode();
                if (this.FiscalCode != null)
                    hashCode = hashCode * 59 + this.FiscalCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryRegistrationCode != null)
                    hashCode = hashCode * 59 + this.CountryRegistrationCode.GetHashCode();
                if (this.Rea != null)
                    hashCode = hashCode * 59 + this.Rea.GetHashCode();
                if (this.LegalAddress != null)
                    hashCode = hashCode * 59 + this.LegalAddress.GetHashCode();
                if (this.LegalHouseNumber != null)
                    hashCode = hashCode * 59 + this.LegalHouseNumber.GetHashCode();
                if (this.LegalZipCode != null)
                    hashCode = hashCode * 59 + this.LegalZipCode.GetHashCode();
                if (this.LegalCity != null)
                    hashCode = hashCode * 59 + this.LegalCity.GetHashCode();
                if (this.LegalProvince != null)
                    hashCode = hashCode * 59 + this.LegalProvince.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.HouseNumber != null)
                    hashCode = hashCode * 59 + this.HouseNumber.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.ArchiveFilesPath != null)
                    hashCode = hashCode * 59 + this.ArchiveFilesPath.GetHashCode();
                if (this.ArchiveDbServer != null)
                    hashCode = hashCode * 59 + this.ArchiveDbServer.GetHashCode();
                if (this.ArchiveDbDatabase != null)
                    hashCode = hashCode * 59 + this.ArchiveDbDatabase.GetHashCode();
                if (this.ArchiveDbUser != null)
                    hashCode = hashCode * 59 + this.ArchiveDbUser.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
