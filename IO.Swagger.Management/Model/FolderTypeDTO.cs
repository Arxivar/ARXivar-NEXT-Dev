/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// FolderTypeDTO
    /// </summary>
    [DataContract]
    public partial class FolderTypeDTO :  IEquatable<FolderTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderTypeDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="documentTypeId">Document Type Identifier.</param>
        /// <param name="parentFolder">Parent folder Id.</param>
        /// <param name="dynamicFolder">Dynamic pattern string for folder.</param>
        /// <param name="origin">Possible values:  0: Entrata  1: Uscita  2: Interno  3: Sempre .</param>
        /// <param name="insertOnProfileEdit">Indicates if it need to archive profile in folder on edit.</param>
        /// <param name="moveOnEdit">Indicates if it need to remove previuous profile from the folder on edit.</param>
        public FolderTypeDTO(int? id = default(int?), int? documentTypeId = default(int?), FolderDTO parentFolder = default(FolderDTO), string dynamicFolder = default(string), int? origin = default(int?), bool? insertOnProfileEdit = default(bool?), bool? moveOnEdit = default(bool?))
        {
            this.Id = id;
            this.DocumentTypeId = documentTypeId;
            this.ParentFolder = parentFolder;
            this.DynamicFolder = dynamicFolder;
            this.Origin = origin;
            this.InsertOnProfileEdit = insertOnProfileEdit;
            this.MoveOnEdit = moveOnEdit;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Document Type Identifier
        /// </summary>
        /// <value>Document Type Identifier</value>
        [DataMember(Name="documentTypeId", EmitDefaultValue=false)]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// Parent folder Id
        /// </summary>
        /// <value>Parent folder Id</value>
        [DataMember(Name="parentFolder", EmitDefaultValue=false)]
        public FolderDTO ParentFolder { get; set; }

        /// <summary>
        /// Dynamic pattern string for folder
        /// </summary>
        /// <value>Dynamic pattern string for folder</value>
        [DataMember(Name="dynamicFolder", EmitDefaultValue=false)]
        public string DynamicFolder { get; set; }

        /// <summary>
        /// Possible values:  0: Entrata  1: Uscita  2: Interno  3: Sempre 
        /// </summary>
        /// <value>Possible values:  0: Entrata  1: Uscita  2: Interno  3: Sempre </value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public int? Origin { get; set; }

        /// <summary>
        /// Indicates if it need to archive profile in folder on edit
        /// </summary>
        /// <value>Indicates if it need to archive profile in folder on edit</value>
        [DataMember(Name="insertOnProfileEdit", EmitDefaultValue=false)]
        public bool? InsertOnProfileEdit { get; set; }

        /// <summary>
        /// Indicates if it need to remove previuous profile from the folder on edit
        /// </summary>
        /// <value>Indicates if it need to remove previuous profile from the folder on edit</value>
        [DataMember(Name="moveOnEdit", EmitDefaultValue=false)]
        public bool? MoveOnEdit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderTypeDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  ParentFolder: ").Append(ParentFolder).Append("\n");
            sb.Append("  DynamicFolder: ").Append(DynamicFolder).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  InsertOnProfileEdit: ").Append(InsertOnProfileEdit).Append("\n");
            sb.Append("  MoveOnEdit: ").Append(MoveOnEdit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderTypeDTO);
        }

        /// <summary>
        /// Returns true if FolderTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.ParentFolder == input.ParentFolder ||
                    (this.ParentFolder != null &&
                    this.ParentFolder.Equals(input.ParentFolder))
                ) && 
                (
                    this.DynamicFolder == input.DynamicFolder ||
                    (this.DynamicFolder != null &&
                    this.DynamicFolder.Equals(input.DynamicFolder))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.InsertOnProfileEdit == input.InsertOnProfileEdit ||
                    (this.InsertOnProfileEdit != null &&
                    this.InsertOnProfileEdit.Equals(input.InsertOnProfileEdit))
                ) && 
                (
                    this.MoveOnEdit == input.MoveOnEdit ||
                    (this.MoveOnEdit != null &&
                    this.MoveOnEdit.Equals(input.MoveOnEdit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DocumentTypeId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeId.GetHashCode();
                if (this.ParentFolder != null)
                    hashCode = hashCode * 59 + this.ParentFolder.GetHashCode();
                if (this.DynamicFolder != null)
                    hashCode = hashCode * 59 + this.DynamicFolder.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.InsertOnProfileEdit != null)
                    hashCode = hashCode * 59 + this.InsertOnProfileEdit.GetHashCode();
                if (this.MoveOnEdit != null)
                    hashCode = hashCode * 59 + this.MoveOnEdit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
