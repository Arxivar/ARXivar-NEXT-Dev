/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call force the engine to execute the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns></returns>
        void ApiV1ProcessesExecutePost (EntityGuidProcessIdRm body);

        /// <summary>
        /// This call force the engine to execute the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ProcessesExecutePostWithHttpInfo (EntityGuidProcessIdRm body);
        /// <summary>
        /// This call deletes a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns></returns>
        void ApiV1ProcessesProcessIdDelete (Guid? processId);

        /// <summary>
        /// This call deletes a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ProcessesProcessIdDeleteWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInstancesRm</returns>
        ProcessInstancesRm ApiV1ProcessesProcessIdDetailGet (Guid? processId);

        /// <summary>
        /// This call returns the process detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInstancesRm</returns>
        ApiResponse<ProcessInstancesRm> ApiV1ProcessesProcessIdDetailGetWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        List<ProcessDocumentForDashboardRm> ApiV1ProcessesProcessIdDocumentsGet (Guid? processId);

        /// <summary>
        /// This call returns the process documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        ApiResponse<List<ProcessDocumentForDashboardRm>> ApiV1ProcessesProcessIdDocumentsGetWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        ProcessHistoryObjectForDashboardRmSearchResponseRm ApiV1ProcessesProcessIdHistoryGet (Guid? processId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdHistoryGetWithHttpInfo (Guid? processId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the process logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogGet (Guid? processId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        ApiResponse<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogGetWithHttpInfo (Guid? processId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the logs of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the logs of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        ApiResponse<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetWithHttpInfo (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the logs of a specific operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the logs of a specific operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        ApiResponse<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetWithHttpInfo (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the note of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;NoteRm&gt;</returns>
        List<NoteRm> ApiV1ProcessesProcessIdNotesGet (Guid? processId);

        /// <summary>
        /// This call returns the note of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;NoteRm&gt;</returns>
        ApiResponse<List<NoteRm>> ApiV1ProcessesProcessIdNotesGetWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the operation history of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        ProcessHistoryOperationForDashboardRmSearchResponseRm ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the operation history of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetWithHttpInfo (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessVariableRmSearchResponseRm</returns>
        ProcessVariableRmSearchResponseRm ApiV1ProcessesProcessIdVariablesGet (Guid? processId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessVariableRmSearchResponseRm</returns>
        ApiResponse<ProcessVariableRmSearchResponseRm> ApiV1ProcessesProcessIdVariablesGetWithHttpInfo (Guid? processId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the view diagram process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>DiagramsForViewRm</returns>
        DiagramsForViewRm ApiV1ProcessesProcessIdViewDiagramGet (Guid? processId);

        /// <summary>
        /// This call returns the view diagram process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of DiagramsForViewRm</returns>
        ApiResponse<DiagramsForViewRm> ApiV1ProcessesProcessIdViewDiagramGetWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call searches processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProcessDashboardSearchResponseRm</returns>
        ProcessDashboardSearchResponseRm ApiV1ProcessesSearchPost (ProcessDashboardSearchRequestRm body);

        /// <summary>
        /// This call searches processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProcessDashboardSearchResponseRm</returns>
        ApiResponse<ProcessDashboardSearchResponseRm> ApiV1ProcessesSearchPostWithHttpInfo (ProcessDashboardSearchRequestRm body);
        /// <summary>
        /// This call stops a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns></returns>
        void ApiV1ProcessesStopPost (EntityGuidProcessIdRm body);

        /// <summary>
        /// This call stops a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ProcessesStopPostWithHttpInfo (EntityGuidProcessIdRm body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call force the engine to execute the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ProcessesExecutePostAsync (EntityGuidProcessIdRm body);

        /// <summary>
        /// This call force the engine to execute the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesExecutePostAsyncWithHttpInfo (EntityGuidProcessIdRm body);
        /// <summary>
        /// This call deletes a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ProcessesProcessIdDeleteAsync (Guid? processId);

        /// <summary>
        /// This call deletes a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesProcessIdDeleteAsyncWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInstancesRm</returns>
        System.Threading.Tasks.Task<ProcessInstancesRm> ApiV1ProcessesProcessIdDetailGetAsync (Guid? processId);

        /// <summary>
        /// This call returns the process detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInstancesRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstancesRm>> ApiV1ProcessesProcessIdDetailGetAsyncWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessDocumentForDashboardRm>> ApiV1ProcessesProcessIdDocumentsGetAsync (Guid? processId);

        /// <summary>
        /// This call returns the process documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDocumentForDashboardRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessDocumentForDashboardRm>>> ApiV1ProcessesProcessIdDocumentsGetAsyncWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the process history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<ProcessHistoryObjectForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdHistoryGetAsync (Guid? processId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessHistoryObjectForDashboardRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm>> ApiV1ProcessesProcessIdHistoryGetAsyncWithHttpInfo (Guid? processId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the process logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogGetAsync (Guid? processId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogGetAsyncWithHttpInfo (Guid? processId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the logs of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetAsync (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the logs of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetAsyncWithHttpInfo (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the logs of a specific operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetAsync (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the logs of a specific operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetAsyncWithHttpInfo (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the note of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;NoteRm&gt;</returns>
        System.Threading.Tasks.Task<List<NoteRm>> ApiV1ProcessesProcessIdNotesGetAsync (Guid? processId);

        /// <summary>
        /// This call returns the note of a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;NoteRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NoteRm>>> ApiV1ProcessesProcessIdNotesGetAsyncWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call returns the operation history of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<ProcessHistoryOperationForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetAsync (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the operation history of a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessHistoryOperationForDashboardRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm>> ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetAsyncWithHttpInfo (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessVariableRmSearchResponseRm</returns>
        System.Threading.Tasks.Task<ProcessVariableRmSearchResponseRm> ApiV1ProcessesProcessIdVariablesGetAsync (Guid? processId, int? skip = null, int? take = null);

        /// <summary>
        /// This call returns the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessVariableRmSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessVariableRmSearchResponseRm>> ApiV1ProcessesProcessIdVariablesGetAsyncWithHttpInfo (Guid? processId, int? skip = null, int? take = null);
        /// <summary>
        /// This call returns the view diagram process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of DiagramsForViewRm</returns>
        System.Threading.Tasks.Task<DiagramsForViewRm> ApiV1ProcessesProcessIdViewDiagramGetAsync (Guid? processId);

        /// <summary>
        /// This call returns the view diagram process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (DiagramsForViewRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagramsForViewRm>> ApiV1ProcessesProcessIdViewDiagramGetAsyncWithHttpInfo (Guid? processId);
        /// <summary>
        /// This call searches processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProcessDashboardSearchResponseRm</returns>
        System.Threading.Tasks.Task<ProcessDashboardSearchResponseRm> ApiV1ProcessesSearchPostAsync (ProcessDashboardSearchRequestRm body);

        /// <summary>
        /// This call searches processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProcessDashboardSearchResponseRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDashboardSearchResponseRm>> ApiV1ProcessesSearchPostAsyncWithHttpInfo (ProcessDashboardSearchRequestRm body);
        /// <summary>
        /// This call stops a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ProcessesStopPostAsync (EntityGuidProcessIdRm body);

        /// <summary>
        /// This call stops a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesStopPostAsyncWithHttpInfo (EntityGuidProcessIdRm body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessesApi : IProcessesApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessesApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessesApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call force the engine to execute the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns></returns>
        public void ApiV1ProcessesExecutePost (EntityGuidProcessIdRm body)
        {
             ApiV1ProcessesExecutePostWithHttpInfo(body);
        }

        /// <summary>
        /// This call force the engine to execute the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ProcessesExecutePostWithHttpInfo (EntityGuidProcessIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesExecutePost");

            var localVarPath = "/api/v1/processes/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesExecutePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call force the engine to execute the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ProcessesExecutePostAsync (EntityGuidProcessIdRm body)
        {
             await ApiV1ProcessesExecutePostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call force the engine to execute the process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to be performed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesExecutePostAsyncWithHttpInfo (EntityGuidProcessIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesExecutePost");

            var localVarPath = "/api/v1/processes/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesExecutePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns></returns>
        public void ApiV1ProcessesProcessIdDelete (Guid? processId)
        {
             ApiV1ProcessesProcessIdDeleteWithHttpInfo(processId);
        }

        /// <summary>
        /// This call deletes a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ProcessesProcessIdDeleteWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDelete");

            var localVarPath = "/api/v1/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ProcessesProcessIdDeleteAsync (Guid? processId)
        {
             await ApiV1ProcessesProcessIdDeleteAsyncWithHttpInfo(processId);

        }

        /// <summary>
        /// This call deletes a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesProcessIdDeleteAsyncWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDelete");

            var localVarPath = "/api/v1/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the process detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ProcessInstancesRm</returns>
        public ProcessInstancesRm ApiV1ProcessesProcessIdDetailGet (Guid? processId)
        {
             ApiResponse<ProcessInstancesRm> localVarResponse = ApiV1ProcessesProcessIdDetailGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of ProcessInstancesRm</returns>
        public ApiResponse< ProcessInstancesRm > ApiV1ProcessesProcessIdDetailGetWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDetailGet");

            var localVarPath = "/api/v1/processes/{processId}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDetailGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstancesRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstancesRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstancesRm)));
        }

        /// <summary>
        /// This call returns the process detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ProcessInstancesRm</returns>
        public async System.Threading.Tasks.Task<ProcessInstancesRm> ApiV1ProcessesProcessIdDetailGetAsync (Guid? processId)
        {
             ApiResponse<ProcessInstancesRm> localVarResponse = await ApiV1ProcessesProcessIdDetailGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (ProcessInstancesRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstancesRm>> ApiV1ProcessesProcessIdDetailGetAsyncWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDetailGet");

            var localVarPath = "/api/v1/processes/{processId}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDetailGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstancesRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstancesRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstancesRm)));
        }

        /// <summary>
        /// This call returns the process documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        public List<ProcessDocumentForDashboardRm> ApiV1ProcessesProcessIdDocumentsGet (Guid? processId)
        {
             ApiResponse<List<ProcessDocumentForDashboardRm>> localVarResponse = ApiV1ProcessesProcessIdDocumentsGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        public ApiResponse< List<ProcessDocumentForDashboardRm> > ApiV1ProcessesProcessIdDocumentsGetWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDocumentsGet");

            var localVarPath = "/api/v1/processes/{processId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDocumentForDashboardRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDocumentForDashboardRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDocumentForDashboardRm>)));
        }

        /// <summary>
        /// This call returns the process documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;ProcessDocumentForDashboardRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessDocumentForDashboardRm>> ApiV1ProcessesProcessIdDocumentsGetAsync (Guid? processId)
        {
             ApiResponse<List<ProcessDocumentForDashboardRm>> localVarResponse = await ApiV1ProcessesProcessIdDocumentsGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDocumentForDashboardRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessDocumentForDashboardRm>>> ApiV1ProcessesProcessIdDocumentsGetAsyncWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdDocumentsGet");

            var localVarPath = "/api/v1/processes/{processId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdDocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDocumentForDashboardRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDocumentForDashboardRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDocumentForDashboardRm>)));
        }

        /// <summary>
        /// This call returns the process history 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        public ProcessHistoryObjectForDashboardRmSearchResponseRm ApiV1ProcessesProcessIdHistoryGet (Guid? processId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdHistoryGetWithHttpInfo(processId, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process history 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        public ApiResponse< ProcessHistoryObjectForDashboardRmSearchResponseRm > ApiV1ProcessesProcessIdHistoryGetWithHttpInfo (Guid? processId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdHistoryGet");

            var localVarPath = "/api/v1/processes/{processId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessHistoryObjectForDashboardRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessHistoryObjectForDashboardRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the process history 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessHistoryObjectForDashboardRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<ProcessHistoryObjectForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdHistoryGetAsync (Guid? processId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdHistoryGetAsyncWithHttpInfo(processId, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process history 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessHistoryObjectForDashboardRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm>> ApiV1ProcessesProcessIdHistoryGetAsyncWithHttpInfo (Guid? processId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdHistoryGet");

            var localVarPath = "/api/v1/processes/{processId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessHistoryObjectForDashboardRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessHistoryObjectForDashboardRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessHistoryObjectForDashboardRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the process logs 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        public LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogGet (Guid? processId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdLogGetWithHttpInfo(processId, level, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process logs 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        public ApiResponse< LogEntryRmSearchResponseRm > ApiV1ProcessesProcessIdLogGetWithHttpInfo (Guid? processId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogGet");

            var localVarPath = "/api/v1/processes/{processId}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the process logs 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogGetAsync (Guid? processId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdLogGetAsyncWithHttpInfo(processId, level, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process logs 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogGetAsyncWithHttpInfo (Guid? processId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogGet");

            var localVarPath = "/api/v1/processes/{processId}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the logs of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        public LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetWithHttpInfo(processId, processObjectId, level, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the logs of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        public ApiResponse< LogEntryRmSearchResponseRm > ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetWithHttpInfo (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");
            // verify the required parameter 'processObjectId' is set
            if (processObjectId == null)
                throw new ApiException(400, "Missing required parameter 'processObjectId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");

            var localVarPath = "/api/v1/processes/{processId}/log/object/{processObjectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processObjectId != null) localVarPathParams.Add("processObjectId", this.Configuration.ApiClient.ParameterToString(processObjectId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the logs of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetAsync (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetAsyncWithHttpInfo(processId, processObjectId, level, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the logs of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogObjectProcessObjectIdGetAsyncWithHttpInfo (Guid? processId, Guid? processObjectId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");
            // verify the required parameter 'processObjectId' is set
            if (processObjectId == null)
                throw new ApiException(400, "Missing required parameter 'processObjectId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet");

            var localVarPath = "/api/v1/processes/{processId}/log/object/{processObjectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processObjectId != null) localVarPathParams.Add("processObjectId", this.Configuration.ApiClient.ParameterToString(processObjectId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogObjectProcessObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the logs of a specific operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>LogEntryRmSearchResponseRm</returns>
        public LogEntryRmSearchResponseRm ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetWithHttpInfo(processId, processOperationId, level, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the logs of a specific operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of LogEntryRmSearchResponseRm</returns>
        public ApiResponse< LogEntryRmSearchResponseRm > ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetWithHttpInfo (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");
            // verify the required parameter 'processOperationId' is set
            if (processOperationId == null)
                throw new ApiException(400, "Missing required parameter 'processOperationId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");

            var localVarPath = "/api/v1/processes/{processId}/log/operation/{processOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processOperationId != null) localVarPathParams.Add("processOperationId", this.Configuration.ApiClient.ParameterToString(processOperationId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the logs of a specific operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of LogEntryRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<LogEntryRmSearchResponseRm> ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetAsync (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null)
        {
             ApiResponse<LogEntryRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetAsyncWithHttpInfo(processId, processOperationId, level, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the logs of a specific operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processOperationId">Operation identifier</param>
        /// <param name="level">Log level [0&#x3D;Fatal, 1&#x3D;Error, 2&#x3D;Warning, 3&#x3D;Information, 4&#x3D;Debug, 5&#x3D;Verbose, 20&#x3D;Other]</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (LogEntryRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogEntryRmSearchResponseRm>> ApiV1ProcessesProcessIdLogOperationProcessOperationIdGetAsyncWithHttpInfo (Guid? processId, Guid? processOperationId, int? level, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");
            // verify the required parameter 'processOperationId' is set
            if (processOperationId == null)
                throw new ApiException(400, "Missing required parameter 'processOperationId' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");
            // verify the required parameter 'level' is set
            if (level == null)
                throw new ApiException(400, "Missing required parameter 'level' when calling ProcessesApi->ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet");

            var localVarPath = "/api/v1/processes/{processId}/log/operation/{processOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processOperationId != null) localVarPathParams.Add("processOperationId", this.Configuration.ApiClient.ParameterToString(processOperationId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdLogOperationProcessOperationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogEntryRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogEntryRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogEntryRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the note of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>List&lt;NoteRm&gt;</returns>
        public List<NoteRm> ApiV1ProcessesProcessIdNotesGet (Guid? processId)
        {
             ApiResponse<List<NoteRm>> localVarResponse = ApiV1ProcessesProcessIdNotesGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the note of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of List&lt;NoteRm&gt;</returns>
        public ApiResponse< List<NoteRm> > ApiV1ProcessesProcessIdNotesGetWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdNotesGet");

            var localVarPath = "/api/v1/processes/{processId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdNotesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NoteRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NoteRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NoteRm>)));
        }

        /// <summary>
        /// This call returns the note of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of List&lt;NoteRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<NoteRm>> ApiV1ProcessesProcessIdNotesGetAsync (Guid? processId)
        {
             ApiResponse<List<NoteRm>> localVarResponse = await ApiV1ProcessesProcessIdNotesGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the note of a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (List&lt;NoteRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NoteRm>>> ApiV1ProcessesProcessIdNotesGetAsyncWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdNotesGet");

            var localVarPath = "/api/v1/processes/{processId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdNotesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NoteRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NoteRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NoteRm>)));
        }

        /// <summary>
        /// This call returns the operation history of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        public ProcessHistoryOperationForDashboardRmSearchResponseRm ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetWithHttpInfo(processId, processObjectId, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the operation history of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        public ApiResponse< ProcessHistoryOperationForDashboardRmSearchResponseRm > ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetWithHttpInfo (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet");
            // verify the required parameter 'processObjectId' is set
            if (processObjectId == null)
                throw new ApiException(400, "Missing required parameter 'processObjectId' when calling ProcessesApi->ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet");

            var localVarPath = "/api/v1/processes/{processId}/operationHistory/{processObjectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processObjectId != null) localVarPathParams.Add("processObjectId", this.Configuration.ApiClient.ParameterToString(processObjectId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessHistoryOperationForDashboardRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessHistoryOperationForDashboardRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the operation history of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessHistoryOperationForDashboardRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<ProcessHistoryOperationForDashboardRmSearchResponseRm> ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetAsync (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetAsyncWithHttpInfo(processId, processObjectId, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the operation history of a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="processObjectId">Object identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessHistoryOperationForDashboardRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm>> ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGetAsyncWithHttpInfo (Guid? processId, Guid? processObjectId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet");
            // verify the required parameter 'processObjectId' is set
            if (processObjectId == null)
                throw new ApiException(400, "Missing required parameter 'processObjectId' when calling ProcessesApi->ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet");

            var localVarPath = "/api/v1/processes/{processId}/operationHistory/{processObjectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processObjectId != null) localVarPathParams.Add("processObjectId", this.Configuration.ApiClient.ParameterToString(processObjectId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdOperationHistoryProcessObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessHistoryOperationForDashboardRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessHistoryOperationForDashboardRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessHistoryOperationForDashboardRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ProcessVariableRmSearchResponseRm</returns>
        public ProcessVariableRmSearchResponseRm ApiV1ProcessesProcessIdVariablesGet (Guid? processId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessVariableRmSearchResponseRm> localVarResponse = ApiV1ProcessesProcessIdVariablesGetWithHttpInfo(processId, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>ApiResponse of ProcessVariableRmSearchResponseRm</returns>
        public ApiResponse< ProcessVariableRmSearchResponseRm > ApiV1ProcessesProcessIdVariablesGetWithHttpInfo (Guid? processId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdVariablesGet");

            var localVarPath = "/api/v1/processes/{processId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdVariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariableRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariableRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariableRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ProcessVariableRmSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<ProcessVariableRmSearchResponseRm> ApiV1ProcessesProcessIdVariablesGetAsync (Guid? processId, int? skip = null, int? take = null)
        {
             ApiResponse<ProcessVariableRmSearchResponseRm> localVarResponse = await ApiV1ProcessesProcessIdVariablesGetAsyncWithHttpInfo(processId, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the process variables 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <param name="skip">Number of element to skip (used for pagination) (optional, default to 0)</param>
        /// <param name="take">Number of element to retrieve (used for pagination) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ProcessVariableRmSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessVariableRmSearchResponseRm>> ApiV1ProcessesProcessIdVariablesGetAsyncWithHttpInfo (Guid? processId, int? skip = null, int? take = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdVariablesGet");

            var localVarPath = "/api/v1/processes/{processId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdVariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessVariableRmSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessVariableRmSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessVariableRmSearchResponseRm)));
        }

        /// <summary>
        /// This call returns the view diagram process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>DiagramsForViewRm</returns>
        public DiagramsForViewRm ApiV1ProcessesProcessIdViewDiagramGet (Guid? processId)
        {
             ApiResponse<DiagramsForViewRm> localVarResponse = ApiV1ProcessesProcessIdViewDiagramGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the view diagram process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>ApiResponse of DiagramsForViewRm</returns>
        public ApiResponse< DiagramsForViewRm > ApiV1ProcessesProcessIdViewDiagramGetWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdViewDiagramGet");

            var localVarPath = "/api/v1/processes/{processId}/view-diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdViewDiagramGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsForViewRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsForViewRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsForViewRm)));
        }

        /// <summary>
        /// This call returns the view diagram process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of DiagramsForViewRm</returns>
        public async System.Threading.Tasks.Task<DiagramsForViewRm> ApiV1ProcessesProcessIdViewDiagramGetAsync (Guid? processId)
        {
             ApiResponse<DiagramsForViewRm> localVarResponse = await ApiV1ProcessesProcessIdViewDiagramGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the view diagram process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process identifier</param>
        /// <returns>Task of ApiResponse (DiagramsForViewRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagramsForViewRm>> ApiV1ProcessesProcessIdViewDiagramGetAsyncWithHttpInfo (Guid? processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ApiV1ProcessesProcessIdViewDiagramGet");

            var localVarPath = "/api/v1/processes/{processId}/view-diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesProcessIdViewDiagramGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagramsForViewRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagramsForViewRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagramsForViewRm)));
        }

        /// <summary>
        /// This call searches processes 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProcessDashboardSearchResponseRm</returns>
        public ProcessDashboardSearchResponseRm ApiV1ProcessesSearchPost (ProcessDashboardSearchRequestRm body)
        {
             ApiResponse<ProcessDashboardSearchResponseRm> localVarResponse = ApiV1ProcessesSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches processes 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProcessDashboardSearchResponseRm</returns>
        public ApiResponse< ProcessDashboardSearchResponseRm > ApiV1ProcessesSearchPostWithHttpInfo (ProcessDashboardSearchRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesSearchPost");

            var localVarPath = "/api/v1/processes/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDashboardSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDashboardSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDashboardSearchResponseRm)));
        }

        /// <summary>
        /// This call searches processes 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProcessDashboardSearchResponseRm</returns>
        public async System.Threading.Tasks.Task<ProcessDashboardSearchResponseRm> ApiV1ProcessesSearchPostAsync (ProcessDashboardSearchRequestRm body)
        {
             ApiResponse<ProcessDashboardSearchResponseRm> localVarResponse = await ApiV1ProcessesSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches processes 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProcessDashboardSearchResponseRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDashboardSearchResponseRm>> ApiV1ProcessesSearchPostAsyncWithHttpInfo (ProcessDashboardSearchRequestRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesSearchPost");

            var localVarPath = "/api/v1/processes/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDashboardSearchResponseRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDashboardSearchResponseRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDashboardSearchResponseRm)));
        }

        /// <summary>
        /// This call stops a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns></returns>
        public void ApiV1ProcessesStopPost (EntityGuidProcessIdRm body)
        {
             ApiV1ProcessesStopPostWithHttpInfo(body);
        }

        /// <summary>
        /// This call stops a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ProcessesStopPostWithHttpInfo (EntityGuidProcessIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesStopPost");

            var localVarPath = "/api/v1/processes/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesStopPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call stops a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ProcessesStopPostAsync (EntityGuidProcessIdRm body)
        {
             await ApiV1ProcessesStopPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call stops a process 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process to stop</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessesStopPostAsyncWithHttpInfo (EntityGuidProcessIdRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessesApi->ApiV1ProcessesStopPost");

            var localVarPath = "/api/v1/processes/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessesStopPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
