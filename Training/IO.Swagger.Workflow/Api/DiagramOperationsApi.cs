/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Workflow.Client;
using IO.Swagger.Workflow.Model;

namespace IO.Swagger.Workflow.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDiagramOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the default retry configuration operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>OperationRetryConfigurationRm</returns>
        OperationRetryConfigurationRm ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet (int? operationType);

        /// <summary>
        /// This call returns the default retry configuration operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>ApiResponse of OperationRetryConfigurationRm</returns>
        ApiResponse<OperationRetryConfigurationRm> ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetWithHttpInfo (int? operationType);
        /// <summary>
        /// This call returns the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>List&lt;OperationsRm&gt;</returns>
        List<OperationsRm> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet (Guid? diagramId, Guid? objectId);

        /// <summary>
        /// This call returns the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>ApiResponse of List&lt;OperationsRm&gt;</returns>
        ApiResponse<List<OperationsRm>> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetWithHttpInfo (Guid? diagramId, Guid? objectId);
        /// <summary>
        /// This call deletes an operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns></returns>
        void ApiV1DiagramOperationsIdDiagramDiagramIdDelete (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call deletes an operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramOperationsIdDiagramDiagramIdDeleteWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call returns an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>OperationsRm</returns>
        OperationsRm ApiV1DiagramOperationsIdGet (Guid? id);

        /// <summary>
        /// This call returns an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>ApiResponse of OperationsRm</returns>
        ApiResponse<OperationsRm> ApiV1DiagramOperationsIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds a new operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>OperationsRm</returns>
        OperationsRm ApiV1DiagramOperationsPost (OperationsRm body);

        /// <summary>
        /// This call adds a new operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>ApiResponse of OperationsRm</returns>
        ApiResponse<OperationsRm> ApiV1DiagramOperationsPostWithHttpInfo (OperationsRm body);
        /// <summary>
        /// This call updates an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns></returns>
        void ApiV1DiagramOperationsPut (OperationsUpdateRm body);

        /// <summary>
        /// This call updates an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramOperationsPutWithHttpInfo (OperationsUpdateRm body);
        /// <summary>
        /// This call sorts the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns></returns>
        void ApiV1DiagramOperationsSortPut (OperationsSortRm body);

        /// <summary>
        /// This call sorts the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DiagramOperationsSortPutWithHttpInfo (OperationsSortRm body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the default retry configuration operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>Task of OperationRetryConfigurationRm</returns>
        System.Threading.Tasks.Task<OperationRetryConfigurationRm> ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetAsync (int? operationType);

        /// <summary>
        /// This call returns the default retry configuration operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>Task of ApiResponse (OperationRetryConfigurationRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationRetryConfigurationRm>> ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetAsyncWithHttpInfo (int? operationType);
        /// <summary>
        /// This call returns the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>Task of List&lt;OperationsRm&gt;</returns>
        System.Threading.Tasks.Task<List<OperationsRm>> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetAsync (Guid? diagramId, Guid? objectId);

        /// <summary>
        /// This call returns the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>Task of ApiResponse (List&lt;OperationsRm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OperationsRm>>> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetAsyncWithHttpInfo (Guid? diagramId, Guid? objectId);
        /// <summary>
        /// This call deletes an operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramOperationsIdDiagramDiagramIdDeleteAsync (Guid? id, Guid? diagramId);

        /// <summary>
        /// This call deletes an operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsIdDiagramDiagramIdDeleteAsyncWithHttpInfo (Guid? id, Guid? diagramId);
        /// <summary>
        /// This call returns an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>Task of OperationsRm</returns>
        System.Threading.Tasks.Task<OperationsRm> ApiV1DiagramOperationsIdGetAsync (Guid? id);

        /// <summary>
        /// This call returns an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>Task of ApiResponse (OperationsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationsRm>> ApiV1DiagramOperationsIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// This call adds a new operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>Task of OperationsRm</returns>
        System.Threading.Tasks.Task<OperationsRm> ApiV1DiagramOperationsPostAsync (OperationsRm body);

        /// <summary>
        /// This call adds a new operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>Task of ApiResponse (OperationsRm)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationsRm>> ApiV1DiagramOperationsPostAsyncWithHttpInfo (OperationsRm body);
        /// <summary>
        /// This call updates an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramOperationsPutAsync (OperationsUpdateRm body);

        /// <summary>
        /// This call updates an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsPutAsyncWithHttpInfo (OperationsUpdateRm body);
        /// <summary>
        /// This call sorts the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DiagramOperationsSortPutAsync (OperationsSortRm body);

        /// <summary>
        /// This call sorts the operations associated to a specific object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsSortPutAsyncWithHttpInfo (OperationsSortRm body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DiagramOperationsApi : IDiagramOperationsApi
    {
        private IO.Swagger.Workflow.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramOperationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Workflow.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramOperationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DiagramOperationsApi()
        {
            this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramOperationsApi(IO.Swagger.Workflow.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Workflow.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Workflow.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Workflow.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Workflow.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the default retry configuration operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>OperationRetryConfigurationRm</returns>
        public OperationRetryConfigurationRm ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet (int? operationType)
        {
             ApiResponse<OperationRetryConfigurationRm> localVarResponse = ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetWithHttpInfo(operationType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the default retry configuration operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>ApiResponse of OperationRetryConfigurationRm</returns>
        public ApiResponse< OperationRetryConfigurationRm > ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetWithHttpInfo (int? operationType)
        {
            // verify the required parameter 'operationType' is set
            if (operationType == null)
                throw new ApiException(400, "Missing required parameter 'operationType' when calling DiagramOperationsApi->ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet");

            var localVarPath = "/api/v1/diagram-operations/default-retry-configuration/{operationType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationType != null) localVarPathParams.Add("operationType", this.Configuration.ApiClient.ParameterToString(operationType)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationRetryConfigurationRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationRetryConfigurationRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationRetryConfigurationRm)));
        }

        /// <summary>
        /// This call returns the default retry configuration operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>Task of OperationRetryConfigurationRm</returns>
        public async System.Threading.Tasks.Task<OperationRetryConfigurationRm> ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetAsync (int? operationType)
        {
             ApiResponse<OperationRetryConfigurationRm> localVarResponse = await ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetAsyncWithHttpInfo(operationType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the default retry configuration operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationType">Operation type [0&#x3D;Test, 1&#x3D;ActivateOutcome, 2&#x3D;Chrono, 3&#x3D;ThrowEvent, 4&#x3D;SendIxFe, 5&#x3D;RecalcRelations, 6&#x3D;Binder, 7&#x3D;Folder, 8&#x3D;SetVariablesBySqlQuery, 9&#x3D;SetVariablesByRestApiCall, 10&#x3D;SetVariableByFormula, 11&#x3D;SetVariableByDefaultValue, 12&#x3D;SetVariablesByModuleFields, 13&#x3D;ExecuteSqlQuery, 14&#x3D;ExecuteRestApiCall, 15&#x3D;CreateNote, 16&#x3D;StartProcess, 17&#x3D;CopyDocumentLocal, 18&#x3D;CopyDocumentOnline, 19&#x3D;CompileModule, 20&#x3D;SetToSend, 21&#x3D;SendIxCe, 22&#x3D;RemoveLocalDocumentCopy, 23&#x3D;SetVariablesByProfileFields, 24&#x3D;UpdateProfile, 25&#x3D;SetProcessDeleteOption, 26&#x3D;IxFeApproveReject, 27&#x3D;SendEmail, 28&#x3D;CreateBinder]</param>
        /// <returns>Task of ApiResponse (OperationRetryConfigurationRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationRetryConfigurationRm>> ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGetAsyncWithHttpInfo (int? operationType)
        {
            // verify the required parameter 'operationType' is set
            if (operationType == null)
                throw new ApiException(400, "Missing required parameter 'operationType' when calling DiagramOperationsApi->ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet");

            var localVarPath = "/api/v1/diagram-operations/default-retry-configuration/{operationType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationType != null) localVarPathParams.Add("operationType", this.Configuration.ApiClient.ParameterToString(operationType)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsDefaultRetryConfigurationOperationTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationRetryConfigurationRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationRetryConfigurationRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationRetryConfigurationRm)));
        }

        /// <summary>
        /// This call returns the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>List&lt;OperationsRm&gt;</returns>
        public List<OperationsRm> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet (Guid? diagramId, Guid? objectId)
        {
             ApiResponse<List<OperationsRm>> localVarResponse = ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetWithHttpInfo(diagramId, objectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>ApiResponse of List&lt;OperationsRm&gt;</returns>
        public ApiResponse< List<OperationsRm> > ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetWithHttpInfo (Guid? diagramId, Guid? objectId)
        {
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramOperationsApi->ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling DiagramOperationsApi->ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet");

            var localVarPath = "/api/v1/diagram-operations/diagram/{diagramId}/object/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationsRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OperationsRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationsRm>)));
        }

        /// <summary>
        /// This call returns the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>Task of List&lt;OperationsRm&gt;</returns>
        public async System.Threading.Tasks.Task<List<OperationsRm>> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetAsync (Guid? diagramId, Guid? objectId)
        {
             ApiResponse<List<OperationsRm>> localVarResponse = await ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetAsyncWithHttpInfo(diagramId, objectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId">Diagram identifier</param>
        /// <param name="objectId">Object identifier</param>
        /// <returns>Task of ApiResponse (List&lt;OperationsRm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OperationsRm>>> ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGetAsyncWithHttpInfo (Guid? diagramId, Guid? objectId)
        {
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramOperationsApi->ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling DiagramOperationsApi->ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet");

            var localVarPath = "/api/v1/diagram-operations/diagram/{diagramId}/object/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsDiagramDiagramIdObjectObjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationsRm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OperationsRm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationsRm>)));
        }

        /// <summary>
        /// This call deletes an operations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns></returns>
        public void ApiV1DiagramOperationsIdDiagramDiagramIdDelete (Guid? id, Guid? diagramId)
        {
             ApiV1DiagramOperationsIdDiagramDiagramIdDeleteWithHttpInfo(id, diagramId);
        }

        /// <summary>
        /// This call deletes an operations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramOperationsIdDiagramDiagramIdDeleteWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdDiagramDiagramIdDelete");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdDiagramDiagramIdDelete");

            var localVarPath = "/api/v1/diagram-operations/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsIdDiagramDiagramIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes an operations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramOperationsIdDiagramDiagramIdDeleteAsync (Guid? id, Guid? diagramId)
        {
             await ApiV1DiagramOperationsIdDiagramDiagramIdDeleteAsyncWithHttpInfo(id, diagramId);

        }

        /// <summary>
        /// This call deletes an operations 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <param name="diagramId">Diagram identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsIdDiagramDiagramIdDeleteAsyncWithHttpInfo (Guid? id, Guid? diagramId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdDiagramDiagramIdDelete");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdDiagramDiagramIdDelete");

            var localVarPath = "/api/v1/diagram-operations/{id}/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsIdDiagramDiagramIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>OperationsRm</returns>
        public OperationsRm ApiV1DiagramOperationsIdGet (Guid? id)
        {
             ApiResponse<OperationsRm> localVarResponse = ApiV1DiagramOperationsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>ApiResponse of OperationsRm</returns>
        public ApiResponse< OperationsRm > ApiV1DiagramOperationsIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdGet");

            var localVarPath = "/api/v1/diagram-operations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationsRm)));
        }

        /// <summary>
        /// This call returns an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>Task of OperationsRm</returns>
        public async System.Threading.Tasks.Task<OperationsRm> ApiV1DiagramOperationsIdGetAsync (Guid? id)
        {
             ApiResponse<OperationsRm> localVarResponse = await ApiV1DiagramOperationsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Operation identifier</param>
        /// <returns>Task of ApiResponse (OperationsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationsRm>> ApiV1DiagramOperationsIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DiagramOperationsApi->ApiV1DiagramOperationsIdGet");

            var localVarPath = "/api/v1/diagram-operations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationsRm)));
        }

        /// <summary>
        /// This call adds a new operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>OperationsRm</returns>
        public OperationsRm ApiV1DiagramOperationsPost (OperationsRm body)
        {
             ApiResponse<OperationsRm> localVarResponse = ApiV1DiagramOperationsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>ApiResponse of OperationsRm</returns>
        public ApiResponse< OperationsRm > ApiV1DiagramOperationsPostWithHttpInfo (OperationsRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsPost");

            var localVarPath = "/api/v1/diagram-operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationsRm)));
        }

        /// <summary>
        /// This call adds a new operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>Task of OperationsRm</returns>
        public async System.Threading.Tasks.Task<OperationsRm> ApiV1DiagramOperationsPostAsync (OperationsRm body)
        {
             ApiResponse<OperationsRm> localVarResponse = await ApiV1DiagramOperationsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to add</param>
        /// <returns>Task of ApiResponse (OperationsRm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationsRm>> ApiV1DiagramOperationsPostAsyncWithHttpInfo (OperationsRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsPost");

            var localVarPath = "/api/v1/diagram-operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationsRm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationsRm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationsRm)));
        }

        /// <summary>
        /// This call updates an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns></returns>
        public void ApiV1DiagramOperationsPut (OperationsUpdateRm body)
        {
             ApiV1DiagramOperationsPutWithHttpInfo(body);
        }

        /// <summary>
        /// This call updates an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramOperationsPutWithHttpInfo (OperationsUpdateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsPut");

            var localVarPath = "/api/v1/diagram-operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramOperationsPutAsync (OperationsUpdateRm body)
        {
             await ApiV1DiagramOperationsPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call updates an operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsPutAsyncWithHttpInfo (OperationsUpdateRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsPut");

            var localVarPath = "/api/v1/diagram-operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sorts the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns></returns>
        public void ApiV1DiagramOperationsSortPut (OperationsSortRm body)
        {
             ApiV1DiagramOperationsSortPutWithHttpInfo(body);
        }

        /// <summary>
        /// This call sorts the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DiagramOperationsSortPutWithHttpInfo (OperationsSortRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsSortPut");

            var localVarPath = "/api/v1/diagram-operations/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsSortPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sorts the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DiagramOperationsSortPutAsync (OperationsSortRm body)
        {
             await ApiV1DiagramOperationsSortPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sorts the operations associated to a specific object 
        /// </summary>
        /// <exception cref="IO.Swagger.Workflow.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation to sort</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DiagramOperationsSortPutAsyncWithHttpInfo (OperationsSortRm body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DiagramOperationsApi->ApiV1DiagramOperationsSortPut");

            var localVarPath = "/api/v1/diagram-operations/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DiagramOperationsSortPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
