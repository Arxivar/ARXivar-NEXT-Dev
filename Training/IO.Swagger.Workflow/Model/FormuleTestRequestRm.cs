/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Formula test request model
    /// </summary>
    [DataContract]
        public partial class FormuleTestRequestRm :  IEquatable<FormuleTestRequestRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormuleTestRequestRm" /> class.
        /// </summary>
        /// <param name="formula">Formula to evaluate (required).</param>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="variableValues">List of variables.</param>
        /// <param name="expectedTypeResult">Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono].</param>
        public FormuleTestRequestRm(string formula = default(string), Guid? diagramId = default(Guid?), List<AnyOfFormuleTestRequestRmVariableValuesItems> variableValues = default(List<AnyOfFormuleTestRequestRmVariableValuesItems>), int? expectedTypeResult = default(int?))
        {
            // to ensure "formula" is required (not null)
            if (formula == null)
            {
                throw new InvalidDataException("formula is a required property for FormuleTestRequestRm and cannot be null");
            }
            else
            {
                this.Formula = formula;
            }
            this.DiagramId = diagramId;
            this.VariableValues = variableValues;
            this.ExpectedTypeResult = expectedTypeResult;
        }
        
        /// <summary>
        /// Formula to evaluate
        /// </summary>
        /// <value>Formula to evaluate</value>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// List of variables
        /// </summary>
        /// <value>List of variables</value>
        [DataMember(Name="variableValues", EmitDefaultValue=false)]
        public List<AnyOfFormuleTestRequestRmVariableValuesItems> VariableValues { get; set; }

        /// <summary>
        /// Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono]
        /// </summary>
        /// <value>Variable type [0&#x3D;Any, 1&#x3D;String, 2&#x3D;Int, 3&#x3D;Decimal, 4&#x3D;Boolean, 5&#x3D;Datetime, 6&#x3D;Array, 7&#x3D;Matrix, 8&#x3D;Chrono]</value>
        [DataMember(Name="expectedTypeResult", EmitDefaultValue=false)]
        public int? ExpectedTypeResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormuleTestRequestRm {\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  VariableValues: ").Append(VariableValues).Append("\n");
            sb.Append("  ExpectedTypeResult: ").Append(ExpectedTypeResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormuleTestRequestRm);
        }

        /// <summary>
        /// Returns true if FormuleTestRequestRm instances are equal
        /// </summary>
        /// <param name="input">Instance of FormuleTestRequestRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormuleTestRequestRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.VariableValues == input.VariableValues ||
                    this.VariableValues != null &&
                    input.VariableValues != null &&
                    this.VariableValues.SequenceEqual(input.VariableValues)
                ) && 
                (
                    this.ExpectedTypeResult == input.ExpectedTypeResult ||
                    (this.ExpectedTypeResult != null &&
                    this.ExpectedTypeResult.Equals(input.ExpectedTypeResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.VariableValues != null)
                    hashCode = hashCode * 59 + this.VariableValues.GetHashCode();
                if (this.ExpectedTypeResult != null)
                    hashCode = hashCode * 59 + this.ExpectedTypeResult.GetHashCode();
                return hashCode;
            }
        }

    }
}
