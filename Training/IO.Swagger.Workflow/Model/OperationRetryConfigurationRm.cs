/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Retry operation configuration
    /// </summary>
    [DataContract]
        public partial class OperationRetryConfigurationRm :  IEquatable<OperationRetryConfigurationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationRetryConfigurationRm" /> class.
        /// </summary>
        /// <param name="canRetry">Indicates if an operation can retry later if throw error.</param>
        /// <param name="maxRetryCount">Max retry count allowed.</param>
        /// <param name="strategy">strategy.</param>
        public OperationRetryConfigurationRm(bool? canRetry = default(bool?), int? maxRetryCount = default(int?), OneOfOperationRetryConfigurationRmStrategy strategy = default(OneOfOperationRetryConfigurationRmStrategy))
        {
            this.CanRetry = canRetry;
            this.MaxRetryCount = maxRetryCount;
            this.Strategy = strategy;
        }
        
        /// <summary>
        /// Indicates if an operation can retry later if throw error
        /// </summary>
        /// <value>Indicates if an operation can retry later if throw error</value>
        [DataMember(Name="canRetry", EmitDefaultValue=false)]
        public bool? CanRetry { get; set; }

        /// <summary>
        /// Max retry count allowed
        /// </summary>
        /// <value>Max retry count allowed</value>
        [DataMember(Name="maxRetryCount", EmitDefaultValue=false)]
        public int? MaxRetryCount { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public OneOfOperationRetryConfigurationRmStrategy Strategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationRetryConfigurationRm {\n");
            sb.Append("  CanRetry: ").Append(CanRetry).Append("\n");
            sb.Append("  MaxRetryCount: ").Append(MaxRetryCount).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationRetryConfigurationRm);
        }

        /// <summary>
        /// Returns true if OperationRetryConfigurationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationRetryConfigurationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationRetryConfigurationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanRetry == input.CanRetry ||
                    (this.CanRetry != null &&
                    this.CanRetry.Equals(input.CanRetry))
                ) && 
                (
                    this.MaxRetryCount == input.MaxRetryCount ||
                    (this.MaxRetryCount != null &&
                    this.MaxRetryCount.Equals(input.MaxRetryCount))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanRetry != null)
                    hashCode = hashCode * 59 + this.CanRetry.GetHashCode();
                if (this.MaxRetryCount != null)
                    hashCode = hashCode * 59 + this.MaxRetryCount.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                return hashCode;
            }
        }

    }
}
