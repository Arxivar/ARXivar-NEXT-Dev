/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base class for group tree item
    /// </summary>
    [DataContract]
        public partial class GroupTreeItemBaseRm :  IEquatable<GroupTreeItemBaseRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTreeItemBaseRm" /> class.
        /// </summary>
        /// <param name="id">Group identifier.</param>
        /// <param name="name">Group name.</param>
        /// <param name="childs">Children.</param>
        public GroupTreeItemBaseRm(Guid? id = default(Guid?), string name = default(string), List<GroupTreeItemBaseRm> childs = default(List<GroupTreeItemBaseRm>))
        {
            this.Id = id;
            this.Name = name;
            this.Childs = childs;
        }
        
        /// <summary>
        /// Group identifier
        /// </summary>
        /// <value>Group identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Group name
        /// </summary>
        /// <value>Group name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Children
        /// </summary>
        /// <value>Children</value>
        [DataMember(Name="childs", EmitDefaultValue=false)]
        public List<GroupTreeItemBaseRm> Childs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupTreeItemBaseRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Childs: ").Append(Childs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupTreeItemBaseRm);
        }

        /// <summary>
        /// Returns true if GroupTreeItemBaseRm instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupTreeItemBaseRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupTreeItemBaseRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Childs == input.Childs ||
                    this.Childs != null &&
                    input.Childs != null &&
                    this.Childs.SequenceEqual(input.Childs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Childs != null)
                    hashCode = hashCode * 59 + this.Childs.GetHashCode();
                return hashCode;
            }
        }

    }
}
