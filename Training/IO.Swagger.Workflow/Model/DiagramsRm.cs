/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Describes a diagram model
    /// </summary>
    [DataContract]
        public partial class DiagramsRm :  IEquatable<DiagramsRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramsRm" /> class.
        /// </summary>
        /// <param name="revision">Index revision of the diagram.</param>
        /// <param name="parentId">Reference at the first revision of the diagram.</param>
        /// <param name="status">This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance].</param>
        /// <param name="info">info.</param>
        /// <param name="xmlData">XML description of the diagram.</param>
        /// <param name="runtimeProcessId">Reference at the process identifier.</param>
        /// <param name="supervisorList">Supervisor list (required).</param>
        /// <param name="id">Diagram identifier.</param>
        /// <param name="priority">Diagram priority.</param>
        /// <param name="name">Diagram name (required).</param>
        /// <param name="descriptions">Traslation list of the diagram descriptions.</param>
        /// <param name="details">Traslation list of the diagram details.</param>
        /// <param name="processDeleteOption">processDeleteOption (required).</param>
        /// <param name="outcomes">The outcomes list associated at the diagram.</param>
        /// <param name="diagramGroupId">The diagram group identifier.</param>
        /// <param name="allowMultipleProcess">Defines if another diagram can be started.</param>
        /// <param name="documents">List of the documents associated at the diagram.</param>
        /// <param name="calendarInfo">calendarInfo.</param>
        public DiagramsRm(int? revision = default(int?), Guid? parentId = default(Guid?), int? status = default(int?), RecordInfoRm info = default(RecordInfoRm), string xmlData = default(string), Guid? runtimeProcessId = default(Guid?), List<ArxivarUserInfoRm> supervisorList = default(List<ArxivarUserInfoRm>), Guid? id = default(Guid?), int? priority = default(int?), string name = default(string), List<MultiLanguageValueRm> descriptions = default(List<MultiLanguageValueRm>), List<MultiLanguageValueRm> details = default(List<MultiLanguageValueRm>), ProcessDeleteOptionsRm processDeleteOption = default(ProcessDeleteOptionsRm), List<Guid?> outcomes = default(List<Guid?>), Guid? diagramGroupId = default(Guid?), bool? allowMultipleProcess = default(bool?), List<ProcessDocumentParameterRm> documents = default(List<ProcessDocumentParameterRm>), CalendarInfoRm calendarInfo = default(CalendarInfoRm))
        {
            // to ensure "supervisorList" is required (not null)
            if (supervisorList == null)
            {
                throw new InvalidDataException("supervisorList is a required property for DiagramsRm and cannot be null");
            }
            else
            {
                this.SupervisorList = supervisorList;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DiagramsRm and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "processDeleteOption" is required (not null)
            if (processDeleteOption == null)
            {
                throw new InvalidDataException("processDeleteOption is a required property for DiagramsRm and cannot be null");
            }
            else
            {
                this.ProcessDeleteOption = processDeleteOption;
            }
            this.Revision = revision;
            this.ParentId = parentId;
            this.Status = status;
            this.Info = info;
            this.XmlData = xmlData;
            this.RuntimeProcessId = runtimeProcessId;
            this.Id = id;
            this.Priority = priority;
            this.Descriptions = descriptions;
            this.Details = details;
            this.Outcomes = outcomes;
            this.DiagramGroupId = diagramGroupId;
            this.AllowMultipleProcess = allowMultipleProcess;
            this.Documents = documents;
            this.CalendarInfo = calendarInfo;
        }
        
        /// <summary>
        /// Index revision of the diagram
        /// </summary>
        /// <value>Index revision of the diagram</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public int? Revision { get; set; }

        /// <summary>
        /// Reference at the first revision of the diagram
        /// </summary>
        /// <value>Reference at the first revision of the diagram</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public Guid? ParentId { get; set; }

        /// <summary>
        /// This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance]
        /// </summary>
        /// <value>This enumerative indicates the state of the diagram [0&#x3D;Deleted, 1&#x3D;Online, 2&#x3D;Edit, 3&#x3D;WaitForApprove, 4&#x3D;Offline, 5&#x3D;Revisioned, 6&#x3D;Instance]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public RecordInfoRm Info { get; set; }

        /// <summary>
        /// XML description of the diagram
        /// </summary>
        /// <value>XML description of the diagram</value>
        [DataMember(Name="xmlData", EmitDefaultValue=false)]
        public string XmlData { get; set; }

        /// <summary>
        /// Reference at the process identifier
        /// </summary>
        /// <value>Reference at the process identifier</value>
        [DataMember(Name="runtimeProcessId", EmitDefaultValue=false)]
        public Guid? RuntimeProcessId { get; set; }

        /// <summary>
        /// Supervisor list
        /// </summary>
        /// <value>Supervisor list</value>
        [DataMember(Name="supervisorList", EmitDefaultValue=false)]
        public List<ArxivarUserInfoRm> SupervisorList { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Diagram priority
        /// </summary>
        /// <value>Diagram priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Diagram name
        /// </summary>
        /// <value>Diagram name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Traslation list of the diagram descriptions
        /// </summary>
        /// <value>Traslation list of the diagram descriptions</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Descriptions { get; set; }

        /// <summary>
        /// Traslation list of the diagram details
        /// </summary>
        /// <value>Traslation list of the diagram details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Details { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDeleteOption
        /// </summary>
        [DataMember(Name="processDeleteOption", EmitDefaultValue=false)]
        public ProcessDeleteOptionsRm ProcessDeleteOption { get; set; }

        /// <summary>
        /// The outcomes list associated at the diagram
        /// </summary>
        /// <value>The outcomes list associated at the diagram</value>
        [DataMember(Name="outcomes", EmitDefaultValue=false)]
        public List<Guid?> Outcomes { get; set; }

        /// <summary>
        /// The diagram group identifier
        /// </summary>
        /// <value>The diagram group identifier</value>
        [DataMember(Name="diagramGroupId", EmitDefaultValue=false)]
        public Guid? DiagramGroupId { get; set; }

        /// <summary>
        /// Defines if another diagram can be started
        /// </summary>
        /// <value>Defines if another diagram can be started</value>
        [DataMember(Name="allowMultipleProcess", EmitDefaultValue=false)]
        public bool? AllowMultipleProcess { get; set; }

        /// <summary>
        /// List of the documents associated at the diagram
        /// </summary>
        /// <value>List of the documents associated at the diagram</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<ProcessDocumentParameterRm> Documents { get; set; }

        /// <summary>
        /// Gets or Sets CalendarInfo
        /// </summary>
        [DataMember(Name="calendarInfo", EmitDefaultValue=false)]
        public CalendarInfoRm CalendarInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramsRm {\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  XmlData: ").Append(XmlData).Append("\n");
            sb.Append("  RuntimeProcessId: ").Append(RuntimeProcessId).Append("\n");
            sb.Append("  SupervisorList: ").Append(SupervisorList).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ProcessDeleteOption: ").Append(ProcessDeleteOption).Append("\n");
            sb.Append("  Outcomes: ").Append(Outcomes).Append("\n");
            sb.Append("  DiagramGroupId: ").Append(DiagramGroupId).Append("\n");
            sb.Append("  AllowMultipleProcess: ").Append(AllowMultipleProcess).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  CalendarInfo: ").Append(CalendarInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramsRm);
        }

        /// <summary>
        /// Returns true if DiagramsRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramsRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramsRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.XmlData == input.XmlData ||
                    (this.XmlData != null &&
                    this.XmlData.Equals(input.XmlData))
                ) && 
                (
                    this.RuntimeProcessId == input.RuntimeProcessId ||
                    (this.RuntimeProcessId != null &&
                    this.RuntimeProcessId.Equals(input.RuntimeProcessId))
                ) && 
                (
                    this.SupervisorList == input.SupervisorList ||
                    this.SupervisorList != null &&
                    input.SupervisorList != null &&
                    this.SupervisorList.SequenceEqual(input.SupervisorList)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.ProcessDeleteOption == input.ProcessDeleteOption ||
                    (this.ProcessDeleteOption != null &&
                    this.ProcessDeleteOption.Equals(input.ProcessDeleteOption))
                ) && 
                (
                    this.Outcomes == input.Outcomes ||
                    this.Outcomes != null &&
                    input.Outcomes != null &&
                    this.Outcomes.SequenceEqual(input.Outcomes)
                ) && 
                (
                    this.DiagramGroupId == input.DiagramGroupId ||
                    (this.DiagramGroupId != null &&
                    this.DiagramGroupId.Equals(input.DiagramGroupId))
                ) && 
                (
                    this.AllowMultipleProcess == input.AllowMultipleProcess ||
                    (this.AllowMultipleProcess != null &&
                    this.AllowMultipleProcess.Equals(input.AllowMultipleProcess))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.CalendarInfo == input.CalendarInfo ||
                    (this.CalendarInfo != null &&
                    this.CalendarInfo.Equals(input.CalendarInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.XmlData != null)
                    hashCode = hashCode * 59 + this.XmlData.GetHashCode();
                if (this.RuntimeProcessId != null)
                    hashCode = hashCode * 59 + this.RuntimeProcessId.GetHashCode();
                if (this.SupervisorList != null)
                    hashCode = hashCode * 59 + this.SupervisorList.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.ProcessDeleteOption != null)
                    hashCode = hashCode * 59 + this.ProcessDeleteOption.GetHashCode();
                if (this.Outcomes != null)
                    hashCode = hashCode * 59 + this.Outcomes.GetHashCode();
                if (this.DiagramGroupId != null)
                    hashCode = hashCode * 59 + this.DiagramGroupId.GetHashCode();
                if (this.AllowMultipleProcess != null)
                    hashCode = hashCode * 59 + this.AllowMultipleProcess.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.CalendarInfo != null)
                    hashCode = hashCode * 59 + this.CalendarInfo.GetHashCode();
                return hashCode;
            }
        }

    }
}
