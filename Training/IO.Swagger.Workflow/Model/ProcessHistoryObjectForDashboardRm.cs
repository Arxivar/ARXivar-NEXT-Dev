/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process history object for dashboard
    /// </summary>
    [DataContract]
        public partial class ProcessHistoryObjectForDashboardRm :  IEquatable<ProcessHistoryObjectForDashboardRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessHistoryObjectForDashboardRm" /> class.
        /// </summary>
        /// <param name="id">Process history object identifier.</param>
        /// <param name="objectDefinition">objectDefinition.</param>
        /// <param name="objectType">Diagram object type [0&#x3D;Start, 1&#x3D;Finish, 2&#x3D;Task, 3&#x3D;Connector, 4&#x3D;Pause, 5&#x3D;Stop, 6&#x3D;SubProcess, 7&#x3D;Link, 8&#x3D;Event, 9&#x3D;Semaphore].</param>
        /// <param name="status">Object status [0&#x3D;Pending, 1&#x3D;Started, 2&#x3D;Finish, 3&#x3D;Suspended, 4&#x3D;Terminated, 5&#x3D;Error, 6&#x3D;TerminatedError, 7&#x3D;NotProcessed, 8&#x3D;Stopped, 9&#x3D;ScheduledStart, 10&#x3D;Incompleted].</param>
        /// <param name="groupId">Group identifier.</param>
        /// <param name="parentProcessObjectId">Parent identifier.</param>
        /// <param name="processReferenceId">Process reference identifier.</param>
        /// <param name="retryCount">Number of attempts.</param>
        /// <param name="creationDateUtc">Creation date.</param>
        /// <param name="lastUpdateUtc">Last update date.</param>
        /// <param name="endDateUtc">End date.</param>
        /// <param name="activationDateUtc">Actiovation date.</param>
        /// <param name="messageLevel">Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error].</param>
        /// <param name="messages">Message list.</param>
        /// <param name="operationsSummary">operationsSummary.</param>
        public ProcessHistoryObjectForDashboardRm(Guid? id = default(Guid?), DiagramObjectSummaryRm objectDefinition = default(DiagramObjectSummaryRm), int? objectType = default(int?), int? status = default(int?), Guid? groupId = default(Guid?), Guid? parentProcessObjectId = default(Guid?), Guid? processReferenceId = default(Guid?), int? retryCount = default(int?), DateTime? creationDateUtc = default(DateTime?), DateTime? lastUpdateUtc = default(DateTime?), DateTime? endDateUtc = default(DateTime?), DateTime? activationDateUtc = default(DateTime?), int? messageLevel = default(int?), List<ProcessMessageRm> messages = default(List<ProcessMessageRm>), ObjectOperationsSummaryRm operationsSummary = default(ObjectOperationsSummaryRm))
        {
            this.Id = id;
            this.ObjectDefinition = objectDefinition;
            this.ObjectType = objectType;
            this.Status = status;
            this.GroupId = groupId;
            this.ParentProcessObjectId = parentProcessObjectId;
            this.ProcessReferenceId = processReferenceId;
            this.RetryCount = retryCount;
            this.CreationDateUtc = creationDateUtc;
            this.LastUpdateUtc = lastUpdateUtc;
            this.EndDateUtc = endDateUtc;
            this.ActivationDateUtc = activationDateUtc;
            this.MessageLevel = messageLevel;
            this.Messages = messages;
            this.OperationsSummary = operationsSummary;
        }
        
        /// <summary>
        /// Process history object identifier
        /// </summary>
        /// <value>Process history object identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets ObjectDefinition
        /// </summary>
        [DataMember(Name="objectDefinition", EmitDefaultValue=false)]
        public DiagramObjectSummaryRm ObjectDefinition { get; set; }

        /// <summary>
        /// Diagram object type [0&#x3D;Start, 1&#x3D;Finish, 2&#x3D;Task, 3&#x3D;Connector, 4&#x3D;Pause, 5&#x3D;Stop, 6&#x3D;SubProcess, 7&#x3D;Link, 8&#x3D;Event, 9&#x3D;Semaphore]
        /// </summary>
        /// <value>Diagram object type [0&#x3D;Start, 1&#x3D;Finish, 2&#x3D;Task, 3&#x3D;Connector, 4&#x3D;Pause, 5&#x3D;Stop, 6&#x3D;SubProcess, 7&#x3D;Link, 8&#x3D;Event, 9&#x3D;Semaphore]</value>
        [DataMember(Name="objectType", EmitDefaultValue=false)]
        public int? ObjectType { get; set; }

        /// <summary>
        /// Object status [0&#x3D;Pending, 1&#x3D;Started, 2&#x3D;Finish, 3&#x3D;Suspended, 4&#x3D;Terminated, 5&#x3D;Error, 6&#x3D;TerminatedError, 7&#x3D;NotProcessed, 8&#x3D;Stopped, 9&#x3D;ScheduledStart, 10&#x3D;Incompleted]
        /// </summary>
        /// <value>Object status [0&#x3D;Pending, 1&#x3D;Started, 2&#x3D;Finish, 3&#x3D;Suspended, 4&#x3D;Terminated, 5&#x3D;Error, 6&#x3D;TerminatedError, 7&#x3D;NotProcessed, 8&#x3D;Stopped, 9&#x3D;ScheduledStart, 10&#x3D;Incompleted]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Group identifier
        /// </summary>
        /// <value>Group identifier</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Parent identifier
        /// </summary>
        /// <value>Parent identifier</value>
        [DataMember(Name="parentProcessObjectId", EmitDefaultValue=false)]
        public Guid? ParentProcessObjectId { get; set; }

        /// <summary>
        /// Process reference identifier
        /// </summary>
        /// <value>Process reference identifier</value>
        [DataMember(Name="processReferenceId", EmitDefaultValue=false)]
        public Guid? ProcessReferenceId { get; set; }

        /// <summary>
        /// Number of attempts
        /// </summary>
        /// <value>Number of attempts</value>
        [DataMember(Name="retryCount", EmitDefaultValue=false)]
        public int? RetryCount { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creationDateUtc", EmitDefaultValue=false)]
        public DateTime? CreationDateUtc { get; set; }

        /// <summary>
        /// Last update date
        /// </summary>
        /// <value>Last update date</value>
        [DataMember(Name="lastUpdateUtc", EmitDefaultValue=false)]
        public DateTime? LastUpdateUtc { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="endDateUtc", EmitDefaultValue=false)]
        public DateTime? EndDateUtc { get; set; }

        /// <summary>
        /// Actiovation date
        /// </summary>
        /// <value>Actiovation date</value>
        [DataMember(Name="activationDateUtc", EmitDefaultValue=false)]
        public DateTime? ActivationDateUtc { get; set; }

        /// <summary>
        /// Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]
        /// </summary>
        /// <value>Message level [0&#x3D;Info, 1&#x3D;Warning, 2&#x3D;Error]</value>
        [DataMember(Name="messageLevel", EmitDefaultValue=false)]
        public int? MessageLevel { get; set; }

        /// <summary>
        /// Message list
        /// </summary>
        /// <value>Message list</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ProcessMessageRm> Messages { get; set; }

        /// <summary>
        /// Gets or Sets OperationsSummary
        /// </summary>
        [DataMember(Name="operationsSummary", EmitDefaultValue=false)]
        public ObjectOperationsSummaryRm OperationsSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessHistoryObjectForDashboardRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectDefinition: ").Append(ObjectDefinition).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  ParentProcessObjectId: ").Append(ParentProcessObjectId).Append("\n");
            sb.Append("  ProcessReferenceId: ").Append(ProcessReferenceId).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  CreationDateUtc: ").Append(CreationDateUtc).Append("\n");
            sb.Append("  LastUpdateUtc: ").Append(LastUpdateUtc).Append("\n");
            sb.Append("  EndDateUtc: ").Append(EndDateUtc).Append("\n");
            sb.Append("  ActivationDateUtc: ").Append(ActivationDateUtc).Append("\n");
            sb.Append("  MessageLevel: ").Append(MessageLevel).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  OperationsSummary: ").Append(OperationsSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessHistoryObjectForDashboardRm);
        }

        /// <summary>
        /// Returns true if ProcessHistoryObjectForDashboardRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessHistoryObjectForDashboardRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessHistoryObjectForDashboardRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ObjectDefinition == input.ObjectDefinition ||
                    (this.ObjectDefinition != null &&
                    this.ObjectDefinition.Equals(input.ObjectDefinition))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.ParentProcessObjectId == input.ParentProcessObjectId ||
                    (this.ParentProcessObjectId != null &&
                    this.ParentProcessObjectId.Equals(input.ParentProcessObjectId))
                ) && 
                (
                    this.ProcessReferenceId == input.ProcessReferenceId ||
                    (this.ProcessReferenceId != null &&
                    this.ProcessReferenceId.Equals(input.ProcessReferenceId))
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    (this.RetryCount != null &&
                    this.RetryCount.Equals(input.RetryCount))
                ) && 
                (
                    this.CreationDateUtc == input.CreationDateUtc ||
                    (this.CreationDateUtc != null &&
                    this.CreationDateUtc.Equals(input.CreationDateUtc))
                ) && 
                (
                    this.LastUpdateUtc == input.LastUpdateUtc ||
                    (this.LastUpdateUtc != null &&
                    this.LastUpdateUtc.Equals(input.LastUpdateUtc))
                ) && 
                (
                    this.EndDateUtc == input.EndDateUtc ||
                    (this.EndDateUtc != null &&
                    this.EndDateUtc.Equals(input.EndDateUtc))
                ) && 
                (
                    this.ActivationDateUtc == input.ActivationDateUtc ||
                    (this.ActivationDateUtc != null &&
                    this.ActivationDateUtc.Equals(input.ActivationDateUtc))
                ) && 
                (
                    this.MessageLevel == input.MessageLevel ||
                    (this.MessageLevel != null &&
                    this.MessageLevel.Equals(input.MessageLevel))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.OperationsSummary == input.OperationsSummary ||
                    (this.OperationsSummary != null &&
                    this.OperationsSummary.Equals(input.OperationsSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ObjectDefinition != null)
                    hashCode = hashCode * 59 + this.ObjectDefinition.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.ParentProcessObjectId != null)
                    hashCode = hashCode * 59 + this.ParentProcessObjectId.GetHashCode();
                if (this.ProcessReferenceId != null)
                    hashCode = hashCode * 59 + this.ProcessReferenceId.GetHashCode();
                if (this.RetryCount != null)
                    hashCode = hashCode * 59 + this.RetryCount.GetHashCode();
                if (this.CreationDateUtc != null)
                    hashCode = hashCode * 59 + this.CreationDateUtc.GetHashCode();
                if (this.LastUpdateUtc != null)
                    hashCode = hashCode * 59 + this.LastUpdateUtc.GetHashCode();
                if (this.EndDateUtc != null)
                    hashCode = hashCode * 59 + this.EndDateUtc.GetHashCode();
                if (this.ActivationDateUtc != null)
                    hashCode = hashCode * 59 + this.ActivationDateUtc.GetHashCode();
                if (this.MessageLevel != null)
                    hashCode = hashCode * 59 + this.MessageLevel.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.OperationsSummary != null)
                    hashCode = hashCode * 59 + this.OperationsSummary.GetHashCode();
                return hashCode;
            }
        }

    }
}
