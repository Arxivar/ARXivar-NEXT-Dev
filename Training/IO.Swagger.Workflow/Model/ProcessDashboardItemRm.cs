/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Process dashboard item model
    /// </summary>
    [DataContract]
        public partial class ProcessDashboardItemRm :  IEquatable<ProcessDashboardItemRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDashboardItemRm" /> class.
        /// </summary>
        /// <param name="id">Item identifier.</param>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="diagramRevision">Diagram index revision.</param>
        /// <param name="diagramName">Diagram name.</param>
        /// <param name="status">Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued].</param>
        /// <param name="priority">Priority.</param>
        /// <param name="descriptions">List of translation of the descriptions.</param>
        /// <param name="creationDateUtc">Creation date.</param>
        /// <param name="startDateUtc">Start date.</param>
        /// <param name="endDateUtc">End date.</param>
        /// <param name="duration">Duration.</param>
        /// <param name="attachmentsCount">Number of attachments.</param>
        /// <param name="notesCount">Number of notes.</param>
        /// <param name="documentsCount">Number of documents.</param>
        /// <param name="warningsCount">Number of warnings.</param>
        /// <param name="errorsCount">Number of errors.</param>
        public ProcessDashboardItemRm(Guid? id = default(Guid?), Guid? diagramId = default(Guid?), int? diagramRevision = default(int?), string diagramName = default(string), int? status = default(int?), int? priority = default(int?), List<MultiLanguageValueRm> descriptions = default(List<MultiLanguageValueRm>), DateTime? creationDateUtc = default(DateTime?), DateTime? startDateUtc = default(DateTime?), DateTime? endDateUtc = default(DateTime?), double? duration = default(double?), int? attachmentsCount = default(int?), int? notesCount = default(int?), int? documentsCount = default(int?), int? warningsCount = default(int?), int? errorsCount = default(int?))
        {
            this.Id = id;
            this.DiagramId = diagramId;
            this.DiagramRevision = diagramRevision;
            this.DiagramName = diagramName;
            this.Status = status;
            this.Priority = priority;
            this.Descriptions = descriptions;
            this.CreationDateUtc = creationDateUtc;
            this.StartDateUtc = startDateUtc;
            this.EndDateUtc = endDateUtc;
            this.Duration = duration;
            this.AttachmentsCount = attachmentsCount;
            this.NotesCount = notesCount;
            this.DocumentsCount = documentsCount;
            this.WarningsCount = warningsCount;
            this.ErrorsCount = errorsCount;
        }
        
        /// <summary>
        /// Item identifier
        /// </summary>
        /// <value>Item identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Diagram index revision
        /// </summary>
        /// <value>Diagram index revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// Diagram name
        /// </summary>
        /// <value>Diagram name</value>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued]
        /// </summary>
        /// <value>Process dashboard status [0&#x3D;Completed, 1&#x3D;Error, 2&#x3D;Running, 3&#x3D;Stopped, 4&#x3D;Queued]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Priority
        /// </summary>
        /// <value>Priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// List of translation of the descriptions
        /// </summary>
        /// <value>List of translation of the descriptions</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Descriptions { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creationDateUtc", EmitDefaultValue=false)]
        public DateTime? CreationDateUtc { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="startDateUtc", EmitDefaultValue=false)]
        public DateTime? StartDateUtc { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="endDateUtc", EmitDefaultValue=false)]
        public DateTime? EndDateUtc { get; set; }

        /// <summary>
        /// Duration
        /// </summary>
        /// <value>Duration</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public double? Duration { get; set; }

        /// <summary>
        /// Number of attachments
        /// </summary>
        /// <value>Number of attachments</value>
        [DataMember(Name="attachmentsCount", EmitDefaultValue=false)]
        public int? AttachmentsCount { get; set; }

        /// <summary>
        /// Number of notes
        /// </summary>
        /// <value>Number of notes</value>
        [DataMember(Name="notesCount", EmitDefaultValue=false)]
        public int? NotesCount { get; set; }

        /// <summary>
        /// Number of documents
        /// </summary>
        /// <value>Number of documents</value>
        [DataMember(Name="documentsCount", EmitDefaultValue=false)]
        public int? DocumentsCount { get; set; }

        /// <summary>
        /// Number of warnings
        /// </summary>
        /// <value>Number of warnings</value>
        [DataMember(Name="warningsCount", EmitDefaultValue=false)]
        public int? WarningsCount { get; set; }

        /// <summary>
        /// Number of errors
        /// </summary>
        /// <value>Number of errors</value>
        [DataMember(Name="errorsCount", EmitDefaultValue=false)]
        public int? ErrorsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDashboardItemRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  CreationDateUtc: ").Append(CreationDateUtc).Append("\n");
            sb.Append("  StartDateUtc: ").Append(StartDateUtc).Append("\n");
            sb.Append("  EndDateUtc: ").Append(EndDateUtc).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  AttachmentsCount: ").Append(AttachmentsCount).Append("\n");
            sb.Append("  NotesCount: ").Append(NotesCount).Append("\n");
            sb.Append("  DocumentsCount: ").Append(DocumentsCount).Append("\n");
            sb.Append("  WarningsCount: ").Append(WarningsCount).Append("\n");
            sb.Append("  ErrorsCount: ").Append(ErrorsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDashboardItemRm);
        }

        /// <summary>
        /// Returns true if ProcessDashboardItemRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDashboardItemRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDashboardItemRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.CreationDateUtc == input.CreationDateUtc ||
                    (this.CreationDateUtc != null &&
                    this.CreationDateUtc.Equals(input.CreationDateUtc))
                ) && 
                (
                    this.StartDateUtc == input.StartDateUtc ||
                    (this.StartDateUtc != null &&
                    this.StartDateUtc.Equals(input.StartDateUtc))
                ) && 
                (
                    this.EndDateUtc == input.EndDateUtc ||
                    (this.EndDateUtc != null &&
                    this.EndDateUtc.Equals(input.EndDateUtc))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.AttachmentsCount == input.AttachmentsCount ||
                    (this.AttachmentsCount != null &&
                    this.AttachmentsCount.Equals(input.AttachmentsCount))
                ) && 
                (
                    this.NotesCount == input.NotesCount ||
                    (this.NotesCount != null &&
                    this.NotesCount.Equals(input.NotesCount))
                ) && 
                (
                    this.DocumentsCount == input.DocumentsCount ||
                    (this.DocumentsCount != null &&
                    this.DocumentsCount.Equals(input.DocumentsCount))
                ) && 
                (
                    this.WarningsCount == input.WarningsCount ||
                    (this.WarningsCount != null &&
                    this.WarningsCount.Equals(input.WarningsCount))
                ) && 
                (
                    this.ErrorsCount == input.ErrorsCount ||
                    (this.ErrorsCount != null &&
                    this.ErrorsCount.Equals(input.ErrorsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.CreationDateUtc != null)
                    hashCode = hashCode * 59 + this.CreationDateUtc.GetHashCode();
                if (this.StartDateUtc != null)
                    hashCode = hashCode * 59 + this.StartDateUtc.GetHashCode();
                if (this.EndDateUtc != null)
                    hashCode = hashCode * 59 + this.EndDateUtc.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.AttachmentsCount != null)
                    hashCode = hashCode * 59 + this.AttachmentsCount.GetHashCode();
                if (this.NotesCount != null)
                    hashCode = hashCode * 59 + this.NotesCount.GetHashCode();
                if (this.DocumentsCount != null)
                    hashCode = hashCode * 59 + this.DocumentsCount.GetHashCode();
                if (this.WarningsCount != null)
                    hashCode = hashCode * 59 + this.WarningsCount.GetHashCode();
                if (this.ErrorsCount != null)
                    hashCode = hashCode * 59 + this.ErrorsCount.GetHashCode();
                return hashCode;
            }
        }

    }
}
