/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationStartProcessRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationStartProcessRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationStartProcessRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationStartProcessRm" /> class.
        /// </summary>
        /// <param name="diagramName">Diagram name.</param>
        /// <param name="diagramRevision">Diagram revision.</param>
        /// <param name="diagramId">Diagram identifier.</param>
        /// <param name="parentDiagramId">Parent diagram identifier.</param>
        /// <param name="startOptions">startOptions (required).</param>
        public OperationConfigurationStartProcessRm(string diagramName = default(string), int? diagramRevision = default(int?), Guid? diagramId = default(Guid?), Guid? parentDiagramId = default(Guid?), SubProcessStartOptionsRm startOptions = default(SubProcessStartOptionsRm), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            // to ensure "startOptions" is required (not null)
            if (startOptions == null)
            {
                throw new InvalidDataException("startOptions is a required property for OperationConfigurationStartProcessRm and cannot be null");
            }
            else
            {
                this.StartOptions = startOptions;
            }
            this.DiagramName = diagramName;
            this.DiagramRevision = diagramRevision;
            this.DiagramId = diagramId;
            this.ParentDiagramId = parentDiagramId;
        }
        
        /// <summary>
        /// Diagram name
        /// </summary>
        /// <value>Diagram name</value>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Diagram revision
        /// </summary>
        /// <value>Diagram revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// Diagram identifier
        /// </summary>
        /// <value>Diagram identifier</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public Guid? DiagramId { get; set; }

        /// <summary>
        /// Parent diagram identifier
        /// </summary>
        /// <value>Parent diagram identifier</value>
        [DataMember(Name="parentDiagramId", EmitDefaultValue=false)]
        public Guid? ParentDiagramId { get; set; }

        /// <summary>
        /// Gets or Sets StartOptions
        /// </summary>
        [DataMember(Name="startOptions", EmitDefaultValue=false)]
        public SubProcessStartOptionsRm StartOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationStartProcessRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  ParentDiagramId: ").Append(ParentDiagramId).Append("\n");
            sb.Append("  StartOptions: ").Append(StartOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationStartProcessRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationStartProcessRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationStartProcessRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationStartProcessRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && base.Equals(input) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && base.Equals(input) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && base.Equals(input) && 
                (
                    this.ParentDiagramId == input.ParentDiagramId ||
                    (this.ParentDiagramId != null &&
                    this.ParentDiagramId.Equals(input.ParentDiagramId))
                ) && base.Equals(input) && 
                (
                    this.StartOptions == input.StartOptions ||
                    (this.StartOptions != null &&
                    this.StartOptions.Equals(input.StartOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.ParentDiagramId != null)
                    hashCode = hashCode * 59 + this.ParentDiagramId.GetHashCode();
                if (this.StartOptions != null)
                    hashCode = hashCode * 59 + this.StartOptions.GetHashCode();
                return hashCode;
            }
        }

    }
}
