/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Base class of process activation
    /// </summary>
    [DataContract]
        public partial class ProcessActivationRm :  IEquatable<ProcessActivationRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessActivationRm" /> class.
        /// </summary>
        /// <param name="activationType">Process activation mode [0&#x3D;Manual, 1&#x3D;SubProcess, 2&#x3D;Scheduled, 3&#x3D;Event].</param>
        /// <param name="eventPriority">Event priority that can override the default diagram priority.</param>
        /// <param name="documents">Start documents.</param>
        /// <param name="htmlNotes">Start notes.</param>
        /// <param name="externalParameters">External parameters.</param>
        public ProcessActivationRm(int? activationType = default(int?), int? eventPriority = default(int?), List<ProcessDocumentParameterRm> documents = default(List<ProcessDocumentParameterRm>), List<string> htmlNotes = default(List<string>), List<ProcessExternalParameterRm> externalParameters = default(List<ProcessExternalParameterRm>))
        {
            this.ActivationType = activationType;
            this.EventPriority = eventPriority;
            this.Documents = documents;
            this.HtmlNotes = htmlNotes;
            this.ExternalParameters = externalParameters;
        }
        
        /// <summary>
        /// Process activation mode [0&#x3D;Manual, 1&#x3D;SubProcess, 2&#x3D;Scheduled, 3&#x3D;Event]
        /// </summary>
        /// <value>Process activation mode [0&#x3D;Manual, 1&#x3D;SubProcess, 2&#x3D;Scheduled, 3&#x3D;Event]</value>
        [DataMember(Name="activationType", EmitDefaultValue=false)]
        public int? ActivationType { get; set; }

        /// <summary>
        /// Event priority that can override the default diagram priority
        /// </summary>
        /// <value>Event priority that can override the default diagram priority</value>
        [DataMember(Name="eventPriority", EmitDefaultValue=false)]
        public int? EventPriority { get; set; }

        /// <summary>
        /// Start documents
        /// </summary>
        /// <value>Start documents</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<ProcessDocumentParameterRm> Documents { get; set; }

        /// <summary>
        /// Start notes
        /// </summary>
        /// <value>Start notes</value>
        [DataMember(Name="htmlNotes", EmitDefaultValue=false)]
        public List<string> HtmlNotes { get; set; }

        /// <summary>
        /// External parameters
        /// </summary>
        /// <value>External parameters</value>
        [DataMember(Name="externalParameters", EmitDefaultValue=false)]
        public List<ProcessExternalParameterRm> ExternalParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessActivationRm {\n");
            sb.Append("  ActivationType: ").Append(ActivationType).Append("\n");
            sb.Append("  EventPriority: ").Append(EventPriority).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  ExternalParameters: ").Append(ExternalParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessActivationRm);
        }

        /// <summary>
        /// Returns true if ProcessActivationRm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessActivationRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessActivationRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivationType == input.ActivationType ||
                    (this.ActivationType != null &&
                    this.ActivationType.Equals(input.ActivationType))
                ) && 
                (
                    this.EventPriority == input.EventPriority ||
                    (this.EventPriority != null &&
                    this.EventPriority.Equals(input.EventPriority))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.HtmlNotes == input.HtmlNotes ||
                    this.HtmlNotes != null &&
                    input.HtmlNotes != null &&
                    this.HtmlNotes.SequenceEqual(input.HtmlNotes)
                ) && 
                (
                    this.ExternalParameters == input.ExternalParameters ||
                    this.ExternalParameters != null &&
                    input.ExternalParameters != null &&
                    this.ExternalParameters.SequenceEqual(input.ExternalParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivationType != null)
                    hashCode = hashCode * 59 + this.ActivationType.GetHashCode();
                if (this.EventPriority != null)
                    hashCode = hashCode * 59 + this.EventPriority.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.HtmlNotes != null)
                    hashCode = hashCode * 59 + this.HtmlNotes.GetHashCode();
                if (this.ExternalParameters != null)
                    hashCode = hashCode * 59 + this.ExternalParameters.GetHashCode();
                return hashCode;
            }
        }

    }
}
