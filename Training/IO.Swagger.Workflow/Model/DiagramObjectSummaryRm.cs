/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// Diagram object summary model
    /// </summary>
    [DataContract]
        public partial class DiagramObjectSummaryRm :  IEquatable<DiagramObjectSummaryRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramObjectSummaryRm" /> class.
        /// </summary>
        /// <param name="id">Object identifier.</param>
        /// <param name="name">Object name.</param>
        /// <param name="descriptions">List of translation of the descriptions.</param>
        public DiagramObjectSummaryRm(Guid? id = default(Guid?), string name = default(string), List<MultiLanguageValueRm> descriptions = default(List<MultiLanguageValueRm>))
        {
            this.Id = id;
            this.Name = name;
            this.Descriptions = descriptions;
        }
        
        /// <summary>
        /// Object identifier
        /// </summary>
        /// <value>Object identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Object name
        /// </summary>
        /// <value>Object name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of translation of the descriptions
        /// </summary>
        /// <value>List of translation of the descriptions</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<MultiLanguageValueRm> Descriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagramObjectSummaryRm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagramObjectSummaryRm);
        }

        /// <summary>
        /// Returns true if DiagramObjectSummaryRm instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagramObjectSummaryRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagramObjectSummaryRm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                return hashCode;
            }
        }

    }
}
