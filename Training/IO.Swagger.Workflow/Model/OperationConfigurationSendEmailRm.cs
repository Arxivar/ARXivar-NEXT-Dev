/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationSendEmailRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationSendEmailRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationSendEmailRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationSendEmailRm" /> class.
        /// </summary>
        /// <param name="priority">Specifies the priority of a mail.  The default value is Normal.</param>
        /// <param name="isBodyHtml">isBodyHtml.</param>
        /// <param name="body">Gets or sets the message body.</param>
        /// <param name="arxivarStorageSettings">arxivarStorageSettings.</param>
        /// <param name="returnReceipt">returnReceipt.</param>
        /// <param name="subject">The email subject.</param>
        /// <param name="from">from.</param>
        /// <param name="idAccount">The account used to send the email.</param>
        /// <param name="sendToProfileRecipients">Specified if send the mail to the profile recipients.</param>
        /// <param name="to">List recipients to.</param>
        /// <param name="cc">List recipients Cc.</param>
        /// <param name="ccn">List recipients Ccn.</param>
        /// <param name="primary">Add primary document.</param>
        /// <param name="secondary">Add secondary documents.</param>
        /// <param name="attachment">Add attachments.</param>
        /// <param name="dmMailoutCreated">dmMailoutCreated.</param>
        public OperationConfigurationSendEmailRm(bool? priority = default(bool?), ParameterValueRm isBodyHtml = default(ParameterValueRm), string body = default(string), EmailStorageSettingsRm arxivarStorageSettings = default(EmailStorageSettingsRm), ParameterValueRm returnReceipt = default(ParameterValueRm), string subject = default(string), ArxivarUserInfoRm from = default(ArxivarUserInfoRm), int? idAccount = default(int?), bool? sendToProfileRecipients = default(bool?), List<RecipientsRm> to = default(List<RecipientsRm>), List<RecipientsRm> cc = default(List<RecipientsRm>), List<RecipientsRm> ccn = default(List<RecipientsRm>), bool? primary = default(bool?), bool? secondary = default(bool?), bool? attachment = default(bool?), VariableInfoRm dmMailoutCreated = default(VariableInfoRm), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            this.Priority = priority;
            this.IsBodyHtml = isBodyHtml;
            this.Body = body;
            this.ArxivarStorageSettings = arxivarStorageSettings;
            this.ReturnReceipt = returnReceipt;
            this.Subject = subject;
            this.From = from;
            this.IdAccount = idAccount;
            this.SendToProfileRecipients = sendToProfileRecipients;
            this.To = to;
            this.Cc = cc;
            this.Ccn = ccn;
            this.Primary = primary;
            this.Secondary = secondary;
            this.Attachment = attachment;
            this.DmMailoutCreated = dmMailoutCreated;
        }
        
        /// <summary>
        /// Specifies the priority of a mail.  The default value is Normal
        /// </summary>
        /// <value>Specifies the priority of a mail.  The default value is Normal</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public bool? Priority { get; set; }

        /// <summary>
        /// Gets or Sets IsBodyHtml
        /// </summary>
        [DataMember(Name="isBodyHtml", EmitDefaultValue=false)]
        public ParameterValueRm IsBodyHtml { get; set; }

        /// <summary>
        /// Gets or sets the message body
        /// </summary>
        /// <value>Gets or sets the message body</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ArxivarStorageSettings
        /// </summary>
        [DataMember(Name="arxivarStorageSettings", EmitDefaultValue=false)]
        public EmailStorageSettingsRm ArxivarStorageSettings { get; set; }

        /// <summary>
        /// Gets or Sets ReturnReceipt
        /// </summary>
        [DataMember(Name="returnReceipt", EmitDefaultValue=false)]
        public ParameterValueRm ReturnReceipt { get; set; }

        /// <summary>
        /// The email subject
        /// </summary>
        /// <value>The email subject</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public ArxivarUserInfoRm From { get; set; }

        /// <summary>
        /// The account used to send the email
        /// </summary>
        /// <value>The account used to send the email</value>
        [DataMember(Name="idAccount", EmitDefaultValue=false)]
        public int? IdAccount { get; set; }

        /// <summary>
        /// Specified if send the mail to the profile recipients
        /// </summary>
        /// <value>Specified if send the mail to the profile recipients</value>
        [DataMember(Name="sendToProfileRecipients", EmitDefaultValue=false)]
        public bool? SendToProfileRecipients { get; set; }

        /// <summary>
        /// List recipients to
        /// </summary>
        /// <value>List recipients to</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<RecipientsRm> To { get; set; }

        /// <summary>
        /// List recipients Cc
        /// </summary>
        /// <value>List recipients Cc</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<RecipientsRm> Cc { get; set; }

        /// <summary>
        /// List recipients Ccn
        /// </summary>
        /// <value>List recipients Ccn</value>
        [DataMember(Name="ccn", EmitDefaultValue=false)]
        public List<RecipientsRm> Ccn { get; set; }

        /// <summary>
        /// Add primary document
        /// </summary>
        /// <value>Add primary document</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Add secondary documents
        /// </summary>
        /// <value>Add secondary documents</value>
        [DataMember(Name="secondary", EmitDefaultValue=false)]
        public bool? Secondary { get; set; }

        /// <summary>
        /// Add attachments
        /// </summary>
        /// <value>Add attachments</value>
        [DataMember(Name="attachment", EmitDefaultValue=false)]
        public bool? Attachment { get; set; }

        /// <summary>
        /// Gets or Sets DmMailoutCreated
        /// </summary>
        [DataMember(Name="dmMailoutCreated", EmitDefaultValue=false)]
        public VariableInfoRm DmMailoutCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationSendEmailRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  IsBodyHtml: ").Append(IsBodyHtml).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ArxivarStorageSettings: ").Append(ArxivarStorageSettings).Append("\n");
            sb.Append("  ReturnReceipt: ").Append(ReturnReceipt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  IdAccount: ").Append(IdAccount).Append("\n");
            sb.Append("  SendToProfileRecipients: ").Append(SendToProfileRecipients).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Ccn: ").Append(Ccn).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  DmMailoutCreated: ").Append(DmMailoutCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationSendEmailRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationSendEmailRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationSendEmailRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationSendEmailRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && base.Equals(input) && 
                (
                    this.IsBodyHtml == input.IsBodyHtml ||
                    (this.IsBodyHtml != null &&
                    this.IsBodyHtml.Equals(input.IsBodyHtml))
                ) && base.Equals(input) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && base.Equals(input) && 
                (
                    this.ArxivarStorageSettings == input.ArxivarStorageSettings ||
                    (this.ArxivarStorageSettings != null &&
                    this.ArxivarStorageSettings.Equals(input.ArxivarStorageSettings))
                ) && base.Equals(input) && 
                (
                    this.ReturnReceipt == input.ReturnReceipt ||
                    (this.ReturnReceipt != null &&
                    this.ReturnReceipt.Equals(input.ReturnReceipt))
                ) && base.Equals(input) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && base.Equals(input) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && base.Equals(input) && 
                (
                    this.IdAccount == input.IdAccount ||
                    (this.IdAccount != null &&
                    this.IdAccount.Equals(input.IdAccount))
                ) && base.Equals(input) && 
                (
                    this.SendToProfileRecipients == input.SendToProfileRecipients ||
                    (this.SendToProfileRecipients != null &&
                    this.SendToProfileRecipients.Equals(input.SendToProfileRecipients))
                ) && base.Equals(input) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && base.Equals(input) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && base.Equals(input) && 
                (
                    this.Ccn == input.Ccn ||
                    this.Ccn != null &&
                    input.Ccn != null &&
                    this.Ccn.SequenceEqual(input.Ccn)
                ) && base.Equals(input) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && base.Equals(input) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && base.Equals(input) && 
                (
                    this.Attachment == input.Attachment ||
                    (this.Attachment != null &&
                    this.Attachment.Equals(input.Attachment))
                ) && base.Equals(input) && 
                (
                    this.DmMailoutCreated == input.DmMailoutCreated ||
                    (this.DmMailoutCreated != null &&
                    this.DmMailoutCreated.Equals(input.DmMailoutCreated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.IsBodyHtml != null)
                    hashCode = hashCode * 59 + this.IsBodyHtml.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.ArxivarStorageSettings != null)
                    hashCode = hashCode * 59 + this.ArxivarStorageSettings.GetHashCode();
                if (this.ReturnReceipt != null)
                    hashCode = hashCode * 59 + this.ReturnReceipt.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.IdAccount != null)
                    hashCode = hashCode * 59 + this.IdAccount.GetHashCode();
                if (this.SendToProfileRecipients != null)
                    hashCode = hashCode * 59 + this.SendToProfileRecipients.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Ccn != null)
                    hashCode = hashCode * 59 + this.Ccn.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.Attachment != null)
                    hashCode = hashCode * 59 + this.Attachment.GetHashCode();
                if (this.DmMailoutCreated != null)
                    hashCode = hashCode * 59 + this.DmMailoutCreated.GetHashCode();
                return hashCode;
            }
        }

    }
}
