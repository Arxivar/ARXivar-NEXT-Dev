/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationActivateOutcomeRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationActivateOutcomeRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationActivateOutcomeRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationActivateOutcomeRm" /> class.
        /// </summary>
        /// <param name="outcome">outcome (required).</param>
        /// <param name="validationFormula">Formula to activate the outcome, should produce a bool result (required).</param>
        public OperationConfigurationActivateOutcomeRm(OutcomeInfoRm outcome = default(OutcomeInfoRm), string validationFormula = default(string), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            // to ensure "outcome" is required (not null)
            if (outcome == null)
            {
                throw new InvalidDataException("outcome is a required property for OperationConfigurationActivateOutcomeRm and cannot be null");
            }
            else
            {
                this.Outcome = outcome;
            }
            // to ensure "validationFormula" is required (not null)
            if (validationFormula == null)
            {
                throw new InvalidDataException("validationFormula is a required property for OperationConfigurationActivateOutcomeRm and cannot be null");
            }
            else
            {
                this.ValidationFormula = validationFormula;
            }
        }
        
        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name="outcome", EmitDefaultValue=false)]
        public OutcomeInfoRm Outcome { get; set; }

        /// <summary>
        /// Formula to activate the outcome, should produce a bool result
        /// </summary>
        /// <value>Formula to activate the outcome, should produce a bool result</value>
        [DataMember(Name="validationFormula", EmitDefaultValue=false)]
        public string ValidationFormula { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationActivateOutcomeRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  ValidationFormula: ").Append(ValidationFormula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationActivateOutcomeRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationActivateOutcomeRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationActivateOutcomeRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationActivateOutcomeRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && base.Equals(input) && 
                (
                    this.ValidationFormula == input.ValidationFormula ||
                    (this.ValidationFormula != null &&
                    this.ValidationFormula.Equals(input.ValidationFormula))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Outcome != null)
                    hashCode = hashCode * 59 + this.Outcome.GetHashCode();
                if (this.ValidationFormula != null)
                    hashCode = hashCode * 59 + this.ValidationFormula.GetHashCode();
                return hashCode;
            }
        }

    }
}
