/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// UserRecipientsRm
    /// </summary>
    [DataContract]
        public partial class UserRecipientsRm : RecipientsRm,  IEquatable<UserRecipientsRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRecipientsRm" /> class.
        /// </summary>
        /// <param name="isInternal">Specifies if is an internal message.</param>
        /// <param name="user">user (required).</param>
        public UserRecipientsRm(bool? isInternal = default(bool?), ArxivarUserInfoRm user = default(ArxivarUserInfoRm), int? kind = default(int?)) : base(kind)
        {
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for UserRecipientsRm and cannot be null");
            }
            else
            {
                this.User = user;
            }
            this.IsInternal = isInternal;
        }
        
        /// <summary>
        /// Specifies if is an internal message
        /// </summary>
        /// <value>Specifies if is an internal message</value>
        [DataMember(Name="isInternal", EmitDefaultValue=false)]
        public bool? IsInternal { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public ArxivarUserInfoRm User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRecipientsRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRecipientsRm);
        }

        /// <summary>
        /// Returns true if UserRecipientsRm instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRecipientsRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRecipientsRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.IsInternal == input.IsInternal ||
                    (this.IsInternal != null &&
                    this.IsInternal.Equals(input.IsInternal))
                ) && base.Equals(input) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.IsInternal != null)
                    hashCode = hashCode * 59 + this.IsInternal.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }
}
