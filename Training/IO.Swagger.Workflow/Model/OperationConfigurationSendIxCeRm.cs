/* 
 * ARXivar Workflow API
 *
 * ARXivar Workflow API
 *
 * OpenAPI spec version: v1
 * Contact: info@abletech.it
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Workflow.Client.SwaggerDateConverter;

namespace IO.Swagger.Workflow.Model
{
    /// <summary>
    /// OperationConfigurationSendIxCeRm
    /// </summary>
    [DataContract]
        public partial class OperationConfigurationSendIxCeRm : OperationsConfigurationRm,  IEquatable<OperationConfigurationSendIxCeRm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationConfigurationSendIxCeRm" /> class.
        /// </summary>
        /// <param name="primary">Add primary document.</param>
        /// <param name="secondary">Add secondary document.</param>
        /// <param name="attachment">Add attachment.</param>
        /// <param name="varBoolSendResult">varBoolSendResult.</param>
        /// <param name="varStringDescription">varStringDescription.</param>
        public OperationConfigurationSendIxCeRm(bool? primary = default(bool?), bool? secondary = default(bool?), bool? attachment = default(bool?), VariableInfoRm varBoolSendResult = default(VariableInfoRm), VariableInfoRm varStringDescription = default(VariableInfoRm), int? operationType = default(int?), OperationRetryConfigurationRm retryConfiguration = default(OperationRetryConfigurationRm), EventInfoRm onErrorEventConfiguration = default(EventInfoRm), EventInfoRm onFailedEventConfiguration = default(EventInfoRm), bool? invalidateOtherOperations = default(bool?), string userDescription = default(string)) : base(operationType, retryConfiguration, onErrorEventConfiguration, onFailedEventConfiguration, invalidateOtherOperations, userDescription)
        {
            this.Primary = primary;
            this.Secondary = secondary;
            this.Attachment = attachment;
            this.VarBoolSendResult = varBoolSendResult;
            this.VarStringDescription = varStringDescription;
        }
        
        /// <summary>
        /// Add primary document
        /// </summary>
        /// <value>Add primary document</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Add secondary document
        /// </summary>
        /// <value>Add secondary document</value>
        [DataMember(Name="secondary", EmitDefaultValue=false)]
        public bool? Secondary { get; set; }

        /// <summary>
        /// Add attachment
        /// </summary>
        /// <value>Add attachment</value>
        [DataMember(Name="attachment", EmitDefaultValue=false)]
        public bool? Attachment { get; set; }

        /// <summary>
        /// Gets or Sets VarBoolSendResult
        /// </summary>
        [DataMember(Name="varBoolSendResult", EmitDefaultValue=false)]
        public VariableInfoRm VarBoolSendResult { get; set; }

        /// <summary>
        /// Gets or Sets VarStringDescription
        /// </summary>
        [DataMember(Name="varStringDescription", EmitDefaultValue=false)]
        public VariableInfoRm VarStringDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationConfigurationSendIxCeRm {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  VarBoolSendResult: ").Append(VarBoolSendResult).Append("\n");
            sb.Append("  VarStringDescription: ").Append(VarStringDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationConfigurationSendIxCeRm);
        }

        /// <summary>
        /// Returns true if OperationConfigurationSendIxCeRm instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationConfigurationSendIxCeRm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationConfigurationSendIxCeRm input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && base.Equals(input) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && base.Equals(input) && 
                (
                    this.Attachment == input.Attachment ||
                    (this.Attachment != null &&
                    this.Attachment.Equals(input.Attachment))
                ) && base.Equals(input) && 
                (
                    this.VarBoolSendResult == input.VarBoolSendResult ||
                    (this.VarBoolSendResult != null &&
                    this.VarBoolSendResult.Equals(input.VarBoolSendResult))
                ) && base.Equals(input) && 
                (
                    this.VarStringDescription == input.VarStringDescription ||
                    (this.VarStringDescription != null &&
                    this.VarStringDescription.Equals(input.VarStringDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.Attachment != null)
                    hashCode = hashCode * 59 + this.Attachment.GetHashCode();
                if (this.VarBoolSendResult != null)
                    hashCode = hashCode * 59 + this.VarBoolSendResult.GetHashCode();
                if (this.VarStringDescription != null)
                    hashCode = hashCode * 59 + this.VarStringDescription.GetHashCode();
                return hashCode;
            }
        }

    }
}
