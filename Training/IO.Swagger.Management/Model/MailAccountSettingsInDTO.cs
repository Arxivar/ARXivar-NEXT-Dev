/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class for Mail IN settings
    /// </summary>
    [DataContract]
    public partial class MailAccountSettingsInDTO :  IEquatable<MailAccountSettingsInDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailAccountSettingsInDTO" /> class.
        /// </summary>
        /// <param name="archiveOption">Possible values:  0: Manual  1: All  2: OnlyAddressBook .</param>
        /// <param name="safeMode">Archive with safe mode (only if ArchiveOption is set to All).</param>
        /// <param name="documentType">Default document type.</param>
        /// <param name="state">Default state.</param>
        /// <param name="assAos">Archive mail with default data.</param>
        /// <param name="monitoredFolder">Monitored folder path.</param>
        /// <param name="pecSender">Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite .</param>
        /// <param name="pecSubject">Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite .</param>
        /// <param name="whitelist">Whitelist.</param>
        public MailAccountSettingsInDTO(int? archiveOption = default(int?), bool? safeMode = default(bool?), DocumentTypeSimpleDTO documentType = default(DocumentTypeSimpleDTO), StateSimpleDTO state = default(StateSimpleDTO), bool? assAos = default(bool?), string monitoredFolder = default(string), int? pecSender = default(int?), int? pecSubject = default(int?), List<string> whitelist = default(List<string>))
        {
            this.ArchiveOption = archiveOption;
            this.SafeMode = safeMode;
            this.DocumentType = documentType;
            this.State = state;
            this.AssAos = assAos;
            this.MonitoredFolder = monitoredFolder;
            this.PecSender = pecSender;
            this.PecSubject = pecSubject;
            this.Whitelist = whitelist;
        }
        
        /// <summary>
        /// Possible values:  0: Manual  1: All  2: OnlyAddressBook 
        /// </summary>
        /// <value>Possible values:  0: Manual  1: All  2: OnlyAddressBook </value>
        [DataMember(Name="archiveOption", EmitDefaultValue=false)]
        public int? ArchiveOption { get; set; }

        /// <summary>
        /// Archive with safe mode (only if ArchiveOption is set to All)
        /// </summary>
        /// <value>Archive with safe mode (only if ArchiveOption is set to All)</value>
        [DataMember(Name="safeMode", EmitDefaultValue=false)]
        public bool? SafeMode { get; set; }

        /// <summary>
        /// Default document type
        /// </summary>
        /// <value>Default document type</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentTypeSimpleDTO DocumentType { get; set; }

        /// <summary>
        /// Default state
        /// </summary>
        /// <value>Default state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateSimpleDTO State { get; set; }

        /// <summary>
        /// Archive mail with default data
        /// </summary>
        /// <value>Archive mail with default data</value>
        [DataMember(Name="assAos", EmitDefaultValue=false)]
        public bool? AssAos { get; set; }

        /// <summary>
        /// Monitored folder path
        /// </summary>
        /// <value>Monitored folder path</value>
        [DataMember(Name="monitoredFolder", EmitDefaultValue=false)]
        public string MonitoredFolder { get; set; }

        /// <summary>
        /// Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite 
        /// </summary>
        /// <value>Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite </value>
        [DataMember(Name="pecSender", EmitDefaultValue=false)]
        public int? PecSender { get; set; }

        /// <summary>
        /// Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite 
        /// </summary>
        /// <value>Possible values:  0: Unread  1: Overwrite  2: DoNotOverwrite </value>
        [DataMember(Name="pecSubject", EmitDefaultValue=false)]
        public int? PecSubject { get; set; }

        /// <summary>
        /// Whitelist
        /// </summary>
        /// <value>Whitelist</value>
        [DataMember(Name="whitelist", EmitDefaultValue=false)]
        public List<string> Whitelist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailAccountSettingsInDTO {\n");
            sb.Append("  ArchiveOption: ").Append(ArchiveOption).Append("\n");
            sb.Append("  SafeMode: ").Append(SafeMode).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  AssAos: ").Append(AssAos).Append("\n");
            sb.Append("  MonitoredFolder: ").Append(MonitoredFolder).Append("\n");
            sb.Append("  PecSender: ").Append(PecSender).Append("\n");
            sb.Append("  PecSubject: ").Append(PecSubject).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailAccountSettingsInDTO);
        }

        /// <summary>
        /// Returns true if MailAccountSettingsInDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailAccountSettingsInDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailAccountSettingsInDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArchiveOption == input.ArchiveOption ||
                    (this.ArchiveOption != null &&
                    this.ArchiveOption.Equals(input.ArchiveOption))
                ) && 
                (
                    this.SafeMode == input.SafeMode ||
                    (this.SafeMode != null &&
                    this.SafeMode.Equals(input.SafeMode))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.AssAos == input.AssAos ||
                    (this.AssAos != null &&
                    this.AssAos.Equals(input.AssAos))
                ) && 
                (
                    this.MonitoredFolder == input.MonitoredFolder ||
                    (this.MonitoredFolder != null &&
                    this.MonitoredFolder.Equals(input.MonitoredFolder))
                ) && 
                (
                    this.PecSender == input.PecSender ||
                    (this.PecSender != null &&
                    this.PecSender.Equals(input.PecSender))
                ) && 
                (
                    this.PecSubject == input.PecSubject ||
                    (this.PecSubject != null &&
                    this.PecSubject.Equals(input.PecSubject))
                ) && 
                (
                    this.Whitelist == input.Whitelist ||
                    this.Whitelist != null &&
                    this.Whitelist.SequenceEqual(input.Whitelist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArchiveOption != null)
                    hashCode = hashCode * 59 + this.ArchiveOption.GetHashCode();
                if (this.SafeMode != null)
                    hashCode = hashCode * 59 + this.SafeMode.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.AssAos != null)
                    hashCode = hashCode * 59 + this.AssAos.GetHashCode();
                if (this.MonitoredFolder != null)
                    hashCode = hashCode * 59 + this.MonitoredFolder.GetHashCode();
                if (this.PecSender != null)
                    hashCode = hashCode * 59 + this.PecSender.GetHashCode();
                if (this.PecSubject != null)
                    hashCode = hashCode * 59 + this.PecSubject.GetHashCode();
                if (this.Whitelist != null)
                    hashCode = hashCode * 59 + this.Whitelist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
