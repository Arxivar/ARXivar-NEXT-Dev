/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class for state management
    /// </summary>
    [DataContract]
    public partial class StateCompleteDTO :  IEquatable<StateCompleteDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateCompleteDTO" /> class.
        /// </summary>
        /// <param name="notify">Notify on import.</param>
        /// <param name="revision">Enable revision.</param>
        /// <param name="notifyOnRevision">Notify on review.</param>
        /// <param name="disableEditAuthor">Disable editing author on overwrite or revision.</param>
        /// <param name="allowForceRevision">Allow revision on document edit.</param>
        /// <param name="allowForceOverwrite">Allow overwrite on document edit.</param>
        /// <param name="notifyAuthor">Notify author.</param>
        /// <param name="translations">State description translations.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="description">Description.</param>
        /// <param name="iconIndex">Index of Icon.</param>
        /// <param name="userCanForce">If user can force the state.</param>
        public StateCompleteDTO(bool? notify = default(bool?), bool? revision = default(bool?), bool? notifyOnRevision = default(bool?), bool? disableEditAuthor = default(bool?), bool? allowForceRevision = default(bool?), bool? allowForceOverwrite = default(bool?), bool? notifyAuthor = default(bool?), List<StateTranslationsDTO> translations = default(List<StateTranslationsDTO>), string id = default(string), string description = default(string), int? iconIndex = default(int?), bool? userCanForce = default(bool?))
        {
            this.Notify = notify;
            this.Revision = revision;
            this.NotifyOnRevision = notifyOnRevision;
            this.DisableEditAuthor = disableEditAuthor;
            this.AllowForceRevision = allowForceRevision;
            this.AllowForceOverwrite = allowForceOverwrite;
            this.NotifyAuthor = notifyAuthor;
            this.Translations = translations;
            this.Id = id;
            this.Description = description;
            this.IconIndex = iconIndex;
            this.UserCanForce = userCanForce;
        }
        
        /// <summary>
        /// Notify on import
        /// </summary>
        /// <value>Notify on import</value>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public bool? Notify { get; set; }

        /// <summary>
        /// Enable revision
        /// </summary>
        /// <value>Enable revision</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public bool? Revision { get; set; }

        /// <summary>
        /// Notify on review
        /// </summary>
        /// <value>Notify on review</value>
        [DataMember(Name="notifyOnRevision", EmitDefaultValue=false)]
        public bool? NotifyOnRevision { get; set; }

        /// <summary>
        /// Disable editing author on overwrite or revision
        /// </summary>
        /// <value>Disable editing author on overwrite or revision</value>
        [DataMember(Name="disableEditAuthor", EmitDefaultValue=false)]
        public bool? DisableEditAuthor { get; set; }

        /// <summary>
        /// Allow revision on document edit
        /// </summary>
        /// <value>Allow revision on document edit</value>
        [DataMember(Name="allowForceRevision", EmitDefaultValue=false)]
        public bool? AllowForceRevision { get; set; }

        /// <summary>
        /// Allow overwrite on document edit
        /// </summary>
        /// <value>Allow overwrite on document edit</value>
        [DataMember(Name="allowForceOverwrite", EmitDefaultValue=false)]
        public bool? AllowForceOverwrite { get; set; }

        /// <summary>
        /// Notify author
        /// </summary>
        /// <value>Notify author</value>
        [DataMember(Name="notifyAuthor", EmitDefaultValue=false)]
        public bool? NotifyAuthor { get; set; }

        /// <summary>
        /// State description translations
        /// </summary>
        /// <value>State description translations</value>
        [DataMember(Name="translations", EmitDefaultValue=false)]
        public List<StateTranslationsDTO> Translations { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Index of Icon
        /// </summary>
        /// <value>Index of Icon</value>
        [DataMember(Name="iconIndex", EmitDefaultValue=false)]
        public int? IconIndex { get; set; }

        /// <summary>
        /// If user can force the state
        /// </summary>
        /// <value>If user can force the state</value>
        [DataMember(Name="userCanForce", EmitDefaultValue=false)]
        public bool? UserCanForce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateCompleteDTO {\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  NotifyOnRevision: ").Append(NotifyOnRevision).Append("\n");
            sb.Append("  DisableEditAuthor: ").Append(DisableEditAuthor).Append("\n");
            sb.Append("  AllowForceRevision: ").Append(AllowForceRevision).Append("\n");
            sb.Append("  AllowForceOverwrite: ").Append(AllowForceOverwrite).Append("\n");
            sb.Append("  NotifyAuthor: ").Append(NotifyAuthor).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconIndex: ").Append(IconIndex).Append("\n");
            sb.Append("  UserCanForce: ").Append(UserCanForce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StateCompleteDTO);
        }

        /// <summary>
        /// Returns true if StateCompleteDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of StateCompleteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateCompleteDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.NotifyOnRevision == input.NotifyOnRevision ||
                    (this.NotifyOnRevision != null &&
                    this.NotifyOnRevision.Equals(input.NotifyOnRevision))
                ) && 
                (
                    this.DisableEditAuthor == input.DisableEditAuthor ||
                    (this.DisableEditAuthor != null &&
                    this.DisableEditAuthor.Equals(input.DisableEditAuthor))
                ) && 
                (
                    this.AllowForceRevision == input.AllowForceRevision ||
                    (this.AllowForceRevision != null &&
                    this.AllowForceRevision.Equals(input.AllowForceRevision))
                ) && 
                (
                    this.AllowForceOverwrite == input.AllowForceOverwrite ||
                    (this.AllowForceOverwrite != null &&
                    this.AllowForceOverwrite.Equals(input.AllowForceOverwrite))
                ) && 
                (
                    this.NotifyAuthor == input.NotifyAuthor ||
                    (this.NotifyAuthor != null &&
                    this.NotifyAuthor.Equals(input.NotifyAuthor))
                ) && 
                (
                    this.Translations == input.Translations ||
                    this.Translations != null &&
                    this.Translations.SequenceEqual(input.Translations)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IconIndex == input.IconIndex ||
                    (this.IconIndex != null &&
                    this.IconIndex.Equals(input.IconIndex))
                ) && 
                (
                    this.UserCanForce == input.UserCanForce ||
                    (this.UserCanForce != null &&
                    this.UserCanForce.Equals(input.UserCanForce))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.NotifyOnRevision != null)
                    hashCode = hashCode * 59 + this.NotifyOnRevision.GetHashCode();
                if (this.DisableEditAuthor != null)
                    hashCode = hashCode * 59 + this.DisableEditAuthor.GetHashCode();
                if (this.AllowForceRevision != null)
                    hashCode = hashCode * 59 + this.AllowForceRevision.GetHashCode();
                if (this.AllowForceOverwrite != null)
                    hashCode = hashCode * 59 + this.AllowForceOverwrite.GetHashCode();
                if (this.NotifyAuthor != null)
                    hashCode = hashCode * 59 + this.NotifyAuthor.GetHashCode();
                if (this.Translations != null)
                    hashCode = hashCode * 59 + this.Translations.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IconIndex != null)
                    hashCode = hashCode * 59 + this.IconIndex.GetHashCode();
                if (this.UserCanForce != null)
                    hashCode = hashCode * 59 + this.UserCanForce.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
