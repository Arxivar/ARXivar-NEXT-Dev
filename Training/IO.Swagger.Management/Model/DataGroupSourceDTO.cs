/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of data group external source
    /// </summary>
    [DataContract]
    public partial class DataGroupSourceDTO :  IEquatable<DataGroupSourceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataGroupSourceDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="dataGroupId">Data Group identifier.</param>
        /// <param name="mode">Possible values:  0: Sql  1: Api .</param>
        /// <param name="sqlQueryId">Sql query identifier if mode is SQL.</param>
        /// <param name="apiCallId">Api Call Identifier if mode is API.</param>
        /// <param name="sourceDescription">Api Call or Sql Query description.</param>
        /// <param name="businessUnitCode">Business unit code or 0 for all.</param>
        /// <param name="fieldSelect">Field for select.</param>
        /// <param name="fieldDescription">Field description.</param>
        /// <param name="defaultFilter">Default filter field.</param>
        /// <param name="showOnlyDecription">Show only description (hide code).</param>
        /// <param name="autoFill">Automatic fill.</param>
        /// <param name="mapping">Fields Mapping.</param>
        public DataGroupSourceDTO(string id = default(string), string dataGroupId = default(string), int? mode = default(int?), string sqlQueryId = default(string), int? apiCallId = default(int?), string sourceDescription = default(string), string businessUnitCode = default(string), string fieldSelect = default(string), string fieldDescription = default(string), string defaultFilter = default(string), bool? showOnlyDecription = default(bool?), bool? autoFill = default(bool?), List<DataGroupSourceMappingDTO> mapping = default(List<DataGroupSourceMappingDTO>))
        {
            this.Id = id;
            this.DataGroupId = dataGroupId;
            this.Mode = mode;
            this.SqlQueryId = sqlQueryId;
            this.ApiCallId = apiCallId;
            this.SourceDescription = sourceDescription;
            this.BusinessUnitCode = businessUnitCode;
            this.FieldSelect = fieldSelect;
            this.FieldDescription = fieldDescription;
            this.DefaultFilter = defaultFilter;
            this.ShowOnlyDecription = showOnlyDecription;
            this.AutoFill = autoFill;
            this.Mapping = mapping;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Data Group identifier
        /// </summary>
        /// <value>Data Group identifier</value>
        [DataMember(Name="dataGroupId", EmitDefaultValue=false)]
        public string DataGroupId { get; set; }

        /// <summary>
        /// Possible values:  0: Sql  1: Api 
        /// </summary>
        /// <value>Possible values:  0: Sql  1: Api </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Sql query identifier if mode is SQL
        /// </summary>
        /// <value>Sql query identifier if mode is SQL</value>
        [DataMember(Name="sqlQueryId", EmitDefaultValue=false)]
        public string SqlQueryId { get; set; }

        /// <summary>
        /// Api Call Identifier if mode is API
        /// </summary>
        /// <value>Api Call Identifier if mode is API</value>
        [DataMember(Name="apiCallId", EmitDefaultValue=false)]
        public int? ApiCallId { get; set; }

        /// <summary>
        /// Api Call or Sql Query description
        /// </summary>
        /// <value>Api Call or Sql Query description</value>
        [DataMember(Name="sourceDescription", EmitDefaultValue=false)]
        public string SourceDescription { get; set; }

        /// <summary>
        /// Business unit code or 0 for all
        /// </summary>
        /// <value>Business unit code or 0 for all</value>
        [DataMember(Name="businessUnitCode", EmitDefaultValue=false)]
        public string BusinessUnitCode { get; set; }

        /// <summary>
        /// Field for select
        /// </summary>
        /// <value>Field for select</value>
        [DataMember(Name="fieldSelect", EmitDefaultValue=false)]
        public string FieldSelect { get; set; }

        /// <summary>
        /// Field description
        /// </summary>
        /// <value>Field description</value>
        [DataMember(Name="fieldDescription", EmitDefaultValue=false)]
        public string FieldDescription { get; set; }

        /// <summary>
        /// Default filter field
        /// </summary>
        /// <value>Default filter field</value>
        [DataMember(Name="defaultFilter", EmitDefaultValue=false)]
        public string DefaultFilter { get; set; }

        /// <summary>
        /// Show only description (hide code)
        /// </summary>
        /// <value>Show only description (hide code)</value>
        [DataMember(Name="showOnlyDecription", EmitDefaultValue=false)]
        public bool? ShowOnlyDecription { get; set; }

        /// <summary>
        /// Automatic fill
        /// </summary>
        /// <value>Automatic fill</value>
        [DataMember(Name="autoFill", EmitDefaultValue=false)]
        public bool? AutoFill { get; set; }

        /// <summary>
        /// Fields Mapping
        /// </summary>
        /// <value>Fields Mapping</value>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public List<DataGroupSourceMappingDTO> Mapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataGroupSourceDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DataGroupId: ").Append(DataGroupId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SqlQueryId: ").Append(SqlQueryId).Append("\n");
            sb.Append("  ApiCallId: ").Append(ApiCallId).Append("\n");
            sb.Append("  SourceDescription: ").Append(SourceDescription).Append("\n");
            sb.Append("  BusinessUnitCode: ").Append(BusinessUnitCode).Append("\n");
            sb.Append("  FieldSelect: ").Append(FieldSelect).Append("\n");
            sb.Append("  FieldDescription: ").Append(FieldDescription).Append("\n");
            sb.Append("  DefaultFilter: ").Append(DefaultFilter).Append("\n");
            sb.Append("  ShowOnlyDecription: ").Append(ShowOnlyDecription).Append("\n");
            sb.Append("  AutoFill: ").Append(AutoFill).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataGroupSourceDTO);
        }

        /// <summary>
        /// Returns true if DataGroupSourceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DataGroupSourceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataGroupSourceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DataGroupId == input.DataGroupId ||
                    (this.DataGroupId != null &&
                    this.DataGroupId.Equals(input.DataGroupId))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.SqlQueryId == input.SqlQueryId ||
                    (this.SqlQueryId != null &&
                    this.SqlQueryId.Equals(input.SqlQueryId))
                ) && 
                (
                    this.ApiCallId == input.ApiCallId ||
                    (this.ApiCallId != null &&
                    this.ApiCallId.Equals(input.ApiCallId))
                ) && 
                (
                    this.SourceDescription == input.SourceDescription ||
                    (this.SourceDescription != null &&
                    this.SourceDescription.Equals(input.SourceDescription))
                ) && 
                (
                    this.BusinessUnitCode == input.BusinessUnitCode ||
                    (this.BusinessUnitCode != null &&
                    this.BusinessUnitCode.Equals(input.BusinessUnitCode))
                ) && 
                (
                    this.FieldSelect == input.FieldSelect ||
                    (this.FieldSelect != null &&
                    this.FieldSelect.Equals(input.FieldSelect))
                ) && 
                (
                    this.FieldDescription == input.FieldDescription ||
                    (this.FieldDescription != null &&
                    this.FieldDescription.Equals(input.FieldDescription))
                ) && 
                (
                    this.DefaultFilter == input.DefaultFilter ||
                    (this.DefaultFilter != null &&
                    this.DefaultFilter.Equals(input.DefaultFilter))
                ) && 
                (
                    this.ShowOnlyDecription == input.ShowOnlyDecription ||
                    (this.ShowOnlyDecription != null &&
                    this.ShowOnlyDecription.Equals(input.ShowOnlyDecription))
                ) && 
                (
                    this.AutoFill == input.AutoFill ||
                    (this.AutoFill != null &&
                    this.AutoFill.Equals(input.AutoFill))
                ) && 
                (
                    this.Mapping == input.Mapping ||
                    this.Mapping != null &&
                    this.Mapping.SequenceEqual(input.Mapping)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DataGroupId != null)
                    hashCode = hashCode * 59 + this.DataGroupId.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.SqlQueryId != null)
                    hashCode = hashCode * 59 + this.SqlQueryId.GetHashCode();
                if (this.ApiCallId != null)
                    hashCode = hashCode * 59 + this.ApiCallId.GetHashCode();
                if (this.SourceDescription != null)
                    hashCode = hashCode * 59 + this.SourceDescription.GetHashCode();
                if (this.BusinessUnitCode != null)
                    hashCode = hashCode * 59 + this.BusinessUnitCode.GetHashCode();
                if (this.FieldSelect != null)
                    hashCode = hashCode * 59 + this.FieldSelect.GetHashCode();
                if (this.FieldDescription != null)
                    hashCode = hashCode * 59 + this.FieldDescription.GetHashCode();
                if (this.DefaultFilter != null)
                    hashCode = hashCode * 59 + this.DefaultFilter.GetHashCode();
                if (this.ShowOnlyDecription != null)
                    hashCode = hashCode * 59 + this.ShowOnlyDecription.GetHashCode();
                if (this.AutoFill != null)
                    hashCode = hashCode * 59 + this.AutoFill.GetHashCode();
                if (this.Mapping != null)
                    hashCode = hashCode * 59 + this.Mapping.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
