/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class for global mail settings
    /// </summary>
    [DataContract]
    public partial class GlobalMailSettingsDTO :  IEquatable<GlobalMailSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMailSettingsDTO" /> class.
        /// </summary>
        /// <param name="stateIn">State for incoming mail messages.</param>
        /// <param name="documentTypeIn">Document type for incoming mail messages.</param>
        /// <param name="stateOut">State for outcoming mail messages.</param>
        /// <param name="documentTypeOut">Document type for outcoming mail messages.</param>
        /// <param name="pecSender">PEC: replace profile sender with original.</param>
        /// <param name="pecSubject">PEC: replace profile subject with original.</param>
        public GlobalMailSettingsDTO(StateSimpleDTO stateIn = default(StateSimpleDTO), DocumentTypeSimpleDTO documentTypeIn = default(DocumentTypeSimpleDTO), StateSimpleDTO stateOut = default(StateSimpleDTO), DocumentTypeSimpleDTO documentTypeOut = default(DocumentTypeSimpleDTO), bool? pecSender = default(bool?), bool? pecSubject = default(bool?))
        {
            this.StateIn = stateIn;
            this.DocumentTypeIn = documentTypeIn;
            this.StateOut = stateOut;
            this.DocumentTypeOut = documentTypeOut;
            this.PecSender = pecSender;
            this.PecSubject = pecSubject;
        }
        
        /// <summary>
        /// State for incoming mail messages
        /// </summary>
        /// <value>State for incoming mail messages</value>
        [DataMember(Name="stateIn", EmitDefaultValue=false)]
        public StateSimpleDTO StateIn { get; set; }

        /// <summary>
        /// Document type for incoming mail messages
        /// </summary>
        /// <value>Document type for incoming mail messages</value>
        [DataMember(Name="documentTypeIn", EmitDefaultValue=false)]
        public DocumentTypeSimpleDTO DocumentTypeIn { get; set; }

        /// <summary>
        /// State for outcoming mail messages
        /// </summary>
        /// <value>State for outcoming mail messages</value>
        [DataMember(Name="stateOut", EmitDefaultValue=false)]
        public StateSimpleDTO StateOut { get; set; }

        /// <summary>
        /// Document type for outcoming mail messages
        /// </summary>
        /// <value>Document type for outcoming mail messages</value>
        [DataMember(Name="documentTypeOut", EmitDefaultValue=false)]
        public DocumentTypeSimpleDTO DocumentTypeOut { get; set; }

        /// <summary>
        /// PEC: replace profile sender with original
        /// </summary>
        /// <value>PEC: replace profile sender with original</value>
        [DataMember(Name="pecSender", EmitDefaultValue=false)]
        public bool? PecSender { get; set; }

        /// <summary>
        /// PEC: replace profile subject with original
        /// </summary>
        /// <value>PEC: replace profile subject with original</value>
        [DataMember(Name="pecSubject", EmitDefaultValue=false)]
        public bool? PecSubject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlobalMailSettingsDTO {\n");
            sb.Append("  StateIn: ").Append(StateIn).Append("\n");
            sb.Append("  DocumentTypeIn: ").Append(DocumentTypeIn).Append("\n");
            sb.Append("  StateOut: ").Append(StateOut).Append("\n");
            sb.Append("  DocumentTypeOut: ").Append(DocumentTypeOut).Append("\n");
            sb.Append("  PecSender: ").Append(PecSender).Append("\n");
            sb.Append("  PecSubject: ").Append(PecSubject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalMailSettingsDTO);
        }

        /// <summary>
        /// Returns true if GlobalMailSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalMailSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalMailSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StateIn == input.StateIn ||
                    (this.StateIn != null &&
                    this.StateIn.Equals(input.StateIn))
                ) && 
                (
                    this.DocumentTypeIn == input.DocumentTypeIn ||
                    (this.DocumentTypeIn != null &&
                    this.DocumentTypeIn.Equals(input.DocumentTypeIn))
                ) && 
                (
                    this.StateOut == input.StateOut ||
                    (this.StateOut != null &&
                    this.StateOut.Equals(input.StateOut))
                ) && 
                (
                    this.DocumentTypeOut == input.DocumentTypeOut ||
                    (this.DocumentTypeOut != null &&
                    this.DocumentTypeOut.Equals(input.DocumentTypeOut))
                ) && 
                (
                    this.PecSender == input.PecSender ||
                    (this.PecSender != null &&
                    this.PecSender.Equals(input.PecSender))
                ) && 
                (
                    this.PecSubject == input.PecSubject ||
                    (this.PecSubject != null &&
                    this.PecSubject.Equals(input.PecSubject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StateIn != null)
                    hashCode = hashCode * 59 + this.StateIn.GetHashCode();
                if (this.DocumentTypeIn != null)
                    hashCode = hashCode * 59 + this.DocumentTypeIn.GetHashCode();
                if (this.StateOut != null)
                    hashCode = hashCode * 59 + this.StateOut.GetHashCode();
                if (this.DocumentTypeOut != null)
                    hashCode = hashCode * 59 + this.DocumentTypeOut.GetHashCode();
                if (this.PecSender != null)
                    hashCode = hashCode * 59 + this.PecSender.GetHashCode();
                if (this.PecSubject != null)
                    hashCode = hashCode * 59 + this.PecSubject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
