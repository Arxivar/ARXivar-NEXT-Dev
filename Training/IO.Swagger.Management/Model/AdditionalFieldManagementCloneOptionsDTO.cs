/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class for additional field cloning options for copy/paste or cut/paste
    /// </summary>
    [DataContract]
    public partial class AdditionalFieldManagementCloneOptionsDTO :  IEquatable<AdditionalFieldManagementCloneOptionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalFieldManagementCloneOptionsDTO" /> class.
        /// </summary>
        /// <param name="key">Additional field identifier.</param>
        /// <param name="originalDocumentTypeId">Document type identifier source.</param>
        /// <param name="newDocumentTypeId">Document type identifier destination.</param>
        /// <param name="deleteOriginalField">Boolean that is true if you intend to delete the source field.</param>
        /// <param name="copyReferences">Boolean that is true if you intend to copy also original references.  It is handled only if DeleteOriginalField is false, otherwise the references are automatically copied if they exist.</param>
        public AdditionalFieldManagementCloneOptionsDTO(string key = default(string), int? originalDocumentTypeId = default(int?), int? newDocumentTypeId = default(int?), bool? deleteOriginalField = default(bool?), bool? copyReferences = default(bool?))
        {
            this.Key = key;
            this.OriginalDocumentTypeId = originalDocumentTypeId;
            this.NewDocumentTypeId = newDocumentTypeId;
            this.DeleteOriginalField = deleteOriginalField;
            this.CopyReferences = copyReferences;
        }
        
        /// <summary>
        /// Additional field identifier
        /// </summary>
        /// <value>Additional field identifier</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Document type identifier source
        /// </summary>
        /// <value>Document type identifier source</value>
        [DataMember(Name="originalDocumentTypeId", EmitDefaultValue=false)]
        public int? OriginalDocumentTypeId { get; set; }

        /// <summary>
        /// Document type identifier destination
        /// </summary>
        /// <value>Document type identifier destination</value>
        [DataMember(Name="newDocumentTypeId", EmitDefaultValue=false)]
        public int? NewDocumentTypeId { get; set; }

        /// <summary>
        /// Boolean that is true if you intend to delete the source field
        /// </summary>
        /// <value>Boolean that is true if you intend to delete the source field</value>
        [DataMember(Name="deleteOriginalField", EmitDefaultValue=false)]
        public bool? DeleteOriginalField { get; set; }

        /// <summary>
        /// Boolean that is true if you intend to copy also original references.  It is handled only if DeleteOriginalField is false, otherwise the references are automatically copied if they exist
        /// </summary>
        /// <value>Boolean that is true if you intend to copy also original references.  It is handled only if DeleteOriginalField is false, otherwise the references are automatically copied if they exist</value>
        [DataMember(Name="copyReferences", EmitDefaultValue=false)]
        public bool? CopyReferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalFieldManagementCloneOptionsDTO {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  OriginalDocumentTypeId: ").Append(OriginalDocumentTypeId).Append("\n");
            sb.Append("  NewDocumentTypeId: ").Append(NewDocumentTypeId).Append("\n");
            sb.Append("  DeleteOriginalField: ").Append(DeleteOriginalField).Append("\n");
            sb.Append("  CopyReferences: ").Append(CopyReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalFieldManagementCloneOptionsDTO);
        }

        /// <summary>
        /// Returns true if AdditionalFieldManagementCloneOptionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalFieldManagementCloneOptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalFieldManagementCloneOptionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.OriginalDocumentTypeId == input.OriginalDocumentTypeId ||
                    (this.OriginalDocumentTypeId != null &&
                    this.OriginalDocumentTypeId.Equals(input.OriginalDocumentTypeId))
                ) && 
                (
                    this.NewDocumentTypeId == input.NewDocumentTypeId ||
                    (this.NewDocumentTypeId != null &&
                    this.NewDocumentTypeId.Equals(input.NewDocumentTypeId))
                ) && 
                (
                    this.DeleteOriginalField == input.DeleteOriginalField ||
                    (this.DeleteOriginalField != null &&
                    this.DeleteOriginalField.Equals(input.DeleteOriginalField))
                ) && 
                (
                    this.CopyReferences == input.CopyReferences ||
                    (this.CopyReferences != null &&
                    this.CopyReferences.Equals(input.CopyReferences))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.OriginalDocumentTypeId != null)
                    hashCode = hashCode * 59 + this.OriginalDocumentTypeId.GetHashCode();
                if (this.NewDocumentTypeId != null)
                    hashCode = hashCode * 59 + this.NewDocumentTypeId.GetHashCode();
                if (this.DeleteOriginalField != null)
                    hashCode = hashCode * 59 + this.DeleteOriginalField.GetHashCode();
                if (this.CopyReferences != null)
                    hashCode = hashCode * 59 + this.CopyReferences.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
