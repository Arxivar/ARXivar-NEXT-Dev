/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of the user
    /// </summary>
    [DataContract]
    public partial class UserSimpleDTO :  IEquatable<UserSimpleDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSimpleDTO" /> class.
        /// </summary>
        /// <param name="user">Identifier.</param>
        /// <param name="description">Description.</param>
        /// <param name="category">Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D .</param>
        /// <param name="group">Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler .</param>
        /// <param name="isUserDisabled">User is disabled (non active or hidden).</param>
        public UserSimpleDTO(int? user = default(int?), string description = default(string), int? category = default(int?), int? group = default(int?), bool? isUserDisabled = default(bool?))
        {
            this.User = user;
            this.Description = description;
            this.Category = category;
            this.Group = group;
            this.IsUserDisabled = isUserDisabled;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D 
        /// </summary>
        /// <value>Possible values:  0: U  1: S  2: M  3: F  4: G  5: I  6: D </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public int? Category { get; set; }

        /// <summary>
        /// Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler 
        /// </summary>
        /// <value>Possible values:  0: Non_Impostato  1: Admin  2: User  3: Profiler </value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public int? Group { get; set; }

        /// <summary>
        /// User is disabled (non active or hidden)
        /// </summary>
        /// <value>User is disabled (non active or hidden)</value>
        [DataMember(Name="isUserDisabled", EmitDefaultValue=false)]
        public bool? IsUserDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserSimpleDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  IsUserDisabled: ").Append(IsUserDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSimpleDTO);
        }

        /// <summary>
        /// Returns true if UserSimpleDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSimpleDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSimpleDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.IsUserDisabled == input.IsUserDisabled ||
                    (this.IsUserDisabled != null &&
                    this.IsUserDisabled.Equals(input.IsUserDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.IsUserDisabled != null)
                    hashCode = hashCode * 59 + this.IsUserDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
