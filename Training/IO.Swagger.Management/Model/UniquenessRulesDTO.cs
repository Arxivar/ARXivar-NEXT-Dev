/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Management.Client.SwaggerDateConverter;

namespace IO.Swagger.Management.Model
{
    /// <summary>
    /// Class of document type: uniqueness rules
    /// </summary>
    [DataContract]
    public partial class UniquenessRulesDTO :  IEquatable<UniquenessRulesDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniquenessRulesDTO" /> class.
        /// </summary>
        /// <param name="documentType">Document type.</param>
        /// <param name="profilationOption">Possible values:  0: AskToUser  1: ByState .</param>
        /// <param name="runMode">Possible values:  0: UseNewValues  1: KeepOldValuesIfEmpty .</param>
        /// <param name="fields">Fields.</param>
        public UniquenessRulesDTO(DocumentTypeSimpleDTO documentType = default(DocumentTypeSimpleDTO), int? profilationOption = default(int?), int? runMode = default(int?), List<FieldManagementForUniquenessRulesDTO> fields = default(List<FieldManagementForUniquenessRulesDTO>))
        {
            this.DocumentType = documentType;
            this.ProfilationOption = profilationOption;
            this.RunMode = runMode;
            this.Fields = fields;
        }
        
        /// <summary>
        /// Document type
        /// </summary>
        /// <value>Document type</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentTypeSimpleDTO DocumentType { get; set; }

        /// <summary>
        /// Possible values:  0: AskToUser  1: ByState 
        /// </summary>
        /// <value>Possible values:  0: AskToUser  1: ByState </value>
        [DataMember(Name="profilationOption", EmitDefaultValue=false)]
        public int? ProfilationOption { get; set; }

        /// <summary>
        /// Possible values:  0: UseNewValues  1: KeepOldValuesIfEmpty 
        /// </summary>
        /// <value>Possible values:  0: UseNewValues  1: KeepOldValuesIfEmpty </value>
        [DataMember(Name="runMode", EmitDefaultValue=false)]
        public int? RunMode { get; set; }

        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FieldManagementForUniquenessRulesDTO> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UniquenessRulesDTO {\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  ProfilationOption: ").Append(ProfilationOption).Append("\n");
            sb.Append("  RunMode: ").Append(RunMode).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniquenessRulesDTO);
        }

        /// <summary>
        /// Returns true if UniquenessRulesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UniquenessRulesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniquenessRulesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.ProfilationOption == input.ProfilationOption ||
                    (this.ProfilationOption != null &&
                    this.ProfilationOption.Equals(input.ProfilationOption))
                ) && 
                (
                    this.RunMode == input.RunMode ||
                    (this.RunMode != null &&
                    this.RunMode.Equals(input.RunMode))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.ProfilationOption != null)
                    hashCode = hashCode * 59 + this.ProfilationOption.GetHashCode();
                if (this.RunMode != null)
                    hashCode = hashCode * 59 + this.RunMode.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
