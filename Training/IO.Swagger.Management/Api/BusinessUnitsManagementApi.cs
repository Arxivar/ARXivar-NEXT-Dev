/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessUnitsManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call duplicate an Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        BusinessUnitBaseDTO BusinessUnitsManagementClone (BusinessUnitCloneOptionsDTO cloneOptions);

        /// <summary>
        /// This call duplicate an Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        ApiResponse<BusinessUnitBaseDTO> BusinessUnitsManagementCloneWithHttpInfo (BusinessUnitCloneOptionsDTO cloneOptions);
        /// <summary>
        /// This call deletes Business unit specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns></returns>
        void BusinessUnitsManagementDelete (BusinessUnitDTO businessUnit);

        /// <summary>
        /// This call deletes Business unit specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BusinessUnitsManagementDeleteWithHttpInfo (BusinessUnitDTO businessUnit);
        /// <summary>
        /// This call returns the business unit that the connected user can see
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BusinessUnitBaseDTO&gt;</returns>
        List<BusinessUnitBaseDTO> BusinessUnitsManagementGet ();

        /// <summary>
        /// This call returns the business unit that the connected user can see
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BusinessUnitBaseDTO&gt;</returns>
        ApiResponse<List<BusinessUnitBaseDTO>> BusinessUnitsManagementGetWithHttpInfo ();
        /// <summary>
        /// This call gets Business unit data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        BusinessUnitBaseDTO BusinessUnitsManagementGetAooByCode (BusinessUnitDTO businessUnit);

        /// <summary>
        /// This call gets Business unit data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        ApiResponse<BusinessUnitBaseDTO> BusinessUnitsManagementGetAooByCodeWithHttpInfo (BusinessUnitDTO businessUnit);
        /// <summary>
        /// This call inserts a new Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        BusinessUnitBaseDTO BusinessUnitsManagementInsert (BusinessUnitForOperationsDTO businessUnitInsert);

        /// <summary>
        /// This call inserts a new Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        ApiResponse<BusinessUnitBaseDTO> BusinessUnitsManagementInsertWithHttpInfo (BusinessUnitForOperationsDTO businessUnitInsert);
        /// <summary>
        /// This call retrieve Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BusinessUnitSetupParamsDTO</returns>
        BusinessUnitSetupParamsDTO BusinessUnitsManagementSetupParams ();

        /// <summary>
        /// This call retrieve Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BusinessUnitSetupParamsDTO</returns>
        ApiResponse<BusinessUnitSetupParamsDTO> BusinessUnitsManagementSetupParamsWithHttpInfo ();
        /// <summary>
        /// This call updates a given Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        BusinessUnitBaseDTO BusinessUnitsManagementUpdate (BusinessUnitForOperationsDTO businessUnitUpdate);

        /// <summary>
        /// This call updates a given Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        ApiResponse<BusinessUnitBaseDTO> BusinessUnitsManagementUpdateWithHttpInfo (BusinessUnitForOperationsDTO businessUnitUpdate);
        /// <summary>
        /// This call update Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>BusinessUnitSetupParamsDTO</returns>
        BusinessUnitSetupParamsDTO BusinessUnitsManagementUpdateSetupParams (BusinessUnitSetupParamsDTO setupParams);

        /// <summary>
        /// This call update Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>ApiResponse of BusinessUnitSetupParamsDTO</returns>
        ApiResponse<BusinessUnitSetupParamsDTO> BusinessUnitsManagementUpdateSetupParamsWithHttpInfo (BusinessUnitSetupParamsDTO setupParams);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call duplicate an Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementCloneAsync (BusinessUnitCloneOptionsDTO cloneOptions);

        /// <summary>
        /// This call duplicate an Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementCloneAsyncWithHttpInfo (BusinessUnitCloneOptionsDTO cloneOptions);
        /// <summary>
        /// This call deletes Business unit specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BusinessUnitsManagementDeleteAsync (BusinessUnitDTO businessUnit);

        /// <summary>
        /// This call deletes Business unit specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BusinessUnitsManagementDeleteAsyncWithHttpInfo (BusinessUnitDTO businessUnit);
        /// <summary>
        /// This call returns the business unit that the connected user can see
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BusinessUnitBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessUnitBaseDTO>> BusinessUnitsManagementGetAsync ();

        /// <summary>
        /// This call returns the business unit that the connected user can see
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BusinessUnitBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessUnitBaseDTO>>> BusinessUnitsManagementGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets Business unit data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementGetAooByCodeAsync (BusinessUnitDTO businessUnit);

        /// <summary>
        /// This call gets Business unit data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementGetAooByCodeAsyncWithHttpInfo (BusinessUnitDTO businessUnit);
        /// <summary>
        /// This call inserts a new Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementInsertAsync (BusinessUnitForOperationsDTO businessUnitInsert);

        /// <summary>
        /// This call inserts a new Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementInsertAsyncWithHttpInfo (BusinessUnitForOperationsDTO businessUnitInsert);
        /// <summary>
        /// This call retrieve Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BusinessUnitSetupParamsDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitSetupParamsDTO> BusinessUnitsManagementSetupParamsAsync ();

        /// <summary>
        /// This call retrieve Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BusinessUnitSetupParamsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitSetupParamsDTO>> BusinessUnitsManagementSetupParamsAsyncWithHttpInfo ();
        /// <summary>
        /// This call updates a given Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementUpdateAsync (BusinessUnitForOperationsDTO businessUnitUpdate);

        /// <summary>
        /// This call updates a given Business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementUpdateAsyncWithHttpInfo (BusinessUnitForOperationsDTO businessUnitUpdate);
        /// <summary>
        /// This call update Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>Task of BusinessUnitSetupParamsDTO</returns>
        System.Threading.Tasks.Task<BusinessUnitSetupParamsDTO> BusinessUnitsManagementUpdateSetupParamsAsync (BusinessUnitSetupParamsDTO setupParams);

        /// <summary>
        /// This call update Business unit setup params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>Task of ApiResponse (BusinessUnitSetupParamsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessUnitSetupParamsDTO>> BusinessUnitsManagementUpdateSetupParamsAsyncWithHttpInfo (BusinessUnitSetupParamsDTO setupParams);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessUnitsManagementApi : IBusinessUnitsManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessUnitsManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessUnitsManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessUnitsManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessUnitsManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call duplicate an Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        public BusinessUnitBaseDTO BusinessUnitsManagementClone (BusinessUnitCloneOptionsDTO cloneOptions)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = BusinessUnitsManagementCloneWithHttpInfo(cloneOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call duplicate an Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        public ApiResponse< BusinessUnitBaseDTO > BusinessUnitsManagementCloneWithHttpInfo (BusinessUnitCloneOptionsDTO cloneOptions)
        {
            // verify the required parameter 'cloneOptions' is set
            if (cloneOptions == null)
                throw new ApiException(400, "Missing required parameter 'cloneOptions' when calling BusinessUnitsManagementApi->BusinessUnitsManagementClone");

            var localVarPath = "/api/management/BusinessUnits/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloneOptions != null && cloneOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call duplicate an Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementCloneAsync (BusinessUnitCloneOptionsDTO cloneOptions)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = await BusinessUnitsManagementCloneAsyncWithHttpInfo(cloneOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call duplicate an Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneOptions">Business unit options for clone operation</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementCloneAsyncWithHttpInfo (BusinessUnitCloneOptionsDTO cloneOptions)
        {
            // verify the required parameter 'cloneOptions' is set
            if (cloneOptions == null)
                throw new ApiException(400, "Missing required parameter 'cloneOptions' when calling BusinessUnitsManagementApi->BusinessUnitsManagementClone");

            var localVarPath = "/api/management/BusinessUnits/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloneOptions != null && cloneOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneOptions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call deletes Business unit specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns></returns>
        public void BusinessUnitsManagementDelete (BusinessUnitDTO businessUnit)
        {
             BusinessUnitsManagementDeleteWithHttpInfo(businessUnit);
        }

        /// <summary>
        /// This call deletes Business unit specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BusinessUnitsManagementDeleteWithHttpInfo (BusinessUnitDTO businessUnit)
        {
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling BusinessUnitsManagementApi->BusinessUnitsManagementDelete");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnit != null && businessUnit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes Business unit specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BusinessUnitsManagementDeleteAsync (BusinessUnitDTO businessUnit)
        {
             await BusinessUnitsManagementDeleteAsyncWithHttpInfo(businessUnit);

        }

        /// <summary>
        /// This call deletes Business unit specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BusinessUnitsManagementDeleteAsyncWithHttpInfo (BusinessUnitDTO businessUnit)
        {
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling BusinessUnitsManagementApi->BusinessUnitsManagementDelete");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnit != null && businessUnit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns the business unit that the connected user can see 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BusinessUnitBaseDTO&gt;</returns>
        public List<BusinessUnitBaseDTO> BusinessUnitsManagementGet ()
        {
             ApiResponse<List<BusinessUnitBaseDTO>> localVarResponse = BusinessUnitsManagementGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the business unit that the connected user can see 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BusinessUnitBaseDTO&gt;</returns>
        public ApiResponse< List<BusinessUnitBaseDTO> > BusinessUnitsManagementGetWithHttpInfo ()
        {

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessUnitBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessUnitBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessUnitBaseDTO>)));
        }

        /// <summary>
        /// This call returns the business unit that the connected user can see 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BusinessUnitBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessUnitBaseDTO>> BusinessUnitsManagementGetAsync ()
        {
             ApiResponse<List<BusinessUnitBaseDTO>> localVarResponse = await BusinessUnitsManagementGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the business unit that the connected user can see 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BusinessUnitBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessUnitBaseDTO>>> BusinessUnitsManagementGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessUnitBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessUnitBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessUnitBaseDTO>)));
        }

        /// <summary>
        /// This call gets Business unit data 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        public BusinessUnitBaseDTO BusinessUnitsManagementGetAooByCode (BusinessUnitDTO businessUnit)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = BusinessUnitsManagementGetAooByCodeWithHttpInfo(businessUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets Business unit data 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        public ApiResponse< BusinessUnitBaseDTO > BusinessUnitsManagementGetAooByCodeWithHttpInfo (BusinessUnitDTO businessUnit)
        {
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling BusinessUnitsManagementApi->BusinessUnitsManagementGetAooByCode");

            var localVarPath = "/api/management/BusinessUnits/GetBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnit != null && businessUnit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementGetAooByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call gets Business unit data 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementGetAooByCodeAsync (BusinessUnitDTO businessUnit)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = await BusinessUnitsManagementGetAooByCodeAsyncWithHttpInfo(businessUnit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets Business unit data 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnit">Business unit</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementGetAooByCodeAsyncWithHttpInfo (BusinessUnitDTO businessUnit)
        {
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling BusinessUnitsManagementApi->BusinessUnitsManagementGetAooByCode");

            var localVarPath = "/api/management/BusinessUnits/GetBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnit != null && businessUnit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnit; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementGetAooByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call inserts a new Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        public BusinessUnitBaseDTO BusinessUnitsManagementInsert (BusinessUnitForOperationsDTO businessUnitInsert)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = BusinessUnitsManagementInsertWithHttpInfo(businessUnitInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        public ApiResponse< BusinessUnitBaseDTO > BusinessUnitsManagementInsertWithHttpInfo (BusinessUnitForOperationsDTO businessUnitInsert)
        {
            // verify the required parameter 'businessUnitInsert' is set
            if (businessUnitInsert == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitInsert' when calling BusinessUnitsManagementApi->BusinessUnitsManagementInsert");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitInsert != null && businessUnitInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call inserts a new Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementInsertAsync (BusinessUnitForOperationsDTO businessUnitInsert)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = await BusinessUnitsManagementInsertAsyncWithHttpInfo(businessUnitInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitInsert">Business unit information to insert</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementInsertAsyncWithHttpInfo (BusinessUnitForOperationsDTO businessUnitInsert)
        {
            // verify the required parameter 'businessUnitInsert' is set
            if (businessUnitInsert == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitInsert' when calling BusinessUnitsManagementApi->BusinessUnitsManagementInsert");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitInsert != null && businessUnitInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call retrieve Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BusinessUnitSetupParamsDTO</returns>
        public BusinessUnitSetupParamsDTO BusinessUnitsManagementSetupParams ()
        {
             ApiResponse<BusinessUnitSetupParamsDTO> localVarResponse = BusinessUnitsManagementSetupParamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BusinessUnitSetupParamsDTO</returns>
        public ApiResponse< BusinessUnitSetupParamsDTO > BusinessUnitsManagementSetupParamsWithHttpInfo ()
        {

            var localVarPath = "/api/management/BusinessUnits/SetupParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementSetupParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitSetupParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitSetupParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitSetupParamsDTO)));
        }

        /// <summary>
        /// This call retrieve Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BusinessUnitSetupParamsDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitSetupParamsDTO> BusinessUnitsManagementSetupParamsAsync ()
        {
             ApiResponse<BusinessUnitSetupParamsDTO> localVarResponse = await BusinessUnitsManagementSetupParamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BusinessUnitSetupParamsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitSetupParamsDTO>> BusinessUnitsManagementSetupParamsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/BusinessUnits/SetupParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementSetupParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitSetupParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitSetupParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitSetupParamsDTO)));
        }

        /// <summary>
        /// This call updates a given Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>BusinessUnitBaseDTO</returns>
        public BusinessUnitBaseDTO BusinessUnitsManagementUpdate (BusinessUnitForOperationsDTO businessUnitUpdate)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = BusinessUnitsManagementUpdateWithHttpInfo(businessUnitUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a given Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>ApiResponse of BusinessUnitBaseDTO</returns>
        public ApiResponse< BusinessUnitBaseDTO > BusinessUnitsManagementUpdateWithHttpInfo (BusinessUnitForOperationsDTO businessUnitUpdate)
        {
            // verify the required parameter 'businessUnitUpdate' is set
            if (businessUnitUpdate == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitUpdate' when calling BusinessUnitsManagementApi->BusinessUnitsManagementUpdate");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitUpdate != null && businessUnitUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call updates a given Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>Task of BusinessUnitBaseDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitBaseDTO> BusinessUnitsManagementUpdateAsync (BusinessUnitForOperationsDTO businessUnitUpdate)
        {
             ApiResponse<BusinessUnitBaseDTO> localVarResponse = await BusinessUnitsManagementUpdateAsyncWithHttpInfo(businessUnitUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a given Business unit 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUpdate">Business unit information to update</param>
        /// <returns>Task of ApiResponse (BusinessUnitBaseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitBaseDTO>> BusinessUnitsManagementUpdateAsyncWithHttpInfo (BusinessUnitForOperationsDTO businessUnitUpdate)
        {
            // verify the required parameter 'businessUnitUpdate' is set
            if (businessUnitUpdate == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitUpdate' when calling BusinessUnitsManagementApi->BusinessUnitsManagementUpdate");

            var localVarPath = "/api/management/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitUpdate != null && businessUnitUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitBaseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitBaseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitBaseDTO)));
        }

        /// <summary>
        /// This call update Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>BusinessUnitSetupParamsDTO</returns>
        public BusinessUnitSetupParamsDTO BusinessUnitsManagementUpdateSetupParams (BusinessUnitSetupParamsDTO setupParams)
        {
             ApiResponse<BusinessUnitSetupParamsDTO> localVarResponse = BusinessUnitsManagementUpdateSetupParamsWithHttpInfo(setupParams);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call update Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>ApiResponse of BusinessUnitSetupParamsDTO</returns>
        public ApiResponse< BusinessUnitSetupParamsDTO > BusinessUnitsManagementUpdateSetupParamsWithHttpInfo (BusinessUnitSetupParamsDTO setupParams)
        {
            // verify the required parameter 'setupParams' is set
            if (setupParams == null)
                throw new ApiException(400, "Missing required parameter 'setupParams' when calling BusinessUnitsManagementApi->BusinessUnitsManagementUpdateSetupParams");

            var localVarPath = "/api/management/BusinessUnits/SetupParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setupParams != null && setupParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setupParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setupParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementUpdateSetupParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitSetupParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitSetupParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitSetupParamsDTO)));
        }

        /// <summary>
        /// This call update Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>Task of BusinessUnitSetupParamsDTO</returns>
        public async System.Threading.Tasks.Task<BusinessUnitSetupParamsDTO> BusinessUnitsManagementUpdateSetupParamsAsync (BusinessUnitSetupParamsDTO setupParams)
        {
             ApiResponse<BusinessUnitSetupParamsDTO> localVarResponse = await BusinessUnitsManagementUpdateSetupParamsAsyncWithHttpInfo(setupParams);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call update Business unit setup params 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setupParams">Business unit setup params</param>
        /// <returns>Task of ApiResponse (BusinessUnitSetupParamsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessUnitSetupParamsDTO>> BusinessUnitsManagementUpdateSetupParamsAsyncWithHttpInfo (BusinessUnitSetupParamsDTO setupParams)
        {
            // verify the required parameter 'setupParams' is set
            if (setupParams == null)
                throw new ApiException(400, "Missing required parameter 'setupParams' when calling BusinessUnitsManagementApi->BusinessUnitsManagementUpdateSetupParams");

            var localVarPath = "/api/management/BusinessUnits/SetupParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setupParams != null && setupParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setupParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setupParams; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessUnitsManagementUpdateSetupParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessUnitSetupParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessUnitSetupParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessUnitSetupParamsDTO)));
        }

    }
}
