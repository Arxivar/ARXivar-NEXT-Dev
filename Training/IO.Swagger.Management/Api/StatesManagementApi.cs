/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes specified document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns></returns>
        void StatesManagementDelete (StateSimpleDTO state);

        /// <summary>
        /// This call deletes specified document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatesManagementDeleteWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call gets document state information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StateCompleteDTO</returns>
        StateCompleteDTO StatesManagementGetById (StateSimpleDTO state);

        /// <summary>
        /// This call gets document state information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        ApiResponse<StateCompleteDTO> StatesManagementGetByIdWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call returns all document types connected to the document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StateDocumentTypesDTO</returns>
        StateDocumentTypesDTO StatesManagementGetDocumentTypes (StateSimpleDTO state);

        /// <summary>
        /// This call returns all document types connected to the document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StateDocumentTypesDTO</returns>
        ApiResponse<StateDocumentTypesDTO> StatesManagementGetDocumentTypesWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call returns all document states
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StateCompleteDTO&gt;</returns>
        List<StateCompleteDTO> StatesManagementGetList ();

        /// <summary>
        /// This call returns all document states
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StateCompleteDTO&gt;</returns>
        ApiResponse<List<StateCompleteDTO>> StatesManagementGetListWithHttpInfo ();
        /// <summary>
        /// This call returns all permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StatePermissionsDTO</returns>
        StatePermissionsDTO StatesManagementGetPermissions (StateSimpleDTO state);

        /// <summary>
        /// This call returns all permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StatePermissionsDTO</returns>
        ApiResponse<StatePermissionsDTO> StatesManagementGetPermissionsWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call inserts a new document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>StateCompleteDTO</returns>
        StateCompleteDTO StatesManagementInsert (StateCompleteDTO stateForInsert);

        /// <summary>
        /// This call inserts a new document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        ApiResponse<StateCompleteDTO> StatesManagementInsertWithHttpInfo (StateCompleteDTO stateForInsert);
        /// <summary>
        /// This call update connected document types for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns></returns>
        void StatesManagementSetDocumentTypes (StateDocumentTypesDTO stateDocumentTypes);

        /// <summary>
        /// This call update connected document types for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatesManagementSetDocumentTypesWithHttpInfo (StateDocumentTypesDTO stateDocumentTypes);
        /// <summary>
        /// This call update permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns></returns>
        void StatesManagementSetPermissions (StatePermissionsDTO statePermissions);

        /// <summary>
        /// This call update permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatesManagementSetPermissionsWithHttpInfo (StatePermissionsDTO statePermissions);
        /// <summary>
        /// This call updates a given document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>StateCompleteDTO</returns>
        StateCompleteDTO StatesManagementUpdate (StateCompleteDTO stateForUpdate);

        /// <summary>
        /// This call updates a given document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        ApiResponse<StateCompleteDTO> StatesManagementUpdateWithHttpInfo (StateCompleteDTO stateForUpdate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes specified document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatesManagementDeleteAsync (StateSimpleDTO state);

        /// <summary>
        /// This call deletes specified document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementDeleteAsyncWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call gets document state information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StateCompleteDTO</returns>
        System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementGetByIdAsync (StateSimpleDTO state);

        /// <summary>
        /// This call gets document state information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementGetByIdAsyncWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call returns all document types connected to the document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StateDocumentTypesDTO</returns>
        System.Threading.Tasks.Task<StateDocumentTypesDTO> StatesManagementGetDocumentTypesAsync (StateSimpleDTO state);

        /// <summary>
        /// This call returns all document types connected to the document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StateDocumentTypesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StateDocumentTypesDTO>> StatesManagementGetDocumentTypesAsyncWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call returns all document states
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StateCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StateCompleteDTO>> StatesManagementGetListAsync ();

        /// <summary>
        /// This call returns all document states
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StateCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StateCompleteDTO>>> StatesManagementGetListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StatePermissionsDTO</returns>
        System.Threading.Tasks.Task<StatePermissionsDTO> StatesManagementGetPermissionsAsync (StateSimpleDTO state);

        /// <summary>
        /// This call returns all permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StatePermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatePermissionsDTO>> StatesManagementGetPermissionsAsyncWithHttpInfo (StateSimpleDTO state);
        /// <summary>
        /// This call inserts a new document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>Task of StateCompleteDTO</returns>
        System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementInsertAsync (StateCompleteDTO stateForInsert);

        /// <summary>
        /// This call inserts a new document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementInsertAsyncWithHttpInfo (StateCompleteDTO stateForInsert);
        /// <summary>
        /// This call update connected document types for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatesManagementSetDocumentTypesAsync (StateDocumentTypesDTO stateDocumentTypes);

        /// <summary>
        /// This call update connected document types for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementSetDocumentTypesAsyncWithHttpInfo (StateDocumentTypesDTO stateDocumentTypes);
        /// <summary>
        /// This call update permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatesManagementSetPermissionsAsync (StatePermissionsDTO statePermissions);

        /// <summary>
        /// This call update permissions for specific document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementSetPermissionsAsyncWithHttpInfo (StatePermissionsDTO statePermissions);
        /// <summary>
        /// This call updates a given document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>Task of StateCompleteDTO</returns>
        System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementUpdateAsync (StateCompleteDTO stateForUpdate);

        /// <summary>
        /// This call updates a given document state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementUpdateAsyncWithHttpInfo (StateCompleteDTO stateForUpdate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatesManagementApi : IStatesManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatesManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatesManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes specified document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns></returns>
        public void StatesManagementDelete (StateSimpleDTO state)
        {
             StatesManagementDeleteWithHttpInfo(state);
        }

        /// <summary>
        /// This call deletes specified document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StatesManagementDeleteWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementDelete");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specified document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatesManagementDeleteAsync (StateSimpleDTO state)
        {
             await StatesManagementDeleteAsyncWithHttpInfo(state);

        }

        /// <summary>
        /// This call deletes specified document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementDeleteAsyncWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementDelete");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call gets document state information 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StateCompleteDTO</returns>
        public StateCompleteDTO StatesManagementGetById (StateSimpleDTO state)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = StatesManagementGetByIdWithHttpInfo(state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets document state information 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        public ApiResponse< StateCompleteDTO > StatesManagementGetByIdWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetById");

            var localVarPath = "/api/management/States/GetState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

        /// <summary>
        /// This call gets document state information 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StateCompleteDTO</returns>
        public async System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementGetByIdAsync (StateSimpleDTO state)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = await StatesManagementGetByIdAsyncWithHttpInfo(state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets document state information 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementGetByIdAsyncWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetById");

            var localVarPath = "/api/management/States/GetState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

        /// <summary>
        /// This call returns all document types connected to the document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StateDocumentTypesDTO</returns>
        public StateDocumentTypesDTO StatesManagementGetDocumentTypes (StateSimpleDTO state)
        {
             ApiResponse<StateDocumentTypesDTO> localVarResponse = StatesManagementGetDocumentTypesWithHttpInfo(state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all document types connected to the document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StateDocumentTypesDTO</returns>
        public ApiResponse< StateDocumentTypesDTO > StatesManagementGetDocumentTypesWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetDocumentTypes");

            var localVarPath = "/api/management/States/GetDocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateDocumentTypesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateDocumentTypesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateDocumentTypesDTO)));
        }

        /// <summary>
        /// This call returns all document types connected to the document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StateDocumentTypesDTO</returns>
        public async System.Threading.Tasks.Task<StateDocumentTypesDTO> StatesManagementGetDocumentTypesAsync (StateSimpleDTO state)
        {
             ApiResponse<StateDocumentTypesDTO> localVarResponse = await StatesManagementGetDocumentTypesAsyncWithHttpInfo(state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all document types connected to the document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StateDocumentTypesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StateDocumentTypesDTO>> StatesManagementGetDocumentTypesAsyncWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetDocumentTypes");

            var localVarPath = "/api/management/States/GetDocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateDocumentTypesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateDocumentTypesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateDocumentTypesDTO)));
        }

        /// <summary>
        /// This call returns all document states 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StateCompleteDTO&gt;</returns>
        public List<StateCompleteDTO> StatesManagementGetList ()
        {
             ApiResponse<List<StateCompleteDTO>> localVarResponse = StatesManagementGetListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all document states 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StateCompleteDTO&gt;</returns>
        public ApiResponse< List<StateCompleteDTO> > StatesManagementGetListWithHttpInfo ()
        {

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StateCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StateCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StateCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all document states 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StateCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StateCompleteDTO>> StatesManagementGetListAsync ()
        {
             ApiResponse<List<StateCompleteDTO>> localVarResponse = await StatesManagementGetListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all document states 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StateCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StateCompleteDTO>>> StatesManagementGetListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StateCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StateCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StateCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>StatePermissionsDTO</returns>
        public StatePermissionsDTO StatesManagementGetPermissions (StateSimpleDTO state)
        {
             ApiResponse<StatePermissionsDTO> localVarResponse = StatesManagementGetPermissionsWithHttpInfo(state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>ApiResponse of StatePermissionsDTO</returns>
        public ApiResponse< StatePermissionsDTO > StatesManagementGetPermissionsWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetPermissions");

            var localVarPath = "/api/management/States/GetPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatePermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatePermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatePermissionsDTO)));
        }

        /// <summary>
        /// This call returns all permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of StatePermissionsDTO</returns>
        public async System.Threading.Tasks.Task<StatePermissionsDTO> StatesManagementGetPermissionsAsync (StateSimpleDTO state)
        {
             ApiResponse<StatePermissionsDTO> localVarResponse = await StatesManagementGetPermissionsAsyncWithHttpInfo(state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Document state</param>
        /// <returns>Task of ApiResponse (StatePermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatePermissionsDTO>> StatesManagementGetPermissionsAsyncWithHttpInfo (StateSimpleDTO state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StatesManagementApi->StatesManagementGetPermissions");

            var localVarPath = "/api/management/States/GetPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null && state.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(state); // http body (model) parameter
            }
            else
            {
                localVarPostBody = state; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementGetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatePermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatePermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatePermissionsDTO)));
        }

        /// <summary>
        /// This call inserts a new document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>StateCompleteDTO</returns>
        public StateCompleteDTO StatesManagementInsert (StateCompleteDTO stateForInsert)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = StatesManagementInsertWithHttpInfo(stateForInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        public ApiResponse< StateCompleteDTO > StatesManagementInsertWithHttpInfo (StateCompleteDTO stateForInsert)
        {
            // verify the required parameter 'stateForInsert' is set
            if (stateForInsert == null)
                throw new ApiException(400, "Missing required parameter 'stateForInsert' when calling StatesManagementApi->StatesManagementInsert");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateForInsert != null && stateForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>Task of StateCompleteDTO</returns>
        public async System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementInsertAsync (StateCompleteDTO stateForInsert)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = await StatesManagementInsertAsyncWithHttpInfo(stateForInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForInsert">Document state information for insert</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementInsertAsyncWithHttpInfo (StateCompleteDTO stateForInsert)
        {
            // verify the required parameter 'stateForInsert' is set
            if (stateForInsert == null)
                throw new ApiException(400, "Missing required parameter 'stateForInsert' when calling StatesManagementApi->StatesManagementInsert");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateForInsert != null && stateForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

        /// <summary>
        /// This call update connected document types for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns></returns>
        public void StatesManagementSetDocumentTypes (StateDocumentTypesDTO stateDocumentTypes)
        {
             StatesManagementSetDocumentTypesWithHttpInfo(stateDocumentTypes);
        }

        /// <summary>
        /// This call update connected document types for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StatesManagementSetDocumentTypesWithHttpInfo (StateDocumentTypesDTO stateDocumentTypes)
        {
            // verify the required parameter 'stateDocumentTypes' is set
            if (stateDocumentTypes == null)
                throw new ApiException(400, "Missing required parameter 'stateDocumentTypes' when calling StatesManagementApi->StatesManagementSetDocumentTypes");

            var localVarPath = "/api/management/States/UpdateDocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateDocumentTypes != null && stateDocumentTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateDocumentTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateDocumentTypes; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementSetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update connected document types for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatesManagementSetDocumentTypesAsync (StateDocumentTypesDTO stateDocumentTypes)
        {
             await StatesManagementSetDocumentTypesAsyncWithHttpInfo(stateDocumentTypes);

        }

        /// <summary>
        /// This call update connected document types for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateDocumentTypes">Document types connected to the state</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementSetDocumentTypesAsyncWithHttpInfo (StateDocumentTypesDTO stateDocumentTypes)
        {
            // verify the required parameter 'stateDocumentTypes' is set
            if (stateDocumentTypes == null)
                throw new ApiException(400, "Missing required parameter 'stateDocumentTypes' when calling StatesManagementApi->StatesManagementSetDocumentTypes");

            var localVarPath = "/api/management/States/UpdateDocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateDocumentTypes != null && stateDocumentTypes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateDocumentTypes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateDocumentTypes; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementSetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns></returns>
        public void StatesManagementSetPermissions (StatePermissionsDTO statePermissions)
        {
             StatesManagementSetPermissionsWithHttpInfo(statePermissions);
        }

        /// <summary>
        /// This call update permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StatesManagementSetPermissionsWithHttpInfo (StatePermissionsDTO statePermissions)
        {
            // verify the required parameter 'statePermissions' is set
            if (statePermissions == null)
                throw new ApiException(400, "Missing required parameter 'statePermissions' when calling StatesManagementApi->StatesManagementSetPermissions");

            var localVarPath = "/api/management/States/UpdatePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statePermissions != null && statePermissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statePermissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statePermissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementSetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatesManagementSetPermissionsAsync (StatePermissionsDTO statePermissions)
        {
             await StatesManagementSetPermissionsAsyncWithHttpInfo(statePermissions);

        }

        /// <summary>
        /// This call update permissions for specific document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statePermissions">Permissions to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StatesManagementSetPermissionsAsyncWithHttpInfo (StatePermissionsDTO statePermissions)
        {
            // verify the required parameter 'statePermissions' is set
            if (statePermissions == null)
                throw new ApiException(400, "Missing required parameter 'statePermissions' when calling StatesManagementApi->StatesManagementSetPermissions");

            var localVarPath = "/api/management/States/UpdatePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statePermissions != null && statePermissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statePermissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statePermissions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementSetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a given document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>StateCompleteDTO</returns>
        public StateCompleteDTO StatesManagementUpdate (StateCompleteDTO stateForUpdate)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = StatesManagementUpdateWithHttpInfo(stateForUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a given document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>ApiResponse of StateCompleteDTO</returns>
        public ApiResponse< StateCompleteDTO > StatesManagementUpdateWithHttpInfo (StateCompleteDTO stateForUpdate)
        {
            // verify the required parameter 'stateForUpdate' is set
            if (stateForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'stateForUpdate' when calling StatesManagementApi->StatesManagementUpdate");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateForUpdate != null && stateForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

        /// <summary>
        /// This call updates a given document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>Task of StateCompleteDTO</returns>
        public async System.Threading.Tasks.Task<StateCompleteDTO> StatesManagementUpdateAsync (StateCompleteDTO stateForUpdate)
        {
             ApiResponse<StateCompleteDTO> localVarResponse = await StatesManagementUpdateAsyncWithHttpInfo(stateForUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a given document state 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateForUpdate">Document state information for update</param>
        /// <returns>Task of ApiResponse (StateCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StateCompleteDTO>> StatesManagementUpdateAsyncWithHttpInfo (StateCompleteDTO stateForUpdate)
        {
            // verify the required parameter 'stateForUpdate' is set
            if (stateForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'stateForUpdate' when calling StatesManagementApi->StatesManagementUpdate");

            var localVarPath = "/api/management/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateForUpdate != null && stateForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stateForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stateForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StateCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StateCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StateCompleteDTO)));
        }

    }
}
