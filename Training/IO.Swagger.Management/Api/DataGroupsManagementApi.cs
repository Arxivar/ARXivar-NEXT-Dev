/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataGroupsManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method removes specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns></returns>
        void DataGroupsManagementDeleteDataGroup (string id);

        /// <summary>
        /// This method removes specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataGroupsManagementDeleteDataGroupWithHttpInfo (string id);
        /// <summary>
        /// This method deletes data source from a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns></returns>
        void DataGroupsManagementDeleteDataGroupSource (string dataGroupId, string dataSourceId);

        /// <summary>
        /// This method deletes data source from a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataGroupsManagementDeleteDataGroupSourceWithHttpInfo (string dataGroupId, string dataSourceId);
        /// <summary>
        /// This method returns specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>DataGroupDTO</returns>
        DataGroupDTO DataGroupsManagementGetDataGroup (string id);

        /// <summary>
        /// This method returns specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        ApiResponse<DataGroupDTO> DataGroupsManagementGetDataGroupWithHttpInfo (string id);
        /// <summary>
        /// This method returns data source for specific data group and data source identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>DataGroupSourceDTO</returns>
        DataGroupSourceDTO DataGroupsManagementGetDataGroupDataSource (string dataGroupId, string dataSourceId);

        /// <summary>
        /// This method returns data source for specific data group and data source identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        ApiResponse<DataGroupSourceDTO> DataGroupsManagementGetDataGroupDataSourceWithHttpInfo (string dataGroupId, string dataSourceId);
        /// <summary>
        /// This method returns data sources for specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>List&lt;DataGroupSourceDTO&gt;</returns>
        List<DataGroupSourceDTO> DataGroupsManagementGetDataGroupDataSources (string dataGroupId);

        /// <summary>
        /// This method returns data sources for specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>ApiResponse of List&lt;DataGroupSourceDTO&gt;</returns>
        ApiResponse<List<DataGroupSourceDTO>> DataGroupsManagementGetDataGroupDataSourcesWithHttpInfo (string dataGroupId);
        /// <summary>
        /// This method returns data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>List&lt;DataGroupElementDTO&gt;</returns>
        List<DataGroupElementDTO> DataGroupsManagementGetDataGroupElements (string id);

        /// <summary>
        /// This method returns data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of List&lt;DataGroupElementDTO&gt;</returns>
        ApiResponse<List<DataGroupElementDTO>> DataGroupsManagementGetDataGroupElementsWithHttpInfo (string id);
        /// <summary>
        /// This method returns all data groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataGroupDTO&gt;</returns>
        List<DataGroupDTO> DataGroupsManagementGetDataGroups ();

        /// <summary>
        /// This method returns all data groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataGroupDTO&gt;</returns>
        ApiResponse<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsWithHttpInfo ();
        /// <summary>
        /// This method returns data groups by context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>List&lt;DataGroupDTO&gt;</returns>
        List<DataGroupDTO> DataGroupsManagementGetDataGroupsByContext (int? context);

        /// <summary>
        /// This method returns data groups by context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>ApiResponse of List&lt;DataGroupDTO&gt;</returns>
        ApiResponse<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsByContextWithHttpInfo (int? context);
        /// <summary>
        /// This method creates a new data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>DataGroupDTO</returns>
        DataGroupDTO DataGroupsManagementInsertDataGroup (DataGroupDTO dataGroupForInsert);

        /// <summary>
        /// This method creates a new data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        ApiResponse<DataGroupDTO> DataGroupsManagementInsertDataGroupWithHttpInfo (DataGroupDTO dataGroupForInsert);
        /// <summary>
        /// This method inserts data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>DataGroupSourceDTO</returns>
        DataGroupSourceDTO DataGroupsManagementInsertDataGroupSource (string dataGroupId, DataGroupSourceDTO dataSource);

        /// <summary>
        /// This method inserts data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        ApiResponse<DataGroupSourceDTO> DataGroupsManagementInsertDataGroupSourceWithHttpInfo (string dataGroupId, DataGroupSourceDTO dataSource);
        /// <summary>
        /// This method updates data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns></returns>
        void DataGroupsManagementSetDataGroupElements (string id, List<DataGroupElementDTO> elements);

        /// <summary>
        /// This method updates data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataGroupsManagementSetDataGroupElementsWithHttpInfo (string id, List<DataGroupElementDTO> elements);
        /// <summary>
        /// This method updates specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>DataGroupDTO</returns>
        DataGroupDTO DataGroupsManagementUpdateDataGroup (string id, DataGroupDTO dataGroupForUpdate);

        /// <summary>
        /// This method updates specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        ApiResponse<DataGroupDTO> DataGroupsManagementUpdateDataGroupWithHttpInfo (string id, DataGroupDTO dataGroupForUpdate);
        /// <summary>
        /// This method updates data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>DataGroupSourceDTO</returns>
        DataGroupSourceDTO DataGroupsManagementUpdateDataGroupSource (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource);

        /// <summary>
        /// This method updates data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        ApiResponse<DataGroupSourceDTO> DataGroupsManagementUpdateDataGroupSourceWithHttpInfo (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method removes specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataGroupsManagementDeleteDataGroupAsync (string id);

        /// <summary>
        /// This method removes specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementDeleteDataGroupAsyncWithHttpInfo (string id);
        /// <summary>
        /// This method deletes data source from a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataGroupsManagementDeleteDataGroupSourceAsync (string dataGroupId, string dataSourceId);

        /// <summary>
        /// This method deletes data source from a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementDeleteDataGroupSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId);
        /// <summary>
        /// This method returns specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of DataGroupDTO</returns>
        System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementGetDataGroupAsync (string id);

        /// <summary>
        /// This method returns specific data group by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementGetDataGroupAsyncWithHttpInfo (string id);
        /// <summary>
        /// This method returns data source for specific data group and data source identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementGetDataGroupDataSourceAsync (string dataGroupId, string dataSourceId);

        /// <summary>
        /// This method returns data source for specific data group and data source identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementGetDataGroupDataSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId);
        /// <summary>
        /// This method returns data sources for specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>Task of List&lt;DataGroupSourceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DataGroupSourceDTO>> DataGroupsManagementGetDataGroupDataSourcesAsync (string dataGroupId);

        /// <summary>
        /// This method returns data sources for specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupSourceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataGroupSourceDTO>>> DataGroupsManagementGetDataGroupDataSourcesAsyncWithHttpInfo (string dataGroupId);
        /// <summary>
        /// This method returns data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of List&lt;DataGroupElementDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DataGroupElementDTO>> DataGroupsManagementGetDataGroupElementsAsync (string id);

        /// <summary>
        /// This method returns data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupElementDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataGroupElementDTO>>> DataGroupsManagementGetDataGroupElementsAsyncWithHttpInfo (string id);
        /// <summary>
        /// This method returns all data groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataGroupDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsAsync ();

        /// <summary>
        /// This method returns all data groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataGroupDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataGroupDTO>>> DataGroupsManagementGetDataGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// This method returns data groups by context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of List&lt;DataGroupDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsByContextAsync (int? context);

        /// <summary>
        /// This method returns data groups by context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataGroupDTO>>> DataGroupsManagementGetDataGroupsByContextAsyncWithHttpInfo (int? context);
        /// <summary>
        /// This method creates a new data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>Task of DataGroupDTO</returns>
        System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementInsertDataGroupAsync (DataGroupDTO dataGroupForInsert);

        /// <summary>
        /// This method creates a new data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementInsertDataGroupAsyncWithHttpInfo (DataGroupDTO dataGroupForInsert);
        /// <summary>
        /// This method inserts data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementInsertDataGroupSourceAsync (string dataGroupId, DataGroupSourceDTO dataSource);

        /// <summary>
        /// This method inserts data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementInsertDataGroupSourceAsyncWithHttpInfo (string dataGroupId, DataGroupSourceDTO dataSource);
        /// <summary>
        /// This method updates data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataGroupsManagementSetDataGroupElementsAsync (string id, List<DataGroupElementDTO> elements);

        /// <summary>
        /// This method updates data group elements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementSetDataGroupElementsAsyncWithHttpInfo (string id, List<DataGroupElementDTO> elements);
        /// <summary>
        /// This method updates specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>Task of DataGroupDTO</returns>
        System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementUpdateDataGroupAsync (string id, DataGroupDTO dataGroupForUpdate);

        /// <summary>
        /// This method updates specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementUpdateDataGroupAsyncWithHttpInfo (string id, DataGroupDTO dataGroupForUpdate);
        /// <summary>
        /// This method updates data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementUpdateDataGroupSourceAsync (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource);

        /// <summary>
        /// This method updates data source for a specific data group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementUpdateDataGroupSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataGroupsManagementApi : IDataGroupsManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataGroupsManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataGroupsManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataGroupsManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataGroupsManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method removes specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns></returns>
        public void DataGroupsManagementDeleteDataGroup (string id)
        {
             DataGroupsManagementDeleteDataGroupWithHttpInfo(id);
        }

        /// <summary>
        /// This method removes specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataGroupsManagementDeleteDataGroupWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementDeleteDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataGroupsManagementDeleteDataGroupAsync (string id)
        {
             await DataGroupsManagementDeleteDataGroupAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method removes specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementDeleteDataGroupAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementDeleteDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes data source from a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns></returns>
        public void DataGroupsManagementDeleteDataGroupSource (string dataGroupId, string dataSourceId)
        {
             DataGroupsManagementDeleteDataGroupSourceWithHttpInfo(dataGroupId, dataSourceId);
        }

        /// <summary>
        /// This method deletes data source from a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataGroupsManagementDeleteDataGroupSourceWithHttpInfo (string dataGroupId, string dataSourceId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroupSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementDeleteDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes data source from a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataGroupsManagementDeleteDataGroupSourceAsync (string dataGroupId, string dataSourceId)
        {
             await DataGroupsManagementDeleteDataGroupSourceAsyncWithHttpInfo(dataGroupId, dataSourceId);

        }

        /// <summary>
        /// This method deletes data source from a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementDeleteDataGroupSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroupSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementDeleteDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementDeleteDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method returns specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>DataGroupDTO</returns>
        public DataGroupDTO DataGroupsManagementGetDataGroup (string id)
        {
             ApiResponse<DataGroupDTO> localVarResponse = DataGroupsManagementGetDataGroupWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        public ApiResponse< DataGroupDTO > DataGroupsManagementGetDataGroupWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method returns specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of DataGroupDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementGetDataGroupAsync (string id)
        {
             ApiResponse<DataGroupDTO> localVarResponse = await DataGroupsManagementGetDataGroupAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns specific data group by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementGetDataGroupAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method returns data source for specific data group and data source identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>DataGroupSourceDTO</returns>
        public DataGroupSourceDTO DataGroupsManagementGetDataGroupDataSource (string dataGroupId, string dataSourceId)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = DataGroupsManagementGetDataGroupDataSourceWithHttpInfo(dataGroupId, dataSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns data source for specific data group and data source identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        public ApiResponse< DataGroupSourceDTO > DataGroupsManagementGetDataGroupDataSourceWithHttpInfo (string dataGroupId, string dataSourceId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupDataSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

        /// <summary>
        /// This method returns data source for specific data group and data source identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementGetDataGroupDataSourceAsync (string dataGroupId, string dataSourceId)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = await DataGroupsManagementGetDataGroupDataSourceAsyncWithHttpInfo(dataGroupId, dataSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns data source for specific data group and data source identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementGetDataGroupDataSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupDataSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

        /// <summary>
        /// This method returns data sources for specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>List&lt;DataGroupSourceDTO&gt;</returns>
        public List<DataGroupSourceDTO> DataGroupsManagementGetDataGroupDataSources (string dataGroupId)
        {
             ApiResponse<List<DataGroupSourceDTO>> localVarResponse = DataGroupsManagementGetDataGroupDataSourcesWithHttpInfo(dataGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns data sources for specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>ApiResponse of List&lt;DataGroupSourceDTO&gt;</returns>
        public ApiResponse< List<DataGroupSourceDTO> > DataGroupsManagementGetDataGroupDataSourcesWithHttpInfo (string dataGroupId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSources");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupDataSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupSourceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupSourceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupSourceDTO>)));
        }

        /// <summary>
        /// This method returns data sources for specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>Task of List&lt;DataGroupSourceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataGroupSourceDTO>> DataGroupsManagementGetDataGroupDataSourcesAsync (string dataGroupId)
        {
             ApiResponse<List<DataGroupSourceDTO>> localVarResponse = await DataGroupsManagementGetDataGroupDataSourcesAsyncWithHttpInfo(dataGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns data sources for specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupSourceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataGroupSourceDTO>>> DataGroupsManagementGetDataGroupDataSourcesAsyncWithHttpInfo (string dataGroupId)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupDataSources");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupDataSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupSourceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupSourceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupSourceDTO>)));
        }

        /// <summary>
        /// This method returns data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>List&lt;DataGroupElementDTO&gt;</returns>
        public List<DataGroupElementDTO> DataGroupsManagementGetDataGroupElements (string id)
        {
             ApiResponse<List<DataGroupElementDTO>> localVarResponse = DataGroupsManagementGetDataGroupElementsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>ApiResponse of List&lt;DataGroupElementDTO&gt;</returns>
        public ApiResponse< List<DataGroupElementDTO> > DataGroupsManagementGetDataGroupElementsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupElements");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupElementDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupElementDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupElementDTO>)));
        }

        /// <summary>
        /// This method returns data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of List&lt;DataGroupElementDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataGroupElementDTO>> DataGroupsManagementGetDataGroupElementsAsync (string id)
        {
             ApiResponse<List<DataGroupElementDTO>> localVarResponse = await DataGroupsManagementGetDataGroupElementsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupElementDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataGroupElementDTO>>> DataGroupsManagementGetDataGroupElementsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupElements");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupElementDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupElementDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupElementDTO>)));
        }

        /// <summary>
        /// This method returns all data groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataGroupDTO&gt;</returns>
        public List<DataGroupDTO> DataGroupsManagementGetDataGroups ()
        {
             ApiResponse<List<DataGroupDTO>> localVarResponse = DataGroupsManagementGetDataGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all data groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataGroupDTO&gt;</returns>
        public ApiResponse< List<DataGroupDTO> > DataGroupsManagementGetDataGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/DataGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupDTO>)));
        }

        /// <summary>
        /// This method returns all data groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataGroupDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsAsync ()
        {
             ApiResponse<List<DataGroupDTO>> localVarResponse = await DataGroupsManagementGetDataGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all data groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataGroupDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataGroupDTO>>> DataGroupsManagementGetDataGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/DataGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupDTO>)));
        }

        /// <summary>
        /// This method returns data groups by context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>List&lt;DataGroupDTO&gt;</returns>
        public List<DataGroupDTO> DataGroupsManagementGetDataGroupsByContext (int? context)
        {
             ApiResponse<List<DataGroupDTO>> localVarResponse = DataGroupsManagementGetDataGroupsByContextWithHttpInfo(context);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns data groups by context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>ApiResponse of List&lt;DataGroupDTO&gt;</returns>
        public ApiResponse< List<DataGroupDTO> > DataGroupsManagementGetDataGroupsByContextWithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupsByContext");

            var localVarPath = "/api/management/DataSources/DataGroups/ByContext/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupsByContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupDTO>)));
        }

        /// <summary>
        /// This method returns data groups by context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of List&lt;DataGroupDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataGroupDTO>> DataGroupsManagementGetDataGroupsByContextAsync (int? context)
        {
             ApiResponse<List<DataGroupDTO>> localVarResponse = await DataGroupsManagementGetDataGroupsByContextAsyncWithHttpInfo(context);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns data groups by context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <returns>Task of ApiResponse (List&lt;DataGroupDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataGroupDTO>>> DataGroupsManagementGetDataGroupsByContextAsyncWithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling DataGroupsManagementApi->DataGroupsManagementGetDataGroupsByContext");

            var localVarPath = "/api/management/DataSources/DataGroups/ByContext/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementGetDataGroupsByContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataGroupDTO>)));
        }

        /// <summary>
        /// This method creates a new data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>DataGroupDTO</returns>
        public DataGroupDTO DataGroupsManagementInsertDataGroup (DataGroupDTO dataGroupForInsert)
        {
             ApiResponse<DataGroupDTO> localVarResponse = DataGroupsManagementInsertDataGroupWithHttpInfo(dataGroupForInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method creates a new data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        public ApiResponse< DataGroupDTO > DataGroupsManagementInsertDataGroupWithHttpInfo (DataGroupDTO dataGroupForInsert)
        {
            // verify the required parameter 'dataGroupForInsert' is set
            if (dataGroupForInsert == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupForInsert' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupForInsert != null && dataGroupForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataGroupForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataGroupForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementInsertDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method creates a new data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>Task of DataGroupDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementInsertDataGroupAsync (DataGroupDTO dataGroupForInsert)
        {
             ApiResponse<DataGroupDTO> localVarResponse = await DataGroupsManagementInsertDataGroupAsyncWithHttpInfo(dataGroupForInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method creates a new data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupForInsert">Data group data for insert</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementInsertDataGroupAsyncWithHttpInfo (DataGroupDTO dataGroupForInsert)
        {
            // verify the required parameter 'dataGroupForInsert' is set
            if (dataGroupForInsert == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupForInsert' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupForInsert != null && dataGroupForInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataGroupForInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataGroupForInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementInsertDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method inserts data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>DataGroupSourceDTO</returns>
        public DataGroupSourceDTO DataGroupsManagementInsertDataGroupSource (string dataGroupId, DataGroupSourceDTO dataSource)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = DataGroupsManagementInsertDataGroupSourceWithHttpInfo(dataGroupId, dataSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method inserts data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        public ApiResponse< DataGroupSourceDTO > DataGroupsManagementInsertDataGroupSourceWithHttpInfo (string dataGroupId, DataGroupSourceDTO dataSource)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroupSource");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSource != null && dataSource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataSource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSource; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementInsertDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

        /// <summary>
        /// This method inserts data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementInsertDataGroupSourceAsync (string dataGroupId, DataGroupSourceDTO dataSource)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = await DataGroupsManagementInsertDataGroupSourceAsyncWithHttpInfo(dataGroupId, dataSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method inserts data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSource">Data source to insert</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementInsertDataGroupSourceAsyncWithHttpInfo (string dataGroupId, DataGroupSourceDTO dataSource)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroupSource");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling DataGroupsManagementApi->DataGroupsManagementInsertDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSource != null && dataSource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataSource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSource; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementInsertDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

        /// <summary>
        /// This method updates data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns></returns>
        public void DataGroupsManagementSetDataGroupElements (string id, List<DataGroupElementDTO> elements)
        {
             DataGroupsManagementSetDataGroupElementsWithHttpInfo(id, elements);
        }

        /// <summary>
        /// This method updates data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataGroupsManagementSetDataGroupElementsWithHttpInfo (string id, List<DataGroupElementDTO> elements)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementSetDataGroupElements");
            // verify the required parameter 'elements' is set
            if (elements == null)
                throw new ApiException(400, "Missing required parameter 'elements' when calling DataGroupsManagementApi->DataGroupsManagementSetDataGroupElements");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elements != null && elements.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(elements); // http body (model) parameter
            }
            else
            {
                localVarPostBody = elements; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementSetDataGroupElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataGroupsManagementSetDataGroupElementsAsync (string id, List<DataGroupElementDTO> elements)
        {
             await DataGroupsManagementSetDataGroupElementsAsyncWithHttpInfo(id, elements);

        }

        /// <summary>
        /// This method updates data group elements 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="elements">Data group static elements</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataGroupsManagementSetDataGroupElementsAsyncWithHttpInfo (string id, List<DataGroupElementDTO> elements)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementSetDataGroupElements");
            // verify the required parameter 'elements' is set
            if (elements == null)
                throw new ApiException(400, "Missing required parameter 'elements' when calling DataGroupsManagementApi->DataGroupsManagementSetDataGroupElements");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elements != null && elements.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(elements); // http body (model) parameter
            }
            else
            {
                localVarPostBody = elements; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementSetDataGroupElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method updates specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>DataGroupDTO</returns>
        public DataGroupDTO DataGroupsManagementUpdateDataGroup (string id, DataGroupDTO dataGroupForUpdate)
        {
             ApiResponse<DataGroupDTO> localVarResponse = DataGroupsManagementUpdateDataGroupWithHttpInfo(id, dataGroupForUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>ApiResponse of DataGroupDTO</returns>
        public ApiResponse< DataGroupDTO > DataGroupsManagementUpdateDataGroupWithHttpInfo (string id, DataGroupDTO dataGroupForUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroup");
            // verify the required parameter 'dataGroupForUpdate' is set
            if (dataGroupForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupForUpdate' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataGroupForUpdate != null && dataGroupForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataGroupForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataGroupForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementUpdateDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method updates specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>Task of DataGroupDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupDTO> DataGroupsManagementUpdateDataGroupAsync (string id, DataGroupDTO dataGroupForUpdate)
        {
             ApiResponse<DataGroupDTO> localVarResponse = await DataGroupsManagementUpdateDataGroupAsyncWithHttpInfo(id, dataGroupForUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Data group identifier</param>
        /// <param name="dataGroupForUpdate">Data group data for update</param>
        /// <returns>Task of ApiResponse (DataGroupDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupDTO>> DataGroupsManagementUpdateDataGroupAsyncWithHttpInfo (string id, DataGroupDTO dataGroupForUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroup");
            // verify the required parameter 'dataGroupForUpdate' is set
            if (dataGroupForUpdate == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupForUpdate' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroup");

            var localVarPath = "/api/management/DataSources/DataGroups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataGroupForUpdate != null && dataGroupForUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataGroupForUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataGroupForUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementUpdateDataGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupDTO)));
        }

        /// <summary>
        /// This method updates data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>DataGroupSourceDTO</returns>
        public DataGroupSourceDTO DataGroupsManagementUpdateDataGroupSource (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = DataGroupsManagementUpdateDataGroupSourceWithHttpInfo(dataGroupId, dataSourceId, dataSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>ApiResponse of DataGroupSourceDTO</returns>
        public ApiResponse< DataGroupSourceDTO > DataGroupsManagementUpdateDataGroupSourceWithHttpInfo (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter
            if (dataSource != null && dataSource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataSource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSource; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementUpdateDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

        /// <summary>
        /// This method updates data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>Task of DataGroupSourceDTO</returns>
        public async System.Threading.Tasks.Task<DataGroupSourceDTO> DataGroupsManagementUpdateDataGroupSourceAsync (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource)
        {
             ApiResponse<DataGroupSourceDTO> localVarResponse = await DataGroupsManagementUpdateDataGroupSourceAsyncWithHttpInfo(dataGroupId, dataSourceId, dataSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates data source for a specific data group 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataGroupId">Data group identifier</param>
        /// <param name="dataSourceId">Data source identifier</param>
        /// <param name="dataSource">Data source to update</param>
        /// <returns>Task of ApiResponse (DataGroupSourceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataGroupSourceDTO>> DataGroupsManagementUpdateDataGroupSourceAsyncWithHttpInfo (string dataGroupId, string dataSourceId, DataGroupSourceDTO dataSource)
        {
            // verify the required parameter 'dataGroupId' is set
            if (dataGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dataGroupId' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");
            // verify the required parameter 'dataSource' is set
            if (dataSource == null)
                throw new ApiException(400, "Missing required parameter 'dataSource' when calling DataGroupsManagementApi->DataGroupsManagementUpdateDataGroupSource");

            var localVarPath = "/api/management/DataSources/DataGroups/{dataGroupId}/Sources/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataGroupId != null) localVarPathParams.Add("dataGroupId", this.Configuration.ApiClient.ParameterToString(dataGroupId)); // path parameter
            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", this.Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter
            if (dataSource != null && dataSource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataSource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSource; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGroupsManagementUpdateDataGroupSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataGroupSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataGroupSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataGroupSourceDTO)));
        }

    }
}
