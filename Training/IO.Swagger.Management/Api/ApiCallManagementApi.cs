/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiCallManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method removes specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns></returns>
        void ApiCallManagementDeleteApiCall (int? id);

        /// <summary>
        /// This method removes specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiCallManagementDeleteApiCallWithHttpInfo (int? id);
        /// <summary>
        /// This call executes specific API call for gets result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Object</returns>
        Object ApiCallManagementExecuteSqlQuery (ApiCallForTestDTO apiCallForTest);

        /// <summary>
        /// This call executes specific API call for gets result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiCallManagementExecuteSqlQueryWithHttpInfo (ApiCallForTestDTO apiCallForTest);
        /// <summary>
        /// This method returns specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiCallDTO</returns>
        ApiCallDTO ApiCallManagementGetApiCall (int? id);

        /// <summary>
        /// This method returns specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        ApiResponse<ApiCallDTO> ApiCallManagementGetApiCallWithHttpInfo (int? id);
        /// <summary>
        /// This method returns all API calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCallDTO&gt;</returns>
        List<ApiCallDTO> ApiCallManagementGetApiCalls ();

        /// <summary>
        /// This method returns all API calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCallDTO&gt;</returns>
        ApiResponse<List<ApiCallDTO>> ApiCallManagementGetApiCallsWithHttpInfo ();
        /// <summary>
        /// This call returns all API calls by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>List&lt;ApiCallDTO&gt;</returns>
        List<ApiCallDTO> ApiCallManagementGetApiCallsByContextAndType (int? context, int? type);

        /// <summary>
        /// This call returns all API calls by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>ApiResponse of List&lt;ApiCallDTO&gt;</returns>
        ApiResponse<List<ApiCallDTO>> ApiCallManagementGetApiCallsByContextAndTypeWithHttpInfo (int? context, int? type);
        /// <summary>
        /// This call gets system variables for API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCallVariableDTO&gt;</returns>
        List<ApiCallVariableDTO> ApiCallManagementGetVariables ();

        /// <summary>
        /// This call gets system variables for API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCallVariableDTO&gt;</returns>
        ApiResponse<List<ApiCallVariableDTO>> ApiCallManagementGetVariablesWithHttpInfo ();
        /// <summary>
        /// This method creates a new API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>ApiCallDTO</returns>
        ApiCallDTO ApiCallManagementInsertApiCall (ApiCallDTO apiCall);

        /// <summary>
        /// This method creates a new API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        ApiResponse<ApiCallDTO> ApiCallManagementInsertApiCallWithHttpInfo (ApiCallDTO apiCall);
        /// <summary>
        /// This method updates specific API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>ApiCallDTO</returns>
        ApiCallDTO ApiCallManagementUpdateApiCall (int? id, ApiCallDTO apiCall);

        /// <summary>
        /// This method updates specific API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        ApiResponse<ApiCallDTO> ApiCallManagementUpdateApiCallWithHttpInfo (int? id, ApiCallDTO apiCall);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method removes specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiCallManagementDeleteApiCallAsync (int? id);

        /// <summary>
        /// This method removes specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiCallManagementDeleteApiCallAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call executes specific API call for gets result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiCallManagementExecuteSqlQueryAsync (ApiCallForTestDTO apiCallForTest);

        /// <summary>
        /// This call executes specific API call for gets result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiCallManagementExecuteSqlQueryAsyncWithHttpInfo (ApiCallForTestDTO apiCallForTest);
        /// <summary>
        /// This method returns specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiCallDTO</returns>
        System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementGetApiCallAsync (int? id);

        /// <summary>
        /// This method returns specific API call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementGetApiCallAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This method returns all API calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCallDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ApiCallDTO>> ApiCallManagementGetApiCallsAsync ();

        /// <summary>
        /// This method returns all API calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCallDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiCallDTO>>> ApiCallManagementGetApiCallsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all API calls by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>Task of List&lt;ApiCallDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ApiCallDTO>> ApiCallManagementGetApiCallsByContextAndTypeAsync (int? context, int? type);

        /// <summary>
        /// This call returns all API calls by Context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>Task of ApiResponse (List&lt;ApiCallDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiCallDTO>>> ApiCallManagementGetApiCallsByContextAndTypeAsyncWithHttpInfo (int? context, int? type);
        /// <summary>
        /// This call gets system variables for API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCallVariableDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ApiCallVariableDTO>> ApiCallManagementGetVariablesAsync ();

        /// <summary>
        /// This call gets system variables for API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCallVariableDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiCallVariableDTO>>> ApiCallManagementGetVariablesAsyncWithHttpInfo ();
        /// <summary>
        /// This method creates a new API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>Task of ApiCallDTO</returns>
        System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementInsertApiCallAsync (ApiCallDTO apiCall);

        /// <summary>
        /// This method creates a new API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementInsertApiCallAsyncWithHttpInfo (ApiCallDTO apiCall);
        /// <summary>
        /// This method updates specific API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>Task of ApiCallDTO</returns>
        System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementUpdateApiCallAsync (int? id, ApiCallDTO apiCall);

        /// <summary>
        /// This method updates specific API call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementUpdateApiCallAsyncWithHttpInfo (int? id, ApiCallDTO apiCall);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiCallManagementApi : IApiCallManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiCallManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiCallManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiCallManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiCallManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method removes specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns></returns>
        public void ApiCallManagementDeleteApiCall (int? id)
        {
             ApiCallManagementDeleteApiCallWithHttpInfo(id);
        }

        /// <summary>
        /// This method removes specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiCallManagementDeleteApiCallWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementDeleteApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementDeleteApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiCallManagementDeleteApiCallAsync (int? id)
        {
             await ApiCallManagementDeleteApiCallAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method removes specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiCallManagementDeleteApiCallAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementDeleteApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementDeleteApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call executes specific API call for gets result 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Object</returns>
        public Object ApiCallManagementExecuteSqlQuery (ApiCallForTestDTO apiCallForTest)
        {
             ApiResponse<Object> localVarResponse = ApiCallManagementExecuteSqlQueryWithHttpInfo(apiCallForTest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes specific API call for gets result 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApiCallManagementExecuteSqlQueryWithHttpInfo (ApiCallForTestDTO apiCallForTest)
        {
            // verify the required parameter 'apiCallForTest' is set
            if (apiCallForTest == null)
                throw new ApiException(400, "Missing required parameter 'apiCallForTest' when calling ApiCallManagementApi->ApiCallManagementExecuteSqlQuery");

            var localVarPath = "/api/management/DataSources/ApiCall/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiCallForTest != null && apiCallForTest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCallForTest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCallForTest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementExecuteSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call executes specific API call for gets result 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiCallManagementExecuteSqlQueryAsync (ApiCallForTestDTO apiCallForTest)
        {
             ApiResponse<Object> localVarResponse = await ApiCallManagementExecuteSqlQueryAsyncWithHttpInfo(apiCallForTest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes specific API call for gets result 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCallForTest">API call data</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiCallManagementExecuteSqlQueryAsyncWithHttpInfo (ApiCallForTestDTO apiCallForTest)
        {
            // verify the required parameter 'apiCallForTest' is set
            if (apiCallForTest == null)
                throw new ApiException(400, "Missing required parameter 'apiCallForTest' when calling ApiCallManagementApi->ApiCallManagementExecuteSqlQuery");

            var localVarPath = "/api/management/DataSources/ApiCall/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiCallForTest != null && apiCallForTest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCallForTest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCallForTest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementExecuteSqlQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This method returns specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiCallDTO</returns>
        public ApiCallDTO ApiCallManagementGetApiCall (int? id)
        {
             ApiResponse<ApiCallDTO> localVarResponse = ApiCallManagementGetApiCallWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        public ApiResponse< ApiCallDTO > ApiCallManagementGetApiCallWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementGetApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

        /// <summary>
        /// This method returns specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiCallDTO</returns>
        public async System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementGetApiCallAsync (int? id)
        {
             ApiResponse<ApiCallDTO> localVarResponse = await ApiCallManagementGetApiCallAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns specific API call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementGetApiCallAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementGetApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

        /// <summary>
        /// This method returns all API calls 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCallDTO&gt;</returns>
        public List<ApiCallDTO> ApiCallManagementGetApiCalls ()
        {
             ApiResponse<List<ApiCallDTO>> localVarResponse = ApiCallManagementGetApiCallsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all API calls 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCallDTO&gt;</returns>
        public ApiResponse< List<ApiCallDTO> > ApiCallManagementGetApiCallsWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/ApiCall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallDTO>)));
        }

        /// <summary>
        /// This method returns all API calls 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCallDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiCallDTO>> ApiCallManagementGetApiCallsAsync ()
        {
             ApiResponse<List<ApiCallDTO>> localVarResponse = await ApiCallManagementGetApiCallsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all API calls 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCallDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiCallDTO>>> ApiCallManagementGetApiCallsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/ApiCall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallDTO>)));
        }

        /// <summary>
        /// This call returns all API calls by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>List&lt;ApiCallDTO&gt;</returns>
        public List<ApiCallDTO> ApiCallManagementGetApiCallsByContextAndType (int? context, int? type)
        {
             ApiResponse<List<ApiCallDTO>> localVarResponse = ApiCallManagementGetApiCallsByContextAndTypeWithHttpInfo(context, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all API calls by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>ApiResponse of List&lt;ApiCallDTO&gt;</returns>
        public ApiResponse< List<ApiCallDTO> > ApiCallManagementGetApiCallsByContextAndTypeWithHttpInfo (int? context, int? type)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling ApiCallManagementApi->ApiCallManagementGetApiCallsByContextAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ApiCallManagementApi->ApiCallManagementGetApiCallsByContextAndType");

            var localVarPath = "/api/management/DataSources/ApiCall/ByContext/{context}/Type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCallsByContextAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallDTO>)));
        }

        /// <summary>
        /// This call returns all API calls by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>Task of List&lt;ApiCallDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiCallDTO>> ApiCallManagementGetApiCallsByContextAndTypeAsync (int? context, int? type)
        {
             ApiResponse<List<ApiCallDTO>> localVarResponse = await ApiCallManagementGetApiCallsByContextAndTypeAsyncWithHttpInfo(context, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all API calls by Context 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Generic  1: Workflow  2: Process </param>
        /// <param name="type">Possible values:  0: Authentication  1: Generic </param>
        /// <returns>Task of ApiResponse (List&lt;ApiCallDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiCallDTO>>> ApiCallManagementGetApiCallsByContextAndTypeAsyncWithHttpInfo (int? context, int? type)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling ApiCallManagementApi->ApiCallManagementGetApiCallsByContextAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ApiCallManagementApi->ApiCallManagementGetApiCallsByContextAndType");

            var localVarPath = "/api/management/DataSources/ApiCall/ByContext/{context}/Type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetApiCallsByContextAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallDTO>)));
        }

        /// <summary>
        /// This call gets system variables for API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCallVariableDTO&gt;</returns>
        public List<ApiCallVariableDTO> ApiCallManagementGetVariables ()
        {
             ApiResponse<List<ApiCallVariableDTO>> localVarResponse = ApiCallManagementGetVariablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets system variables for API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCallVariableDTO&gt;</returns>
        public ApiResponse< List<ApiCallVariableDTO> > ApiCallManagementGetVariablesWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/ApiCall/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallVariableDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallVariableDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallVariableDTO>)));
        }

        /// <summary>
        /// This call gets system variables for API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCallVariableDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiCallVariableDTO>> ApiCallManagementGetVariablesAsync ()
        {
             ApiResponse<List<ApiCallVariableDTO>> localVarResponse = await ApiCallManagementGetVariablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets system variables for API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCallVariableDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiCallVariableDTO>>> ApiCallManagementGetVariablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/DataSources/ApiCall/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementGetVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCallVariableDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiCallVariableDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCallVariableDTO>)));
        }

        /// <summary>
        /// This method creates a new API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>ApiCallDTO</returns>
        public ApiCallDTO ApiCallManagementInsertApiCall (ApiCallDTO apiCall)
        {
             ApiResponse<ApiCallDTO> localVarResponse = ApiCallManagementInsertApiCallWithHttpInfo(apiCall);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method creates a new API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        public ApiResponse< ApiCallDTO > ApiCallManagementInsertApiCallWithHttpInfo (ApiCallDTO apiCall)
        {
            // verify the required parameter 'apiCall' is set
            if (apiCall == null)
                throw new ApiException(400, "Missing required parameter 'apiCall' when calling ApiCallManagementApi->ApiCallManagementInsertApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiCall != null && apiCall.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCall); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCall; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementInsertApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

        /// <summary>
        /// This method creates a new API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>Task of ApiCallDTO</returns>
        public async System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementInsertApiCallAsync (ApiCallDTO apiCall)
        {
             ApiResponse<ApiCallDTO> localVarResponse = await ApiCallManagementInsertApiCallAsyncWithHttpInfo(apiCall);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method creates a new API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCall">API call data for insert</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementInsertApiCallAsyncWithHttpInfo (ApiCallDTO apiCall)
        {
            // verify the required parameter 'apiCall' is set
            if (apiCall == null)
                throw new ApiException(400, "Missing required parameter 'apiCall' when calling ApiCallManagementApi->ApiCallManagementInsertApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiCall != null && apiCall.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCall); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCall; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementInsertApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

        /// <summary>
        /// This method updates specific API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>ApiCallDTO</returns>
        public ApiCallDTO ApiCallManagementUpdateApiCall (int? id, ApiCallDTO apiCall)
        {
             ApiResponse<ApiCallDTO> localVarResponse = ApiCallManagementUpdateApiCallWithHttpInfo(id, apiCall);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates specific API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>ApiResponse of ApiCallDTO</returns>
        public ApiResponse< ApiCallDTO > ApiCallManagementUpdateApiCallWithHttpInfo (int? id, ApiCallDTO apiCall)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementUpdateApiCall");
            // verify the required parameter 'apiCall' is set
            if (apiCall == null)
                throw new ApiException(400, "Missing required parameter 'apiCall' when calling ApiCallManagementApi->ApiCallManagementUpdateApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiCall != null && apiCall.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCall); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCall; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementUpdateApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

        /// <summary>
        /// This method updates specific API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>Task of ApiCallDTO</returns>
        public async System.Threading.Tasks.Task<ApiCallDTO> ApiCallManagementUpdateApiCallAsync (int? id, ApiCallDTO apiCall)
        {
             ApiResponse<ApiCallDTO> localVarResponse = await ApiCallManagementUpdateApiCallAsyncWithHttpInfo(id, apiCall);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates specific API call 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API call identifier</param>
        /// <param name="apiCall">API call data for update</param>
        /// <returns>Task of ApiResponse (ApiCallDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCallDTO>> ApiCallManagementUpdateApiCallAsyncWithHttpInfo (int? id, ApiCallDTO apiCall)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiCallManagementApi->ApiCallManagementUpdateApiCall");
            // verify the required parameter 'apiCall' is set
            if (apiCall == null)
                throw new ApiException(400, "Missing required parameter 'apiCall' when calling ApiCallManagementApi->ApiCallManagementUpdateApiCall");

            var localVarPath = "/api/management/DataSources/ApiCall/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiCall != null && apiCall.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apiCall); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiCall; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCallManagementUpdateApiCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCallDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCallDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCallDTO)));
        }

    }
}
