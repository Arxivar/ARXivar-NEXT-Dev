/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Management.Client;
using IO.Swagger.Management.Model;

namespace IO.Swagger.Management.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes user, group or service specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        void UsersManagementDelete (int? id);

        /// <summary>
        /// This call deletes user, group or service specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns></returns>
        void UsersManagementDeleteUserMailAccount (int? userId, int? mailAccountId);

        /// <summary>
        /// This call deletes user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementDeleteUserMailAccountWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call removes user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns></returns>
        void UsersManagementDeleteUserSignImage (int? userId);

        /// <summary>
        /// This call removes user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementDeleteUserSignImageWithHttpInfo (int? userId);
        /// <summary>
        /// This call returns all users, groups and services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> UsersManagementGet ();

        /// <summary>
        /// This call returns all users, groups and services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> UsersManagementGetWithHttpInfo ();
        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>bool?</returns>
        bool? UsersManagementGetAddressBookProfile (int? userId);

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UsersManagementGetAddressBookProfileWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user or group object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserUpdateDTO</returns>
        UserUpdateDTO UsersManagementGetForUpdate (int? id);

        /// <summary>
        /// This call gets user or group object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserUpdateDTO</returns>
        ApiResponse<UserUpdateDTO> UsersManagementGetForUpdateWithHttpInfo (int? id);
        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>int?</returns>
        int? UsersManagementGetMailOutMaxSize (int? userId);

        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> UsersManagementGetMailOutMaxSizeWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets all groups by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;UserSimpleDTO&gt;</returns>
        List<UserSimpleDTO> UsersManagementGetUserGroups (int? userId);

        /// <summary>
        /// This call gets all groups by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;UserSimpleDTO&gt;</returns>
        ApiResponse<List<UserSimpleDTO>> UsersManagementGetUserGroupsWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ImpersonateDTO</returns>
        ImpersonateDTO UsersManagementGetUserImpersonateData (int? userId);

        /// <summary>
        /// This call gets user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of ImpersonateDTO</returns>
        ApiResponse<ImpersonateDTO> UsersManagementGetUserImpersonateDataWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets specific mail account identified by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO UsersManagementGetUserMailAccount (int? userId, int? mailAccountId);

        /// <summary>
        /// This call gets specific mail account identified by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> UsersManagementGetUserMailAccountWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call gets mail accounts for specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;MailAccountDTO&gt;</returns>
        List<MailAccountDTO> UsersManagementGetUserMailAccounts (int? userId);

        /// <summary>
        /// This call gets mail accounts for specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;MailAccountDTO&gt;</returns>
        ApiResponse<List<MailAccountDTO>> UsersManagementGetUserMailAccountsWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>MailAccountSettingsDTO</returns>
        MailAccountSettingsDTO UsersManagementGetUserMailSettings (int? userId);

        /// <summary>
        /// This call gets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of MailAccountSettingsDTO</returns>
        ApiResponse<MailAccountSettingsDTO> UsersManagementGetUserMailSettingsWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user Sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream UsersManagementGetUserSignImage (int? userId);

        /// <summary>
        /// This call gets user Sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> UsersManagementGetUserSignImageWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;UserSecurityStateDTO&gt;</returns>
        List<UserSecurityStateDTO> UsersManagementGetUserState (int? userId);

        /// <summary>
        /// This call gets all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;UserSecurityStateDTO&gt;</returns>
        ApiResponse<List<UserSecurityStateDTO>> UsersManagementGetUserStateWithHttpInfo (int? userId);
        /// <summary>
        /// This call inserts a new user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersManagementInsert (UserInsertDTO userInsert);

        /// <summary>
        /// This call inserts a new user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersManagementInsertWithHttpInfo (UserInsertDTO userInsert);
        /// <summary>
        /// This call inserts user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO UsersManagementInsertUserMailAccount (int? userId, MailAccountDTO mailaccount = null);

        /// <summary>
        /// This call inserts user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> UsersManagementInsertUserMailAccountWithHttpInfo (int? userId, MailAccountDTO mailaccount = null);
        /// <summary>
        /// This call restore deleted user or group and updates its informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersManagementRestore (UserInsertDTO userUpdate);

        /// <summary>
        /// This call restore deleted user or group and updates its informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersManagementRestoreWithHttpInfo (UserInsertDTO userUpdate);
        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns></returns>
        void UsersManagementSetAddressBookProfile (int? userId, bool? enable);

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetAddressBookProfileWithHttpInfo (int? userId, bool? enable);
        /// <summary>
        /// This call updates default user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns></returns>
        void UsersManagementSetDefaultUserMailAccount (int? userId, int? mailAccountId);

        /// <summary>
        /// This call updates default user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetDefaultUserMailAccountWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns></returns>
        void UsersManagementSetMailOutMaxSize (int? userId, int? maxSize);

        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetMailOutMaxSizeWithHttpInfo (int? userId, int? maxSize);
        /// <summary>
        /// This call updates user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns></returns>
        void UsersManagementSetUserGroups (int? userId, List<UserSimpleDTO> groups);

        /// <summary>
        /// This call updates user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetUserGroupsWithHttpInfo (int? userId, List<UserSimpleDTO> groups);
        /// <summary>
        /// This call updates user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns></returns>
        void UsersManagementSetUserImpersonateData (int? userId, ImpersonateDTO impersonate);

        /// <summary>
        /// This call updates user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetUserImpersonateDataWithHttpInfo (int? userId, ImpersonateDTO impersonate);
        /// <summary>
        /// This call sets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns></returns>
        void UsersManagementSetUserMailSettings (int? userId, MailAccountSettingsDTO mailSettings);

        /// <summary>
        /// This call sets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetUserMailSettingsWithHttpInfo (int? userId, MailAccountSettingsDTO mailSettings);
        /// <summary>
        /// This call updates user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns></returns>
        void UsersManagementSetUserSignImage (int? userId, string fileBufferId);

        /// <summary>
        /// This call updates user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetUserSignImageWithHttpInfo (int? userId, string fileBufferId);
        /// <summary>
        /// This call updates all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns></returns>
        void UsersManagementSetUserState (int? userId, List<UserSecurityStateDTO> states);

        /// <summary>
        /// This call updates all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersManagementSetUserStateWithHttpInfo (int? userId, List<UserSecurityStateDTO> states);
        /// <summary>
        /// This call updates a given user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersManagementUpdate (int? id, UserUpdateDTO userUpdate);

        /// <summary>
        /// This call updates a given user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersManagementUpdateWithHttpInfo (int? id, UserUpdateDTO userUpdate);
        /// <summary>
        /// This call updates user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO UsersManagementUpdateUserMailAccount (int? userId, MailAccountDTO mailaccount = null);

        /// <summary>
        /// This call updates user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> UsersManagementUpdateUserMailAccountWithHttpInfo (int? userId, MailAccountDTO mailaccount = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes user, group or service specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementDeleteAsync (int? id);

        /// <summary>
        /// This call deletes user, group or service specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementDeleteUserMailAccountAsync (int? userId, int? mailAccountId);

        /// <summary>
        /// This call deletes user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call removes user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementDeleteUserSignImageAsync (int? userId);

        /// <summary>
        /// This call removes user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteUserSignImageAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call returns all users, groups and services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersManagementGetAsync ();

        /// <summary>
        /// This call returns all users, groups and services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersManagementGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UsersManagementGetAddressBookProfileAsync (int? userId);

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UsersManagementGetAddressBookProfileAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user or group object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserUpdateDTO</returns>
        System.Threading.Tasks.Task<UserUpdateDTO> UsersManagementGetForUpdateAsync (int? id);

        /// <summary>
        /// This call gets user or group object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserUpdateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserUpdateDTO>> UsersManagementGetForUpdateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> UsersManagementGetMailOutMaxSizeAsync (int? userId);

        /// <summary>
        /// This call returns user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets all groups by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;UserSimpleDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserSimpleDTO>> UsersManagementGetUserGroupsAsync (int? userId);

        /// <summary>
        /// This call gets all groups by user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserSimpleDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSimpleDTO>>> UsersManagementGetUserGroupsAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ImpersonateDTO</returns>
        System.Threading.Tasks.Task<ImpersonateDTO> UsersManagementGetUserImpersonateDataAsync (int? userId);

        /// <summary>
        /// This call gets user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (ImpersonateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImpersonateDTO>> UsersManagementGetUserImpersonateDataAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets specific mail account identified by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> UsersManagementGetUserMailAccountAsync (int? userId, int? mailAccountId);

        /// <summary>
        /// This call gets specific mail account identified by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementGetUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call gets mail accounts for specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;MailAccountDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MailAccountDTO>> UsersManagementGetUserMailAccountsAsync (int? userId);

        /// <summary>
        /// This call gets mail accounts for specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MailAccountDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MailAccountDTO>>> UsersManagementGetUserMailAccountsAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of MailAccountSettingsDTO</returns>
        System.Threading.Tasks.Task<MailAccountSettingsDTO> UsersManagementGetUserMailSettingsAsync (int? userId);

        /// <summary>
        /// This call gets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (MailAccountSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountSettingsDTO>> UsersManagementGetUserMailSettingsAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets user Sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> UsersManagementGetUserSignImageAsync (int? userId);

        /// <summary>
        /// This call gets user Sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UsersManagementGetUserSignImageAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call gets all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;UserSecurityStateDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserSecurityStateDTO>> UsersManagementGetUserStateAsync (int? userId);

        /// <summary>
        /// This call gets all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserSecurityStateDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSecurityStateDTO>>> UsersManagementGetUserStateAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// This call inserts a new user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementInsertAsync (UserInsertDTO userInsert);

        /// <summary>
        /// This call inserts a new user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementInsertAsyncWithHttpInfo (UserInsertDTO userInsert);
        /// <summary>
        /// This call inserts user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> UsersManagementInsertUserMailAccountAsync (int? userId, MailAccountDTO mailaccount = null);

        /// <summary>
        /// This call inserts user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementInsertUserMailAccountAsyncWithHttpInfo (int? userId, MailAccountDTO mailaccount = null);
        /// <summary>
        /// This call restore deleted user or group and updates its informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementRestoreAsync (UserInsertDTO userUpdate);

        /// <summary>
        /// This call restore deleted user or group and updates its informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementRestoreAsyncWithHttpInfo (UserInsertDTO userUpdate);
        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetAddressBookProfileAsync (int? userId, bool? enable);

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetAddressBookProfileAsyncWithHttpInfo (int? userId, bool? enable);
        /// <summary>
        /// This call updates default user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetDefaultUserMailAccountAsync (int? userId, int? mailAccountId);

        /// <summary>
        /// This call updates default user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetDefaultUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId);
        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetMailOutMaxSizeAsync (int? userId, int? maxSize);

        /// <summary>
        /// This call updates user option for max size of output mail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo (int? userId, int? maxSize);
        /// <summary>
        /// This call updates user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetUserGroupsAsync (int? userId, List<UserSimpleDTO> groups);

        /// <summary>
        /// This call updates user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserGroupsAsyncWithHttpInfo (int? userId, List<UserSimpleDTO> groups);
        /// <summary>
        /// This call updates user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetUserImpersonateDataAsync (int? userId, ImpersonateDTO impersonate);

        /// <summary>
        /// This call updates user impersonate informations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserImpersonateDataAsyncWithHttpInfo (int? userId, ImpersonateDTO impersonate);
        /// <summary>
        /// This call sets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetUserMailSettingsAsync (int? userId, MailAccountSettingsDTO mailSettings);

        /// <summary>
        /// This call sets mail configuration options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserMailSettingsAsyncWithHttpInfo (int? userId, MailAccountSettingsDTO mailSettings);
        /// <summary>
        /// This call updates user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetUserSignImageAsync (int? userId, string fileBufferId);

        /// <summary>
        /// This call updates user sign image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserSignImageAsyncWithHttpInfo (int? userId, string fileBufferId);
        /// <summary>
        /// This call updates all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersManagementSetUserStateAsync (int? userId, List<UserSecurityStateDTO> states);

        /// <summary>
        /// This call updates all states enabled for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserStateAsyncWithHttpInfo (int? userId, List<UserSecurityStateDTO> states);
        /// <summary>
        /// This call updates a given user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementUpdateAsync (int? id, UserUpdateDTO userUpdate);

        /// <summary>
        /// This call updates a given user, group or service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementUpdateAsyncWithHttpInfo (int? id, UserUpdateDTO userUpdate);
        /// <summary>
        /// This call updates user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> UsersManagementUpdateUserMailAccountAsync (int? userId, MailAccountDTO mailaccount = null);

        /// <summary>
        /// This call updates user mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementUpdateUserMailAccountAsyncWithHttpInfo (int? userId, MailAccountDTO mailaccount = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersManagementApi : IUsersManagementApi
    {
        private IO.Swagger.Management.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersManagementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Management.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersManagementApi(IO.Swagger.Management.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Management.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Management.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Management.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Management.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes user, group or service specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        public void UsersManagementDelete (int? id)
        {
             UsersManagementDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes user, group or service specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementDelete");

            var localVarPath = "/api/management/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes user, group or service specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementDeleteAsync (int? id)
        {
             await UsersManagementDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes user, group or service specified 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementDelete");

            var localVarPath = "/api/management/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns></returns>
        public void UsersManagementDeleteUserMailAccount (int? userId, int? mailAccountId)
        {
             UsersManagementDeleteUserMailAccountWithHttpInfo(userId, mailAccountId);
        }

        /// <summary>
        /// This call deletes user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementDeleteUserMailAccountWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementDeleteUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementDeleteUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDeleteUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementDeleteUserMailAccountAsync (int? userId, int? mailAccountId)
        {
             await UsersManagementDeleteUserMailAccountAsyncWithHttpInfo(userId, mailAccountId);

        }

        /// <summary>
        /// This call deletes user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementDeleteUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementDeleteUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDeleteUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns></returns>
        public void UsersManagementDeleteUserSignImage (int? userId)
        {
             UsersManagementDeleteUserSignImageWithHttpInfo(userId);
        }

        /// <summary>
        /// This call removes user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementDeleteUserSignImageWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementDeleteUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDeleteUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementDeleteUserSignImageAsync (int? userId)
        {
             await UsersManagementDeleteUserSignImageAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// This call removes user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementDeleteUserSignImageAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementDeleteUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementDeleteUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all users, groups and services 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> UsersManagementGet ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = UsersManagementGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all users, groups and services 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > UsersManagementGetWithHttpInfo ()
        {

            var localVarPath = "/api/management/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all users, groups and services 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersManagementGetAsync ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await UsersManagementGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all users, groups and services 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersManagementGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>bool?</returns>
        public bool? UsersManagementGetAddressBookProfile (int? userId)
        {
             ApiResponse<bool?> localVarResponse = UsersManagementGetAddressBookProfileWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UsersManagementGetAddressBookProfileWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/GetAddressBookProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UsersManagementGetAddressBookProfileAsync (int? userId)
        {
             ApiResponse<bool?> localVarResponse = await UsersManagementGetAddressBookProfileAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UsersManagementGetAddressBookProfileAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/GetAddressBookProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call gets user or group object for update 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserUpdateDTO</returns>
        public UserUpdateDTO UsersManagementGetForUpdate (int? id)
        {
             ApiResponse<UserUpdateDTO> localVarResponse = UsersManagementGetForUpdateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets user or group object for update 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserUpdateDTO</returns>
        public ApiResponse< UserUpdateDTO > UsersManagementGetForUpdateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementGetForUpdate");

            var localVarPath = "/api/management/Users/ForUpdate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateDTO)));
        }

        /// <summary>
        /// This call gets user or group object for update 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserUpdateDTO</returns>
        public async System.Threading.Tasks.Task<UserUpdateDTO> UsersManagementGetForUpdateAsync (int? id)
        {
             ApiResponse<UserUpdateDTO> localVarResponse = await UsersManagementGetForUpdateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets user or group object for update 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserUpdateDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserUpdateDTO>> UsersManagementGetForUpdateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementGetForUpdate");

            var localVarPath = "/api/management/Users/ForUpdate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateDTO)));
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>int?</returns>
        public int? UsersManagementGetMailOutMaxSize (int? userId)
        {
             ApiResponse<int?> localVarResponse = UsersManagementGetMailOutMaxSizeWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > UsersManagementGetMailOutMaxSizeWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/GetMailOutMaxSize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> UsersManagementGetMailOutMaxSizeAsync (int? userId)
        {
             ApiResponse<int?> localVarResponse = await UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> UsersManagementGetMailOutMaxSizeAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/GetMailOutMaxSize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call gets all groups by user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;UserSimpleDTO&gt;</returns>
        public List<UserSimpleDTO> UsersManagementGetUserGroups (int? userId)
        {
             ApiResponse<List<UserSimpleDTO>> localVarResponse = UsersManagementGetUserGroupsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all groups by user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;UserSimpleDTO&gt;</returns>
        public ApiResponse< List<UserSimpleDTO> > UsersManagementGetUserGroupsWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserGroups");

            var localVarPath = "/api/management/Users/{userId}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSimpleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserSimpleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSimpleDTO>)));
        }

        /// <summary>
        /// This call gets all groups by user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;UserSimpleDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSimpleDTO>> UsersManagementGetUserGroupsAsync (int? userId)
        {
             ApiResponse<List<UserSimpleDTO>> localVarResponse = await UsersManagementGetUserGroupsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all groups by user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserSimpleDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSimpleDTO>>> UsersManagementGetUserGroupsAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserGroups");

            var localVarPath = "/api/management/Users/{userId}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSimpleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserSimpleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSimpleDTO>)));
        }

        /// <summary>
        /// This call gets user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ImpersonateDTO</returns>
        public ImpersonateDTO UsersManagementGetUserImpersonateData (int? userId)
        {
             ApiResponse<ImpersonateDTO> localVarResponse = UsersManagementGetUserImpersonateDataWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of ImpersonateDTO</returns>
        public ApiResponse< ImpersonateDTO > UsersManagementGetUserImpersonateDataWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserImpersonateData");

            var localVarPath = "/api/management/Users/{userId}/Impersonate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserImpersonateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImpersonateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonateDTO)));
        }

        /// <summary>
        /// This call gets user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ImpersonateDTO</returns>
        public async System.Threading.Tasks.Task<ImpersonateDTO> UsersManagementGetUserImpersonateDataAsync (int? userId)
        {
             ApiResponse<ImpersonateDTO> localVarResponse = await UsersManagementGetUserImpersonateDataAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (ImpersonateDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImpersonateDTO>> UsersManagementGetUserImpersonateDataAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserImpersonateData");

            var localVarPath = "/api/management/Users/{userId}/Impersonate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserImpersonateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImpersonateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonateDTO)));
        }

        /// <summary>
        /// This call gets specific mail account identified by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO UsersManagementGetUserMailAccount (int? userId, int? mailAccountId)
        {
             ApiResponse<MailAccountDTO> localVarResponse = UsersManagementGetUserMailAccountWithHttpInfo(userId, mailAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific mail account identified by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > UsersManagementGetUserMailAccountWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementGetUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// This call gets specific mail account identified by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> UsersManagementGetUserMailAccountAsync (int? userId, int? mailAccountId)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await UsersManagementGetUserMailAccountAsyncWithHttpInfo(userId, mailAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific mail account identified by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementGetUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementGetUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// This call gets mail accounts for specific user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;MailAccountDTO&gt;</returns>
        public List<MailAccountDTO> UsersManagementGetUserMailAccounts (int? userId)
        {
             ApiResponse<List<MailAccountDTO>> localVarResponse = UsersManagementGetUserMailAccountsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets mail accounts for specific user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;MailAccountDTO&gt;</returns>
        public ApiResponse< List<MailAccountDTO> > UsersManagementGetUserMailAccountsWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailAccounts");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailAccountDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailAccountDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailAccountDTO>)));
        }

        /// <summary>
        /// This call gets mail accounts for specific user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;MailAccountDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MailAccountDTO>> UsersManagementGetUserMailAccountsAsync (int? userId)
        {
             ApiResponse<List<MailAccountDTO>> localVarResponse = await UsersManagementGetUserMailAccountsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets mail accounts for specific user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MailAccountDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MailAccountDTO>>> UsersManagementGetUserMailAccountsAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailAccounts");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailAccountDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailAccountDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailAccountDTO>)));
        }

        /// <summary>
        /// This call gets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>MailAccountSettingsDTO</returns>
        public MailAccountSettingsDTO UsersManagementGetUserMailSettings (int? userId)
        {
             ApiResponse<MailAccountSettingsDTO> localVarResponse = UsersManagementGetUserMailSettingsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of MailAccountSettingsDTO</returns>
        public ApiResponse< MailAccountSettingsDTO > UsersManagementGetUserMailSettingsWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailSettings");

            var localVarPath = "/api/management/Users/{userId}/MailSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountSettingsDTO)));
        }

        /// <summary>
        /// This call gets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of MailAccountSettingsDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountSettingsDTO> UsersManagementGetUserMailSettingsAsync (int? userId)
        {
             ApiResponse<MailAccountSettingsDTO> localVarResponse = await UsersManagementGetUserMailSettingsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (MailAccountSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountSettingsDTO>> UsersManagementGetUserMailSettingsAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserMailSettings");

            var localVarPath = "/api/management/Users/{userId}/MailSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserMailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountSettingsDTO)));
        }

        /// <summary>
        /// This call gets user Sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream UsersManagementGetUserSignImage (int? userId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = UsersManagementGetUserSignImageWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets user Sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > UsersManagementGetUserSignImageWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call gets user Sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> UsersManagementGetUserSignImageAsync (int? userId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await UsersManagementGetUserSignImageAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets user Sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UsersManagementGetUserSignImageAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call gets all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>List&lt;UserSecurityStateDTO&gt;</returns>
        public List<UserSecurityStateDTO> UsersManagementGetUserState (int? userId)
        {
             ApiResponse<List<UserSecurityStateDTO>> localVarResponse = UsersManagementGetUserStateWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>ApiResponse of List&lt;UserSecurityStateDTO&gt;</returns>
        public ApiResponse< List<UserSecurityStateDTO> > UsersManagementGetUserStateWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserState");

            var localVarPath = "/api/management/Users/{userId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSecurityStateDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserSecurityStateDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSecurityStateDTO>)));
        }

        /// <summary>
        /// This call gets all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of List&lt;UserSecurityStateDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSecurityStateDTO>> UsersManagementGetUserStateAsync (int? userId)
        {
             ApiResponse<List<UserSecurityStateDTO>> localVarResponse = await UsersManagementGetUserStateAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserSecurityStateDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserSecurityStateDTO>>> UsersManagementGetUserStateAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementGetUserState");

            var localVarPath = "/api/management/Users/{userId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementGetUserState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserSecurityStateDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserSecurityStateDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserSecurityStateDTO>)));
        }

        /// <summary>
        /// This call inserts a new user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersManagementInsert (UserInsertDTO userInsert)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersManagementInsertWithHttpInfo(userInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersManagementInsertWithHttpInfo (UserInsertDTO userInsert)
        {
            // verify the required parameter 'userInsert' is set
            if (userInsert == null)
                throw new ApiException(400, "Missing required parameter 'userInsert' when calling UsersManagementApi->UsersManagementInsert");

            var localVarPath = "/api/management/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userInsert != null && userInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementInsertAsync (UserInsertDTO userInsert)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersManagementInsertAsyncWithHttpInfo(userInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userInsert">User information to insert</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementInsertAsyncWithHttpInfo (UserInsertDTO userInsert)
        {
            // verify the required parameter 'userInsert' is set
            if (userInsert == null)
                throw new ApiException(400, "Missing required parameter 'userInsert' when calling UsersManagementApi->UsersManagementInsert");

            var localVarPath = "/api/management/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userInsert != null && userInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call inserts user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO UsersManagementInsertUserMailAccount (int? userId, MailAccountDTO mailaccount = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = UsersManagementInsertUserMailAccountWithHttpInfo(userId, mailaccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > UsersManagementInsertUserMailAccountWithHttpInfo (int? userId, MailAccountDTO mailaccount = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementInsertUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailaccount != null && mailaccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailaccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailaccount; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementInsertUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// This call inserts user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> UsersManagementInsertUserMailAccountAsync (int? userId, MailAccountDTO mailaccount = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await UsersManagementInsertUserMailAccountAsyncWithHttpInfo(userId, mailaccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementInsertUserMailAccountAsyncWithHttpInfo (int? userId, MailAccountDTO mailaccount = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementInsertUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailaccount != null && mailaccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailaccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailaccount; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementInsertUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// This call restore deleted user or group and updates its informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersManagementRestore (UserInsertDTO userUpdate)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersManagementRestoreWithHttpInfo(userUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call restore deleted user or group and updates its informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersManagementRestoreWithHttpInfo (UserInsertDTO userUpdate)
        {
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
                throw new ApiException(400, "Missing required parameter 'userUpdate' when calling UsersManagementApi->UsersManagementRestore");

            var localVarPath = "/api/management/Users/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userUpdate != null && userUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementRestore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call restore deleted user or group and updates its informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementRestoreAsync (UserInsertDTO userUpdate)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersManagementRestoreAsyncWithHttpInfo(userUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call restore deleted user or group and updates its informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate">User informations to update</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementRestoreAsyncWithHttpInfo (UserInsertDTO userUpdate)
        {
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
                throw new ApiException(400, "Missing required parameter 'userUpdate' when calling UsersManagementApi->UsersManagementRestore");

            var localVarPath = "/api/management/Users/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userUpdate != null && userUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementRestore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns></returns>
        public void UsersManagementSetAddressBookProfile (int? userId, bool? enable)
        {
             UsersManagementSetAddressBookProfileWithHttpInfo(userId, enable);
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetAddressBookProfileWithHttpInfo (int? userId, bool? enable)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");
            // verify the required parameter 'enable' is set
            if (enable == null)
                throw new ApiException(400, "Missing required parameter 'enable' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/SetAddressBookProfile/{enable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (enable != null) localVarPathParams.Add("enable", this.Configuration.ApiClient.ParameterToString(enable)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetAddressBookProfileAsync (int? userId, bool? enable)
        {
             await UsersManagementSetAddressBookProfileAsyncWithHttpInfo(userId, enable);

        }

        /// <summary>
        /// This call updates user option for automatic insert in the address book in profilation 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="enable">Boolen which is true to enable the option</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetAddressBookProfileAsyncWithHttpInfo (int? userId, bool? enable)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");
            // verify the required parameter 'enable' is set
            if (enable == null)
                throw new ApiException(400, "Missing required parameter 'enable' when calling UsersManagementApi->UsersManagementSetAddressBookProfile");

            var localVarPath = "/api/management/Users/{userId}/Options/SetAddressBookProfile/{enable}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (enable != null) localVarPathParams.Add("enable", this.Configuration.ApiClient.ParameterToString(enable)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetAddressBookProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates default user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns></returns>
        public void UsersManagementSetDefaultUserMailAccount (int? userId, int? mailAccountId)
        {
             UsersManagementSetDefaultUserMailAccountWithHttpInfo(userId, mailAccountId);
        }

        /// <summary>
        /// This call updates default user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetDefaultUserMailAccountWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetDefaultUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementSetDefaultUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}/Default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetDefaultUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates default user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetDefaultUserMailAccountAsync (int? userId, int? mailAccountId)
        {
             await UsersManagementSetDefaultUserMailAccountAsyncWithHttpInfo(userId, mailAccountId);

        }

        /// <summary>
        /// This call updates default user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailAccountId">Mail account Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetDefaultUserMailAccountAsyncWithHttpInfo (int? userId, int? mailAccountId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetDefaultUserMailAccount");
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling UsersManagementApi->UsersManagementSetDefaultUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts/{mailAccountId}/Default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetDefaultUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns></returns>
        public void UsersManagementSetMailOutMaxSize (int? userId, int? maxSize)
        {
             UsersManagementSetMailOutMaxSizeWithHttpInfo(userId, maxSize);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetMailOutMaxSizeWithHttpInfo (int? userId, int? maxSize)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");
            // verify the required parameter 'maxSize' is set
            if (maxSize == null)
                throw new ApiException(400, "Missing required parameter 'maxSize' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/SetMailOutMaxSize/{maxSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (maxSize != null) localVarPathParams.Add("maxSize", this.Configuration.ApiClient.ParameterToString(maxSize)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetMailOutMaxSizeAsync (int? userId, int? maxSize)
        {
             await UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo(userId, maxSize);

        }

        /// <summary>
        /// This call updates user option for max size of output mail 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User identifier</param>
        /// <param name="maxSize">Mail max size (Kbyte)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetMailOutMaxSizeAsyncWithHttpInfo (int? userId, int? maxSize)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");
            // verify the required parameter 'maxSize' is set
            if (maxSize == null)
                throw new ApiException(400, "Missing required parameter 'maxSize' when calling UsersManagementApi->UsersManagementSetMailOutMaxSize");

            var localVarPath = "/api/management/Users/{userId}/Options/SetMailOutMaxSize/{maxSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (maxSize != null) localVarPathParams.Add("maxSize", this.Configuration.ApiClient.ParameterToString(maxSize)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetMailOutMaxSize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns></returns>
        public void UsersManagementSetUserGroups (int? userId, List<UserSimpleDTO> groups)
        {
             UsersManagementSetUserGroupsWithHttpInfo(userId, groups);
        }

        /// <summary>
        /// This call updates user groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetUserGroupsWithHttpInfo (int? userId, List<UserSimpleDTO> groups)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserGroups");
            // verify the required parameter 'groups' is set
            if (groups == null)
                throw new ApiException(400, "Missing required parameter 'groups' when calling UsersManagementApi->UsersManagementSetUserGroups");

            var localVarPath = "/api/management/Users/{userId}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetUserGroupsAsync (int? userId, List<UserSimpleDTO> groups)
        {
             await UsersManagementSetUserGroupsAsyncWithHttpInfo(userId, groups);

        }

        /// <summary>
        /// This call updates user groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="groups">Group list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserGroupsAsyncWithHttpInfo (int? userId, List<UserSimpleDTO> groups)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserGroups");
            // verify the required parameter 'groups' is set
            if (groups == null)
                throw new ApiException(400, "Missing required parameter 'groups' when calling UsersManagementApi->UsersManagementSetUserGroups");

            var localVarPath = "/api/management/Users/{userId}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns></returns>
        public void UsersManagementSetUserImpersonateData (int? userId, ImpersonateDTO impersonate)
        {
             UsersManagementSetUserImpersonateDataWithHttpInfo(userId, impersonate);
        }

        /// <summary>
        /// This call updates user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetUserImpersonateDataWithHttpInfo (int? userId, ImpersonateDTO impersonate)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserImpersonateData");
            // verify the required parameter 'impersonate' is set
            if (impersonate == null)
                throw new ApiException(400, "Missing required parameter 'impersonate' when calling UsersManagementApi->UsersManagementSetUserImpersonateData");

            var localVarPath = "/api/management/Users/{userId}/Impersonate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (impersonate != null && impersonate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(impersonate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = impersonate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserImpersonateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetUserImpersonateDataAsync (int? userId, ImpersonateDTO impersonate)
        {
             await UsersManagementSetUserImpersonateDataAsyncWithHttpInfo(userId, impersonate);

        }

        /// <summary>
        /// This call updates user impersonate informations 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="impersonate">Impersonate data</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserImpersonateDataAsyncWithHttpInfo (int? userId, ImpersonateDTO impersonate)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserImpersonateData");
            // verify the required parameter 'impersonate' is set
            if (impersonate == null)
                throw new ApiException(400, "Missing required parameter 'impersonate' when calling UsersManagementApi->UsersManagementSetUserImpersonateData");

            var localVarPath = "/api/management/Users/{userId}/Impersonate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (impersonate != null && impersonate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(impersonate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = impersonate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserImpersonateData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns></returns>
        public void UsersManagementSetUserMailSettings (int? userId, MailAccountSettingsDTO mailSettings)
        {
             UsersManagementSetUserMailSettingsWithHttpInfo(userId, mailSettings);
        }

        /// <summary>
        /// This call sets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetUserMailSettingsWithHttpInfo (int? userId, MailAccountSettingsDTO mailSettings)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserMailSettings");
            // verify the required parameter 'mailSettings' is set
            if (mailSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailSettings' when calling UsersManagementApi->UsersManagementSetUserMailSettings");

            var localVarPath = "/api/management/Users/{userId}/MailSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailSettings != null && mailSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserMailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetUserMailSettingsAsync (int? userId, MailAccountSettingsDTO mailSettings)
        {
             await UsersManagementSetUserMailSettingsAsyncWithHttpInfo(userId, mailSettings);

        }

        /// <summary>
        /// This call sets mail configuration options 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailSettings">Mail settings</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserMailSettingsAsyncWithHttpInfo (int? userId, MailAccountSettingsDTO mailSettings)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserMailSettings");
            // verify the required parameter 'mailSettings' is set
            if (mailSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailSettings' when calling UsersManagementApi->UsersManagementSetUserMailSettings");

            var localVarPath = "/api/management/Users/{userId}/MailSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailSettings != null && mailSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserMailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns></returns>
        public void UsersManagementSetUserSignImage (int? userId, string fileBufferId)
        {
             UsersManagementSetUserSignImageWithHttpInfo(userId, fileBufferId);
        }

        /// <summary>
        /// This call updates user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetUserSignImageWithHttpInfo (int? userId, string fileBufferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserSignImage");
            // verify the required parameter 'fileBufferId' is set
            if (fileBufferId == null)
                throw new ApiException(400, "Missing required parameter 'fileBufferId' when calling UsersManagementApi->UsersManagementSetUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage/{fileBufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (fileBufferId != null) localVarPathParams.Add("fileBufferId", this.Configuration.ApiClient.ParameterToString(fileBufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetUserSignImageAsync (int? userId, string fileBufferId)
        {
             await UsersManagementSetUserSignImageAsyncWithHttpInfo(userId, fileBufferId);

        }

        /// <summary>
        /// This call updates user sign image 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="fileBufferId">Identifier of the file buffered</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserSignImageAsyncWithHttpInfo (int? userId, string fileBufferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserSignImage");
            // verify the required parameter 'fileBufferId' is set
            if (fileBufferId == null)
                throw new ApiException(400, "Missing required parameter 'fileBufferId' when calling UsersManagementApi->UsersManagementSetUserSignImage");

            var localVarPath = "/api/management/Users/{userId}/SignImage/{fileBufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (fileBufferId != null) localVarPathParams.Add("fileBufferId", this.Configuration.ApiClient.ParameterToString(fileBufferId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserSignImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns></returns>
        public void UsersManagementSetUserState (int? userId, List<UserSecurityStateDTO> states)
        {
             UsersManagementSetUserStateWithHttpInfo(userId, states);
        }

        /// <summary>
        /// This call updates all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersManagementSetUserStateWithHttpInfo (int? userId, List<UserSecurityStateDTO> states)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserState");
            // verify the required parameter 'states' is set
            if (states == null)
                throw new ApiException(400, "Missing required parameter 'states' when calling UsersManagementApi->UsersManagementSetUserState");

            var localVarPath = "/api/management/Users/{userId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (states != null && states.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(states); // http body (model) parameter
            }
            else
            {
                localVarPostBody = states; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersManagementSetUserStateAsync (int? userId, List<UserSecurityStateDTO> states)
        {
             await UsersManagementSetUserStateAsyncWithHttpInfo(userId, states);

        }

        /// <summary>
        /// This call updates all states enabled for the user 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="states">State list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersManagementSetUserStateAsyncWithHttpInfo (int? userId, List<UserSecurityStateDTO> states)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementSetUserState");
            // verify the required parameter 'states' is set
            if (states == null)
                throw new ApiException(400, "Missing required parameter 'states' when calling UsersManagementApi->UsersManagementSetUserState");

            var localVarPath = "/api/management/Users/{userId}/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (states != null && states.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(states); // http body (model) parameter
            }
            else
            {
                localVarPostBody = states; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementSetUserState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates a given user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersManagementUpdate (int? id, UserUpdateDTO userUpdate)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersManagementUpdateWithHttpInfo(id, userUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a given user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersManagementUpdateWithHttpInfo (int? id, UserUpdateDTO userUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementUpdate");
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
                throw new ApiException(400, "Missing required parameter 'userUpdate' when calling UsersManagementApi->UsersManagementUpdate");

            var localVarPath = "/api/management/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userUpdate != null && userUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call updates a given user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersManagementUpdateAsync (int? id, UserUpdateDTO userUpdate)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersManagementUpdateAsyncWithHttpInfo(id, userUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a given user, group or service 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="userUpdate">User information to update</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersManagementUpdateAsyncWithHttpInfo (int? id, UserUpdateDTO userUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersManagementApi->UsersManagementUpdate");
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
                throw new ApiException(400, "Missing required parameter 'userUpdate' when calling UsersManagementApi->UsersManagementUpdate");

            var localVarPath = "/api/management/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userUpdate != null && userUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call updates user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO UsersManagementUpdateUserMailAccount (int? userId, MailAccountDTO mailaccount = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = UsersManagementUpdateUserMailAccountWithHttpInfo(userId, mailaccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > UsersManagementUpdateUserMailAccountWithHttpInfo (int? userId, MailAccountDTO mailaccount = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementUpdateUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailaccount != null && mailaccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailaccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailaccount; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementUpdateUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// This call updates user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> UsersManagementUpdateUserMailAccountAsync (int? userId, MailAccountDTO mailaccount = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await UsersManagementUpdateUserMailAccountAsyncWithHttpInfo(userId, mailaccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates user mail account 
        /// </summary>
        /// <exception cref="IO.Swagger.Management.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Identifier</param>
        /// <param name="mailaccount"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> UsersManagementUpdateUserMailAccountAsyncWithHttpInfo (int? userId, MailAccountDTO mailaccount = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersManagementApi->UsersManagementUpdateUserMailAccount");

            var localVarPath = "/api/management/Users/{userId}/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (mailaccount != null && mailaccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailaccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailaccount; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersManagementUpdateUserMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

    }
}
