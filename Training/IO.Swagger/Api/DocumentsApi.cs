/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns></returns>
        void DocumentsCanWrite (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsCanWriteWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns></returns>
        void DocumentsCanWriteForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsCanWriteForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsExportMassiveForProfile (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsExportMassiveForProfileWithHttpInfo (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsExportMassiveForProfile_0 (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsExportMassiveForProfile_0WithHttpInfo (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest);
        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetDocumentByRevisionId (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractP7M (int? id);

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractP7MWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedDocumentByRevisionId (int? revisionId);

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedForProfile (int? id);

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedForProfileWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedForTaskAttachement (int? id);

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedForTaskAttachementWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedProfileAttachment (int? id);

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedProfileAttachmentWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetExtractedProfileAttachmentRevision (int? attachmentId, int? attachmentRevisionId);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo (int? attachmentId, int? attachmentRevisionId);
        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForExternalAttachment (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForMail (int? id, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForMailWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForProfile (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForProfileWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForTaskAttachement (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>bool?</returns>
        bool? DocumentsGetForTaskHasDocument (int? processDocId);

        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DocumentsGetForTaskHasDocumentWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>bool?</returns>
        bool? DocumentsGetHasDocumentForProfile (int? id);

        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DocumentsGetHasDocumentForProfileWithHttpInfo (int? id);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocWithHttpInfo (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileWithHttpInfo (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest);
        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetProcessdocForMail (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetProcessdocForMailWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns></returns>
        void DocumentsSetDocument (string cacheId, int? docNumber);

        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithHttpInfo (string cacheId, int? docNumber);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        void DocumentsSetDocumentWithOption (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithOptionWithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsCanWriteAsync (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsCanWriteForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsExportMassiveForProfileAsync (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsExportMassiveForProfile_0Async (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest);
        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractP7MAsync (int? id);

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractP7MAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedDocumentByRevisionIdAsync (int? revisionId);

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForProfileAsync (int? id);

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForProfileAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForTaskAttachementAsync (int? id);

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedProfileAttachmentAsync (int? id);

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedProfileAttachmentRevisionAsync (int? attachmentId, int? attachmentRevisionId);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo (int? attachmentId, int? attachmentRevisionId);
        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForExternalAttachmentAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForMailAsync (int? id, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForMailAsyncWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProfileAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskAttachementAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DocumentsGetForTaskHasDocumentAsync (int? processDocId);

        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetForTaskHasDocumentAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DocumentsGetHasDocumentForProfileAsync (int? id);

        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetHasDocumentForProfileAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest);
        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetProcessdocForMailAsync (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetProcessdocForMailAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentAsync (string cacheId, int? docNumber);

        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentAsyncWithHttpInfo (string cacheId, int? docNumber);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentWithOptionAsync (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionAsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns></returns>
        public void DocumentsCanWrite (int? docnumber)
        {
             DocumentsCanWriteWithHttpInfo(docnumber);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsCanWriteWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWrite");

            var localVarPath = "/api/Documents/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWrite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsCanWriteAsync (int? docnumber)
        {
             await DocumentsCanWriteAsyncWithHttpInfo(docnumber);

        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWrite");

            var localVarPath = "/api/Documents/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWrite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns></returns>
        public void DocumentsCanWriteForTask (int? processDocId, int? taskWorkId)
        {
             DocumentsCanWriteForTaskWithHttpInfo(processDocId, taskWorkId);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsCanWriteForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsCanWriteForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsCanWriteForTask");

            var localVarPath = "/api/Documents/forTask/{processDocId}/{taskWorkId}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsCanWriteForTaskAsync (int? processDocId, int? taskWorkId)
        {
             await DocumentsCanWriteForTaskAsyncWithHttpInfo(processDocId, taskWorkId);

        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsCanWriteForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsCanWriteForTask");

            var localVarPath = "/api/Documents/forTask/{processDocId}/{taskWorkId}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsExportMassiveForProfile (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsExportMassiveForProfileWithHttpInfo(exportMassiveForProfileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsExportMassiveForProfileWithHttpInfo (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest)
        {
            // verify the required parameter 'exportMassiveForProfileRequest' is set
            if (exportMassiveForProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'exportMassiveForProfileRequest' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportMassiveForProfileRequest != null && exportMassiveForProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportMassiveForProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportMassiveForProfileRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsExportMassiveForProfileAsync (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsExportMassiveForProfileAsyncWithHttpInfo(exportMassiveForProfileRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProfileRequest">Request for export procedure</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (ExportMassiveForProfileRequestDTO exportMassiveForProfileRequest)
        {
            // verify the required parameter 'exportMassiveForProfileRequest' is set
            if (exportMassiveForProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'exportMassiveForProfileRequest' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportMassiveForProfileRequest != null && exportMassiveForProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportMassiveForProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportMassiveForProfileRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsExportMassiveForProfile_0 (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsExportMassiveForProfile_0WithHttpInfo(exportMassiveForProcessDocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsExportMassiveForProfile_0WithHttpInfo (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest)
        {
            // verify the required parameter 'exportMassiveForProcessDocRequest' is set
            if (exportMassiveForProcessDocRequest == null)
                throw new ApiException(400, "Missing required parameter 'exportMassiveForProcessDocRequest' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportMassiveForProcessDocRequest != null && exportMassiveForProcessDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportMassiveForProcessDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportMassiveForProcessDocRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsExportMassiveForProfile_0Async (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsExportMassiveForProfile_0AsyncWithHttpInfo(exportMassiveForProcessDocRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportMassiveForProcessDocRequest">Request for export procedure</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (ExportMassiveForProcessDocRequestDTO exportMassiveForProcessDocRequest)
        {
            // verify the required parameter 'exportMassiveForProcessDocRequest' is set
            if (exportMassiveForProcessDocRequest == null)
                throw new ApiException(400, "Missing required parameter 'exportMassiveForProcessDocRequest' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportMassiveForProcessDocRequest != null && exportMassiveForProcessDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportMassiveForProcessDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportMassiveForProcessDocRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetDocumentByRevisionId (int? revisionId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetDocumentByRevisionIdWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetDocumentByRevisionId");

            var localVarPath = "/api/Documents/byRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetDocumentByRevisionId");

            var localVarPath = "/api/Documents/byRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractP7M (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractP7MWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractP7MWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractP7M");

            var localVarPath = "/api/Documents/{id}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractP7M", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractP7MAsync (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractP7MAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractP7MAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractP7M");

            var localVarPath = "/api/Documents/{id}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractP7M", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedDocumentByRevisionId (int? revisionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo(revisionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetExtractedDocumentByRevisionId");

            var localVarPath = "/api/Documents/extractByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedDocumentByRevisionIdAsync (int? revisionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo(revisionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetExtractedDocumentByRevisionId");

            var localVarPath = "/api/Documents/extractByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedForProfile (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedForProfileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedForProfileWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForProfile");

            var localVarPath = "/api/Documents/extract/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForProfileAsync (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedForProfileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForProfileAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForProfile");

            var localVarPath = "/api/Documents/extract/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedForTask (int? processDocId, int? taskWorkId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedForTaskWithHttpInfo(processDocId, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetExtractedForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetExtractedForTask");

            var localVarPath = "/api/Documents/extractForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForTaskAsync (int? processDocId, int? taskWorkId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedForTaskAsyncWithHttpInfo(processDocId, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetExtractedForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetExtractedForTask");

            var localVarPath = "/api/Documents/extractForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedForTaskAttachement (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedForTaskAttachementWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedForTaskAttachementWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForTaskAttachement");

            var localVarPath = "/api/Documents/extractTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedForTaskAttachementAsync (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForTaskAttachement");

            var localVarPath = "/api/Documents/extractTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedProfileAttachment (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedProfileAttachmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedProfileAttachmentWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedProfileAttachment");

            var localVarPath = "/api/Documents/extractProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedProfileAttachmentAsync (int? id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedProfileAttachment");

            var localVarPath = "/api/Documents/extractProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetExtractedProfileAttachmentRevision (int? attachmentId, int? attachmentRevisionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo(attachmentId, attachmentRevisionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo (int? attachmentId, int? attachmentRevisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");
            // verify the required parameter 'attachmentRevisionId' is set
            if (attachmentRevisionId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevisionId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");

            var localVarPath = "/api/Documents/extractProfileAttachment/{attachmentId}/revisions/{attachmentRevisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (attachmentRevisionId != null) localVarPathParams.Add("attachmentRevisionId", this.Configuration.ApiClient.ParameterToString(attachmentRevisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachmentRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetExtractedProfileAttachmentRevisionAsync (int? attachmentId, int? attachmentRevisionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo(attachmentId, attachmentRevisionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo (int? attachmentId, int? attachmentRevisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");
            // verify the required parameter 'attachmentRevisionId' is set
            if (attachmentRevisionId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevisionId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");

            var localVarPath = "/api/Documents/extractProfileAttachment/{attachmentId}/revisions/{attachmentRevisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (attachmentRevisionId != null) localVarPathParams.Add("attachmentRevisionId", this.Configuration.ApiClient.ParameterToString(attachmentRevisionId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachmentRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForExternalAttachment (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForExternalAttachmentWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForExternalAttachment");

            var localVarPath = "/api/Documents/profileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForExternalAttachmentAsync (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForExternalAttachmentAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForExternalAttachment");

            var localVarPath = "/api/Documents/profileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForMail (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForMailWithHttpInfo(id, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForMailWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetForMail");

            var localVarPath = "/api/Documents/GetMail/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForMailAsync (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForMailAsyncWithHttpInfo(id, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForMailAsyncWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetForMail");

            var localVarPath = "/api/Documents/GetMail/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForProcessAttachementWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentsApi->DocumentsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessAttachement");

            var localVarPath = "/api/Documents/processattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", this.Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForProcessAttachementAsyncWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentsApi->DocumentsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessAttachement");

            var localVarPath = "/api/Documents/processattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", this.Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForProcessDocumentWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentsApi->DocumentsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessDocument");

            var localVarPath = "/api/Documents/processdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", this.Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForProcessDocumentAsyncWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentsApi->DocumentsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessDocument");

            var localVarPath = "/api/Documents/processdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", this.Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForProfile (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForProfileWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForProfileWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfile");

            var localVarPath = "/api/Documents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForProfileAsync (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForProfileAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfile");

            var localVarPath = "/api/Documents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForTaskWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTask");

            var localVarPath = "/api/Documents/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForTaskAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTask");

            var localVarPath = "/api/Documents/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForTaskAttachement (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForTaskAttachementWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForTaskAttachement");

            var localVarPath = "/api/Documents/taskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskAttachementAsync (int? id, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForTaskAttachementAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForTaskAttachement");

            var localVarPath = "/api/Documents/taskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>bool?</returns>
        public bool? DocumentsGetForTaskHasDocument (int? processDocId)
        {
             ApiResponse<bool?> localVarResponse = DocumentsGetForTaskHasDocumentWithHttpInfo(processDocId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DocumentsGetForTaskHasDocumentWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskHasDocument");

            var localVarPath = "/api/Documents/ForTask/HasDocument/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskHasDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DocumentsGetForTaskHasDocumentAsync (int? processDocId)
        {
             ApiResponse<bool?> localVarResponse = await DocumentsGetForTaskHasDocumentAsyncWithHttpInfo(processDocId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetForTaskHasDocumentAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskHasDocument");

            var localVarPath = "/api/Documents/ForTask/HasDocument/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskHasDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetForTaskReadOnlyWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");

            var localVarPath = "/api/Documents/ForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetForTaskReadOnlyAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");

            var localVarPath = "/api/Documents/ForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>bool?</returns>
        public bool? DocumentsGetHasDocumentForProfile (int? id)
        {
             ApiResponse<bool?> localVarResponse = DocumentsGetHasDocumentForProfileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DocumentsGetHasDocumentForProfileWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetHasDocumentForProfile");

            var localVarPath = "/api/Documents/HasDocument/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetHasDocumentForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DocumentsGetHasDocumentForProfileAsync (int? id)
        {
             ApiResponse<bool?> localVarResponse = await DocumentsGetHasDocumentForProfileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetHasDocumentForProfileAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetHasDocumentForProfile");

            var localVarPath = "/api/Documents/HasDocument/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetHasDocumentForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProcessDocWithHttpInfo(mailMassiveForProcessDocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProcessDocWithHttpInfo (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest)
        {
            // verify the required parameter 'mailMassiveForProcessDocRequest' is set
            if (mailMassiveForProcessDocRequest == null)
                throw new ApiException(400, "Missing required parameter 'mailMassiveForProcessDocRequest' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailMassiveForProcessDocRequest != null && mailMassiveForProcessDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailMassiveForProcessDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailMassiveForProcessDocRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo(mailMassiveForProcessDocRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProcessDocRequest"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (MailMassiveForProcessDocRequestDTO mailMassiveForProcessDocRequest)
        {
            // verify the required parameter 'mailMassiveForProcessDocRequest' is set
            if (mailMassiveForProcessDocRequest == null)
                throw new ApiException(400, "Missing required parameter 'mailMassiveForProcessDocRequest' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailMassiveForProcessDocRequest != null && mailMassiveForProcessDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailMassiveForProcessDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailMassiveForProcessDocRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProfileWithHttpInfo(mailMassiveForProfileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProfileWithHttpInfo (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest)
        {
            // verify the required parameter 'mailMassiveForProfileRequest' is set
            if (mailMassiveForProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'mailMassiveForProfileRequest' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailMassiveForProfileRequest != null && mailMassiveForProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailMassiveForProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailMassiveForProfileRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProfileAsyncWithHttpInfo(mailMassiveForProfileRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailMassiveForProfileRequest"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (MailMassiveForProfileRequestDTO mailMassiveForProfileRequest)
        {
            // verify the required parameter 'mailMassiveForProfileRequest' is set
            if (mailMassiveForProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'mailMassiveForProfileRequest' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailMassiveForProfileRequest != null && mailMassiveForProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailMassiveForProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailMassiveForProfileRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetProcessdocForMail (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetProcessdocForMailWithHttpInfo(processDocId, taskWorkId, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetProcessdocForMailWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetProcessdocForMail");

            var localVarPath = "/api/Documents/GetMail/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetProcessdocForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetProcessdocForMailAsync (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetProcessdocForMailAsyncWithHttpInfo(processDocId, taskWorkId, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetProcessdocForMailAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetProcessdocForMail");

            var localVarPath = "/api/Documents/GetMail/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetProcessdocForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetRevisionDocumentByIdWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");

            var localVarPath = "/api/Documents/profileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");

            var localVarPath = "/api/Documents/profileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns></returns>
        public void DocumentsSetDocument (string cacheId, int? docNumber)
        {
             DocumentsSetDocumentWithHttpInfo(cacheId, docNumber);
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithHttpInfo (string cacheId, int? docNumber)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocument");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocument");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentAsync (string cacheId, int? docNumber)
        {
             await DocumentsSetDocumentAsyncWithHttpInfo(cacheId, docNumber);

        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentAsyncWithHttpInfo (string cacheId, int? docNumber)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocument");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocument");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        public void DocumentsSetDocumentWithOption (string cacheId, int? docNumber, int? updateOption)
        {
             DocumentsSetDocumentWithOptionWithHttpInfo(cacheId, docNumber, updateOption);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithOptionWithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOption");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentWithOptionAsync (string cacheId, int? docNumber, int? updateOption)
        {
             await DocumentsSetDocumentWithOptionAsyncWithHttpInfo(cacheId, docNumber, updateOption);

        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionAsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOption");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
