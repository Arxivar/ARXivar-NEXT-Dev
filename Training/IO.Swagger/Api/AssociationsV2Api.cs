/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns></returns>
        void AssociationsV2Delete (int? id);

        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsV2DeleteWithHttpInfo (int? id);
        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsV2Get ();

        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsV2GetWithHttpInfo ();
        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsV2GetByDocNumber (int? docnumber);

        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsV2GetByDocNumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Object</returns>
        Object AssociationsV2GetById (int? id, SelectDTO select);

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssociationsV2GetByIdWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsV2InsertNew (List<int?> docnumbers);

        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsV2InsertNewWithHttpInfo (List<int?> docnumbers);
        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsV2InsertWithId (int? id, List<int?> docnumbers);

        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsV2InsertWithIdWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsV2InsertWithName (Object bodyData);

        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsV2InsertWithNameWithHttpInfo (Object bodyData);
        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns></returns>
        void AssociationsV2Remove (int? id, int? docnumber);

        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsV2RemoveWithHttpInfo (int? id, int? docnumber);
        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns></returns>
        void AssociationsV2Rename (int? id, Object bodyData);

        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsV2RenameWithHttpInfo (int? id, Object bodyData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsV2DeleteAsync (int? id);

        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2DeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2GetAsync ();

        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2GetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2GetByDocNumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2GetByDocNumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssociationsV2GetByIdAsync (int? id, SelectDTO select);

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2GetByIdAsyncWithHttpInfo (int? id, SelectDTO select);
        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertNewAsync (List<int?> docnumbers);

        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertNewAsyncWithHttpInfo (List<int?> docnumbers);
        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertWithIdAsync (int? id, List<int?> docnumbers);

        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertWithIdAsyncWithHttpInfo (int? id, List<int?> docnumbers);
        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertWithNameAsync (Object bodyData);

        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertWithNameAsyncWithHttpInfo (Object bodyData);
        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsV2RemoveAsync (int? id, int? docnumber);

        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2RemoveAsyncWithHttpInfo (int? id, int? docnumber);
        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsV2RenameAsync (int? id, Object bodyData);

        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2RenameAsyncWithHttpInfo (int? id, Object bodyData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssociationsV2Api : IAssociationsV2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsV2Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssociationsV2Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns></returns>
        public void AssociationsV2Delete (int? id)
        {
             AssociationsV2DeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsV2DeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Delete");

            var localVarPath = "/api/v2/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsV2DeleteAsync (int? id)
        {
             await AssociationsV2DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2DeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Delete");

            var localVarPath = "/api/v2/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsV2Get ()
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsV2GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsV2GetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2GetAsync ()
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsV2GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsV2GetByDocNumber (int? docnumber)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsV2GetByDocNumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsV2GetByDocNumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsV2Api->AssociationsV2GetByDocNumber");

            var localVarPath = "/api/v2/Associations/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2GetByDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2GetByDocNumberAsync (int? docnumber)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsV2GetByDocNumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2GetByDocNumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsV2Api->AssociationsV2GetByDocNumber");

            var localVarPath = "/api/v2/Associations/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2GetByDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Object</returns>
        public Object AssociationsV2GetById (int? id, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = AssociationsV2GetByIdWithHttpInfo(id, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AssociationsV2GetByIdWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2GetById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling AssociationsV2Api->AssociationsV2GetById");

            var localVarPath = "/api/v2/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssociationsV2GetByIdAsync (int? id, SelectDTO select)
        {
             ApiResponse<Object> localVarResponse = await AssociationsV2GetByIdAsyncWithHttpInfo(id, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile data contained in the association  This call could not be compatible with some programming language, in this case use the call api/Associations/items/{id} 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="select">Columns settings for the result</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2GetByIdAsyncWithHttpInfo (int? id, SelectDTO select)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2GetById");
            // verify the required parameter 'select' is set
            if (select == null)
                throw new ApiException(400, "Missing required parameter 'select' when calling AssociationsV2Api->AssociationsV2GetById");

            var localVarPath = "/api/v2/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null && select.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(select); // http body (model) parameter
            }
            else
            {
                localVarPostBody = select; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsV2InsertNew (List<int?> docnumbers)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsV2InsertNewWithHttpInfo(docnumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsV2InsertNewWithHttpInfo (List<int?> docnumbers)
        {
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling AssociationsV2Api->AssociationsV2InsertNew");

            var localVarPath = "/api/v2/Associations/insert/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertNewAsync (List<int?> docnumbers)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsV2InsertNewAsyncWithHttpInfo(docnumbers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertNewAsyncWithHttpInfo (List<int?> docnumbers)
        {
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling AssociationsV2Api->AssociationsV2InsertNew");

            var localVarPath = "/api/v2/Associations/insert/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsV2InsertWithId (int? id, List<int?> docnumbers)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsV2InsertWithIdWithHttpInfo(id, docnumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsV2InsertWithIdWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2InsertWithId");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling AssociationsV2Api->AssociationsV2InsertWithId");

            var localVarPath = "/api/v2/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertWithIdAsync (int? id, List<int?> docnumbers)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsV2InsertWithIdAsyncWithHttpInfo(id, docnumbers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumbers">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertWithIdAsyncWithHttpInfo (int? id, List<int?> docnumbers)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2InsertWithId");
            // verify the required parameter 'docnumbers' is set
            if (docnumbers == null)
                throw new ApiException(400, "Missing required parameter 'docnumbers' when calling AssociationsV2Api->AssociationsV2InsertWithId");

            var localVarPath = "/api/v2/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumbers != null && docnumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docnumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docnumbers; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsV2InsertWithName (Object bodyData)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsV2InsertWithNameWithHttpInfo(bodyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsV2InsertWithNameWithHttpInfo (Object bodyData)
        {
            // verify the required parameter 'bodyData' is set
            if (bodyData == null)
                throw new ApiException(400, "Missing required parameter 'bodyData' when calling AssociationsV2Api->AssociationsV2InsertWithName");

            var localVarPath = "/api/v2/Associations/insertWithName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodyData != null && bodyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bodyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bodyData; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertWithName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsV2InsertWithNameAsync (Object bodyData)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsV2InsertWithNameAsyncWithHttpInfo(bodyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyData">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsV2InsertWithNameAsyncWithHttpInfo (Object bodyData)
        {
            // verify the required parameter 'bodyData' is set
            if (bodyData == null)
                throw new ApiException(400, "Missing required parameter 'bodyData' when calling AssociationsV2Api->AssociationsV2InsertWithName");

            var localVarPath = "/api/v2/Associations/insertWithName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodyData != null && bodyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bodyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bodyData; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2InsertWithName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns></returns>
        public void AssociationsV2Remove (int? id, int? docnumber)
        {
             AssociationsV2RemoveWithHttpInfo(id, docnumber);
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsV2RemoveWithHttpInfo (int? id, int? docnumber)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Remove");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsV2Api->AssociationsV2Remove");

            var localVarPath = "/api/v2/Associations/{id}/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsV2RemoveAsync (int? id, int? docnumber)
        {
             await AssociationsV2RemoveAsyncWithHttpInfo(id, docnumber);

        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2RemoveAsyncWithHttpInfo (int? id, int? docnumber)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Remove");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsV2Api->AssociationsV2Remove");

            var localVarPath = "/api/v2/Associations/{id}/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns></returns>
        public void AssociationsV2Rename (int? id, Object bodyData)
        {
             AssociationsV2RenameWithHttpInfo(id, bodyData);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsV2RenameWithHttpInfo (int? id, Object bodyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Rename");
            // verify the required parameter 'bodyData' is set
            if (bodyData == null)
                throw new ApiException(400, "Missing required parameter 'bodyData' when calling AssociationsV2Api->AssociationsV2Rename");

            var localVarPath = "/api/v2/Associations/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (bodyData != null && bodyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bodyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bodyData; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsV2RenameAsync (int? id, Object bodyData)
        {
             await AssociationsV2RenameAsyncWithHttpInfo(id, bodyData);

        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to rename</param>
        /// <param name="bodyData">JSON object with 1 property: associationName (new association name)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsV2RenameAsyncWithHttpInfo (int? id, Object bodyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsV2Api->AssociationsV2Rename");
            // verify the required parameter 'bodyData' is set
            if (bodyData == null)
                throw new ApiException(400, "Missing required parameter 'bodyData' when calling AssociationsV2Api->AssociationsV2Rename");

            var localVarPath = "/api/v2/Associations/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (bodyData != null && bodyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bodyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bodyData; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsV2Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
