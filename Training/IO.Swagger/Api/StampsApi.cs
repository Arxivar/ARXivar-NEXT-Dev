/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStampsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call apply stampinstances in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns></returns>
        void StampsApplyStampInstanceFromDocnumber (int? docnumber);

        /// <summary>
        /// This call apply stampinstances in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsApplyStampInstanceFromDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call apply stampinstances in process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns></returns>
        void StampsApplyStampInstanceFromProcessDoc (int? processDocId);

        /// <summary>
        /// This call apply stampinstances in process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsApplyStampInstanceFromProcessDocWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns if user can add virtual stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? StampsCanAddVirtualStamp ();

        /// <summary>
        /// This call returns if user can add virtual stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> StampsCanAddVirtualStampWithHttpInfo ();
        /// <summary>
        /// This call returns if user can apply stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? StampsCanApplyStamp ();

        /// <summary>
        /// This call returns if user can apply stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> StampsCanApplyStampWithHttpInfo ();
        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StampsConvertToPngByDocnumberAndPageIndex (int? docnumber, int? pageIndex);

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StampsConvertToPngByDocnumberAndPageIndexWithHttpInfo (int? docnumber, int? pageIndex);
        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StampsConvertToPngByProcessDocAndPageIndex (int? processDocId, int? pageIndex);

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StampsConvertToPngByProcessDocAndPageIndexWithHttpInfo (int? processDocId, int? pageIndex);
        /// <summary>
        /// This call deletes stampinstances from docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns></returns>
        void StampsDeleteStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toRemove);

        /// <summary>
        /// This call deletes stampinstances from docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsDeleteStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toRemove);
        /// <summary>
        /// This call deletes stampinstances from docnumber for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns></returns>
        void StampsDeleteStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toRemove);

        /// <summary>
        /// This call deletes stampinstances from docnumber for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsDeleteStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toRemove);
        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        List<StampDefinitionDTO> StampsGet ();

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        ApiResponse<List<StampDefinitionDTO>> StampsGetWithHttpInfo ();
        /// <summary>
        /// This call returns the number of pages for pdf document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>int?</returns>
        int? StampsGetPdfPageNumber (int? docnumber);

        /// <summary>
        /// This call returns the number of pages for pdf document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> StampsGetPdfPageNumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the number of pages for pdf document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>int?</returns>
        int? StampsGetPdfPageNumberForProcessDoc (int? processDocId);

        /// <summary>
        /// This call returns the number of pages for pdf document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> StampsGetPdfPageNumberForProcessDocWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        List<StampDefinitionDTO> StampsGetStampsDefinitionByDocnumber (int? docnumber);

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        ApiResponse<List<StampDefinitionDTO>> StampsGetStampsDefinitionByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the stamp definition virtual by a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        List<StampDefinitionDTO> StampsGetStampsDefinitionByProcessDoc (int? processDocId);

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        ApiResponse<List<StampDefinitionDTO>> StampsGetStampsDefinitionByProcessDocWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;StampsInstanceDTO&gt;</returns>
        List<StampsInstanceDTO> StampsGetStampsInstanceByDocnumber (int? docnumber);

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;StampsInstanceDTO&gt;</returns>
        ApiResponse<List<StampsInstanceDTO>> StampsGetStampsInstanceByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the stamp applied virtual on a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>List&lt;StampsInstanceDTO&gt;</returns>
        List<StampsInstanceDTO> StampsGetStampsInstanceByProcessDoc (int? processDocId);

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of List&lt;StampsInstanceDTO&gt;</returns>
        ApiResponse<List<StampsInstanceDTO>> StampsGetStampsInstanceByProcessDocWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call inserts new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns></returns>
        void StampsInsertStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toInsert);

        /// <summary>
        /// This call inserts new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsInsertStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toInsert);
        /// <summary>
        /// This call inserts new stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns></returns>
        void StampsInsertStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toInsert);

        /// <summary>
        /// This call inserts new stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsInsertStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toInsert);
        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StampsRenderStampDefinitionForDocnumber (int? docnumber, StampDefinitionDTO stampDefinition);

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StampsRenderStampDefinitionForDocnumberWithHttpInfo (int? docnumber, StampDefinitionDTO stampDefinition);
        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StampsRenderStampDefinitionForProcessDoc (int? processDocId, StampDefinitionDTO stampDefinition);

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StampsRenderStampDefinitionForProcessDocWithHttpInfo (int? processDocId, StampDefinitionDTO stampDefinition);
        /// <summary>
        /// This call updates new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns></returns>
        void StampsUpdateStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toUpdate);

        /// <summary>
        /// This call updates new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsUpdateStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toUpdate);
        /// <summary>
        /// This call updates stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns></returns>
        void StampsUpdateStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toUpdate);

        /// <summary>
        /// This call updates stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StampsUpdateStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toUpdate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call apply stampinstances in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsApplyStampInstanceFromDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call apply stampinstances in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsApplyStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call apply stampinstances in process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsApplyStampInstanceFromProcessDocAsync (int? processDocId);

        /// <summary>
        /// This call apply stampinstances in process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsApplyStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns if user can add virtual stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> StampsCanAddVirtualStampAsync ();

        /// <summary>
        /// This call returns if user can add virtual stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> StampsCanAddVirtualStampAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns if user can apply stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> StampsCanApplyStampAsync ();

        /// <summary>
        /// This call returns if user can apply stamps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> StampsCanApplyStampAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StampsConvertToPngByDocnumberAndPageIndexAsync (int? docnumber, int? pageIndex);

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsConvertToPngByDocnumberAndPageIndexAsyncWithHttpInfo (int? docnumber, int? pageIndex);
        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StampsConvertToPngByProcessDocAndPageIndexAsync (int? processDocId, int? pageIndex);

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsConvertToPngByProcessDocAndPageIndexAsyncWithHttpInfo (int? processDocId, int? pageIndex);
        /// <summary>
        /// This call deletes stampinstances from docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsDeleteStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toRemove);

        /// <summary>
        /// This call deletes stampinstances from docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsDeleteStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toRemove);
        /// <summary>
        /// This call deletes stampinstances from docnumber for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsDeleteStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toRemove);

        /// <summary>
        /// This call deletes stampinstances from docnumber for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsDeleteStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toRemove);
        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetAsync ();

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the number of pages for pdf document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> StampsGetPdfPageNumberAsync (int? docnumber);

        /// <summary>
        /// This call returns the number of pages for pdf document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> StampsGetPdfPageNumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the number of pages for pdf document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> StampsGetPdfPageNumberForProcessDocAsync (int? processDocId);

        /// <summary>
        /// This call returns the number of pages for pdf document for task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> StampsGetPdfPageNumberForProcessDocAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetStampsDefinitionByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetStampsDefinitionByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the stamp definition virtual by a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetStampsDefinitionByProcessDocAsync (int? processDocId);

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetStampsDefinitionByProcessDocAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;StampsInstanceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StampsInstanceDTO>> StampsGetStampsInstanceByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;StampsInstanceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampsInstanceDTO>>> StampsGetStampsInstanceByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns all the stamp applied virtual on a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of List&lt;StampsInstanceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<StampsInstanceDTO>> StampsGetStampsInstanceByProcessDocAsync (int? processDocId);

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (List&lt;StampsInstanceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampsInstanceDTO>>> StampsGetStampsInstanceByProcessDocAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call inserts new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsInsertStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toInsert);

        /// <summary>
        /// This call inserts new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsInsertStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toInsert);
        /// <summary>
        /// This call inserts new stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsInsertStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toInsert);

        /// <summary>
        /// This call inserts new stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsInsertStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toInsert);
        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StampsRenderStampDefinitionForDocnumberAsync (int? docnumber, StampDefinitionDTO stampDefinition);

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsRenderStampDefinitionForDocnumberAsyncWithHttpInfo (int? docnumber, StampDefinitionDTO stampDefinition);
        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StampsRenderStampDefinitionForProcessDocAsync (int? processDocId, StampDefinitionDTO stampDefinition);

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsRenderStampDefinitionForProcessDocAsyncWithHttpInfo (int? processDocId, StampDefinitionDTO stampDefinition);
        /// <summary>
        /// This call updates new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsUpdateStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toUpdate);

        /// <summary>
        /// This call updates new stampinstances for docnumber
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsUpdateStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toUpdate);
        /// <summary>
        /// This call updates stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StampsUpdateStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toUpdate);

        /// <summary>
        /// This call updates stampinstances for process document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StampsUpdateStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toUpdate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StampsApi : IStampsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StampsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StampsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StampsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call apply stampinstances in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns></returns>
        public void StampsApplyStampInstanceFromDocnumber (int? docnumber)
        {
             StampsApplyStampInstanceFromDocnumberWithHttpInfo(docnumber);
        }

        /// <summary>
        /// This call apply stampinstances in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsApplyStampInstanceFromDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsApplyStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/applyStampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsApplyStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call apply stampinstances in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsApplyStampInstanceFromDocnumberAsync (int? docnumber)
        {
             await StampsApplyStampInstanceFromDocnumberAsyncWithHttpInfo(docnumber);

        }

        /// <summary>
        /// This call apply stampinstances in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsApplyStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsApplyStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/applyStampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsApplyStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call apply stampinstances in process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns></returns>
        public void StampsApplyStampInstanceFromProcessDoc (int? processDocId)
        {
             StampsApplyStampInstanceFromProcessDocWithHttpInfo(processDocId);
        }

        /// <summary>
        /// This call apply stampinstances in process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsApplyStampInstanceFromProcessDocWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsApplyStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/applyStampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsApplyStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call apply stampinstances in process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsApplyStampInstanceFromProcessDocAsync (int? processDocId)
        {
             await StampsApplyStampInstanceFromProcessDocAsyncWithHttpInfo(processDocId);

        }

        /// <summary>
        /// This call apply stampinstances in process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsApplyStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsApplyStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/applyStampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsApplyStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns if user can add virtual stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? StampsCanAddVirtualStamp ()
        {
             ApiResponse<bool?> localVarResponse = StampsCanAddVirtualStampWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if user can add virtual stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > StampsCanAddVirtualStampWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps/canAddVirtualStamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsCanAddVirtualStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if user can add virtual stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> StampsCanAddVirtualStampAsync ()
        {
             ApiResponse<bool?> localVarResponse = await StampsCanAddVirtualStampAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if user can add virtual stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> StampsCanAddVirtualStampAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps/canAddVirtualStamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsCanAddVirtualStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if user can apply stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? StampsCanApplyStamp ()
        {
             ApiResponse<bool?> localVarResponse = StampsCanApplyStampWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if user can apply stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > StampsCanApplyStampWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps/canApplyStamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsCanApplyStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if user can apply stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> StampsCanApplyStampAsync ()
        {
             ApiResponse<bool?> localVarResponse = await StampsCanApplyStampAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if user can apply stamps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> StampsCanApplyStampAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps/canApplyStamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsCanApplyStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StampsConvertToPngByDocnumberAndPageIndex (int? docnumber, int? pageIndex)
        {
             ApiResponse<System.IO.Stream> localVarResponse = StampsConvertToPngByDocnumberAndPageIndexWithHttpInfo(docnumber, pageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > StampsConvertToPngByDocnumberAndPageIndexWithHttpInfo (int? docnumber, int? pageIndex)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsConvertToPngByDocnumberAndPageIndex");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling StampsApi->StampsConvertToPngByDocnumberAndPageIndex");

            var localVarPath = "/api/Stamps/convertToPng/{docnumber}/{pageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", this.Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsConvertToPngByDocnumberAndPageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StampsConvertToPngByDocnumberAndPageIndexAsync (int? docnumber, int? pageIndex)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await StampsConvertToPngByDocnumberAndPageIndexAsyncWithHttpInfo(docnumber, pageIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsConvertToPngByDocnumberAndPageIndexAsyncWithHttpInfo (int? docnumber, int? pageIndex)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsConvertToPngByDocnumberAndPageIndex");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling StampsApi->StampsConvertToPngByDocnumberAndPageIndex");

            var localVarPath = "/api/Stamps/convertToPng/{docnumber}/{pageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", this.Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsConvertToPngByDocnumberAndPageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StampsConvertToPngByProcessDocAndPageIndex (int? processDocId, int? pageIndex)
        {
             ApiResponse<System.IO.Stream> localVarResponse = StampsConvertToPngByProcessDocAndPageIndexWithHttpInfo(processDocId, pageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > StampsConvertToPngByProcessDocAndPageIndexWithHttpInfo (int? processDocId, int? pageIndex)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsConvertToPngByProcessDocAndPageIndex");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling StampsApi->StampsConvertToPngByProcessDocAndPageIndex");

            var localVarPath = "/api/Stamps/convertToPngForTask/{processDocId}/{pageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", this.Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsConvertToPngByProcessDocAndPageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StampsConvertToPngByProcessDocAndPageIndexAsync (int? processDocId, int? pageIndex)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await StampsConvertToPngByProcessDocAndPageIndexAsyncWithHttpInfo(processDocId, pageIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the png file results on convertion from pdf file of task profile 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Process document Identifier</param>
        /// <param name="pageIndex">Page index</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsConvertToPngByProcessDocAndPageIndexAsyncWithHttpInfo (int? processDocId, int? pageIndex)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsConvertToPngByProcessDocAndPageIndex");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling StampsApi->StampsConvertToPngByProcessDocAndPageIndex");

            var localVarPath = "/api/Stamps/convertToPngForTask/{processDocId}/{pageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", this.Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsConvertToPngByProcessDocAndPageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns></returns>
        public void StampsDeleteStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toRemove)
        {
             StampsDeleteStampInstanceFromDocnumberWithHttpInfo(docnumber, toRemove);
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsDeleteStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toRemove)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsDeleteStampInstanceFromDocnumber");
            // verify the required parameter 'toRemove' is set
            if (toRemove == null)
                throw new ApiException(400, "Missing required parameter 'toRemove' when calling StampsApi->StampsDeleteStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toRemove != null && toRemove.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toRemove); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toRemove; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsDeleteStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsDeleteStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toRemove)
        {
             await StampsDeleteStampInstanceFromDocnumberAsyncWithHttpInfo(docnumber, toRemove);

        }

        /// <summary>
        /// This call deletes stampinstances from docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsDeleteStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toRemove)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsDeleteStampInstanceFromDocnumber");
            // verify the required parameter 'toRemove' is set
            if (toRemove == null)
                throw new ApiException(400, "Missing required parameter 'toRemove' when calling StampsApi->StampsDeleteStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toRemove != null && toRemove.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toRemove); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toRemove; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsDeleteStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns></returns>
        public void StampsDeleteStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toRemove)
        {
             StampsDeleteStampInstanceFromProcessDocWithHttpInfo(processDocId, toRemove);
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsDeleteStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toRemove)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsDeleteStampInstanceFromProcessDoc");
            // verify the required parameter 'toRemove' is set
            if (toRemove == null)
                throw new ApiException(400, "Missing required parameter 'toRemove' when calling StampsApi->StampsDeleteStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toRemove != null && toRemove.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toRemove); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toRemove; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsDeleteStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes stampinstances from docnumber for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsDeleteStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toRemove)
        {
             await StampsDeleteStampInstanceFromProcessDocAsyncWithHttpInfo(processDocId, toRemove);

        }

        /// <summary>
        /// This call deletes stampinstances from docnumber for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toRemove"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsDeleteStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toRemove)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsDeleteStampInstanceFromProcessDoc");
            // verify the required parameter 'toRemove' is set
            if (toRemove == null)
                throw new ApiException(400, "Missing required parameter 'toRemove' when calling StampsApi->StampsDeleteStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toRemove != null && toRemove.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toRemove); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toRemove; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsDeleteStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        public List<StampDefinitionDTO> StampsGet ()
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = StampsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        public ApiResponse< List<StampDefinitionDTO> > StampsGetWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetAsync ()
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = await StampsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the type of stamp defined in Arxivar 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns the number of pages for pdf document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>int?</returns>
        public int? StampsGetPdfPageNumber (int? docnumber)
        {
             ApiResponse<int?> localVarResponse = StampsGetPdfPageNumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the number of pages for pdf document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > StampsGetPdfPageNumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetPdfPageNumber");

            var localVarPath = "/api/Stamps/getPdfPageNumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetPdfPageNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns the number of pages for pdf document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> StampsGetPdfPageNumberAsync (int? docnumber)
        {
             ApiResponse<int?> localVarResponse = await StampsGetPdfPageNumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the number of pages for pdf document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> StampsGetPdfPageNumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetPdfPageNumber");

            var localVarPath = "/api/Stamps/getPdfPageNumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetPdfPageNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns the number of pages for pdf document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>int?</returns>
        public int? StampsGetPdfPageNumberForProcessDoc (int? processDocId)
        {
             ApiResponse<int?> localVarResponse = StampsGetPdfPageNumberForProcessDocWithHttpInfo(processDocId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the number of pages for pdf document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > StampsGetPdfPageNumberForProcessDocWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetPdfPageNumberForProcessDoc");

            var localVarPath = "/api/Stamps/getPdfPageNumberForProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetPdfPageNumberForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns the number of pages for pdf document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> StampsGetPdfPageNumberForProcessDocAsync (int? processDocId)
        {
             ApiResponse<int?> localVarResponse = await StampsGetPdfPageNumberForProcessDocAsyncWithHttpInfo(processDocId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the number of pages for pdf document for task 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> StampsGetPdfPageNumberForProcessDocAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetPdfPageNumberForProcessDoc");

            var localVarPath = "/api/Stamps/getPdfPageNumberForProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetPdfPageNumberForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        public List<StampDefinitionDTO> StampsGetStampsDefinitionByDocnumber (int? docnumber)
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = StampsGetStampsDefinitionByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        public ApiResponse< List<StampDefinitionDTO> > StampsGetStampsDefinitionByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetStampsDefinitionByDocnumber");

            var localVarPath = "/api/Stamps/stampDefinitionByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsDefinitionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetStampsDefinitionByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = await StampsGetStampsDefinitionByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetStampsDefinitionByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetStampsDefinitionByDocnumber");

            var localVarPath = "/api/Stamps/stampDefinitionByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsDefinitionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>List&lt;StampDefinitionDTO&gt;</returns>
        public List<StampDefinitionDTO> StampsGetStampsDefinitionByProcessDoc (int? processDocId)
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = StampsGetStampsDefinitionByProcessDocWithHttpInfo(processDocId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of List&lt;StampDefinitionDTO&gt;</returns>
        public ApiResponse< List<StampDefinitionDTO> > StampsGetStampsDefinitionByProcessDocWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetStampsDefinitionByProcessDoc");

            var localVarPath = "/api/Stamps/stampDefinitionByProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsDefinitionByProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of List&lt;StampDefinitionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampDefinitionDTO>> StampsGetStampsDefinitionByProcessDocAsync (int? processDocId)
        {
             ApiResponse<List<StampDefinitionDTO>> localVarResponse = await StampsGetStampsDefinitionByProcessDocAsyncWithHttpInfo(processDocId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the stamp definition virtual by a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (List&lt;StampDefinitionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StampDefinitionDTO>>> StampsGetStampsDefinitionByProcessDocAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetStampsDefinitionByProcessDoc");

            var localVarPath = "/api/Stamps/stampDefinitionByProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsDefinitionByProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampDefinitionDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;StampsInstanceDTO&gt;</returns>
        public List<StampsInstanceDTO> StampsGetStampsInstanceByDocnumber (int? docnumber)
        {
             ApiResponse<List<StampsInstanceDTO>> localVarResponse = StampsGetStampsInstanceByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;StampsInstanceDTO&gt;</returns>
        public ApiResponse< List<StampsInstanceDTO> > StampsGetStampsInstanceByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetStampsInstanceByDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsInstanceByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampsInstanceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampsInstanceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampsInstanceDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;StampsInstanceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampsInstanceDTO>> StampsGetStampsInstanceByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<StampsInstanceDTO>> localVarResponse = await StampsGetStampsInstanceByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;StampsInstanceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StampsInstanceDTO>>> StampsGetStampsInstanceByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsGetStampsInstanceByDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsInstanceByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampsInstanceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampsInstanceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampsInstanceDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>List&lt;StampsInstanceDTO&gt;</returns>
        public List<StampsInstanceDTO> StampsGetStampsInstanceByProcessDoc (int? processDocId)
        {
             ApiResponse<List<StampsInstanceDTO>> localVarResponse = StampsGetStampsInstanceByProcessDocWithHttpInfo(processDocId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>ApiResponse of List&lt;StampsInstanceDTO&gt;</returns>
        public ApiResponse< List<StampsInstanceDTO> > StampsGetStampsInstanceByProcessDocWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetStampsInstanceByProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceByProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsInstanceByProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampsInstanceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampsInstanceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampsInstanceDTO>)));
        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of List&lt;StampsInstanceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampsInstanceDTO>> StampsGetStampsInstanceByProcessDocAsync (int? processDocId)
        {
             ApiResponse<List<StampsInstanceDTO>> localVarResponse = await StampsGetStampsInstanceByProcessDocAsyncWithHttpInfo(processDocId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the stamp applied virtual on a process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <returns>Task of ApiResponse (List&lt;StampsInstanceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StampsInstanceDTO>>> StampsGetStampsInstanceByProcessDocAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsGetStampsInstanceByProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceByProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsGetStampsInstanceByProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StampsInstanceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StampsInstanceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StampsInstanceDTO>)));
        }

        /// <summary>
        /// This call inserts new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns></returns>
        public void StampsInsertStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toInsert)
        {
             StampsInsertStampInstanceFromDocnumberWithHttpInfo(docnumber, toInsert);
        }

        /// <summary>
        /// This call inserts new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsInsertStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toInsert)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsInsertStampInstanceFromDocnumber");
            // verify the required parameter 'toInsert' is set
            if (toInsert == null)
                throw new ApiException(400, "Missing required parameter 'toInsert' when calling StampsApi->StampsInsertStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toInsert != null && toInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsInsertStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsInsertStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toInsert)
        {
             await StampsInsertStampInstanceFromDocnumberAsyncWithHttpInfo(docnumber, toInsert);

        }

        /// <summary>
        /// This call inserts new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsInsertStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toInsert)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsInsertStampInstanceFromDocnumber");
            // verify the required parameter 'toInsert' is set
            if (toInsert == null)
                throw new ApiException(400, "Missing required parameter 'toInsert' when calling StampsApi->StampsInsertStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toInsert != null && toInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsInsertStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts new stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns></returns>
        public void StampsInsertStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toInsert)
        {
             StampsInsertStampInstanceFromProcessDocWithHttpInfo(processDocId, toInsert);
        }

        /// <summary>
        /// This call inserts new stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsInsertStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toInsert)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsInsertStampInstanceFromProcessDoc");
            // verify the required parameter 'toInsert' is set
            if (toInsert == null)
                throw new ApiException(400, "Missing required parameter 'toInsert' when calling StampsApi->StampsInsertStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toInsert != null && toInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsInsertStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts new stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsInsertStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toInsert)
        {
             await StampsInsertStampInstanceFromProcessDocAsyncWithHttpInfo(processDocId, toInsert);

        }

        /// <summary>
        /// This call inserts new stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toInsert"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsInsertStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toInsert)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsInsertStampInstanceFromProcessDoc");
            // verify the required parameter 'toInsert' is set
            if (toInsert == null)
                throw new ApiException(400, "Missing required parameter 'toInsert' when calling StampsApi->StampsInsertStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toInsert != null && toInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsInsertStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StampsRenderStampDefinitionForDocnumber (int? docnumber, StampDefinitionDTO stampDefinition)
        {
             ApiResponse<System.IO.Stream> localVarResponse = StampsRenderStampDefinitionForDocnumberWithHttpInfo(docnumber, stampDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > StampsRenderStampDefinitionForDocnumberWithHttpInfo (int? docnumber, StampDefinitionDTO stampDefinition)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsRenderStampDefinitionForDocnumber");
            // verify the required parameter 'stampDefinition' is set
            if (stampDefinition == null)
                throw new ApiException(400, "Missing required parameter 'stampDefinition' when calling StampsApi->StampsRenderStampDefinitionForDocnumber");

            var localVarPath = "/api/Stamps/renderStampDefinitionForDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (stampDefinition != null && stampDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsRenderStampDefinitionForDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StampsRenderStampDefinitionForDocnumberAsync (int? docnumber, StampDefinitionDTO stampDefinition)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await StampsRenderStampDefinitionForDocnumberAsyncWithHttpInfo(docnumber, stampDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsRenderStampDefinitionForDocnumberAsyncWithHttpInfo (int? docnumber, StampDefinitionDTO stampDefinition)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsRenderStampDefinitionForDocnumber");
            // verify the required parameter 'stampDefinition' is set
            if (stampDefinition == null)
                throw new ApiException(400, "Missing required parameter 'stampDefinition' when calling StampsApi->StampsRenderStampDefinitionForDocnumber");

            var localVarPath = "/api/Stamps/renderStampDefinitionForDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (stampDefinition != null && stampDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsRenderStampDefinitionForDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StampsRenderStampDefinitionForProcessDoc (int? processDocId, StampDefinitionDTO stampDefinition)
        {
             ApiResponse<System.IO.Stream> localVarResponse = StampsRenderStampDefinitionForProcessDocWithHttpInfo(processDocId, stampDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > StampsRenderStampDefinitionForProcessDocWithHttpInfo (int? processDocId, StampDefinitionDTO stampDefinition)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsRenderStampDefinitionForProcessDoc");
            // verify the required parameter 'stampDefinition' is set
            if (stampDefinition == null)
                throw new ApiException(400, "Missing required parameter 'stampDefinition' when calling StampsApi->StampsRenderStampDefinitionForProcessDoc");

            var localVarPath = "/api/Stamps/renderStampDefinitionForProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (stampDefinition != null && stampDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsRenderStampDefinitionForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StampsRenderStampDefinitionForProcessDocAsync (int? processDocId, StampDefinitionDTO stampDefinition)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await StampsRenderStampDefinitionForProcessDocAsyncWithHttpInfo(processDocId, stampDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the generated image for a stamp definition and a processDocId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Workflow Document Identifier</param>
        /// <param name="stampDefinition">Stamp definition object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StampsRenderStampDefinitionForProcessDocAsyncWithHttpInfo (int? processDocId, StampDefinitionDTO stampDefinition)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsRenderStampDefinitionForProcessDoc");
            // verify the required parameter 'stampDefinition' is set
            if (stampDefinition == null)
                throw new ApiException(400, "Missing required parameter 'stampDefinition' when calling StampsApi->StampsRenderStampDefinitionForProcessDoc");

            var localVarPath = "/api/Stamps/renderStampDefinitionForProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (stampDefinition != null && stampDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampDefinition; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsRenderStampDefinitionForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// This call updates new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns></returns>
        public void StampsUpdateStampInstanceFromDocnumber (int? docnumber, List<StampsInstanceDTO> toUpdate)
        {
             StampsUpdateStampInstanceFromDocnumberWithHttpInfo(docnumber, toUpdate);
        }

        /// <summary>
        /// This call updates new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsUpdateStampInstanceFromDocnumberWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toUpdate)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsUpdateStampInstanceFromDocnumber");
            // verify the required parameter 'toUpdate' is set
            if (toUpdate == null)
                throw new ApiException(400, "Missing required parameter 'toUpdate' when calling StampsApi->StampsUpdateStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toUpdate != null && toUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsUpdateStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsUpdateStampInstanceFromDocnumberAsync (int? docnumber, List<StampsInstanceDTO> toUpdate)
        {
             await StampsUpdateStampInstanceFromDocnumberAsyncWithHttpInfo(docnumber, toUpdate);

        }

        /// <summary>
        /// This call updates new stampinstances for docnumber 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsUpdateStampInstanceFromDocnumberAsyncWithHttpInfo (int? docnumber, List<StampsInstanceDTO> toUpdate)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling StampsApi->StampsUpdateStampInstanceFromDocnumber");
            // verify the required parameter 'toUpdate' is set
            if (toUpdate == null)
                throw new ApiException(400, "Missing required parameter 'toUpdate' when calling StampsApi->StampsUpdateStampInstanceFromDocnumber");

            var localVarPath = "/api/Stamps/stampInstanceFromDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (toUpdate != null && toUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsUpdateStampInstanceFromDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns></returns>
        public void StampsUpdateStampInstanceFromProcessDoc (int? processDocId, List<StampsInstanceDTO> toUpdate)
        {
             StampsUpdateStampInstanceFromProcessDocWithHttpInfo(processDocId, toUpdate);
        }

        /// <summary>
        /// This call updates stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StampsUpdateStampInstanceFromProcessDocWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toUpdate)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsUpdateStampInstanceFromProcessDoc");
            // verify the required parameter 'toUpdate' is set
            if (toUpdate == null)
                throw new ApiException(400, "Missing required parameter 'toUpdate' when calling StampsApi->StampsUpdateStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toUpdate != null && toUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsUpdateStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StampsUpdateStampInstanceFromProcessDocAsync (int? processDocId, List<StampsInstanceDTO> toUpdate)
        {
             await StampsUpdateStampInstanceFromProcessDocAsyncWithHttpInfo(processDocId, toUpdate);

        }

        /// <summary>
        /// This call updates stampinstances for process document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId"></param>
        /// <param name="toUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StampsUpdateStampInstanceFromProcessDocAsyncWithHttpInfo (int? processDocId, List<StampsInstanceDTO> toUpdate)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling StampsApi->StampsUpdateStampInstanceFromProcessDoc");
            // verify the required parameter 'toUpdate' is set
            if (toUpdate == null)
                throw new ApiException(400, "Missing required parameter 'toUpdate' when calling StampsApi->StampsUpdateStampInstanceFromProcessDoc");

            var localVarPath = "/api/Stamps/stampInstanceFromProcessDoc/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (toUpdate != null && toUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toUpdate; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StampsUpdateStampInstanceFromProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
