/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BarcodeDTO
    /// </summary>
    [DataContract]
    public partial class BarcodeDTO :  IEquatable<BarcodeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeDTO" /> class.
        /// </summary>
        /// <param name="id">Unique identifier.</param>
        /// <param name="docnumber">Unique identifier for profile.</param>
        /// <param name="printNumber">Number of print.</param>
        /// <param name="readDateTime">Read date and time.</param>
        /// <param name="readedCount">Readed pages count.</param>
        /// <param name="aquisitionState">Possible values:  0: ImportedAndHideDocument  1: WaitDocument  2: ImportedDocument .</param>
        /// <param name="originalFileName">Original file name of associated document.</param>
        /// <param name="documentDate">Associated document date and time.</param>
        /// <param name="documentHash">Hash of associated document.</param>
        /// <param name="barcodeType">Possible values:  0: Document  1: Attachment  2: Revision .</param>
        /// <param name="barcode">Barcode.</param>
        public BarcodeDTO(int? id = default(int?), int? docnumber = default(int?), int? printNumber = default(int?), DateTime? readDateTime = default(DateTime?), int? readedCount = default(int?), int? aquisitionState = default(int?), string originalFileName = default(string), DateTime? documentDate = default(DateTime?), string documentHash = default(string), int? barcodeType = default(int?), string barcode = default(string))
        {
            this.Id = id;
            this.Docnumber = docnumber;
            this.PrintNumber = printNumber;
            this.ReadDateTime = readDateTime;
            this.ReadedCount = readedCount;
            this.AquisitionState = aquisitionState;
            this.OriginalFileName = originalFileName;
            this.DocumentDate = documentDate;
            this.DocumentHash = documentHash;
            this.BarcodeType = barcodeType;
            this.Barcode = barcode;
        }
        
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Unique identifier for profile
        /// </summary>
        /// <value>Unique identifier for profile</value>
        [DataMember(Name="docnumber", EmitDefaultValue=false)]
        public int? Docnumber { get; set; }

        /// <summary>
        /// Number of print
        /// </summary>
        /// <value>Number of print</value>
        [DataMember(Name="printNumber", EmitDefaultValue=false)]
        public int? PrintNumber { get; set; }

        /// <summary>
        /// Read date and time
        /// </summary>
        /// <value>Read date and time</value>
        [DataMember(Name="readDateTime", EmitDefaultValue=false)]
        public DateTime? ReadDateTime { get; set; }

        /// <summary>
        /// Readed pages count
        /// </summary>
        /// <value>Readed pages count</value>
        [DataMember(Name="readedCount", EmitDefaultValue=false)]
        public int? ReadedCount { get; set; }

        /// <summary>
        /// Possible values:  0: ImportedAndHideDocument  1: WaitDocument  2: ImportedDocument 
        /// </summary>
        /// <value>Possible values:  0: ImportedAndHideDocument  1: WaitDocument  2: ImportedDocument </value>
        [DataMember(Name="aquisitionState", EmitDefaultValue=false)]
        public int? AquisitionState { get; set; }

        /// <summary>
        /// Original file name of associated document
        /// </summary>
        /// <value>Original file name of associated document</value>
        [DataMember(Name="originalFileName", EmitDefaultValue=false)]
        public string OriginalFileName { get; set; }

        /// <summary>
        /// Associated document date and time
        /// </summary>
        /// <value>Associated document date and time</value>
        [DataMember(Name="documentDate", EmitDefaultValue=false)]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Hash of associated document
        /// </summary>
        /// <value>Hash of associated document</value>
        [DataMember(Name="documentHash", EmitDefaultValue=false)]
        public string DocumentHash { get; set; }

        /// <summary>
        /// Possible values:  0: Document  1: Attachment  2: Revision 
        /// </summary>
        /// <value>Possible values:  0: Document  1: Attachment  2: Revision </value>
        [DataMember(Name="barcodeType", EmitDefaultValue=false)]
        public int? BarcodeType { get; set; }

        /// <summary>
        /// Barcode
        /// </summary>
        /// <value>Barcode</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Docnumber: ").Append(Docnumber).Append("\n");
            sb.Append("  PrintNumber: ").Append(PrintNumber).Append("\n");
            sb.Append("  ReadDateTime: ").Append(ReadDateTime).Append("\n");
            sb.Append("  ReadedCount: ").Append(ReadedCount).Append("\n");
            sb.Append("  AquisitionState: ").Append(AquisitionState).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  DocumentHash: ").Append(DocumentHash).Append("\n");
            sb.Append("  BarcodeType: ").Append(BarcodeType).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeDTO);
        }

        /// <summary>
        /// Returns true if BarcodeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Docnumber == input.Docnumber ||
                    (this.Docnumber != null &&
                    this.Docnumber.Equals(input.Docnumber))
                ) && 
                (
                    this.PrintNumber == input.PrintNumber ||
                    (this.PrintNumber != null &&
                    this.PrintNumber.Equals(input.PrintNumber))
                ) && 
                (
                    this.ReadDateTime == input.ReadDateTime ||
                    (this.ReadDateTime != null &&
                    this.ReadDateTime.Equals(input.ReadDateTime))
                ) && 
                (
                    this.ReadedCount == input.ReadedCount ||
                    (this.ReadedCount != null &&
                    this.ReadedCount.Equals(input.ReadedCount))
                ) && 
                (
                    this.AquisitionState == input.AquisitionState ||
                    (this.AquisitionState != null &&
                    this.AquisitionState.Equals(input.AquisitionState))
                ) && 
                (
                    this.OriginalFileName == input.OriginalFileName ||
                    (this.OriginalFileName != null &&
                    this.OriginalFileName.Equals(input.OriginalFileName))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.DocumentHash == input.DocumentHash ||
                    (this.DocumentHash != null &&
                    this.DocumentHash.Equals(input.DocumentHash))
                ) && 
                (
                    this.BarcodeType == input.BarcodeType ||
                    (this.BarcodeType != null &&
                    this.BarcodeType.Equals(input.BarcodeType))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Docnumber != null)
                    hashCode = hashCode * 59 + this.Docnumber.GetHashCode();
                if (this.PrintNumber != null)
                    hashCode = hashCode * 59 + this.PrintNumber.GetHashCode();
                if (this.ReadDateTime != null)
                    hashCode = hashCode * 59 + this.ReadDateTime.GetHashCode();
                if (this.ReadedCount != null)
                    hashCode = hashCode * 59 + this.ReadedCount.GetHashCode();
                if (this.AquisitionState != null)
                    hashCode = hashCode * 59 + this.AquisitionState.GetHashCode();
                if (this.OriginalFileName != null)
                    hashCode = hashCode * 59 + this.OriginalFileName.GetHashCode();
                if (this.DocumentDate != null)
                    hashCode = hashCode * 59 + this.DocumentDate.GetHashCode();
                if (this.DocumentHash != null)
                    hashCode = hashCode * 59 + this.DocumentHash.GetHashCode();
                if (this.BarcodeType != null)
                    hashCode = hashCode * 59 + this.BarcodeType.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
