/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class of signature certificate
    /// </summary>
    [DataContract]
    public partial class SignCertTypeDTO :  IEquatable<SignCertTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCertTypeDTO" /> class.
        /// </summary>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba .</param>
        /// <param name="description">Description.</param>
        /// <param name="remoteProvider">Is Remote Provider.</param>
        /// <param name="useRelatedCert">Use Related Certificate.</param>
        public SignCertTypeDTO(int? signCertType = default(int?), string description = default(string), bool? remoteProvider = default(bool?), bool? useRelatedCert = default(bool?))
        {
            this.SignCertType = signCertType;
            this.Description = description;
            this.RemoteProvider = remoteProvider;
            this.UseRelatedCert = useRelatedCert;
        }
        
        /// <summary>
        /// Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba 
        /// </summary>
        /// <value>Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </value>
        [DataMember(Name="signCertType", EmitDefaultValue=false)]
        public int? SignCertType { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Is Remote Provider
        /// </summary>
        /// <value>Is Remote Provider</value>
        [DataMember(Name="remoteProvider", EmitDefaultValue=false)]
        public bool? RemoteProvider { get; set; }

        /// <summary>
        /// Use Related Certificate
        /// </summary>
        /// <value>Use Related Certificate</value>
        [DataMember(Name="useRelatedCert", EmitDefaultValue=false)]
        public bool? UseRelatedCert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignCertTypeDTO {\n");
            sb.Append("  SignCertType: ").Append(SignCertType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RemoteProvider: ").Append(RemoteProvider).Append("\n");
            sb.Append("  UseRelatedCert: ").Append(UseRelatedCert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignCertTypeDTO);
        }

        /// <summary>
        /// Returns true if SignCertTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SignCertTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignCertTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignCertType == input.SignCertType ||
                    (this.SignCertType != null &&
                    this.SignCertType.Equals(input.SignCertType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RemoteProvider == input.RemoteProvider ||
                    (this.RemoteProvider != null &&
                    this.RemoteProvider.Equals(input.RemoteProvider))
                ) && 
                (
                    this.UseRelatedCert == input.UseRelatedCert ||
                    (this.UseRelatedCert != null &&
                    this.UseRelatedCert.Equals(input.UseRelatedCert))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignCertType != null)
                    hashCode = hashCode * 59 + this.SignCertType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RemoteProvider != null)
                    hashCode = hashCode * 59 + this.RemoteProvider.GetHashCode();
                if (this.UseRelatedCert != null)
                    hashCode = hashCode * 59 + this.UseRelatedCert.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
