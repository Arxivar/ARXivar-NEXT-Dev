/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportSecurityDTO
    /// </summary>
    [DataContract]
    public partial class ReportSecurityDTO :  IEquatable<ReportSecurityDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportSecurityDTO" /> class.
        /// </summary>
        /// <param name="canExecute">Can execute report.</param>
        /// <param name="canUpdate">Can update report.</param>
        /// <param name="canDelete">Can delete report.</param>
        /// <param name="canManagerSecurity">Can Manage security.</param>
        public ReportSecurityDTO(bool? canExecute = default(bool?), bool? canUpdate = default(bool?), bool? canDelete = default(bool?), bool? canManagerSecurity = default(bool?))
        {
            this.CanExecute = canExecute;
            this.CanUpdate = canUpdate;
            this.CanDelete = canDelete;
            this.CanManagerSecurity = canManagerSecurity;
        }
        
        /// <summary>
        /// Can execute report
        /// </summary>
        /// <value>Can execute report</value>
        [DataMember(Name="canExecute", EmitDefaultValue=false)]
        public bool? CanExecute { get; set; }

        /// <summary>
        /// Can update report
        /// </summary>
        /// <value>Can update report</value>
        [DataMember(Name="canUpdate", EmitDefaultValue=false)]
        public bool? CanUpdate { get; set; }

        /// <summary>
        /// Can delete report
        /// </summary>
        /// <value>Can delete report</value>
        [DataMember(Name="canDelete", EmitDefaultValue=false)]
        public bool? CanDelete { get; set; }

        /// <summary>
        /// Can Manage security
        /// </summary>
        /// <value>Can Manage security</value>
        [DataMember(Name="canManagerSecurity", EmitDefaultValue=false)]
        public bool? CanManagerSecurity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportSecurityDTO {\n");
            sb.Append("  CanExecute: ").Append(CanExecute).Append("\n");
            sb.Append("  CanUpdate: ").Append(CanUpdate).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("  CanManagerSecurity: ").Append(CanManagerSecurity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportSecurityDTO);
        }

        /// <summary>
        /// Returns true if ReportSecurityDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportSecurityDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportSecurityDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanExecute == input.CanExecute ||
                    (this.CanExecute != null &&
                    this.CanExecute.Equals(input.CanExecute))
                ) && 
                (
                    this.CanUpdate == input.CanUpdate ||
                    (this.CanUpdate != null &&
                    this.CanUpdate.Equals(input.CanUpdate))
                ) && 
                (
                    this.CanDelete == input.CanDelete ||
                    (this.CanDelete != null &&
                    this.CanDelete.Equals(input.CanDelete))
                ) && 
                (
                    this.CanManagerSecurity == input.CanManagerSecurity ||
                    (this.CanManagerSecurity != null &&
                    this.CanManagerSecurity.Equals(input.CanManagerSecurity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanExecute != null)
                    hashCode = hashCode * 59 + this.CanExecute.GetHashCode();
                if (this.CanUpdate != null)
                    hashCode = hashCode * 59 + this.CanUpdate.GetHashCode();
                if (this.CanDelete != null)
                    hashCode = hashCode * 59 + this.CanDelete.GetHashCode();
                if (this.CanManagerSecurity != null)
                    hashCode = hashCode * 59 + this.CanManagerSecurity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
