/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LicenseModuleInstallation
    /// </summary>
    [DataContract]
    public partial class LicenseModuleInstallation :  IEquatable<LicenseModuleInstallation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseModuleInstallation" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="specification">specification.</param>
        /// <param name="machineKey">machineKey.</param>
        /// <param name="utcDateTime">utcDateTime.</param>
        /// <param name="version">version.</param>
        /// <param name="versionString">versionString.</param>
        /// <param name="state">state.</param>
        public LicenseModuleInstallation(string name = default(string), string specification = default(string), string machineKey = default(string), DateTime? utcDateTime = default(DateTime?), Version version = default(Version), string versionString = default(string), string state = default(string))
        {
            this.Name = name;
            this.Specification = specification;
            this.MachineKey = machineKey;
            this.UtcDateTime = utcDateTime;
            this.Version = version;
            this.VersionString = versionString;
            this.State = state;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Specification
        /// </summary>
        [DataMember(Name="specification", EmitDefaultValue=false)]
        public string Specification { get; set; }

        /// <summary>
        /// Gets or Sets MachineKey
        /// </summary>
        [DataMember(Name="machineKey", EmitDefaultValue=false)]
        public string MachineKey { get; set; }

        /// <summary>
        /// Gets or Sets UtcDateTime
        /// </summary>
        [DataMember(Name="utcDateTime", EmitDefaultValue=false)]
        public DateTime? UtcDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or Sets VersionString
        /// </summary>
        [DataMember(Name="versionString", EmitDefaultValue=false)]
        public string VersionString { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseModuleInstallation {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Specification: ").Append(Specification).Append("\n");
            sb.Append("  MachineKey: ").Append(MachineKey).Append("\n");
            sb.Append("  UtcDateTime: ").Append(UtcDateTime).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionString: ").Append(VersionString).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseModuleInstallation);
        }

        /// <summary>
        /// Returns true if LicenseModuleInstallation instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseModuleInstallation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseModuleInstallation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Specification == input.Specification ||
                    (this.Specification != null &&
                    this.Specification.Equals(input.Specification))
                ) && 
                (
                    this.MachineKey == input.MachineKey ||
                    (this.MachineKey != null &&
                    this.MachineKey.Equals(input.MachineKey))
                ) && 
                (
                    this.UtcDateTime == input.UtcDateTime ||
                    (this.UtcDateTime != null &&
                    this.UtcDateTime.Equals(input.UtcDateTime))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.VersionString == input.VersionString ||
                    (this.VersionString != null &&
                    this.VersionString.Equals(input.VersionString))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Specification != null)
                    hashCode = hashCode * 59 + this.Specification.GetHashCode();
                if (this.MachineKey != null)
                    hashCode = hashCode * 59 + this.MachineKey.GetHashCode();
                if (this.UtcDateTime != null)
                    hashCode = hashCode * 59 + this.UtcDateTime.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.VersionString != null)
                    hashCode = hashCode * 59 + this.VersionString.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
