/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportParamDetailDTO
    /// </summary>
    [DataContract]
    public partial class ReportParamDetailDTO :  IEquatable<ReportParamDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportParamDetailDTO" /> class.
        /// </summary>
        /// <param name="tableId">tableId.</param>
        /// <param name="tableDescription">tableDescription.</param>
        /// <param name="columnId">columnId.</param>
        /// <param name="columnDescription">columnDescription.</param>
        public ReportParamDetailDTO(string tableId = default(string), string tableDescription = default(string), string columnId = default(string), string columnDescription = default(string))
        {
            this.TableId = tableId;
            this.TableDescription = tableDescription;
            this.ColumnId = columnId;
            this.ColumnDescription = columnDescription;
        }
        
        /// <summary>
        /// Gets or Sets TableId
        /// </summary>
        [DataMember(Name="tableId", EmitDefaultValue=false)]
        public string TableId { get; set; }

        /// <summary>
        /// Gets or Sets TableDescription
        /// </summary>
        [DataMember(Name="tableDescription", EmitDefaultValue=false)]
        public string TableDescription { get; set; }

        /// <summary>
        /// Gets or Sets ColumnId
        /// </summary>
        [DataMember(Name="columnId", EmitDefaultValue=false)]
        public string ColumnId { get; set; }

        /// <summary>
        /// Gets or Sets ColumnDescription
        /// </summary>
        [DataMember(Name="columnDescription", EmitDefaultValue=false)]
        public string ColumnDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportParamDetailDTO {\n");
            sb.Append("  TableId: ").Append(TableId).Append("\n");
            sb.Append("  TableDescription: ").Append(TableDescription).Append("\n");
            sb.Append("  ColumnId: ").Append(ColumnId).Append("\n");
            sb.Append("  ColumnDescription: ").Append(ColumnDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportParamDetailDTO);
        }

        /// <summary>
        /// Returns true if ReportParamDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportParamDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportParamDetailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableId == input.TableId ||
                    (this.TableId != null &&
                    this.TableId.Equals(input.TableId))
                ) && 
                (
                    this.TableDescription == input.TableDescription ||
                    (this.TableDescription != null &&
                    this.TableDescription.Equals(input.TableDescription))
                ) && 
                (
                    this.ColumnId == input.ColumnId ||
                    (this.ColumnId != null &&
                    this.ColumnId.Equals(input.ColumnId))
                ) && 
                (
                    this.ColumnDescription == input.ColumnDescription ||
                    (this.ColumnDescription != null &&
                    this.ColumnDescription.Equals(input.ColumnDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableId != null)
                    hashCode = hashCode * 59 + this.TableId.GetHashCode();
                if (this.TableDescription != null)
                    hashCode = hashCode * 59 + this.TableDescription.GetHashCode();
                if (this.ColumnId != null)
                    hashCode = hashCode * 59 + this.ColumnId.GetHashCode();
                if (this.ColumnDescription != null)
                    hashCode = hashCode * 59 + this.ColumnDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
