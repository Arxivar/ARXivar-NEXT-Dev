/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Configuration parameters for mail plugin
    /// </summary>
    [DataContract]
    public partial class MailPluginConfigurationDTO :  IEquatable<MailPluginConfigurationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailPluginConfigurationDTO" /> class.
        /// </summary>
        /// <param name="incomingMail">Incoming mail is enable.</param>
        /// <param name="internalOutcomingMail">Internal outcoming mail is enabled.</param>
        /// <param name="externalOutcomingMail">External outcoming mail is enabled.</param>
        /// <param name="useUnicode">Use unicode format when saving emails.</param>
        /// <param name="incomingSenderWhiteList">Incoming sender white list. If empty, all senders are allowed.</param>
        public MailPluginConfigurationDTO(bool? incomingMail = default(bool?), bool? internalOutcomingMail = default(bool?), bool? externalOutcomingMail = default(bool?), bool? useUnicode = default(bool?), List<string> incomingSenderWhiteList = default(List<string>))
        {
            this.IncomingMail = incomingMail;
            this.InternalOutcomingMail = internalOutcomingMail;
            this.ExternalOutcomingMail = externalOutcomingMail;
            this.UseUnicode = useUnicode;
            this.IncomingSenderWhiteList = incomingSenderWhiteList;
        }
        
        /// <summary>
        /// Incoming mail is enable
        /// </summary>
        /// <value>Incoming mail is enable</value>
        [DataMember(Name="incomingMail", EmitDefaultValue=false)]
        public bool? IncomingMail { get; set; }

        /// <summary>
        /// Internal outcoming mail is enabled
        /// </summary>
        /// <value>Internal outcoming mail is enabled</value>
        [DataMember(Name="internalOutcomingMail", EmitDefaultValue=false)]
        public bool? InternalOutcomingMail { get; set; }

        /// <summary>
        /// External outcoming mail is enabled
        /// </summary>
        /// <value>External outcoming mail is enabled</value>
        [DataMember(Name="externalOutcomingMail", EmitDefaultValue=false)]
        public bool? ExternalOutcomingMail { get; set; }

        /// <summary>
        /// Use unicode format when saving emails
        /// </summary>
        /// <value>Use unicode format when saving emails</value>
        [DataMember(Name="useUnicode", EmitDefaultValue=false)]
        public bool? UseUnicode { get; set; }

        /// <summary>
        /// Incoming sender white list. If empty, all senders are allowed
        /// </summary>
        /// <value>Incoming sender white list. If empty, all senders are allowed</value>
        [DataMember(Name="incomingSenderWhiteList", EmitDefaultValue=false)]
        public List<string> IncomingSenderWhiteList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailPluginConfigurationDTO {\n");
            sb.Append("  IncomingMail: ").Append(IncomingMail).Append("\n");
            sb.Append("  InternalOutcomingMail: ").Append(InternalOutcomingMail).Append("\n");
            sb.Append("  ExternalOutcomingMail: ").Append(ExternalOutcomingMail).Append("\n");
            sb.Append("  UseUnicode: ").Append(UseUnicode).Append("\n");
            sb.Append("  IncomingSenderWhiteList: ").Append(IncomingSenderWhiteList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailPluginConfigurationDTO);
        }

        /// <summary>
        /// Returns true if MailPluginConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MailPluginConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailPluginConfigurationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncomingMail == input.IncomingMail ||
                    (this.IncomingMail != null &&
                    this.IncomingMail.Equals(input.IncomingMail))
                ) && 
                (
                    this.InternalOutcomingMail == input.InternalOutcomingMail ||
                    (this.InternalOutcomingMail != null &&
                    this.InternalOutcomingMail.Equals(input.InternalOutcomingMail))
                ) && 
                (
                    this.ExternalOutcomingMail == input.ExternalOutcomingMail ||
                    (this.ExternalOutcomingMail != null &&
                    this.ExternalOutcomingMail.Equals(input.ExternalOutcomingMail))
                ) && 
                (
                    this.UseUnicode == input.UseUnicode ||
                    (this.UseUnicode != null &&
                    this.UseUnicode.Equals(input.UseUnicode))
                ) && 
                (
                    this.IncomingSenderWhiteList == input.IncomingSenderWhiteList ||
                    this.IncomingSenderWhiteList != null &&
                    this.IncomingSenderWhiteList.SequenceEqual(input.IncomingSenderWhiteList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncomingMail != null)
                    hashCode = hashCode * 59 + this.IncomingMail.GetHashCode();
                if (this.InternalOutcomingMail != null)
                    hashCode = hashCode * 59 + this.InternalOutcomingMail.GetHashCode();
                if (this.ExternalOutcomingMail != null)
                    hashCode = hashCode * 59 + this.ExternalOutcomingMail.GetHashCode();
                if (this.UseUnicode != null)
                    hashCode = hashCode * 59 + this.UseUnicode.GetHashCode();
                if (this.IncomingSenderWhiteList != null)
                    hashCode = hashCode * 59 + this.IncomingSenderWhiteList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
