/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LogonTicketDto
    /// </summary>
    [DataContract]
    public partial class LogonTicketDto :  IEquatable<LogonTicketDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogonTicketDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="requestorUserId">requestorUserId.</param>
        /// <param name="validFrom">validFrom.</param>
        /// <param name="validTo">validTo.</param>
        /// <param name="useMaxCount">useMaxCount.</param>
        /// <param name="useCount">useCount.</param>
        /// <param name="logonTicket">logonTicket.</param>
        /// <param name="lastUpdate">lastUpdate.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="requestIp">requestIp.</param>
        /// <param name="scope">scope.</param>
        /// <param name="lang">lang.</param>
        public LogonTicketDto(int? id = default(int?), int? userId = default(int?), int? requestorUserId = default(int?), DateTime? validFrom = default(DateTime?), DateTime? validTo = default(DateTime?), int? useMaxCount = default(int?), int? useCount = default(int?), string logonTicket = default(string), DateTime? lastUpdate = default(DateTime?), string clientId = default(string), string requestIp = default(string), string scope = default(string), string lang = default(string))
        {
            this.Id = id;
            this.UserId = userId;
            this.RequestorUserId = requestorUserId;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            this.UseMaxCount = useMaxCount;
            this.UseCount = useCount;
            this.LogonTicket = logonTicket;
            this.LastUpdate = lastUpdate;
            this.ClientId = clientId;
            this.RequestIp = requestIp;
            this.Scope = scope;
            this.Lang = lang;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets RequestorUserId
        /// </summary>
        [DataMember(Name="requestorUserId", EmitDefaultValue=false)]
        public int? RequestorUserId { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets UseMaxCount
        /// </summary>
        [DataMember(Name="useMaxCount", EmitDefaultValue=false)]
        public int? UseMaxCount { get; set; }

        /// <summary>
        /// Gets or Sets UseCount
        /// </summary>
        [DataMember(Name="useCount", EmitDefaultValue=false)]
        public int? UseCount { get; set; }

        /// <summary>
        /// Gets or Sets LogonTicket
        /// </summary>
        [DataMember(Name="logonTicket", EmitDefaultValue=false)]
        public string LogonTicket { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name="lastUpdate", EmitDefaultValue=false)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets RequestIp
        /// </summary>
        [DataMember(Name="requestIp", EmitDefaultValue=false)]
        public string RequestIp { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogonTicketDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RequestorUserId: ").Append(RequestorUserId).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  UseMaxCount: ").Append(UseMaxCount).Append("\n");
            sb.Append("  UseCount: ").Append(UseCount).Append("\n");
            sb.Append("  LogonTicket: ").Append(LogonTicket).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  RequestIp: ").Append(RequestIp).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogonTicketDto);
        }

        /// <summary>
        /// Returns true if LogonTicketDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LogonTicketDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogonTicketDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.RequestorUserId == input.RequestorUserId ||
                    (this.RequestorUserId != null &&
                    this.RequestorUserId.Equals(input.RequestorUserId))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.UseMaxCount == input.UseMaxCount ||
                    (this.UseMaxCount != null &&
                    this.UseMaxCount.Equals(input.UseMaxCount))
                ) && 
                (
                    this.UseCount == input.UseCount ||
                    (this.UseCount != null &&
                    this.UseCount.Equals(input.UseCount))
                ) && 
                (
                    this.LogonTicket == input.LogonTicket ||
                    (this.LogonTicket != null &&
                    this.LogonTicket.Equals(input.LogonTicket))
                ) && 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.RequestIp == input.RequestIp ||
                    (this.RequestIp != null &&
                    this.RequestIp.Equals(input.RequestIp))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.RequestorUserId != null)
                    hashCode = hashCode * 59 + this.RequestorUserId.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.UseMaxCount != null)
                    hashCode = hashCode * 59 + this.UseMaxCount.GetHashCode();
                if (this.UseCount != null)
                    hashCode = hashCode * 59 + this.UseCount.GetHashCode();
                if (this.LogonTicket != null)
                    hashCode = hashCode * 59 + this.LogonTicket.GetHashCode();
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.RequestIp != null)
                    hashCode = hashCode * 59 + this.RequestIp.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
