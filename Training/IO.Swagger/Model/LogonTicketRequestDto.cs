/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LogonTicketRequestDto
    /// </summary>
    [DataContract]
    public partial class LogonTicketRequestDto :  IEquatable<LogonTicketRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogonTicketRequestDto" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="impersonateExternalId">impersonateExternalId.</param>
        /// <param name="maxUseCount">maxUseCount.</param>
        /// <param name="validTo">validTo.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientSecret">clientSecret.</param>
        /// <param name="clientIpAddress">clientIpAddress.</param>
        /// <param name="scope">scope.</param>
        /// <param name="lang">lang.</param>
        public LogonTicketRequestDto(int? userId = default(int?), string impersonateExternalId = default(string), int? maxUseCount = default(int?), DateTime? validTo = default(DateTime?), string clientId = default(string), string clientSecret = default(string), string clientIpAddress = default(string), string scope = default(string), string lang = default(string))
        {
            this.UserId = userId;
            this.ImpersonateExternalId = impersonateExternalId;
            this.MaxUseCount = maxUseCount;
            this.ValidTo = validTo;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.ClientIpAddress = clientIpAddress;
            this.Scope = scope;
            this.Lang = lang;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonateExternalId
        /// </summary>
        [DataMember(Name="impersonateExternalId", EmitDefaultValue=false)]
        public string ImpersonateExternalId { get; set; }

        /// <summary>
        /// Gets or Sets MaxUseCount
        /// </summary>
        [DataMember(Name="maxUseCount", EmitDefaultValue=false)]
        public int? MaxUseCount { get; set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets ClientIpAddress
        /// </summary>
        [DataMember(Name="clientIpAddress", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogonTicketRequestDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ImpersonateExternalId: ").Append(ImpersonateExternalId).Append("\n");
            sb.Append("  MaxUseCount: ").Append(MaxUseCount).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogonTicketRequestDto);
        }

        /// <summary>
        /// Returns true if LogonTicketRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LogonTicketRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogonTicketRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ImpersonateExternalId == input.ImpersonateExternalId ||
                    (this.ImpersonateExternalId != null &&
                    this.ImpersonateExternalId.Equals(input.ImpersonateExternalId))
                ) && 
                (
                    this.MaxUseCount == input.MaxUseCount ||
                    (this.MaxUseCount != null &&
                    this.MaxUseCount.Equals(input.MaxUseCount))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.ClientIpAddress == input.ClientIpAddress ||
                    (this.ClientIpAddress != null &&
                    this.ClientIpAddress.Equals(input.ClientIpAddress))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ImpersonateExternalId != null)
                    hashCode = hashCode * 59 + this.ImpersonateExternalId.GetHashCode();
                if (this.MaxUseCount != null)
                    hashCode = hashCode * 59 + this.MaxUseCount.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.ClientIpAddress != null)
                    hashCode = hashCode * 59 + this.ClientIpAddress.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
