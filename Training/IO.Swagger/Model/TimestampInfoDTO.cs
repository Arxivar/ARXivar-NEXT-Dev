/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TimestampInfoDTO
    /// </summary>
    [DataContract]
    public partial class TimestampInfoDTO :  IEquatable<TimestampInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampInfoDTO" /> class.
        /// </summary>
        /// <param name="timestampSignatureInfo">timestampSignatureInfo.</param>
        /// <param name="isValid">isValid.</param>
        /// <param name="timestampValidationMessageList">timestampValidationMessageList.</param>
        /// <param name="timestampTimeUtc">timestampTimeUtc.</param>
        /// <param name="accurancySeconds">accurancySeconds.</param>
        /// <param name="hashAlgorithm">hashAlgorithm.</param>
        /// <param name="messageImprintDigest">messageImprintDigest.</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="policy">policy.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="tsa">tsa.</param>
        public TimestampInfoDTO(SignatureInfoDTO timestampSignatureInfo = default(SignatureInfoDTO), bool? isValid = default(bool?), List<ValidationMessageDTO> timestampValidationMessageList = default(List<ValidationMessageDTO>), DateTime? timestampTimeUtc = default(DateTime?), string accurancySeconds = default(string), IdValuePairDTO hashAlgorithm = default(IdValuePairDTO), string messageImprintDigest = default(string), string nonce = default(string), string policy = default(string), string serialNumber = default(string), string tsa = default(string))
        {
            this.TimestampSignatureInfo = timestampSignatureInfo;
            this.IsValid = isValid;
            this.TimestampValidationMessageList = timestampValidationMessageList;
            this.TimestampTimeUtc = timestampTimeUtc;
            this.AccurancySeconds = accurancySeconds;
            this.HashAlgorithm = hashAlgorithm;
            this.MessageImprintDigest = messageImprintDigest;
            this.Nonce = nonce;
            this.Policy = policy;
            this.SerialNumber = serialNumber;
            this.Tsa = tsa;
        }
        
        /// <summary>
        /// Gets or Sets TimestampSignatureInfo
        /// </summary>
        [DataMember(Name="timestampSignatureInfo", EmitDefaultValue=false)]
        public SignatureInfoDTO TimestampSignatureInfo { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets TimestampValidationMessageList
        /// </summary>
        [DataMember(Name="timestampValidationMessageList", EmitDefaultValue=false)]
        public List<ValidationMessageDTO> TimestampValidationMessageList { get; set; }

        /// <summary>
        /// Gets or Sets TimestampTimeUtc
        /// </summary>
        [DataMember(Name="timestampTimeUtc", EmitDefaultValue=false)]
        public DateTime? TimestampTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets AccurancySeconds
        /// </summary>
        [DataMember(Name="accurancySeconds", EmitDefaultValue=false)]
        public string AccurancySeconds { get; set; }

        /// <summary>
        /// Gets or Sets HashAlgorithm
        /// </summary>
        [DataMember(Name="hashAlgorithm", EmitDefaultValue=false)]
        public IdValuePairDTO HashAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets MessageImprintDigest
        /// </summary>
        [DataMember(Name="messageImprintDigest", EmitDefaultValue=false)]
        public string MessageImprintDigest { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name="nonce", EmitDefaultValue=false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public string Policy { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Tsa
        /// </summary>
        [DataMember(Name="tsa", EmitDefaultValue=false)]
        public string Tsa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimestampInfoDTO {\n");
            sb.Append("  TimestampSignatureInfo: ").Append(TimestampSignatureInfo).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  TimestampValidationMessageList: ").Append(TimestampValidationMessageList).Append("\n");
            sb.Append("  TimestampTimeUtc: ").Append(TimestampTimeUtc).Append("\n");
            sb.Append("  AccurancySeconds: ").Append(AccurancySeconds).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("  MessageImprintDigest: ").Append(MessageImprintDigest).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Tsa: ").Append(Tsa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimestampInfoDTO);
        }

        /// <summary>
        /// Returns true if TimestampInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TimestampInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimestampInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimestampSignatureInfo == input.TimestampSignatureInfo ||
                    (this.TimestampSignatureInfo != null &&
                    this.TimestampSignatureInfo.Equals(input.TimestampSignatureInfo))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.TimestampValidationMessageList == input.TimestampValidationMessageList ||
                    this.TimestampValidationMessageList != null &&
                    this.TimestampValidationMessageList.SequenceEqual(input.TimestampValidationMessageList)
                ) && 
                (
                    this.TimestampTimeUtc == input.TimestampTimeUtc ||
                    (this.TimestampTimeUtc != null &&
                    this.TimestampTimeUtc.Equals(input.TimestampTimeUtc))
                ) && 
                (
                    this.AccurancySeconds == input.AccurancySeconds ||
                    (this.AccurancySeconds != null &&
                    this.AccurancySeconds.Equals(input.AccurancySeconds))
                ) && 
                (
                    this.HashAlgorithm == input.HashAlgorithm ||
                    (this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(input.HashAlgorithm))
                ) && 
                (
                    this.MessageImprintDigest == input.MessageImprintDigest ||
                    (this.MessageImprintDigest != null &&
                    this.MessageImprintDigest.Equals(input.MessageImprintDigest))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Tsa == input.Tsa ||
                    (this.Tsa != null &&
                    this.Tsa.Equals(input.Tsa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimestampSignatureInfo != null)
                    hashCode = hashCode * 59 + this.TimestampSignatureInfo.GetHashCode();
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.TimestampValidationMessageList != null)
                    hashCode = hashCode * 59 + this.TimestampValidationMessageList.GetHashCode();
                if (this.TimestampTimeUtc != null)
                    hashCode = hashCode * 59 + this.TimestampTimeUtc.GetHashCode();
                if (this.AccurancySeconds != null)
                    hashCode = hashCode * 59 + this.AccurancySeconds.GetHashCode();
                if (this.HashAlgorithm != null)
                    hashCode = hashCode * 59 + this.HashAlgorithm.GetHashCode();
                if (this.MessageImprintDigest != null)
                    hashCode = hashCode * 59 + this.MessageImprintDigest.GetHashCode();
                if (this.Nonce != null)
                    hashCode = hashCode * 59 + this.Nonce.GetHashCode();
                if (this.Policy != null)
                    hashCode = hashCode * 59 + this.Policy.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.Tsa != null)
                    hashCode = hashCode * 59 + this.Tsa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
