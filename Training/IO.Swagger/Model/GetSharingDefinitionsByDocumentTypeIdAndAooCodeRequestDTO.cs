/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO
    /// </summary>
    [DataContract]
    public partial class GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO :  IEquatable<GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO" /> class.
        /// </summary>
        /// <param name="aooCode">aooCode.</param>
        /// <param name="documentTypeSystemId">documentTypeSystemId.</param>
        public GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO(string aooCode = default(string), int? documentTypeSystemId = default(int?))
        {
            this.AooCode = aooCode;
            this.DocumentTypeSystemId = documentTypeSystemId;
        }
        
        /// <summary>
        /// Gets or Sets AooCode
        /// </summary>
        [DataMember(Name="aooCode", EmitDefaultValue=false)]
        public string AooCode { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeSystemId
        /// </summary>
        [DataMember(Name="documentTypeSystemId", EmitDefaultValue=false)]
        public int? DocumentTypeSystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO {\n");
            sb.Append("  AooCode: ").Append(AooCode).Append("\n");
            sb.Append("  DocumentTypeSystemId: ").Append(DocumentTypeSystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO);
        }

        /// <summary>
        /// Returns true if GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AooCode == input.AooCode ||
                    (this.AooCode != null &&
                    this.AooCode.Equals(input.AooCode))
                ) && 
                (
                    this.DocumentTypeSystemId == input.DocumentTypeSystemId ||
                    (this.DocumentTypeSystemId != null &&
                    this.DocumentTypeSystemId.Equals(input.DocumentTypeSystemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AooCode != null)
                    hashCode = hashCode * 59 + this.AooCode.GetHashCode();
                if (this.DocumentTypeSystemId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeSystemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
